name: Workflow

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

# This ensures that previous jobs for the PR are canceled when the PR is
# updated.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:

  replication:

    name: Site Replication Test
    runs-on: [ self-hosted, vm-docker ]

    strategy:
      matrix:
        go-version: [ 1.18.x ]

    steps:
      - name: Set up Go ${{ matrix.go-version }} on ${{ matrix.os }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      # To build minio image, we need to clone the repository first
      - name: clone https://github.com/minio/minio
        uses: actions/checkout@master
        with:

          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: minio/minio
          
          # Relative path under $GITHUB_WORKSPACE to place the repository
          # To have two repositories under the same test
          path: 'minio_repository'



      - name: Build on ${{ matrix.os }}
        run: |
          echo "The idea is to build minio image from downloaded repository";
          cd $GITHUB_WORKSPACE/minio_repository;
          echo "Get git version to build MinIO Image";
          VERSION=`git rev-parse HEAD`;
          echo $VERSION;
          echo "Create minio image";
          make docker VERSION=$VERSION;
          echo "Jumping back to console repository to run the integration test"
          cd $GITHUB_WORKSPACE;
          echo "We are going to use the built image on test-integration";
          VERSION="minio/minio:$VERSION";
          echo $VERSION;
          make test-replication MINIO_VERSION=$VERSION;

      - uses: actions/upload-artifact@v3
        with:
          name: replication-artifact
          path: ./replication/coverage/replication.out



  coverage:
    name: "Coverage Limit Check"
    needs:
      - replication
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [ 1.18.x ]
        os: [ ubuntu-latest ]
    steps:
      - name: Set up Go ${{ matrix.go-version }} on ${{ matrix.os }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Check out gocovmerge as a nested repository
        uses: actions/checkout@v2
        with:
          repository: wadey/gocovmerge
          path: gocovmerge










      - uses: actions/download-artifact@v3
        with:
          name: replication-artifact
          path: ../replication/coverage/replication.out








      - name: Get coverage
        run: |
          echo "change directory to gocovmerge"
          cd gocovmerge
          echo "download golang x tools"
          go mod download golang.org/x/tools
          echo "go mod tidy compat mode"
          go mod tidy -compat=1.17
          echo "go build gocoverage.go"
          go build gocovmerge.go
          echo "put together the outs for final coverage resolution"
          ./gocovmerge ../replication/coverage/replication.out > all.out
          echo "Download mc for Ubuntu"
          wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
          echo "Change the permissions to execute mc command"
          chmod +x mc
          echo "Only run our test if play is up and running since we require it for replication tests here."
          PLAY_IS_ON=`wget --spider --server-response https://play.min.io:9443/login 2>&1 | grep '200\ OK' | wc -l`
          if [ $PLAY_IS_ON == 1 ]
          then
            echo "Play is up and running, we will proceed with the play part for coverage"
            echo "Create the folder to put the all.out file"
            ./mc mb --ignore-existing play/builds/
            echo "Copy the all.out file to play bucket"
            echo ${{ github.repository }}
            echo ${{ github.event.number }}
            echo ${{ github.run_id }}
            # mc cp can fail due to lack of space: mc: <ERROR> Failed to copy `all.out`.
            # Storage backend has reached its minimum free disk threshold. Please delete a few objects to proceed.
            ./mc cp all.out play/builds/${{ github.repository }}/${{ github.event.number }}/${{ github.run_id }}/ || true
            ./mc cp all.out play/builds/${{ github.repository }}/${{ github.event.number }}/latest/ || true
            go tool cover -html=all.out -o coverage.html
            ./mc cp coverage.html play/builds/${{ github.repository }}/${{ github.event.number }}/${{ github.run_id }}/ || true
            ./mc cp coverage.html play/builds/${{ github.repository }}/${{ github.event.number }}/latest/ || true
          else
            echo "Play is down, please report it on hack channel, no coverage is going to be uploaded!!!"
          fi
          echo "grep to obtain the result"
          go tool cover -func=all.out | grep total > tmp2
          result=`cat tmp2 | awk 'END {print $3}'`
          result=${result%\%}
          threshold=53.40
          echo "Result:"
          echo "$result%"
          if (( $(echo "$result >= $threshold" |bc -l) )); then
            echo "It is equal or greater than threshold ($threshold%), passed!"
          else
            echo "It is smaller than threshold ($threshold%) value, failed!"
            exit 1
          fi
