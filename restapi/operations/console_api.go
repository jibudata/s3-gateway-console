// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2022 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/minio/console/models"
	"github.com/minio/console/restapi/operations/account"
	"github.com/minio/console/restapi/operations/auth"
	"github.com/minio/console/restapi/operations/bucket"
	"github.com/minio/console/restapi/operations/configuration"
	"github.com/minio/console/restapi/operations/group"
	"github.com/minio/console/restapi/operations/inspect"
	"github.com/minio/console/restapi/operations/logging"
	"github.com/minio/console/restapi/operations/object"
	"github.com/minio/console/restapi/operations/policy"
	"github.com/minio/console/restapi/operations/profile"
	"github.com/minio/console/restapi/operations/service"
	"github.com/minio/console/restapi/operations/service_account"
	"github.com/minio/console/restapi/operations/site_replication"
	"github.com/minio/console/restapi/operations/subnet"
	"github.com/minio/console/restapi/operations/system"
	"github.com/minio/console/restapi/operations/tiering"
	"github.com/minio/console/restapi/operations/user"
)

// NewConsoleAPI creates a new Console instance
func NewConsoleAPI(spec *loads.Document) *ConsoleAPI {
	return &ConsoleAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,

		ApplicationZipProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("applicationZip producer has not yet been implemented")
		}),
		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		AccountAccountChangePasswordHandler: account.AccountChangePasswordHandlerFunc(func(params account.AccountChangePasswordParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation account.AccountChangePassword has not yet been implemented")
		}),
		BucketAddBucketLifecycleHandler: bucket.AddBucketLifecycleHandlerFunc(func(params bucket.AddBucketLifecycleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.AddBucketLifecycle has not yet been implemented")
		}),
		GroupAddGroupHandler: group.AddGroupHandlerFunc(func(params group.AddGroupParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation group.AddGroup has not yet been implemented")
		}),
		BucketAddMultiBucketLifecycleHandler: bucket.AddMultiBucketLifecycleHandlerFunc(func(params bucket.AddMultiBucketLifecycleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.AddMultiBucketLifecycle has not yet been implemented")
		}),
		ConfigurationAddNotificationEndpointHandler: configuration.AddNotificationEndpointHandlerFunc(func(params configuration.AddNotificationEndpointParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation configuration.AddNotificationEndpoint has not yet been implemented")
		}),
		PolicyAddPolicyHandler: policy.AddPolicyHandlerFunc(func(params policy.AddPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.AddPolicy has not yet been implemented")
		}),
		BucketAddRemoteBucketHandler: bucket.AddRemoteBucketHandlerFunc(func(params bucket.AddRemoteBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.AddRemoteBucket has not yet been implemented")
		}),
		TieringAddTierHandler: tiering.AddTierHandlerFunc(func(params tiering.AddTierParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation tiering.AddTier has not yet been implemented")
		}),
		UserAddUserHandler: user.AddUserHandlerFunc(func(params user.AddUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.AddUser has not yet been implemented")
		}),
		SystemAdminInfoHandler: system.AdminInfoHandlerFunc(func(params system.AdminInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation system.AdminInfo has not yet been implemented")
		}),
		SystemArnListHandler: system.ArnListHandlerFunc(func(params system.ArnListParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation system.ArnList has not yet been implemented")
		}),
		BucketBucketInfoHandler: bucket.BucketInfoHandlerFunc(func(params bucket.BucketInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.BucketInfo has not yet been implemented")
		}),
		BucketBucketSetPolicyHandler: bucket.BucketSetPolicyHandlerFunc(func(params bucket.BucketSetPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.BucketSetPolicy has not yet been implemented")
		}),
		UserBulkUpdateUsersGroupsHandler: user.BulkUpdateUsersGroupsHandlerFunc(func(params user.BulkUpdateUsersGroupsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.BulkUpdateUsersGroups has not yet been implemented")
		}),
		AccountChangeUserPasswordHandler: account.ChangeUserPasswordHandlerFunc(func(params account.ChangeUserPasswordParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation account.ChangeUserPassword has not yet been implemented")
		}),
		SystemCheckMinIOVersionHandler: system.CheckMinIOVersionHandlerFunc(func(params system.CheckMinIOVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation system.CheckMinIOVersion has not yet been implemented")
		}),
		ConfigurationConfigInfoHandler: configuration.ConfigInfoHandlerFunc(func(params configuration.ConfigInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation configuration.ConfigInfo has not yet been implemented")
		}),
		UserCreateAUserServiceAccountHandler: user.CreateAUserServiceAccountHandlerFunc(func(params user.CreateAUserServiceAccountParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.CreateAUserServiceAccount has not yet been implemented")
		}),
		BucketCreateBucketEventHandler: bucket.CreateBucketEventHandlerFunc(func(params bucket.CreateBucketEventParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.CreateBucketEvent has not yet been implemented")
		}),
		ServiceAccountCreateServiceAccountHandler: service_account.CreateServiceAccountHandlerFunc(func(params service_account.CreateServiceAccountParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service_account.CreateServiceAccount has not yet been implemented")
		}),
		UserCreateServiceAccountCredentialsHandler: user.CreateServiceAccountCredentialsHandlerFunc(func(params user.CreateServiceAccountCredentialsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.CreateServiceAccountCredentials has not yet been implemented")
		}),
		ServiceAccountCreateServiceAccountCredsHandler: service_account.CreateServiceAccountCredsHandlerFunc(func(params service_account.CreateServiceAccountCredsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service_account.CreateServiceAccountCreds has not yet been implemented")
		}),
		SystemDashboardWidgetDetailsHandler: system.DashboardWidgetDetailsHandlerFunc(func(params system.DashboardWidgetDetailsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation system.DashboardWidgetDetails has not yet been implemented")
		}),
		BucketDeleteAccessRuleWithBucketHandler: bucket.DeleteAccessRuleWithBucketHandlerFunc(func(params bucket.DeleteAccessRuleWithBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteAccessRuleWithBucket has not yet been implemented")
		}),
		BucketDeleteAllReplicationRulesHandler: bucket.DeleteAllReplicationRulesHandlerFunc(func(params bucket.DeleteAllReplicationRulesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteAllReplicationRules has not yet been implemented")
		}),
		BucketDeleteBucketHandler: bucket.DeleteBucketHandlerFunc(func(params bucket.DeleteBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteBucket has not yet been implemented")
		}),
		BucketDeleteBucketEventHandler: bucket.DeleteBucketEventHandlerFunc(func(params bucket.DeleteBucketEventParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteBucketEvent has not yet been implemented")
		}),
		BucketDeleteBucketLifecycleRuleHandler: bucket.DeleteBucketLifecycleRuleHandlerFunc(func(params bucket.DeleteBucketLifecycleRuleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteBucketLifecycleRule has not yet been implemented")
		}),
		BucketDeleteBucketReplicationRuleHandler: bucket.DeleteBucketReplicationRuleHandlerFunc(func(params bucket.DeleteBucketReplicationRuleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteBucketReplicationRule has not yet been implemented")
		}),
		ObjectDeleteMultipleObjectsHandler: object.DeleteMultipleObjectsHandlerFunc(func(params object.DeleteMultipleObjectsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.DeleteMultipleObjects has not yet been implemented")
		}),
		ServiceAccountDeleteMultipleServiceAccountsHandler: service_account.DeleteMultipleServiceAccountsHandlerFunc(func(params service_account.DeleteMultipleServiceAccountsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service_account.DeleteMultipleServiceAccounts has not yet been implemented")
		}),
		ObjectDeleteObjectHandler: object.DeleteObjectHandlerFunc(func(params object.DeleteObjectParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.DeleteObject has not yet been implemented")
		}),
		ObjectDeleteObjectRetentionHandler: object.DeleteObjectRetentionHandlerFunc(func(params object.DeleteObjectRetentionParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.DeleteObjectRetention has not yet been implemented")
		}),
		BucketDeleteRemoteBucketHandler: bucket.DeleteRemoteBucketHandlerFunc(func(params bucket.DeleteRemoteBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteRemoteBucket has not yet been implemented")
		}),
		BucketDeleteSelectedReplicationRulesHandler: bucket.DeleteSelectedReplicationRulesHandlerFunc(func(params bucket.DeleteSelectedReplicationRulesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DeleteSelectedReplicationRules has not yet been implemented")
		}),
		ServiceAccountDeleteServiceAccountHandler: service_account.DeleteServiceAccountHandlerFunc(func(params service_account.DeleteServiceAccountParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service_account.DeleteServiceAccount has not yet been implemented")
		}),
		BucketDisableBucketEncryptionHandler: bucket.DisableBucketEncryptionHandlerFunc(func(params bucket.DisableBucketEncryptionParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.DisableBucketEncryption has not yet been implemented")
		}),
		ObjectDownloadObjectHandler: object.DownloadObjectHandlerFunc(func(params object.DownloadObjectParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.DownloadObject has not yet been implemented")
		}),
		TieringEditTierCredentialsHandler: tiering.EditTierCredentialsHandlerFunc(func(params tiering.EditTierCredentialsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation tiering.EditTierCredentials has not yet been implemented")
		}),
		BucketEnableBucketEncryptionHandler: bucket.EnableBucketEncryptionHandlerFunc(func(params bucket.EnableBucketEncryptionParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.EnableBucketEncryption has not yet been implemented")
		}),
		BucketGetBucketEncryptionInfoHandler: bucket.GetBucketEncryptionInfoHandlerFunc(func(params bucket.GetBucketEncryptionInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketEncryptionInfo has not yet been implemented")
		}),
		BucketGetBucketLifecycleHandler: bucket.GetBucketLifecycleHandlerFunc(func(params bucket.GetBucketLifecycleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketLifecycle has not yet been implemented")
		}),
		BucketGetBucketObjectLockingStatusHandler: bucket.GetBucketObjectLockingStatusHandlerFunc(func(params bucket.GetBucketObjectLockingStatusParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketObjectLockingStatus has not yet been implemented")
		}),
		BucketGetBucketQuotaHandler: bucket.GetBucketQuotaHandlerFunc(func(params bucket.GetBucketQuotaParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketQuota has not yet been implemented")
		}),
		BucketGetBucketReplicationHandler: bucket.GetBucketReplicationHandlerFunc(func(params bucket.GetBucketReplicationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketReplication has not yet been implemented")
		}),
		BucketGetBucketReplicationRuleHandler: bucket.GetBucketReplicationRuleHandlerFunc(func(params bucket.GetBucketReplicationRuleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketReplicationRule has not yet been implemented")
		}),
		BucketGetBucketRetentionConfigHandler: bucket.GetBucketRetentionConfigHandlerFunc(func(params bucket.GetBucketRetentionConfigParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketRetentionConfig has not yet been implemented")
		}),
		BucketGetBucketRewindHandler: bucket.GetBucketRewindHandlerFunc(func(params bucket.GetBucketRewindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketRewind has not yet been implemented")
		}),
		BucketGetBucketVersioningHandler: bucket.GetBucketVersioningHandlerFunc(func(params bucket.GetBucketVersioningParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.GetBucketVersioning has not yet been implemented")
		}),
		ObjectGetObjectMetadataHandler: object.GetObjectMetadataHandlerFunc(func(params object.GetObjectMetadataParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.GetObjectMetadata has not yet been implemented")
		}),
		ServiceAccountGetServiceAccountPolicyHandler: service_account.GetServiceAccountPolicyHandlerFunc(func(params service_account.GetServiceAccountPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service_account.GetServiceAccountPolicy has not yet been implemented")
		}),
		SiteReplicationGetSiteReplicationInfoHandler: site_replication.GetSiteReplicationInfoHandlerFunc(func(params site_replication.GetSiteReplicationInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation site_replication.GetSiteReplicationInfo has not yet been implemented")
		}),
		SiteReplicationGetSiteReplicationStatusHandler: site_replication.GetSiteReplicationStatusHandlerFunc(func(params site_replication.GetSiteReplicationStatusParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation site_replication.GetSiteReplicationStatus has not yet been implemented")
		}),
		TieringGetTierHandler: tiering.GetTierHandlerFunc(func(params tiering.GetTierParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation tiering.GetTier has not yet been implemented")
		}),
		UserGetUserInfoHandler: user.GetUserInfoHandlerFunc(func(params user.GetUserInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUserInfo has not yet been implemented")
		}),
		AdminAPIGetUserPolicyHandler: admin_api.GetUserPolicyHandlerFunc(func(params admin_api.GetUserPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin_api.GetUserPolicy has not yet been implemented")
		}),
		AdminAPIGroupInfoHandler: admin_api.GroupInfoHandlerFunc(func(params admin_api.GroupInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation admin_api.GroupInfo has not yet been implemented")
		}),
		InspectInspectHandler: inspect.InspectHandlerFunc(func(params inspect.InspectParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation inspect.Inspect has not yet been implemented")
		}),
		UserListAUserServiceAccountsHandler: user.ListAUserServiceAccountsHandlerFunc(func(params user.ListAUserServiceAccountsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.ListAUserServiceAccounts has not yet been implemented")
		}),
		BucketListAccessRulesWithBucketHandler: bucket.ListAccessRulesWithBucketHandlerFunc(func(params bucket.ListAccessRulesWithBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.ListAccessRulesWithBucket has not yet been implemented")
		}),
		BucketListBucketEventsHandler: bucket.ListBucketEventsHandlerFunc(func(params bucket.ListBucketEventsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.ListBucketEvents has not yet been implemented")
		}),
		BucketListBucketsHandler: bucket.ListBucketsHandlerFunc(func(params bucket.ListBucketsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.ListBuckets has not yet been implemented")
		}),
		ConfigurationListConfigHandler: configuration.ListConfigHandlerFunc(func(params configuration.ListConfigParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation configuration.ListConfig has not yet been implemented")
		}),
		BucketListExternalBucketsHandler: bucket.ListExternalBucketsHandlerFunc(func(params bucket.ListExternalBucketsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.ListExternalBuckets has not yet been implemented")
		}),
		GroupListGroupsHandler: group.ListGroupsHandlerFunc(func(params group.ListGroupsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation group.ListGroups has not yet been implemented")
		}),
		PolicyListGroupsForPolicyHandler: policy.ListGroupsForPolicyHandlerFunc(func(params policy.ListGroupsForPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.ListGroupsForPolicy has not yet been implemented")
		}),
		SystemListNodesHandler: system.ListNodesHandlerFunc(func(params system.ListNodesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation system.ListNodes has not yet been implemented")
		}),
		ObjectListObjectsHandler: object.ListObjectsHandlerFunc(func(params object.ListObjectsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.ListObjects has not yet been implemented")
		}),
		PolicyListPoliciesHandler: policy.ListPoliciesHandlerFunc(func(params policy.ListPoliciesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.ListPolicies has not yet been implemented")
		}),
		BucketListPoliciesWithBucketHandler: bucket.ListPoliciesWithBucketHandlerFunc(func(params bucket.ListPoliciesWithBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.ListPoliciesWithBucket has not yet been implemented")
		}),
		BucketListRemoteBucketsHandler: bucket.ListRemoteBucketsHandlerFunc(func(params bucket.ListRemoteBucketsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.ListRemoteBuckets has not yet been implemented")
		}),
		ServiceAccountListUserServiceAccountsHandler: service_account.ListUserServiceAccountsHandlerFunc(func(params service_account.ListUserServiceAccountsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service_account.ListUserServiceAccounts has not yet been implemented")
		}),
		UserListUsersHandler: user.ListUsersHandlerFunc(func(params user.ListUsersParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.ListUsers has not yet been implemented")
		}),
		PolicyListUsersForPolicyHandler: policy.ListUsersForPolicyHandlerFunc(func(params policy.ListUsersForPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.ListUsersForPolicy has not yet been implemented")
		}),
		BucketListUsersWithAccessToBucketHandler: bucket.ListUsersWithAccessToBucketHandlerFunc(func(params bucket.ListUsersWithAccessToBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.ListUsersWithAccessToBucket has not yet been implemented")
		}),
		LoggingLogSearchHandler: logging.LogSearchHandlerFunc(func(params logging.LogSearchParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation logging.LogSearch has not yet been implemented")
		}),
		AuthLoginHandler: auth.LoginHandlerFunc(func(params auth.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.Login has not yet been implemented")
		}),
		AuthLoginDetailHandler: auth.LoginDetailHandlerFunc(func(params auth.LoginDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.LoginDetail has not yet been implemented")
		}),
		AuthLoginOauth2AuthHandler: auth.LoginOauth2AuthHandlerFunc(func(params auth.LoginOauth2AuthParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.LoginOauth2Auth has not yet been implemented")
		}),
		AuthLogoutHandler: auth.LogoutHandlerFunc(func(params auth.LogoutParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation auth.Logout has not yet been implemented")
		}),
		BucketMakeBucketHandler: bucket.MakeBucketHandlerFunc(func(params bucket.MakeBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.MakeBucket has not yet been implemented")
		}),
		ConfigurationNotificationEndpointListHandler: configuration.NotificationEndpointListHandlerFunc(func(params configuration.NotificationEndpointListParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation configuration.NotificationEndpointList has not yet been implemented")
		}),
		PolicyPolicyInfoHandler: policy.PolicyInfoHandlerFunc(func(params policy.PolicyInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.PolicyInfo has not yet been implemented")
		}),
		ObjectPostBucketsBucketNameObjectsUploadHandler: object.PostBucketsBucketNameObjectsUploadHandlerFunc(func(params object.PostBucketsBucketNameObjectsUploadParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.PostBucketsBucketNameObjectsUpload has not yet been implemented")
		}),
		ProfileProfilingStartHandler: profile.ProfilingStartHandlerFunc(func(params profile.ProfilingStartParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation profile.ProfilingStart has not yet been implemented")
		}),
		ProfileProfilingStopHandler: profile.ProfilingStopHandlerFunc(func(params profile.ProfilingStopParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation profile.ProfilingStop has not yet been implemented")
		}),
		BucketPutBucketTagsHandler: bucket.PutBucketTagsHandlerFunc(func(params bucket.PutBucketTagsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.PutBucketTags has not yet been implemented")
		}),
		ObjectPutObjectLegalHoldHandler: object.PutObjectLegalHoldHandlerFunc(func(params object.PutObjectLegalHoldParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.PutObjectLegalHold has not yet been implemented")
		}),
		ObjectPutObjectRestoreHandler: object.PutObjectRestoreHandlerFunc(func(params object.PutObjectRestoreParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.PutObjectRestore has not yet been implemented")
		}),
		ObjectPutObjectRetentionHandler: object.PutObjectRetentionHandlerFunc(func(params object.PutObjectRetentionParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.PutObjectRetention has not yet been implemented")
		}),
		ObjectPutObjectTagsHandler: object.PutObjectTagsHandlerFunc(func(params object.PutObjectTagsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.PutObjectTags has not yet been implemented")
		}),
		BucketRemoteBucketDetailsHandler: bucket.RemoteBucketDetailsHandlerFunc(func(params bucket.RemoteBucketDetailsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.RemoteBucketDetails has not yet been implemented")
		}),
		GroupRemoveGroupHandler: group.RemoveGroupHandlerFunc(func(params group.RemoveGroupParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation group.RemoveGroup has not yet been implemented")
		}),
		PolicyRemovePolicyHandler: policy.RemovePolicyHandlerFunc(func(params policy.RemovePolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.RemovePolicy has not yet been implemented")
		}),
		UserRemoveUserHandler: user.RemoveUserHandlerFunc(func(params user.RemoveUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.RemoveUser has not yet been implemented")
		}),
		ConfigurationResetConfigHandler: configuration.ResetConfigHandlerFunc(func(params configuration.ResetConfigParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation configuration.ResetConfig has not yet been implemented")
		}),
		ServiceRestartServiceHandler: service.RestartServiceHandlerFunc(func(params service.RestartServiceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service.RestartService has not yet been implemented")
		}),
		AuthSessionCheckHandler: auth.SessionCheckHandlerFunc(func(params auth.SessionCheckParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation auth.SessionCheck has not yet been implemented")
		}),
		BucketSetAccessRuleWithBucketHandler: bucket.SetAccessRuleWithBucketHandlerFunc(func(params bucket.SetAccessRuleWithBucketParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.SetAccessRuleWithBucket has not yet been implemented")
		}),
		BucketSetBucketQuotaHandler: bucket.SetBucketQuotaHandlerFunc(func(params bucket.SetBucketQuotaParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.SetBucketQuota has not yet been implemented")
		}),
		BucketSetBucketRetentionConfigHandler: bucket.SetBucketRetentionConfigHandlerFunc(func(params bucket.SetBucketRetentionConfigParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.SetBucketRetentionConfig has not yet been implemented")
		}),
		BucketSetBucketVersioningHandler: bucket.SetBucketVersioningHandlerFunc(func(params bucket.SetBucketVersioningParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.SetBucketVersioning has not yet been implemented")
		}),
		ConfigurationSetConfigHandler: configuration.SetConfigHandlerFunc(func(params configuration.SetConfigParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation configuration.SetConfig has not yet been implemented")
		}),
		BucketSetMultiBucketReplicationHandler: bucket.SetMultiBucketReplicationHandlerFunc(func(params bucket.SetMultiBucketReplicationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.SetMultiBucketReplication has not yet been implemented")
		}),
		PolicySetPolicyHandler: policy.SetPolicyHandlerFunc(func(params policy.SetPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.SetPolicy has not yet been implemented")
		}),
		PolicySetPolicyMultipleHandler: policy.SetPolicyMultipleHandlerFunc(func(params policy.SetPolicyMultipleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation policy.SetPolicyMultiple has not yet been implemented")
		}),
		ServiceAccountSetServiceAccountPolicyHandler: service_account.SetServiceAccountPolicyHandlerFunc(func(params service_account.SetServiceAccountPolicyParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation service_account.SetServiceAccountPolicy has not yet been implemented")
		}),
		ObjectShareObjectHandler: object.ShareObjectHandlerFunc(func(params object.ShareObjectParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation object.ShareObject has not yet been implemented")
		}),
		SiteReplicationSiteReplicationEditHandler: site_replication.SiteReplicationEditHandlerFunc(func(params site_replication.SiteReplicationEditParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation site_replication.SiteReplicationEdit has not yet been implemented")
		}),
		SiteReplicationSiteReplicationInfoAddHandler: site_replication.SiteReplicationInfoAddHandlerFunc(func(params site_replication.SiteReplicationInfoAddParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation site_replication.SiteReplicationInfoAdd has not yet been implemented")
		}),
		SiteReplicationSiteReplicationRemoveHandler: site_replication.SiteReplicationRemoveHandlerFunc(func(params site_replication.SiteReplicationRemoveParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation site_replication.SiteReplicationRemove has not yet been implemented")
		}),
		SubnetSubnetInfoHandler: subnet.SubnetInfoHandlerFunc(func(params subnet.SubnetInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation subnet.SubnetInfo has not yet been implemented")
		}),
		SubnetSubnetLoginHandler: subnet.SubnetLoginHandlerFunc(func(params subnet.SubnetLoginParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation subnet.SubnetLogin has not yet been implemented")
		}),
		SubnetSubnetLoginMFAHandler: subnet.SubnetLoginMFAHandlerFunc(func(params subnet.SubnetLoginMFAParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation subnet.SubnetLoginMFA has not yet been implemented")
		}),
		SubnetSubnetRegTokenHandler: subnet.SubnetRegTokenHandlerFunc(func(params subnet.SubnetRegTokenParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation subnet.SubnetRegToken has not yet been implemented")
		}),
		SubnetSubnetRegisterHandler: subnet.SubnetRegisterHandlerFunc(func(params subnet.SubnetRegisterParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation subnet.SubnetRegister has not yet been implemented")
		}),
		TieringTiersListHandler: tiering.TiersListHandlerFunc(func(params tiering.TiersListParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation tiering.TiersList has not yet been implemented")
		}),
		BucketUpdateBucketLifecycleHandler: bucket.UpdateBucketLifecycleHandlerFunc(func(params bucket.UpdateBucketLifecycleParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.UpdateBucketLifecycle has not yet been implemented")
		}),
		GroupUpdateGroupHandler: group.UpdateGroupHandlerFunc(func(params group.UpdateGroupParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation group.UpdateGroup has not yet been implemented")
		}),
		BucketUpdateMultiBucketReplicationHandler: bucket.UpdateMultiBucketReplicationHandlerFunc(func(params bucket.UpdateMultiBucketReplicationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation bucket.UpdateMultiBucketReplication has not yet been implemented")
		}),
		UserUpdateUserGroupsHandler: user.UpdateUserGroupsHandlerFunc(func(params user.UpdateUserGroupsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUserGroups has not yet been implemented")
		}),
		UserUpdateUserInfoHandler: user.UpdateUserInfoHandlerFunc(func(params user.UpdateUserInfoParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUserInfo has not yet been implemented")
		}),

		KeyAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (key) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*ConsoleAPI the console API */
type ConsoleAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer

	// ApplicationZipProducer registers a producer for the following mime types:
	//   - application/zip
	ApplicationZipProducer runtime.Producer
	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// KeyAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	KeyAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// UserAPIAccountChangePasswordHandler sets the operation handler for the account change password operation
	UserAPIAccountChangePasswordHandler user_api.AccountChangePasswordHandler
	// UserAPIAddBucketLifecycleHandler sets the operation handler for the add bucket lifecycle operation
	UserAPIAddBucketLifecycleHandler user_api.AddBucketLifecycleHandler
	// AdminAPIAddGroupHandler sets the operation handler for the add group operation
	AdminAPIAddGroupHandler admin_api.AddGroupHandler
	// UserAPIAddMultiBucketLifecycleHandler sets the operation handler for the add multi bucket lifecycle operation
	UserAPIAddMultiBucketLifecycleHandler user_api.AddMultiBucketLifecycleHandler
	// AdminAPIAddNotificationEndpointHandler sets the operation handler for the add notification endpoint operation
	AdminAPIAddNotificationEndpointHandler admin_api.AddNotificationEndpointHandler
	// AdminAPIAddPolicyHandler sets the operation handler for the add policy operation
	AdminAPIAddPolicyHandler admin_api.AddPolicyHandler
	// UserAPIAddRemoteBucketHandler sets the operation handler for the add remote bucket operation
	UserAPIAddRemoteBucketHandler user_api.AddRemoteBucketHandler
	// AdminAPIAddTierHandler sets the operation handler for the add tier operation
	AdminAPIAddTierHandler admin_api.AddTierHandler
	// AdminAPIAddUserHandler sets the operation handler for the add user operation
	AdminAPIAddUserHandler admin_api.AddUserHandler
	// AdminAPIAdminInfoHandler sets the operation handler for the admin info operation
	AdminAPIAdminInfoHandler admin_api.AdminInfoHandler
	// AdminAPIArnListHandler sets the operation handler for the arn list operation
	AdminAPIArnListHandler admin_api.ArnListHandler
	// UserAPIBucketInfoHandler sets the operation handler for the bucket info operation
	UserAPIBucketInfoHandler user_api.BucketInfoHandler
	// UserAPIBucketSetPolicyHandler sets the operation handler for the bucket set policy operation
	UserAPIBucketSetPolicyHandler user_api.BucketSetPolicyHandler
	// AdminAPIBulkUpdateUsersGroupsHandler sets the operation handler for the bulk update users groups operation
	AdminAPIBulkUpdateUsersGroupsHandler admin_api.BulkUpdateUsersGroupsHandler
	// AdminAPIChangeUserPasswordHandler sets the operation handler for the change user password operation
	AdminAPIChangeUserPasswordHandler admin_api.ChangeUserPasswordHandler
	// UserAPICheckMinIOVersionHandler sets the operation handler for the check min i o version operation
	UserAPICheckMinIOVersionHandler user_api.CheckMinIOVersionHandler
	// AdminAPIConfigInfoHandler sets the operation handler for the config info operation
	AdminAPIConfigInfoHandler admin_api.ConfigInfoHandler
	// AdminAPICreateAUserServiceAccountHandler sets the operation handler for the create a user service account operation
	AdminAPICreateAUserServiceAccountHandler admin_api.CreateAUserServiceAccountHandler
	// UserAPICreateBucketEventHandler sets the operation handler for the create bucket event operation
	UserAPICreateBucketEventHandler user_api.CreateBucketEventHandler
	// UserAPICreateServiceAccountHandler sets the operation handler for the create service account operation
	UserAPICreateServiceAccountHandler user_api.CreateServiceAccountHandler
	// AdminAPICreateServiceAccountCredentialsHandler sets the operation handler for the create service account credentials operation
	AdminAPICreateServiceAccountCredentialsHandler admin_api.CreateServiceAccountCredentialsHandler
	// AdminAPICreateServiceAccountCredsHandler sets the operation handler for the create service account creds operation
	AdminAPICreateServiceAccountCredsHandler admin_api.CreateServiceAccountCredsHandler
	// AdminAPIDashboardWidgetDetailsHandler sets the operation handler for the dashboard widget details operation
	AdminAPIDashboardWidgetDetailsHandler admin_api.DashboardWidgetDetailsHandler
	// AdminAPIDeleteAccessRuleWithBucketHandler sets the operation handler for the delete access rule with bucket operation
	AdminAPIDeleteAccessRuleWithBucketHandler admin_api.DeleteAccessRuleWithBucketHandler
	// UserAPIDeleteAllReplicationRulesHandler sets the operation handler for the delete all replication rules operation
	UserAPIDeleteAllReplicationRulesHandler user_api.DeleteAllReplicationRulesHandler
	// UserAPIDeleteBucketHandler sets the operation handler for the delete bucket operation
	UserAPIDeleteBucketHandler user_api.DeleteBucketHandler
	// UserAPIDeleteBucketEventHandler sets the operation handler for the delete bucket event operation
	UserAPIDeleteBucketEventHandler user_api.DeleteBucketEventHandler
	// UserAPIDeleteBucketLifecycleRuleHandler sets the operation handler for the delete bucket lifecycle rule operation
	UserAPIDeleteBucketLifecycleRuleHandler user_api.DeleteBucketLifecycleRuleHandler
	// UserAPIDeleteBucketReplicationRuleHandler sets the operation handler for the delete bucket replication rule operation
	UserAPIDeleteBucketReplicationRuleHandler user_api.DeleteBucketReplicationRuleHandler
	// UserAPIDeleteMultipleObjectsHandler sets the operation handler for the delete multiple objects operation
	UserAPIDeleteMultipleObjectsHandler user_api.DeleteMultipleObjectsHandler
	// UserAPIDeleteMultipleServiceAccountsHandler sets the operation handler for the delete multiple service accounts operation
	UserAPIDeleteMultipleServiceAccountsHandler user_api.DeleteMultipleServiceAccountsHandler
	// UserAPIDeleteObjectHandler sets the operation handler for the delete object operation
	UserAPIDeleteObjectHandler user_api.DeleteObjectHandler
	// UserAPIDeleteObjectRetentionHandler sets the operation handler for the delete object retention operation
	UserAPIDeleteObjectRetentionHandler user_api.DeleteObjectRetentionHandler
	// UserAPIDeleteRemoteBucketHandler sets the operation handler for the delete remote bucket operation
	UserAPIDeleteRemoteBucketHandler user_api.DeleteRemoteBucketHandler
	// UserAPIDeleteSelectedReplicationRulesHandler sets the operation handler for the delete selected replication rules operation
	UserAPIDeleteSelectedReplicationRulesHandler user_api.DeleteSelectedReplicationRulesHandler
	// UserAPIDeleteServiceAccountHandler sets the operation handler for the delete service account operation
	UserAPIDeleteServiceAccountHandler user_api.DeleteServiceAccountHandler
	// UserAPIDisableBucketEncryptionHandler sets the operation handler for the disable bucket encryption operation
	UserAPIDisableBucketEncryptionHandler user_api.DisableBucketEncryptionHandler
	// UserAPIDownloadObjectHandler sets the operation handler for the download object operation
	UserAPIDownloadObjectHandler user_api.DownloadObjectHandler
	// AdminAPIEditTierCredentialsHandler sets the operation handler for the edit tier credentials operation
	AdminAPIEditTierCredentialsHandler admin_api.EditTierCredentialsHandler
	// UserAPIEnableBucketEncryptionHandler sets the operation handler for the enable bucket encryption operation
	UserAPIEnableBucketEncryptionHandler user_api.EnableBucketEncryptionHandler
	// UserAPIGetBucketEncryptionInfoHandler sets the operation handler for the get bucket encryption info operation
	UserAPIGetBucketEncryptionInfoHandler user_api.GetBucketEncryptionInfoHandler
	// UserAPIGetBucketLifecycleHandler sets the operation handler for the get bucket lifecycle operation
	UserAPIGetBucketLifecycleHandler user_api.GetBucketLifecycleHandler
	// UserAPIGetBucketObjectLockingStatusHandler sets the operation handler for the get bucket object locking status operation
	UserAPIGetBucketObjectLockingStatusHandler user_api.GetBucketObjectLockingStatusHandler
	// UserAPIGetBucketQuotaHandler sets the operation handler for the get bucket quota operation
	UserAPIGetBucketQuotaHandler user_api.GetBucketQuotaHandler
	// UserAPIGetBucketReplicationHandler sets the operation handler for the get bucket replication operation
	UserAPIGetBucketReplicationHandler user_api.GetBucketReplicationHandler
	// UserAPIGetBucketReplicationRuleHandler sets the operation handler for the get bucket replication rule operation
	UserAPIGetBucketReplicationRuleHandler user_api.GetBucketReplicationRuleHandler
	// UserAPIGetBucketRetentionConfigHandler sets the operation handler for the get bucket retention config operation
	UserAPIGetBucketRetentionConfigHandler user_api.GetBucketRetentionConfigHandler
	// UserAPIGetBucketRewindHandler sets the operation handler for the get bucket rewind operation
	UserAPIGetBucketRewindHandler user_api.GetBucketRewindHandler
	// UserAPIGetBucketVersioningHandler sets the operation handler for the get bucket versioning operation
	UserAPIGetBucketVersioningHandler user_api.GetBucketVersioningHandler
	// UserAPIGetObjectMetadataHandler sets the operation handler for the get object metadata operation
	UserAPIGetObjectMetadataHandler user_api.GetObjectMetadataHandler
	// UserAPIGetServiceAccountPolicyHandler sets the operation handler for the get service account policy operation
	UserAPIGetServiceAccountPolicyHandler user_api.GetServiceAccountPolicyHandler
	// AdminAPIGetSiteReplicationInfoHandler sets the operation handler for the get site replication info operation
	AdminAPIGetSiteReplicationInfoHandler admin_api.GetSiteReplicationInfoHandler
	// AdminAPIGetSiteReplicationStatusHandler sets the operation handler for the get site replication status operation
	AdminAPIGetSiteReplicationStatusHandler admin_api.GetSiteReplicationStatusHandler
	// AdminAPIGetTierHandler sets the operation handler for the get tier operation
	AdminAPIGetTierHandler admin_api.GetTierHandler
	// AdminAPIGetUserInfoHandler sets the operation handler for the get user info operation
	AdminAPIGetUserInfoHandler admin_api.GetUserInfoHandler
	// AdminAPIGetUserPolicyHandler sets the operation handler for the get user policy operation
	AdminAPIGetUserPolicyHandler admin_api.GetUserPolicyHandler
	// AdminAPIGroupInfoHandler sets the operation handler for the group info operation
	AdminAPIGroupInfoHandler admin_api.GroupInfoHandler
	// AdminAPIInspectHandler sets the operation handler for the inspect operation
	AdminAPIInspectHandler admin_api.InspectHandler
	// AdminAPIListAUserServiceAccountsHandler sets the operation handler for the list a user service accounts operation
	AdminAPIListAUserServiceAccountsHandler admin_api.ListAUserServiceAccountsHandler
	// AdminAPIListAccessRulesWithBucketHandler sets the operation handler for the list access rules with bucket operation
	AdminAPIListAccessRulesWithBucketHandler admin_api.ListAccessRulesWithBucketHandler
	// UserAPIListBucketEventsHandler sets the operation handler for the list bucket events operation
	UserAPIListBucketEventsHandler user_api.ListBucketEventsHandler
	// UserAPIListBucketsHandler sets the operation handler for the list buckets operation
	UserAPIListBucketsHandler user_api.ListBucketsHandler
	// AdminAPIListConfigHandler sets the operation handler for the list config operation
	AdminAPIListConfigHandler admin_api.ListConfigHandler
	// UserAPIListExternalBucketsHandler sets the operation handler for the list external buckets operation
	UserAPIListExternalBucketsHandler user_api.ListExternalBucketsHandler
	// AdminAPIListGroupsHandler sets the operation handler for the list groups operation
	AdminAPIListGroupsHandler admin_api.ListGroupsHandler
	// AdminAPIListGroupsForPolicyHandler sets the operation handler for the list groups for policy operation
	AdminAPIListGroupsForPolicyHandler admin_api.ListGroupsForPolicyHandler
	// AdminAPIListNodesHandler sets the operation handler for the list nodes operation
	AdminAPIListNodesHandler admin_api.ListNodesHandler
	// UserAPIListObjectsHandler sets the operation handler for the list objects operation
	UserAPIListObjectsHandler user_api.ListObjectsHandler
	// AdminAPIListPoliciesHandler sets the operation handler for the list policies operation
	AdminAPIListPoliciesHandler admin_api.ListPoliciesHandler
	// AdminAPIListPoliciesWithBucketHandler sets the operation handler for the list policies with bucket operation
	AdminAPIListPoliciesWithBucketHandler admin_api.ListPoliciesWithBucketHandler
	// UserAPIListRemoteBucketsHandler sets the operation handler for the list remote buckets operation
	UserAPIListRemoteBucketsHandler user_api.ListRemoteBucketsHandler
	// UserAPIListUserServiceAccountsHandler sets the operation handler for the list user service accounts operation
	UserAPIListUserServiceAccountsHandler user_api.ListUserServiceAccountsHandler
	// AdminAPIListUsersHandler sets the operation handler for the list users operation
	AdminAPIListUsersHandler admin_api.ListUsersHandler
	// AdminAPIListUsersForPolicyHandler sets the operation handler for the list users for policy operation
	AdminAPIListUsersForPolicyHandler admin_api.ListUsersForPolicyHandler
	// AdminAPIListUsersWithAccessToBucketHandler sets the operation handler for the list users with access to bucket operation
	AdminAPIListUsersWithAccessToBucketHandler admin_api.ListUsersWithAccessToBucketHandler
	// UserAPILogSearchHandler sets the operation handler for the log search operation
	UserAPILogSearchHandler user_api.LogSearchHandler
	// UserAPILoginHandler sets the operation handler for the login operation
	UserAPILoginHandler user_api.LoginHandler
	// UserAPILoginDetailHandler sets the operation handler for the login detail operation
	UserAPILoginDetailHandler user_api.LoginDetailHandler
	// UserAPILoginOauth2AuthHandler sets the operation handler for the login oauth2 auth operation
	UserAPILoginOauth2AuthHandler user_api.LoginOauth2AuthHandler
	// UserAPILogoutHandler sets the operation handler for the logout operation
	UserAPILogoutHandler user_api.LogoutHandler
	// UserAPIMakeBucketHandler sets the operation handler for the make bucket operation
	UserAPIMakeBucketHandler user_api.MakeBucketHandler
	// AdminAPINotificationEndpointListHandler sets the operation handler for the notification endpoint list operation
	AdminAPINotificationEndpointListHandler admin_api.NotificationEndpointListHandler
	// AdminAPIPolicyInfoHandler sets the operation handler for the policy info operation
	AdminAPIPolicyInfoHandler admin_api.PolicyInfoHandler
	// UserAPIPostBucketsBucketNameObjectsUploadHandler sets the operation handler for the post buckets bucket name objects upload operation
	UserAPIPostBucketsBucketNameObjectsUploadHandler user_api.PostBucketsBucketNameObjectsUploadHandler
	// AdminAPIProfilingStartHandler sets the operation handler for the profiling start operation
	AdminAPIProfilingStartHandler admin_api.ProfilingStartHandler
	// AdminAPIProfilingStopHandler sets the operation handler for the profiling stop operation
	AdminAPIProfilingStopHandler admin_api.ProfilingStopHandler
	// UserAPIPutBucketTagsHandler sets the operation handler for the put bucket tags operation
	UserAPIPutBucketTagsHandler user_api.PutBucketTagsHandler
	// UserAPIPutObjectLegalHoldHandler sets the operation handler for the put object legal hold operation
	UserAPIPutObjectLegalHoldHandler user_api.PutObjectLegalHoldHandler
	// UserAPIPutObjectRestoreHandler sets the operation handler for the put object restore operation
	UserAPIPutObjectRestoreHandler user_api.PutObjectRestoreHandler
	// UserAPIPutObjectRetentionHandler sets the operation handler for the put object retention operation
	UserAPIPutObjectRetentionHandler user_api.PutObjectRetentionHandler
	// UserAPIPutObjectTagsHandler sets the operation handler for the put object tags operation
	UserAPIPutObjectTagsHandler user_api.PutObjectTagsHandler
	// UserAPIRemoteBucketDetailsHandler sets the operation handler for the remote bucket details operation
	UserAPIRemoteBucketDetailsHandler user_api.RemoteBucketDetailsHandler
	// AdminAPIRemoveGroupHandler sets the operation handler for the remove group operation
	AdminAPIRemoveGroupHandler admin_api.RemoveGroupHandler
	// AdminAPIRemovePolicyHandler sets the operation handler for the remove policy operation
	AdminAPIRemovePolicyHandler admin_api.RemovePolicyHandler
	// AdminAPIRemoveUserHandler sets the operation handler for the remove user operation
	AdminAPIRemoveUserHandler admin_api.RemoveUserHandler
	// AdminAPIResetConfigHandler sets the operation handler for the reset config operation
	AdminAPIResetConfigHandler admin_api.ResetConfigHandler
	// AdminAPIRestartServiceHandler sets the operation handler for the restart service operation
	AdminAPIRestartServiceHandler admin_api.RestartServiceHandler
	// UserAPISessionCheckHandler sets the operation handler for the session check operation
	UserAPISessionCheckHandler user_api.SessionCheckHandler
	// AdminAPISetAccessRuleWithBucketHandler sets the operation handler for the set access rule with bucket operation
	AdminAPISetAccessRuleWithBucketHandler admin_api.SetAccessRuleWithBucketHandler
	// UserAPISetBucketQuotaHandler sets the operation handler for the set bucket quota operation
	UserAPISetBucketQuotaHandler user_api.SetBucketQuotaHandler
	// UserAPISetBucketRetentionConfigHandler sets the operation handler for the set bucket retention config operation
	UserAPISetBucketRetentionConfigHandler user_api.SetBucketRetentionConfigHandler
	// UserAPISetBucketVersioningHandler sets the operation handler for the set bucket versioning operation
	UserAPISetBucketVersioningHandler user_api.SetBucketVersioningHandler
	// AdminAPISetConfigHandler sets the operation handler for the set config operation
	AdminAPISetConfigHandler admin_api.SetConfigHandler
	// UserAPISetMultiBucketReplicationHandler sets the operation handler for the set multi bucket replication operation
	UserAPISetMultiBucketReplicationHandler user_api.SetMultiBucketReplicationHandler
	// AdminAPISetPolicyHandler sets the operation handler for the set policy operation
	AdminAPISetPolicyHandler admin_api.SetPolicyHandler
	// AdminAPISetPolicyMultipleHandler sets the operation handler for the set policy multiple operation
	AdminAPISetPolicyMultipleHandler admin_api.SetPolicyMultipleHandler
	// UserAPISetServiceAccountPolicyHandler sets the operation handler for the set service account policy operation
	UserAPISetServiceAccountPolicyHandler user_api.SetServiceAccountPolicyHandler
	// UserAPIShareObjectHandler sets the operation handler for the share object operation
	UserAPIShareObjectHandler user_api.ShareObjectHandler
	// AdminAPISiteReplicationEditHandler sets the operation handler for the site replication edit operation
	AdminAPISiteReplicationEditHandler admin_api.SiteReplicationEditHandler
	// AdminAPISiteReplicationInfoAddHandler sets the operation handler for the site replication info add operation
	AdminAPISiteReplicationInfoAddHandler admin_api.SiteReplicationInfoAddHandler
	// AdminAPISiteReplicationRemoveHandler sets the operation handler for the site replication remove operation
	AdminAPISiteReplicationRemoveHandler admin_api.SiteReplicationRemoveHandler
	// AdminAPISubnetInfoHandler sets the operation handler for the subnet info operation
	AdminAPISubnetInfoHandler admin_api.SubnetInfoHandler
	// AdminAPISubnetLoginHandler sets the operation handler for the subnet login operation
	AdminAPISubnetLoginHandler admin_api.SubnetLoginHandler
	// AdminAPISubnetLoginMFAHandler sets the operation handler for the subnet login m f a operation
	AdminAPISubnetLoginMFAHandler admin_api.SubnetLoginMFAHandler
	// AdminAPISubnetRegTokenHandler sets the operation handler for the subnet reg token operation
	AdminAPISubnetRegTokenHandler admin_api.SubnetRegTokenHandler
	// AdminAPISubnetRegisterHandler sets the operation handler for the subnet register operation
	AdminAPISubnetRegisterHandler admin_api.SubnetRegisterHandler
	// AdminAPITiersListHandler sets the operation handler for the tiers list operation
	AdminAPITiersListHandler admin_api.TiersListHandler
	// UserAPIUpdateBucketLifecycleHandler sets the operation handler for the update bucket lifecycle operation
	UserAPIUpdateBucketLifecycleHandler user_api.UpdateBucketLifecycleHandler
	// AdminAPIUpdateGroupHandler sets the operation handler for the update group operation
	AdminAPIUpdateGroupHandler admin_api.UpdateGroupHandler
	// UserAPIUpdateMultiBucketReplicationHandler sets the operation handler for the update multi bucket replication operation
	UserAPIUpdateMultiBucketReplicationHandler user_api.UpdateMultiBucketReplicationHandler
	// AdminAPIUpdateUserGroupsHandler sets the operation handler for the update user groups operation
	AdminAPIUpdateUserGroupsHandler admin_api.UpdateUserGroupsHandler
	// AdminAPIUpdateUserInfoHandler sets the operation handler for the update user info operation
	AdminAPIUpdateUserInfoHandler admin_api.UpdateUserInfoHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *ConsoleAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *ConsoleAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *ConsoleAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ConsoleAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ConsoleAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ConsoleAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ConsoleAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ConsoleAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ConsoleAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ConsoleAPI
func (o *ConsoleAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.ApplicationZipProducer == nil {
		unregistered = append(unregistered, "ApplicationZipProducer")
	}
	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.KeyAuth == nil {
		unregistered = append(unregistered, "KeyAuth")
	}

	if o.AccountAccountChangePasswordHandler == nil {
		unregistered = append(unregistered, "account.AccountChangePasswordHandler")
	}
	if o.BucketAddBucketLifecycleHandler == nil {
		unregistered = append(unregistered, "bucket.AddBucketLifecycleHandler")
	}
	if o.GroupAddGroupHandler == nil {
		unregistered = append(unregistered, "group.AddGroupHandler")
	}
	if o.BucketAddMultiBucketLifecycleHandler == nil {
		unregistered = append(unregistered, "bucket.AddMultiBucketLifecycleHandler")
	}
	if o.ConfigurationAddNotificationEndpointHandler == nil {
		unregistered = append(unregistered, "configuration.AddNotificationEndpointHandler")
	}
	if o.PolicyAddPolicyHandler == nil {
		unregistered = append(unregistered, "policy.AddPolicyHandler")
	}
	if o.BucketAddRemoteBucketHandler == nil {
		unregistered = append(unregistered, "bucket.AddRemoteBucketHandler")
	}
	if o.TieringAddTierHandler == nil {
		unregistered = append(unregistered, "tiering.AddTierHandler")
	}
	if o.UserAddUserHandler == nil {
		unregistered = append(unregistered, "user.AddUserHandler")
	}
	if o.SystemAdminInfoHandler == nil {
		unregistered = append(unregistered, "system.AdminInfoHandler")
	}
	if o.SystemArnListHandler == nil {
		unregistered = append(unregistered, "system.ArnListHandler")
	}
	if o.BucketBucketInfoHandler == nil {
		unregistered = append(unregistered, "bucket.BucketInfoHandler")
	}
	if o.BucketBucketSetPolicyHandler == nil {
		unregistered = append(unregistered, "bucket.BucketSetPolicyHandler")
	}
	if o.UserBulkUpdateUsersGroupsHandler == nil {
		unregistered = append(unregistered, "user.BulkUpdateUsersGroupsHandler")
	}
	if o.AccountChangeUserPasswordHandler == nil {
		unregistered = append(unregistered, "account.ChangeUserPasswordHandler")
	}
	if o.SystemCheckMinIOVersionHandler == nil {
		unregistered = append(unregistered, "system.CheckMinIOVersionHandler")
	}
	if o.ConfigurationConfigInfoHandler == nil {
		unregistered = append(unregistered, "configuration.ConfigInfoHandler")
	}
	if o.UserCreateAUserServiceAccountHandler == nil {
		unregistered = append(unregistered, "user.CreateAUserServiceAccountHandler")
	}
	if o.BucketCreateBucketEventHandler == nil {
		unregistered = append(unregistered, "bucket.CreateBucketEventHandler")
	}
	if o.ServiceAccountCreateServiceAccountHandler == nil {
		unregistered = append(unregistered, "service_account.CreateServiceAccountHandler")
	}
	if o.UserCreateServiceAccountCredentialsHandler == nil {
		unregistered = append(unregistered, "user.CreateServiceAccountCredentialsHandler")
	}
	if o.ServiceAccountCreateServiceAccountCredsHandler == nil {
		unregistered = append(unregistered, "service_account.CreateServiceAccountCredsHandler")
	}
	if o.SystemDashboardWidgetDetailsHandler == nil {
		unregistered = append(unregistered, "system.DashboardWidgetDetailsHandler")
	}
	if o.BucketDeleteAccessRuleWithBucketHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteAccessRuleWithBucketHandler")
	}
	if o.BucketDeleteAllReplicationRulesHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteAllReplicationRulesHandler")
	}
	if o.BucketDeleteBucketHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteBucketHandler")
	}
	if o.BucketDeleteBucketEventHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteBucketEventHandler")
	}
	if o.BucketDeleteBucketLifecycleRuleHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteBucketLifecycleRuleHandler")
	}
	if o.BucketDeleteBucketReplicationRuleHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteBucketReplicationRuleHandler")
	}
	if o.ObjectDeleteMultipleObjectsHandler == nil {
		unregistered = append(unregistered, "object.DeleteMultipleObjectsHandler")
	}
	if o.ServiceAccountDeleteMultipleServiceAccountsHandler == nil {
		unregistered = append(unregistered, "service_account.DeleteMultipleServiceAccountsHandler")
	}
	if o.ObjectDeleteObjectHandler == nil {
		unregistered = append(unregistered, "object.DeleteObjectHandler")
	}
	if o.ObjectDeleteObjectRetentionHandler == nil {
		unregistered = append(unregistered, "object.DeleteObjectRetentionHandler")
	}
	if o.BucketDeleteRemoteBucketHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteRemoteBucketHandler")
	}
	if o.BucketDeleteSelectedReplicationRulesHandler == nil {
		unregistered = append(unregistered, "bucket.DeleteSelectedReplicationRulesHandler")
	}
	if o.ServiceAccountDeleteServiceAccountHandler == nil {
		unregistered = append(unregistered, "service_account.DeleteServiceAccountHandler")
	}
	if o.BucketDisableBucketEncryptionHandler == nil {
		unregistered = append(unregistered, "bucket.DisableBucketEncryptionHandler")
	}
	if o.ObjectDownloadObjectHandler == nil {
		unregistered = append(unregistered, "object.DownloadObjectHandler")
	}
	if o.TieringEditTierCredentialsHandler == nil {
		unregistered = append(unregistered, "tiering.EditTierCredentialsHandler")
	}
	if o.BucketEnableBucketEncryptionHandler == nil {
		unregistered = append(unregistered, "bucket.EnableBucketEncryptionHandler")
	}
	if o.BucketGetBucketEncryptionInfoHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketEncryptionInfoHandler")
	}
	if o.BucketGetBucketLifecycleHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketLifecycleHandler")
	}
	if o.BucketGetBucketObjectLockingStatusHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketObjectLockingStatusHandler")
	}
	if o.BucketGetBucketQuotaHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketQuotaHandler")
	}
	if o.BucketGetBucketReplicationHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketReplicationHandler")
	}
	if o.BucketGetBucketReplicationRuleHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketReplicationRuleHandler")
	}
	if o.BucketGetBucketRetentionConfigHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketRetentionConfigHandler")
	}
	if o.BucketGetBucketRewindHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketRewindHandler")
	}
	if o.BucketGetBucketVersioningHandler == nil {
		unregistered = append(unregistered, "bucket.GetBucketVersioningHandler")
	}
	if o.ObjectGetObjectMetadataHandler == nil {
		unregistered = append(unregistered, "object.GetObjectMetadataHandler")
	}
	if o.ServiceAccountGetServiceAccountPolicyHandler == nil {
		unregistered = append(unregistered, "service_account.GetServiceAccountPolicyHandler")
	}
	if o.SiteReplicationGetSiteReplicationInfoHandler == nil {
		unregistered = append(unregistered, "site_replication.GetSiteReplicationInfoHandler")
	}
	if o.SiteReplicationGetSiteReplicationStatusHandler == nil {
		unregistered = append(unregistered, "site_replication.GetSiteReplicationStatusHandler")
	}
	if o.TieringGetTierHandler == nil {
		unregistered = append(unregistered, "tiering.GetTierHandler")
	}
	if o.UserGetUserInfoHandler == nil {
		unregistered = append(unregistered, "user.GetUserInfoHandler")
	}
	if o.AdminAPIGetUserPolicyHandler == nil {
		unregistered = append(unregistered, "admin_api.GetUserPolicyHandler")
	}
	if o.AdminAPIGroupInfoHandler == nil {
		unregistered = append(unregistered, "admin_api.GroupInfoHandler")
	}
	if o.InspectInspectHandler == nil {
		unregistered = append(unregistered, "inspect.InspectHandler")
	}
	if o.UserListAUserServiceAccountsHandler == nil {
		unregistered = append(unregistered, "user.ListAUserServiceAccountsHandler")
	}
	if o.BucketListAccessRulesWithBucketHandler == nil {
		unregistered = append(unregistered, "bucket.ListAccessRulesWithBucketHandler")
	}
	if o.BucketListBucketEventsHandler == nil {
		unregistered = append(unregistered, "bucket.ListBucketEventsHandler")
	}
	if o.BucketListBucketsHandler == nil {
		unregistered = append(unregistered, "bucket.ListBucketsHandler")
	}
	if o.ConfigurationListConfigHandler == nil {
		unregistered = append(unregistered, "configuration.ListConfigHandler")
	}
	if o.BucketListExternalBucketsHandler == nil {
		unregistered = append(unregistered, "bucket.ListExternalBucketsHandler")
	}
	if o.GroupListGroupsHandler == nil {
		unregistered = append(unregistered, "group.ListGroupsHandler")
	}
	if o.PolicyListGroupsForPolicyHandler == nil {
		unregistered = append(unregistered, "policy.ListGroupsForPolicyHandler")
	}
	if o.SystemListNodesHandler == nil {
		unregistered = append(unregistered, "system.ListNodesHandler")
	}
	if o.ObjectListObjectsHandler == nil {
		unregistered = append(unregistered, "object.ListObjectsHandler")
	}
	if o.PolicyListPoliciesHandler == nil {
		unregistered = append(unregistered, "policy.ListPoliciesHandler")
	}
	if o.BucketListPoliciesWithBucketHandler == nil {
		unregistered = append(unregistered, "bucket.ListPoliciesWithBucketHandler")
	}
	if o.BucketListRemoteBucketsHandler == nil {
		unregistered = append(unregistered, "bucket.ListRemoteBucketsHandler")
	}
	if o.ServiceAccountListUserServiceAccountsHandler == nil {
		unregistered = append(unregistered, "service_account.ListUserServiceAccountsHandler")
	}
	if o.UserListUsersHandler == nil {
		unregistered = append(unregistered, "user.ListUsersHandler")
	}
	if o.PolicyListUsersForPolicyHandler == nil {
		unregistered = append(unregistered, "policy.ListUsersForPolicyHandler")
	}
	if o.BucketListUsersWithAccessToBucketHandler == nil {
		unregistered = append(unregistered, "bucket.ListUsersWithAccessToBucketHandler")
	}
	if o.LoggingLogSearchHandler == nil {
		unregistered = append(unregistered, "logging.LogSearchHandler")
	}
	if o.AuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.LoginHandler")
	}
	if o.AuthLoginDetailHandler == nil {
		unregistered = append(unregistered, "auth.LoginDetailHandler")
	}
	if o.AuthLoginOauth2AuthHandler == nil {
		unregistered = append(unregistered, "auth.LoginOauth2AuthHandler")
	}
	if o.AuthLogoutHandler == nil {
		unregistered = append(unregistered, "auth.LogoutHandler")
	}
	if o.BucketMakeBucketHandler == nil {
		unregistered = append(unregistered, "bucket.MakeBucketHandler")
	}
	if o.ConfigurationNotificationEndpointListHandler == nil {
		unregistered = append(unregistered, "configuration.NotificationEndpointListHandler")
	}
	if o.PolicyPolicyInfoHandler == nil {
		unregistered = append(unregistered, "policy.PolicyInfoHandler")
	}
	if o.ObjectPostBucketsBucketNameObjectsUploadHandler == nil {
		unregistered = append(unregistered, "object.PostBucketsBucketNameObjectsUploadHandler")
	}
	if o.ProfileProfilingStartHandler == nil {
		unregistered = append(unregistered, "profile.ProfilingStartHandler")
	}
	if o.ProfileProfilingStopHandler == nil {
		unregistered = append(unregistered, "profile.ProfilingStopHandler")
	}
	if o.BucketPutBucketTagsHandler == nil {
		unregistered = append(unregistered, "bucket.PutBucketTagsHandler")
	}
	if o.ObjectPutObjectLegalHoldHandler == nil {
		unregistered = append(unregistered, "object.PutObjectLegalHoldHandler")
	}
	if o.ObjectPutObjectRestoreHandler == nil {
		unregistered = append(unregistered, "object.PutObjectRestoreHandler")
	}
	if o.ObjectPutObjectRetentionHandler == nil {
		unregistered = append(unregistered, "object.PutObjectRetentionHandler")
	}
	if o.ObjectPutObjectTagsHandler == nil {
		unregistered = append(unregistered, "object.PutObjectTagsHandler")
	}
	if o.BucketRemoteBucketDetailsHandler == nil {
		unregistered = append(unregistered, "bucket.RemoteBucketDetailsHandler")
	}
	if o.GroupRemoveGroupHandler == nil {
		unregistered = append(unregistered, "group.RemoveGroupHandler")
	}
	if o.PolicyRemovePolicyHandler == nil {
		unregistered = append(unregistered, "policy.RemovePolicyHandler")
	}
	if o.UserRemoveUserHandler == nil {
		unregistered = append(unregistered, "user.RemoveUserHandler")
	}
	if o.ConfigurationResetConfigHandler == nil {
		unregistered = append(unregistered, "configuration.ResetConfigHandler")
	}
	if o.ServiceRestartServiceHandler == nil {
		unregistered = append(unregistered, "service.RestartServiceHandler")
	}
	if o.AuthSessionCheckHandler == nil {
		unregistered = append(unregistered, "auth.SessionCheckHandler")
	}
	if o.BucketSetAccessRuleWithBucketHandler == nil {
		unregistered = append(unregistered, "bucket.SetAccessRuleWithBucketHandler")
	}
	if o.BucketSetBucketQuotaHandler == nil {
		unregistered = append(unregistered, "bucket.SetBucketQuotaHandler")
	}
	if o.BucketSetBucketRetentionConfigHandler == nil {
		unregistered = append(unregistered, "bucket.SetBucketRetentionConfigHandler")
	}
	if o.BucketSetBucketVersioningHandler == nil {
		unregistered = append(unregistered, "bucket.SetBucketVersioningHandler")
	}
	if o.ConfigurationSetConfigHandler == nil {
		unregistered = append(unregistered, "configuration.SetConfigHandler")
	}
	if o.BucketSetMultiBucketReplicationHandler == nil {
		unregistered = append(unregistered, "bucket.SetMultiBucketReplicationHandler")
	}
	if o.PolicySetPolicyHandler == nil {
		unregistered = append(unregistered, "policy.SetPolicyHandler")
	}
	if o.PolicySetPolicyMultipleHandler == nil {
		unregistered = append(unregistered, "policy.SetPolicyMultipleHandler")
	}
	if o.ServiceAccountSetServiceAccountPolicyHandler == nil {
		unregistered = append(unregistered, "service_account.SetServiceAccountPolicyHandler")
	}
	if o.ObjectShareObjectHandler == nil {
		unregistered = append(unregistered, "object.ShareObjectHandler")
	}
	if o.SiteReplicationSiteReplicationEditHandler == nil {
		unregistered = append(unregistered, "site_replication.SiteReplicationEditHandler")
	}
	if o.SiteReplicationSiteReplicationInfoAddHandler == nil {
		unregistered = append(unregistered, "site_replication.SiteReplicationInfoAddHandler")
	}
	if o.SiteReplicationSiteReplicationRemoveHandler == nil {
		unregistered = append(unregistered, "site_replication.SiteReplicationRemoveHandler")
	}
	if o.SubnetSubnetInfoHandler == nil {
		unregistered = append(unregistered, "subnet.SubnetInfoHandler")
	}
	if o.SubnetSubnetLoginHandler == nil {
		unregistered = append(unregistered, "subnet.SubnetLoginHandler")
	}
	if o.SubnetSubnetLoginMFAHandler == nil {
		unregistered = append(unregistered, "subnet.SubnetLoginMFAHandler")
	}
	if o.SubnetSubnetRegTokenHandler == nil {
		unregistered = append(unregistered, "subnet.SubnetRegTokenHandler")
	}
	if o.SubnetSubnetRegisterHandler == nil {
		unregistered = append(unregistered, "subnet.SubnetRegisterHandler")
	}
	if o.TieringTiersListHandler == nil {
		unregistered = append(unregistered, "tiering.TiersListHandler")
	}
	if o.BucketUpdateBucketLifecycleHandler == nil {
		unregistered = append(unregistered, "bucket.UpdateBucketLifecycleHandler")
	}
	if o.GroupUpdateGroupHandler == nil {
		unregistered = append(unregistered, "group.UpdateGroupHandler")
	}
	if o.BucketUpdateMultiBucketReplicationHandler == nil {
		unregistered = append(unregistered, "bucket.UpdateMultiBucketReplicationHandler")
	}
	if o.UserUpdateUserGroupsHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserGroupsHandler")
	}
	if o.UserUpdateUserInfoHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserInfoHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ConsoleAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ConsoleAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "key":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.KeyAuth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *ConsoleAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *ConsoleAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *ConsoleAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/zip":
			result["application/zip"] = o.ApplicationZipProducer
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ConsoleAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the console API
func (o *ConsoleAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ConsoleAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/change-password"] = account.NewAccountChangePassword(o.context, o.AccountAccountChangePasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets/{bucket_name}/lifecycle"] = bucket.NewAddBucketLifecycle(o.context, o.BucketAddBucketLifecycleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/groups"] = group.NewAddGroup(o.context, o.GroupAddGroupHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets/multi-lifecycle"] = bucket.NewAddMultiBucketLifecycle(o.context, o.BucketAddMultiBucketLifecycleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/notification_endpoints"] = configuration.NewAddNotificationEndpoint(o.context, o.ConfigurationAddNotificationEndpointHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/policies"] = policy.NewAddPolicy(o.context, o.PolicyAddPolicyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/remote-buckets"] = bucket.NewAddRemoteBucket(o.context, o.BucketAddRemoteBucketHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/tiers"] = tiering.NewAddTier(o.context, o.TieringAddTierHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = user.NewAddUser(o.context, o.UserAddUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/info"] = system.NewAdminInfo(o.context, o.SystemAdminInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/arns"] = system.NewArnList(o.context, o.SystemArnListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{name}"] = bucket.NewBucketInfo(o.context, o.BucketBucketInfoHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{name}/set-policy"] = bucket.NewBucketSetPolicy(o.context, o.BucketBucketSetPolicyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users-groups-bulk"] = user.NewBulkUpdateUsersGroups(o.context, o.UserBulkUpdateUsersGroupsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/account/change-user-password"] = account.NewChangeUserPassword(o.context, o.AccountChangeUserPasswordHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/check-version"] = system.NewCheckMinIOVersion(o.context, o.SystemCheckMinIOVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs/{name}"] = configuration.NewConfigInfo(o.context, o.ConfigurationConfigInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/{name}/service-accounts"] = user.NewCreateAUserServiceAccount(o.context, o.UserCreateAUserServiceAccountHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets/{bucket_name}/events"] = bucket.NewCreateBucketEvent(o.context, o.BucketCreateBucketEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service-accounts"] = service_account.NewCreateServiceAccount(o.context, o.ServiceAccountCreateServiceAccountHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/{name}/service-account-credentials"] = user.NewCreateServiceAccountCredentials(o.context, o.UserCreateServiceAccountCredentialsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service-account-credentials"] = service_account.NewCreateServiceAccountCreds(o.context, o.ServiceAccountCreateServiceAccountCredsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/info/widgets/{widgetId}"] = system.NewDashboardWidgetDetails(o.context, o.SystemDashboardWidgetDetailsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/bucket/{bucket}/access-rules"] = bucket.NewDeleteAccessRuleWithBucket(o.context, o.BucketDeleteAccessRuleWithBucketHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{bucket_name}/delete-all-replication-rules"] = bucket.NewDeleteAllReplicationRules(o.context, o.BucketDeleteAllReplicationRulesHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{name}"] = bucket.NewDeleteBucket(o.context, o.BucketDeleteBucketHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{bucket_name}/events/{arn}"] = bucket.NewDeleteBucketEvent(o.context, o.BucketDeleteBucketEventHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{bucket_name}/lifecycle/{lifecycle_id}"] = bucket.NewDeleteBucketLifecycleRule(o.context, o.BucketDeleteBucketLifecycleRuleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{bucket_name}/replication/{rule_id}"] = bucket.NewDeleteBucketReplicationRule(o.context, o.BucketDeleteBucketReplicationRuleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets/{bucket_name}/delete-objects"] = object.NewDeleteMultipleObjects(o.context, o.ObjectDeleteMultipleObjectsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service-accounts/delete-multi"] = service_account.NewDeleteMultipleServiceAccounts(o.context, o.ServiceAccountDeleteMultipleServiceAccountsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{bucket_name}/objects"] = object.NewDeleteObject(o.context, o.ObjectDeleteObjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{bucket_name}/objects/retention"] = object.NewDeleteObjectRetention(o.context, o.ObjectDeleteObjectRetentionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/remote-buckets/{source-bucket-name}/{arn}"] = bucket.NewDeleteRemoteBucket(o.context, o.BucketDeleteRemoteBucketHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buckets/{bucket_name}/delete-selected-replication-rules"] = bucket.NewDeleteSelectedReplicationRules(o.context, o.BucketDeleteSelectedReplicationRulesHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service-accounts/{access_key}"] = service_account.NewDeleteServiceAccount(o.context, o.ServiceAccountDeleteServiceAccountHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets/{bucket_name}/encryption/disable"] = bucket.NewDisableBucketEncryption(o.context, o.BucketDisableBucketEncryptionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/objects/download"] = object.NewDownloadObject(o.context, o.ObjectDownloadObjectHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/tiers/{type}/{name}/credentials"] = tiering.NewEditTierCredentials(o.context, o.TieringEditTierCredentialsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets/{bucket_name}/encryption/enable"] = bucket.NewEnableBucketEncryption(o.context, o.BucketEnableBucketEncryptionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/encryption/info"] = bucket.NewGetBucketEncryptionInfo(o.context, o.BucketGetBucketEncryptionInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/lifecycle"] = bucket.NewGetBucketLifecycle(o.context, o.BucketGetBucketLifecycleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/object-locking"] = bucket.NewGetBucketObjectLockingStatus(o.context, o.BucketGetBucketObjectLockingStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{name}/quota"] = bucket.NewGetBucketQuota(o.context, o.BucketGetBucketQuotaHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/replication"] = bucket.NewGetBucketReplication(o.context, o.BucketGetBucketReplicationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/replication/{rule_id}"] = bucket.NewGetBucketReplicationRule(o.context, o.BucketGetBucketReplicationRuleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/retention"] = bucket.NewGetBucketRetentionConfig(o.context, o.BucketGetBucketRetentionConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/rewind/{date}"] = bucket.NewGetBucketRewind(o.context, o.BucketGetBucketRewindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/versioning"] = bucket.NewGetBucketVersioning(o.context, o.BucketGetBucketVersioningHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/objects/metadata"] = object.NewGetObjectMetadata(o.context, o.ObjectGetObjectMetadataHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service-accounts/{access_key}/policy"] = service_account.NewGetServiceAccountPolicy(o.context, o.ServiceAccountGetServiceAccountPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/site-replication"] = site_replication.NewGetSiteReplicationInfo(o.context, o.SiteReplicationGetSiteReplicationInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/site-replication/status"] = site_replication.NewGetSiteReplicationStatus(o.context, o.SiteReplicationGetSiteReplicationStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/tiers/{type}/{name}"] = tiering.NewGetTier(o.context, o.TieringGetTierHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = user.NewGetUserInfo(o.context, o.UserGetUserInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/policy"] = admin_api.NewGetUserPolicy(o.context, o.AdminAPIGetUserPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/group"] = admin_api.NewGroupInfo(o.context, o.AdminAPIGroupInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/inspect"] = inspect.NewInspect(o.context, o.InspectInspectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{name}/service-accounts"] = user.NewListAUserServiceAccounts(o.context, o.UserListAUserServiceAccountsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bucket/{bucket}/access-rules"] = bucket.NewListAccessRulesWithBucket(o.context, o.BucketListAccessRulesWithBucketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/events"] = bucket.NewListBucketEvents(o.context, o.BucketListBucketEventsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets"] = bucket.NewListBuckets(o.context, o.BucketListBucketsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs"] = configuration.NewListConfig(o.context, o.ConfigurationListConfigHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/list-external-buckets"] = bucket.NewListExternalBuckets(o.context, o.BucketListExternalBucketsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/groups"] = group.NewListGroups(o.context, o.GroupListGroupsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policies/{policy}/groups"] = policy.NewListGroupsForPolicy(o.context, o.PolicyListGroupsForPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes"] = system.NewListNodes(o.context, o.SystemListNodesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/objects"] = object.NewListObjects(o.context, o.ObjectListObjectsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policies"] = policy.NewListPolicies(o.context, o.PolicyListPoliciesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bucket-policy/{bucket}"] = bucket.NewListPoliciesWithBucket(o.context, o.BucketListPoliciesWithBucketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/remote-buckets"] = bucket.NewListRemoteBuckets(o.context, o.BucketListRemoteBucketsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service-accounts"] = service_account.NewListUserServiceAccounts(o.context, o.ServiceAccountListUserServiceAccountsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = user.NewListUsers(o.context, o.UserListUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policies/{policy}/users"] = policy.NewListUsersForPolicy(o.context, o.PolicyListUsersForPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/bucket-users/{bucket}"] = bucket.NewListUsersWithAccessToBucket(o.context, o.BucketListUsersWithAccessToBucketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/logs/search"] = logging.NewLogSearch(o.context, o.LoggingLogSearchHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login"] = auth.NewLogin(o.context, o.AuthLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/login"] = auth.NewLoginDetail(o.context, o.AuthLoginDetailHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/login/oauth2/auth"] = auth.NewLoginOauth2Auth(o.context, o.AuthLoginOauth2AuthHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/logout"] = auth.NewLogout(o.context, o.AuthLogoutHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets"] = bucket.NewMakeBucket(o.context, o.BucketMakeBucketHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/notification_endpoints"] = configuration.NewNotificationEndpointList(o.context, o.ConfigurationNotificationEndpointListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/policy"] = policy.NewPolicyInfo(o.context, o.PolicyPolicyInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets/{bucket_name}/objects/upload"] = object.NewPostBucketsBucketNameObjectsUpload(o.context, o.ObjectPostBucketsBucketNameObjectsUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profiling/start"] = profile.NewProfilingStart(o.context, o.ProfileProfilingStartHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profiling/stop"] = profile.NewProfilingStop(o.context, o.ProfileProfilingStopHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/tags"] = bucket.NewPutBucketTags(o.context, o.BucketPutBucketTagsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/objects/legalhold"] = object.NewPutObjectLegalHold(o.context, o.ObjectPutObjectLegalHoldHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/objects/restore"] = object.NewPutObjectRestore(o.context, o.ObjectPutObjectRestoreHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/objects/retention"] = object.NewPutObjectRetention(o.context, o.ObjectPutObjectRetentionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/objects/tags"] = object.NewPutObjectTags(o.context, o.ObjectPutObjectTagsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/remote-buckets/{name}"] = bucket.NewRemoteBucketDetails(o.context, o.BucketRemoteBucketDetailsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/group"] = group.NewRemoveGroup(o.context, o.GroupRemoveGroupHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/policy"] = policy.NewRemovePolicy(o.context, o.PolicyRemovePolicyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user"] = user.NewRemoveUser(o.context, o.UserRemoveUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/configs/{name}/reset"] = configuration.NewResetConfig(o.context, o.ConfigurationResetConfigHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service/restart"] = service.NewRestartService(o.context, o.ServiceRestartServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/session"] = auth.NewSessionCheck(o.context, o.AuthSessionCheckHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/bucket/{bucket}/access-rules"] = bucket.NewSetAccessRuleWithBucket(o.context, o.BucketSetAccessRuleWithBucketHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{name}/quota"] = bucket.NewSetBucketQuota(o.context, o.BucketSetBucketQuotaHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/retention"] = bucket.NewSetBucketRetentionConfig(o.context, o.BucketSetBucketRetentionConfigHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/versioning"] = bucket.NewSetBucketVersioning(o.context, o.BucketSetBucketVersioningHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/configs/{name}"] = configuration.NewSetConfig(o.context, o.ConfigurationSetConfigHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buckets-replication"] = bucket.NewSetMultiBucketReplication(o.context, o.BucketSetMultiBucketReplicationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/set-policy"] = policy.NewSetPolicy(o.context, o.PolicySetPolicyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/set-policy-multi"] = policy.NewSetPolicyMultiple(o.context, o.PolicySetPolicyMultipleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service-accounts/{access_key}/policy"] = service_account.NewSetServiceAccountPolicy(o.context, o.ServiceAccountSetServiceAccountPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buckets/{bucket_name}/objects/share"] = object.NewShareObject(o.context, o.ObjectShareObjectHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/admin/site-replication"] = site_replication.NewSiteReplicationEdit(o.context, o.SiteReplicationSiteReplicationEditHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin/site-replication"] = site_replication.NewSiteReplicationInfoAdd(o.context, o.SiteReplicationSiteReplicationInfoAddHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/admin/site-replication"] = site_replication.NewSiteReplicationRemove(o.context, o.SiteReplicationSiteReplicationRemoveHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subnet/info"] = subnet.NewSubnetInfo(o.context, o.SubnetSubnetInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/subnet/login"] = subnet.NewSubnetLogin(o.context, o.SubnetSubnetLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/subnet/login/mfa"] = subnet.NewSubnetLoginMFA(o.context, o.SubnetSubnetLoginMFAHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/subnet/registration-token"] = subnet.NewSubnetRegToken(o.context, o.SubnetSubnetRegTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/subnet/register"] = subnet.NewSubnetRegister(o.context, o.SubnetSubnetRegisterHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/admin/tiers"] = tiering.NewTiersList(o.context, o.TieringTiersListHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/lifecycle/{lifecycle_id}"] = bucket.NewUpdateBucketLifecycle(o.context, o.BucketUpdateBucketLifecycleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/group"] = group.NewUpdateGroup(o.context, o.GroupUpdateGroupHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buckets/{bucket_name}/replication/{rule_id}"] = bucket.NewUpdateMultiBucketReplication(o.context, o.BucketUpdateMultiBucketReplicationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/groups"] = user.NewUpdateUserGroups(o.context, o.UserUpdateUserGroupsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user"] = user.NewUpdateUserInfo(o.context, o.UserUpdateUserInfoHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ConsoleAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ConsoleAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ConsoleAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ConsoleAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *ConsoleAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
