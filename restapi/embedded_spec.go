// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2020 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "ws"
  ],
  "swagger": "2.0",
  "info": {
    "title": "MinIO Console Server",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/admin/arns": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Returns a list of active ARNs in the instance",
        "operationId": "ArnList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/arnsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/admin/info": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Returns information about the deployment",
        "operationId": "AdminInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/adminInfoResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/admin/notification_endpoints": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Returns a list of active notification endpoints",
        "operationId": "NotificationEndpointList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/notifEndpointResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Allows to configure a new notification endpoint",
        "operationId": "AddNotificationEndpoint",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationEndpoint"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/notificationEndpoint"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Buckets",
        "operationId": "ListBuckets",
        "parameters": [
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listBucketsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Make bucket",
        "operationId": "MakeBucket",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/makeBucketRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/encryption/disable": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Disable bucket encryption.",
        "operationId": "DisableBucketEncryption",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/encryption/enable": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Enable bucket encryption.",
        "operationId": "EnableBucketEncryption",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bucketEncryptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/encryption/info": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Get bucket encryption information.",
        "operationId": "GetBucketEncryptionInfo",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucketEncryptionInfo"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/events": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Bucket Events",
        "operationId": "ListBucketEvents",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listBucketEventsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Create Bucket Event",
        "operationId": "CreateBucketEvent",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bucketEventRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/events/{arn}": {
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Bucket Event",
        "operationId": "DeleteBucketEvent",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "arn",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationDeleteRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Objects",
        "operationId": "ListObjects",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "recursive",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "with_versions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listObjectsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Object",
        "operationId": "DeleteObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "recursive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "UserAPI"
        ],
        "summary": "Download Object",
        "operationId": "Download Object",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/legalhold": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Put Object's legalhold status",
        "operationId": "PutObjectLegalHold",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putObjectLegalHoldRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/retention": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Put Object's retention status",
        "operationId": "PutObjectRetention",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putObjectRetentionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Object retention from an object",
        "operationId": "DeleteObjectRetention",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/share": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Shares an Object on a url",
        "operationId": "ShareObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "expires",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/tags": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Put Object's tags",
        "operationId": "PutObjectTags",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putObjectTagsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "UserAPI"
        ],
        "summary": "Uploads an Object.",
        "parameters": [
          {
            "type": "file",
            "name": "upfile",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/replication": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Replication",
        "operationId": "GetBucketReplication",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucketReplicationResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Add Bucket Replication",
        "operationId": "AddBucketReplication",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addBucketReplication"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/retention": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Set Bucket's retention config",
        "operationId": "SetBucketRetentionConfig",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putBucketRetentionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/versioning": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Versioning",
        "operationId": "GetBucketVersioning",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucketVersioningResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Set Bucket Versioning",
        "operationId": "SetBucketVersioning",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setBucketVersioning"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{name}": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Info",
        "operationId": "BucketInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Bucket",
        "operationId": "DeleteBucket",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{name}/quota": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Get Bucket Quota",
        "operationId": "GetBucketQuota",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listObjectsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Quota",
        "operationId": "SetBucketQuota",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setBucketQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{name}/set-policy": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Set Policy",
        "operationId": "BucketSetPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setBucketPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/cluster/max-allocatable-memory": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get maximum allocatable memory for given number of nodes",
        "operationId": "GetMaxAllocatableMem",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "name": "num_nodes",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/maxAllocatableMemResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/configs": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Configurations",
        "operationId": "ListConfig",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listConfigResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/configs/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Configuration info",
        "operationId": "ConfigInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configuration"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Set Configuration",
        "operationId": "SetConfig",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setConfigRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/get-parity/{nodes}/{disksPerNode}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Gets parity by sending number of nodes \u0026 number of disks",
        "operationId": "GetParity",
        "parameters": [
          {
            "minimum": 2,
            "type": "integer",
            "name": "nodes",
            "in": "path",
            "required": true
          },
          {
            "minimum": 1,
            "type": "integer",
            "name": "disksPerNode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/parityResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Groups",
        "operationId": "ListGroups",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listGroupsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Add Group",
        "operationId": "AddGroup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/groups/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Group info",
        "operationId": "GroupInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update Group Members or Status",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Remove group",
        "operationId": "RemoveGroup",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Returns login strategy, form or sso.",
        "operationId": "LoginDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loginDetails"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Login to Console",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login/oauth2/auth": {
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Identity Provider oauth2 callback endpoint.",
        "operationId": "LoginOauth2Auth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginOauth2AuthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login/operator": {
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Login to Operator Console.",
        "operationId": "LoginOperator",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginOperatorRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Logout from Console.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/resourcequotas/{resource-quota-name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get Resource Quota",
        "operationId": "GetResourceQuota",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resource-quota-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/resourceQuota"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Tenants by Namespace",
        "operationId": "ListTenants",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listTenantsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Info",
        "operationId": "TenantInfo",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenant"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update Tenant",
        "operationId": "UpdateTenant",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateTenantRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Delete tenant and underlying pvcs",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/deleteTenantRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/certificates": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Update Certificates",
        "operationId": "TenantUpdateCertificate",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tlsConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/encryption": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Update Encryption",
        "operationId": "TenantUpdateEncryption",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/encryptionConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/usage": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get Usage For The Tenant",
        "operationId": "GetTenantUsage",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantUsage"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/zones": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Update Zones",
        "operationId": "TenantUpdateZones",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zoneUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenant"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Add Zone",
        "operationId": "TenantAddZone",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/operator/{namespace}/{tenant}/buckets": {
      "get": {
        "tags": [
          "OperatorAPI"
        ],
        "summary": "List Buckets for Operator Console",
        "operationId": "OperatorListBuckets",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listBucketsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Policies",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listPoliciesResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Add Policy",
        "operationId": "AddPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/policies/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Policy info",
        "operationId": "PolicyInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Remove policy",
        "operationId": "RemovePolicy",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/profiling/start": {
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Start recording profile data",
        "operationId": "ProfilingStart",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profilingStartRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/startProfilingList"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/profiling/stop": {
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Stop and download profile data",
        "operationId": "ProfilingStop",
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/remote-buckets": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Remote Buckets",
        "operationId": "ListRemoteBuckets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listRemoteBucketsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Add Remote Bucket",
        "operationId": "AddRemoteBucket",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createRemoteBucket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/remote-buckets/{name}": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Remote Bucket Details",
        "operationId": "RemoteBucketDetails",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/remoteBucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/remote-buckets/{source-bucket-name}/{arn}": {
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Remote Bucket",
        "operationId": "DeleteRemoteBucket",
        "parameters": [
          {
            "type": "string",
            "name": "source-bucket-name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "arn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/service-accounts": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List User's Service Accounts",
        "operationId": "ListUserServiceAccounts",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceAccounts"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Create Service Account",
        "operationId": "CreateServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceAccountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceAccountCreds"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/service-accounts/{access_key}": {
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Service Account",
        "operationId": "DeleteServiceAccount",
        "parameters": [
          {
            "type": "string",
            "name": "access_key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/service/restart": {
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Restart Service",
        "operationId": "RestartService",
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Endpoint to check if your session is still valid",
        "operationId": "SessionCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sessionResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/set-policy-multi/{name}": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Set policy to multiple users/groups",
        "operationId": "SetPolicyMultiple",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setPolicyMultipleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/set-policy/{name}": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Set policy",
        "operationId": "SetPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setPolicyRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Tenant of All Namespaces",
        "operationId": "ListAllTenants",
        "parameters": [
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listTenantsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Create Tenant",
        "operationId": "CreateTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTenantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/createTenantResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Users",
        "operationId": "ListUsers",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listUsersResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Add User",
        "operationId": "AddUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users-groups-bulk": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Bulk functionality to Add Users to Groups",
        "operationId": "BulkUpdateUsersGroups",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bulkUserGroups"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get User Info",
        "operationId": "GetUserInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update User Info",
        "operationId": "UpdateUserInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Remove user",
        "operationId": "RemoveUser",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{name}/groups": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update Groups for a user",
        "operationId": "UpdateUserGroups",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUserGroups"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "addBucketReplication": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string"
        },
        "destination_bucket": {
          "type": "string"
        }
      }
    },
    "addGroupRequest": {
      "type": "object",
      "required": [
        "group",
        "members"
      ],
      "properties": {
        "group": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "addPolicyRequest": {
      "type": "object",
      "required": [
        "name",
        "policy"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        }
      }
    },
    "addUserRequest": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey",
        "groups"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "adminInfoResponse": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "integer"
        },
        "objects": {
          "type": "integer"
        },
        "usage": {
          "type": "integer"
        }
      }
    },
    "arnsResponse": {
      "type": "object",
      "properties": {
        "arns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "awsConfiguration": {
      "type": "object",
      "required": [
        "secretsmanager"
      ],
      "properties": {
        "secretsmanager": {
          "type": "object",
          "required": [
            "endpoint",
            "region",
            "credentials"
          ],
          "properties": {
            "credentials": {
              "type": "object",
              "required": [
                "accesskey",
                "secretkey"
              ],
              "properties": {
                "accesskey": {
                  "type": "string"
                },
                "secretkey": {
                  "type": "string"
                },
                "token": {
                  "type": "string"
                }
              }
            },
            "endpoint": {
              "type": "string"
            },
            "kmskey": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          }
        }
      }
    },
    "bucket": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/bucketAccess"
        },
        "creation_date": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 3
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "bucketAccess": {
      "type": "string",
      "default": "PRIVATE",
      "enum": [
        "PRIVATE",
        "PUBLIC",
        "CUSTOM"
      ]
    },
    "bucketEncryptionInfo": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "kmsMasterKeyID": {
          "type": "string"
        }
      }
    },
    "bucketEncryptionRequest": {
      "type": "object",
      "properties": {
        "encType": {
          "$ref": "#/definitions/bucketEncryptionType"
        },
        "kmsKeyID": {
          "type": "string"
        }
      }
    },
    "bucketEncryptionType": {
      "type": "string",
      "default": "sse-s3",
      "enum": [
        "sse-s3",
        "sse-kms"
      ]
    },
    "bucketEventRequest": {
      "type": "object",
      "required": [
        "configuration"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/notificationConfig"
        },
        "ignoreExisting": {
          "type": "boolean"
        }
      }
    },
    "bucketObject": {
      "type": "object",
      "properties": {
        "content_type": {
          "type": "string"
        },
        "expiration": {
          "type": "string"
        },
        "expiration_rule_id": {
          "type": "string"
        },
        "is_delete_marker": {
          "type": "boolean"
        },
        "is_latest": {
          "type": "boolean"
        },
        "last_modified": {
          "type": "string"
        },
        "legal_hold_status": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "retention_mode": {
          "type": "string"
        },
        "retention_until_date": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "user_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version_id": {
          "type": "string"
        }
      }
    },
    "bucketReplicationDestination": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string"
        }
      }
    },
    "bucketReplicationResponse": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bucketReplicationRule"
          }
        }
      }
    },
    "bucketReplicationRule": {
      "type": "object",
      "properties": {
        "delete_marker_replication": {
          "$ref": "#/definitions/bucketReplicationRuleMarker"
        },
        "destination": {
          "$ref": "#/definitions/bucketReplicationDestination"
        },
        "id": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ]
        }
      }
    },
    "bucketReplicationRuleMarker": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ]
        }
      }
    },
    "bucketVersioningResponse": {
      "type": "object",
      "properties": {
        "is_versioned": {
          "type": "boolean"
        }
      }
    },
    "bulkUserGroups": {
      "type": "object",
      "required": [
        "users",
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configDescription": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "configuration": {
      "type": "object",
      "properties": {
        "key_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurationKV"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "configurationKV": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "consoleConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/metadataFields"
        },
        {
          "type": "object",
          "properties": {
            "image": {
              "type": "string"
            }
          }
        }
      ]
    },
    "createRemoteBucket": {
      "required": [
        "accessKey",
        "secretKey",
        "targetURL",
        "sourceBucket",
        "targetBucket"
      ],
      "properties": {
        "accessKey": {
          "type": "string",
          "minLength": 3
        },
        "region": {
          "type": "string"
        },
        "secretKey": {
          "type": "string",
          "minLength": 8
        },
        "sourceBucket": {
          "type": "string"
        },
        "targetBucket": {
          "type": "string"
        },
        "targetURL": {
          "type": "string"
        }
      }
    },
    "createTenantRequest": {
      "type": "object",
      "required": [
        "name",
        "namespace",
        "zones"
      ],
      "properties": {
        "access_key": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "console": {
          "type": "object",
          "$ref": "#/definitions/consoleConfiguration"
        },
        "console_image": {
          "type": "string"
        },
        "enable_console": {
          "type": "boolean",
          "default": true
        },
        "enable_prometheus": {
          "type": "boolean",
          "default": false
        },
        "enable_tls": {
          "type": "boolean",
          "default": true
        },
        "encryption": {
          "type": "object",
          "$ref": "#/definitions/encryptionConfiguration"
        },
        "erasureCodingParity": {
          "type": "integer"
        },
        "idp": {
          "type": "object",
          "$ref": "#/definitions/idpConfiguration"
        },
        "image": {
          "type": "string"
        },
        "image_pull_secret": {
          "type": "string"
        },
        "image_registry": {
          "$ref": "#/definitions/imageRegistry"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mounth_path": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9-]{3,63}$"
        },
        "namespace": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        },
        "tls": {
          "type": "object",
          "$ref": "#/definitions/tlsConfiguration"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "createTenantResponse": {
      "type": "object",
      "properties": {
        "console": {
          "type": "object",
          "properties": {
            "access_key": {
              "type": "string"
            },
            "secret_key": {
              "type": "string"
            }
          }
        }
      }
    },
    "deleteTenantRequest": {
      "type": "object",
      "properties": {
        "delete_pvcs": {
          "type": "boolean"
        }
      }
    },
    "encryptionConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/metadataFields"
        },
        {
          "type": "object",
          "properties": {
            "aws": {
              "type": "object",
              "$ref": "#/definitions/awsConfiguration"
            },
            "client": {
              "type": "object",
              "$ref": "#/definitions/keyPairConfiguration"
            },
            "gemalto": {
              "type": "object",
              "$ref": "#/definitions/gemaltoConfiguration"
            },
            "image": {
              "type": "string"
            },
            "server": {
              "type": "object",
              "$ref": "#/definitions/keyPairConfiguration"
            },
            "vault": {
              "type": "object",
              "$ref": "#/definitions/vaultConfiguration"
            }
          }
        }
      ]
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "gemaltoConfiguration": {
      "type": "object",
      "required": [
        "keysecure"
      ],
      "properties": {
        "keysecure": {
          "type": "object",
          "required": [
            "endpoint",
            "credentials"
          ],
          "properties": {
            "credentials": {
              "type": "object",
              "required": [
                "token",
                "domain"
              ],
              "properties": {
                "domain": {
                  "type": "string"
                },
                "retry": {
                  "type": "integer",
                  "format": "int64"
                },
                "token": {
                  "type": "string"
                }
              }
            },
            "endpoint": {
              "type": "string"
            },
            "tls": {
              "type": "object",
              "required": [
                "ca"
              ],
              "properties": {
                "ca": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "group": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "iamEntity": {
      "type": "string",
      "pattern": "^[\\w+=,.@-]{1,64}$"
    },
    "idpConfiguration": {
      "type": "object",
      "properties": {
        "active_directory": {
          "type": "object",
          "required": [
            "url",
            "username_format",
            "user_search_filter"
          ],
          "properties": {
            "group_name_attribute": {
              "type": "string"
            },
            "group_search_base_dn": {
              "type": "string"
            },
            "group_search_filter": {
              "type": "string"
            },
            "server_insecure": {
              "type": "boolean"
            },
            "skip_tls_verification": {
              "type": "boolean"
            },
            "url": {
              "type": "string"
            },
            "user_search_filter": {
              "type": "string"
            },
            "username_format": {
              "type": "string"
            }
          }
        },
        "oidc": {
          "type": "object",
          "required": [
            "url",
            "client_id",
            "secret_id"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "secret_id": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      }
    },
    "imageRegistry": {
      "type": "object",
      "required": [
        "registry",
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "keyPairConfiguration": {
      "type": "object",
      "required": [
        "crt",
        "key"
      ],
      "properties": {
        "crt": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "listBucketEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationConfig"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of bucket events"
        }
      }
    },
    "listBucketsResponse": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "array",
          "title": "list of resulting buckets",
          "items": {
            "$ref": "#/definitions/bucket"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of buckets accessible to tenant user"
        }
      }
    },
    "listConfigResponse": {
      "type": "object",
      "properties": {
        "configurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configDescription"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of configurations"
        }
      }
    },
    "listGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "title": "list of groups",
          "items": {
            "type": "string"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of groups"
        }
      }
    },
    "listObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "title": "list of resulting objects",
          "items": {
            "$ref": "#/definitions/bucketObject"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of objects"
        }
      }
    },
    "listPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "title": "list of policies",
          "items": {
            "$ref": "#/definitions/policy"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of policies"
        }
      }
    },
    "listRemoteBucketsResponse": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "array",
          "title": "list of remote buckets",
          "items": {
            "$ref": "#/definitions/remoteBucket"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of remote buckets accessible to user"
        }
      }
    },
    "listTenantsResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "title": "list of resulting tenants",
          "items": {
            "$ref": "#/definitions/tenantList"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of tenants accessible to tenant user"
        }
      }
    },
    "listUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "title": "list of resulting users",
          "items": {
            "$ref": "#/definitions/user"
          }
        }
      }
    },
    "loginDetails": {
      "type": "object",
      "properties": {
        "loginStrategy": {
          "type": "string",
          "enum": [
            "form",
            "redirect",
            "service-account"
          ]
        },
        "redirect": {
          "type": "string"
        }
      }
    },
    "loginOauth2AuthRequest": {
      "type": "object",
      "required": [
        "state",
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "loginOperatorRequest": {
      "type": "object",
      "required": [
        "jwt"
      ],
      "properties": {
        "jwt": {
          "type": "string"
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        }
      }
    },
    "makeBucketRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "quota": {
          "$ref": "#/definitions/setBucketQuota"
        },
        "versioning": {
          "type": "boolean"
        }
      }
    },
    "maxAllocatableMemResponse": {
      "type": "object",
      "properties": {
        "max_memory": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "metadataFields": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "node_selector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "nodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "type": "array",
          "items": {
            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "type": "object",
            "required": [
              "key",
              "operator"
            ],
            "properties": {
              "key": {
                "description": "The label key that the selector applies to.",
                "type": "string"
              },
              "operator": {
                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                "type": "string"
              },
              "values": {
                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "type": "array",
          "items": {
            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "type": "object",
            "required": [
              "key",
              "operator"
            ],
            "properties": {
              "key": {
                "description": "The label key that the selector applies to.",
                "type": "string"
              },
              "operator": {
                "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                "type": "string"
              },
              "values": {
                "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "nofiticationService": {
      "type": "string",
      "enum": [
        "webhook",
        "amqp",
        "kafka",
        "mqtt",
        "nats",
        "nsq",
        "mysql",
        "postgres",
        "elasticsearch",
        "redis"
      ]
    },
    "notifEndpointResponse": {
      "type": "object",
      "properties": {
        "notification_endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationEndpointItem"
          }
        }
      }
    },
    "notificationConfig": {
      "type": "object",
      "required": [
        "arn"
      ],
      "properties": {
        "arn": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "title": "filter specific type of event. Defaults to all event (default: '[put,delete,get]')",
          "items": {
            "$ref": "#/definitions/notificationEventType"
          }
        },
        "id": {
          "type": "string"
        },
        "prefix": {
          "type": "string",
          "title": "filter event associated to the specified prefix"
        },
        "suffix": {
          "type": "string",
          "title": "filter event associated to the specified suffix"
        }
      }
    },
    "notificationDeleteRequest": {
      "type": "object",
      "required": [
        "events",
        "prefix",
        "suffix"
      ],
      "properties": {
        "events": {
          "type": "array",
          "title": "filter specific type of event. Defaults to all event (default: '[put,delete,get]')",
          "minLength": 1,
          "items": {
            "$ref": "#/definitions/notificationEventType"
          }
        },
        "prefix": {
          "type": "string",
          "title": "filter event associated to the specified prefix"
        },
        "suffix": {
          "type": "string",
          "title": "filter event associated to the specified suffix"
        }
      }
    },
    "notificationEndpoint": {
      "type": "object",
      "required": [
        "service",
        "account_id",
        "properties"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "service": {
          "$ref": "#/definitions/nofiticationService"
        }
      }
    },
    "notificationEndpointItem": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/nofiticationService"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "notificationEventType": {
      "type": "string",
      "enum": [
        "put",
        "delete",
        "get"
      ]
    },
    "objectLegalHoldStatus": {
      "type": "string",
      "enum": [
        "enabled",
        "disabled"
      ]
    },
    "objectRetentionMode": {
      "type": "string",
      "enum": [
        "governance",
        "compliance"
      ]
    },
    "objectRetentionUnit": {
      "type": "string",
      "enum": [
        "days",
        "years"
      ]
    },
    "parityResponse": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "podAffinityTerm": {
      "description": "Required. A pod affinity term, associated with the corresponding weight.",
      "type": "object",
      "required": [
        "topologyKey"
      ],
      "properties": {
        "labelSelector": {
          "description": "A label query over a set of resources, in this case pods.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "type": "object",
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "namespaces": {
          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      }
    },
    "policy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        }
      }
    },
    "policyEntity": {
      "type": "string",
      "default": "user",
      "enum": [
        "user",
        "group"
      ]
    },
    "principal": {
      "type": "object",
      "properties": {
        "accessKeyID": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretAccessKey": {
          "type": "string"
        },
        "sessionToken": {
          "type": "string"
        }
      }
    },
    "profilerType": {
      "type": "string",
      "enum": [
        "cpu",
        "mem",
        "block",
        "mutex",
        "trace",
        "threads",
        "goroutines"
      ]
    },
    "profilingStartRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/profilerType"
        }
      }
    },
    "putBucketRetentionRequest": {
      "type": "object",
      "required": [
        "mode",
        "unit",
        "validity"
      ],
      "properties": {
        "mode": {
          "$ref": "#/definitions/objectRetentionMode"
        },
        "unit": {
          "$ref": "#/definitions/objectRetentionUnit"
        },
        "validity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "putObjectLegalHoldRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/objectLegalHoldStatus"
        }
      }
    },
    "putObjectRetentionRequest": {
      "type": "object",
      "required": [
        "mode",
        "expires"
      ],
      "properties": {
        "expires": {
          "type": "string"
        },
        "governance_bypass": {
          "type": "boolean"
        },
        "mode": {
          "$ref": "#/definitions/objectRetentionMode"
        }
      }
    },
    "putObjectTagsRequest": {
      "type": "object",
      "properties": {
        "tags": {
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "remoteBucket": {
      "type": "object",
      "required": [
        "accessKey",
        "sourceBucket",
        "remoteARN"
      ],
      "properties": {
        "accessKey": {
          "type": "string",
          "minLength": 3
        },
        "remoteARN": {
          "type": "string"
        },
        "secretKey": {
          "type": "string",
          "minLength": 8
        },
        "service": {
          "type": "string",
          "enum": [
            "replication"
          ]
        },
        "sourceBucket": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "targetBucket": {
          "type": "string"
        },
        "targetURL": {
          "type": "string"
        }
      }
    },
    "resourceQuota": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourceQuotaElement"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "resourceQuotaElement": {
      "type": "object",
      "properties": {
        "hard": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "used": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "serviceAccountCreds": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "serviceAccountRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "type": "string",
          "title": "policy to be applied to the Service Account if any"
        }
      }
    },
    "serviceAccounts": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sessionResponse": {
      "type": "object",
      "properties": {
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "ok"
          ]
        }
      }
    },
    "setBucketPolicyRequest": {
      "type": "object",
      "required": [
        "access"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/bucketAccess"
        }
      }
    },
    "setBucketQuota": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "amount": {
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "quota_type": {
          "type": "string",
          "enum": [
            "fifo",
            "hard"
          ]
        }
      }
    },
    "setBucketVersioning": {
      "type": "object",
      "properties": {
        "versioning": {
          "type": "boolean"
        }
      }
    },
    "setConfigRequest": {
      "type": "object",
      "required": [
        "key_values"
      ],
      "properties": {
        "arn_resource_id": {
          "type": "string",
          "title": "Used if configuration is an event notification's target"
        },
        "key_values": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/configurationKV"
          }
        }
      }
    },
    "setPolicyMultipleRequest": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/iamEntity"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/iamEntity"
          }
        }
      }
    },
    "setPolicyRequest": {
      "type": "object",
      "required": [
        "entityType",
        "entityName"
      ],
      "properties": {
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/policyEntity"
        }
      }
    },
    "startProfilingItem": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "startProfilingList": {
      "type": "object",
      "properties": {
        "startResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/startProfilingItem"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of start results"
        }
      }
    },
    "tenant": {
      "type": "object",
      "properties": {
        "console_image": {
          "type": "string"
        },
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "deletion_date": {
          "type": "string"
        },
        "enable_prometheus": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "total_size": {
          "type": "integer",
          "format": "int64"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "tenantList": {
      "type": "object",
      "properties": {
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "deletion_date": {
          "type": "string"
        },
        "instance_count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "total_size": {
          "type": "integer"
        },
        "volume_count": {
          "type": "integer"
        },
        "zone_count": {
          "type": "integer"
        }
      }
    },
    "tenantUsage": {
      "type": "object",
      "properties": {
        "disk_used": {
          "type": "integer",
          "format": "int64"
        },
        "used": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "tlsConfiguration": {
      "type": "object",
      "properties": {
        "console": {
          "type": "object",
          "$ref": "#/definitions/keyPairConfiguration"
        },
        "minio": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/keyPairConfiguration"
          }
        }
      }
    },
    "updateGroupRequest": {
      "type": "object",
      "required": [
        "members",
        "status"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "updateTenantRequest": {
      "type": "object",
      "properties": {
        "console_image": {
          "type": "string",
          "pattern": "^((.*?)/(.*?):(.+))$"
        },
        "enable_prometheus": {
          "type": "boolean"
        },
        "image": {
          "type": "string",
          "pattern": "^((.*?)/(.*?):(.+))$"
        },
        "image_pull_secret": {
          "type": "string"
        },
        "image_registry": {
          "$ref": "#/definitions/imageRegistry"
        }
      }
    },
    "updateUser": {
      "type": "object",
      "required": [
        "status",
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "updateUserGroups": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "memberOf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policy": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "vaultConfiguration": {
      "type": "object",
      "required": [
        "endpoint",
        "approle"
      ],
      "properties": {
        "approle": {
          "type": "object",
          "required": [
            "id",
            "secret"
          ],
          "properties": {
            "engine": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "retry": {
              "type": "integer",
              "format": "int64"
            },
            "secret": {
              "type": "string"
            }
          }
        },
        "endpoint": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "properties": {
            "ping": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "tls": {
          "type": "object",
          "properties": {
            "ca": {
              "type": "string"
            },
            "crt": {
              "type": "string"
            },
            "key": {
              "type": "string"
            }
          }
        }
      }
    },
    "zone": {
      "type": "object",
      "required": [
        "servers",
        "volumes_per_server",
        "volume_configuration"
      ],
      "properties": {
        "affinity": {
          "$ref": "#/definitions/zoneAffinity"
        },
        "name": {
          "type": "string"
        },
        "node_selector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resources": {
          "$ref": "#/definitions/zoneResources"
        },
        "servers": {
          "type": "integer"
        },
        "tolerations": {
          "$ref": "#/definitions/zoneTolerations"
        },
        "volume_configuration": {
          "type": "object",
          "required": [
            "size"
          ],
          "properties": {
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "size": {
              "type": "integer"
            },
            "storage_class_name": {
              "type": "string"
            }
          }
        },
        "volumes_per_server": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "zoneAffinity": {
      "description": "If specified, affinity will define the pod's scheduling constraints",
      "type": "object",
      "properties": {
        "nodeAffinity": {
          "description": "Describes node affinity scheduling rules for the pod.",
          "type": "object",
          "properties": {
            "preferredDuringSchedulingIgnoredDuringExecution": {
              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
              "type": "array",
              "items": {
                "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                "type": "object",
                "required": [
                  "preference",
                  "weight"
                ],
                "properties": {
                  "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "type": "object",
                    "$ref": "#/definitions/nodeSelectorTerm"
                  },
                  "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
              "type": "object",
              "required": [
                "nodeSelectorTerms"
              ],
              "properties": {
                "nodeSelectorTerms": {
                  "description": "Required. A list of node selector terms. The terms are ORed.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/nodeSelectorTerm"
                  }
                }
              }
            }
          }
        },
        "podAffinity": {
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
          "type": "object",
          "properties": {
            "preferredDuringSchedulingIgnoredDuringExecution": {
              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
              "type": "array",
              "items": {
                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                "type": "object",
                "required": [
                  "podAffinityTerm",
                  "weight"
                ],
                "properties": {
                  "podAffinityTerm": {
                    "$ref": "#/definitions/podAffinityTerm"
                  },
                  "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/podAffinityTerm"
              }
            }
          }
        },
        "podAntiAffinity": {
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
          "type": "object",
          "properties": {
            "preferredDuringSchedulingIgnoredDuringExecution": {
              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
              "type": "array",
              "items": {
                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                "type": "object",
                "required": [
                  "podAffinityTerm",
                  "weight"
                ],
                "properties": {
                  "podAffinityTerm": {
                    "$ref": "#/definitions/podAffinityTerm"
                  },
                  "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/podAffinityTerm"
              }
            }
          }
        }
      }
    },
    "zoneResources": {
      "description": "If provided, use these requests and limit for cpu/memory resource allocation",
      "type": "object",
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "zoneTolerationSeconds": {
      "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
      "type": "object",
      "required": [
        "seconds"
      ],
      "properties": {
        "seconds": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "zoneTolerations": {
      "description": "Tolerations allows users to set entries like effect, key, operator, value.",
      "type": "array",
      "items": {
        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
        "type": "object",
        "properties": {
          "effect": {
            "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
            "type": "string"
          },
          "key": {
            "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
            "type": "string"
          },
          "operator": {
            "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
            "type": "string"
          },
          "tolerationSeconds": {
            "$ref": "#/definitions/zoneTolerationSeconds"
          },
          "value": {
            "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
            "type": "string"
          }
        }
      }
    },
    "zoneUpdateRequest": {
      "type": "object",
      "required": [
        "zones"
      ],
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://min.io",
      "tokenUrl": "http://min.io"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "ws"
  ],
  "swagger": "2.0",
  "info": {
    "title": "MinIO Console Server",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/admin/arns": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Returns a list of active ARNs in the instance",
        "operationId": "ArnList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/arnsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/admin/info": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Returns information about the deployment",
        "operationId": "AdminInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/adminInfoResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/admin/notification_endpoints": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Returns a list of active notification endpoints",
        "operationId": "NotificationEndpointList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/notifEndpointResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Allows to configure a new notification endpoint",
        "operationId": "AddNotificationEndpoint",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationEndpoint"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/notificationEndpoint"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Buckets",
        "operationId": "ListBuckets",
        "parameters": [
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listBucketsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Make bucket",
        "operationId": "MakeBucket",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/makeBucketRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/encryption/disable": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Disable bucket encryption.",
        "operationId": "DisableBucketEncryption",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/encryption/enable": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Enable bucket encryption.",
        "operationId": "EnableBucketEncryption",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bucketEncryptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/encryption/info": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Get bucket encryption information.",
        "operationId": "GetBucketEncryptionInfo",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucketEncryptionInfo"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/events": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Bucket Events",
        "operationId": "ListBucketEvents",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listBucketEventsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Create Bucket Event",
        "operationId": "CreateBucketEvent",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bucketEventRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/events/{arn}": {
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Bucket Event",
        "operationId": "DeleteBucketEvent",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "arn",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notificationDeleteRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Objects",
        "operationId": "ListObjects",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "recursive",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "with_versions",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listObjectsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Object",
        "operationId": "DeleteObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "recursive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/download": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "UserAPI"
        ],
        "summary": "Download Object",
        "operationId": "Download Object",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/legalhold": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Put Object's legalhold status",
        "operationId": "PutObjectLegalHold",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putObjectLegalHoldRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/retention": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Put Object's retention status",
        "operationId": "PutObjectRetention",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putObjectRetentionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Object retention from an object",
        "operationId": "DeleteObjectRetention",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/share": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Shares an Object on a url",
        "operationId": "ShareObject",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "expires",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/tags": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Put Object's tags",
        "operationId": "PutObjectTags",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "version_id",
            "in": "query",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putObjectTagsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/objects/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "UserAPI"
        ],
        "summary": "Uploads an Object.",
        "parameters": [
          {
            "type": "file",
            "name": "upfile",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "prefix",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/replication": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Replication",
        "operationId": "GetBucketReplication",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucketReplicationResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Add Bucket Replication",
        "operationId": "AddBucketReplication",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addBucketReplication"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/retention": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Set Bucket's retention config",
        "operationId": "SetBucketRetentionConfig",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putBucketRetentionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{bucket_name}/versioning": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Versioning",
        "operationId": "GetBucketVersioning",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucketVersioningResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Set Bucket Versioning",
        "operationId": "SetBucketVersioning",
        "parameters": [
          {
            "type": "string",
            "name": "bucket_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setBucketVersioning"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{name}": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Info",
        "operationId": "BucketInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Bucket",
        "operationId": "DeleteBucket",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{name}/quota": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Get Bucket Quota",
        "operationId": "GetBucketQuota",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listObjectsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Quota",
        "operationId": "SetBucketQuota",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setBucketQuota"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/buckets/{name}/set-policy": {
      "put": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Bucket Set Policy",
        "operationId": "BucketSetPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setBucketPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/bucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/cluster/max-allocatable-memory": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get maximum allocatable memory for given number of nodes",
        "operationId": "GetMaxAllocatableMem",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "name": "num_nodes",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/maxAllocatableMemResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/configs": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Configurations",
        "operationId": "ListConfig",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listConfigResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/configs/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Configuration info",
        "operationId": "ConfigInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/configuration"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Set Configuration",
        "operationId": "SetConfig",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setConfigRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/get-parity/{nodes}/{disksPerNode}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Gets parity by sending number of nodes \u0026 number of disks",
        "operationId": "GetParity",
        "parameters": [
          {
            "minimum": 2,
            "type": "integer",
            "name": "nodes",
            "in": "path",
            "required": true
          },
          {
            "minimum": 1,
            "type": "integer",
            "name": "disksPerNode",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/parityResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Groups",
        "operationId": "ListGroups",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listGroupsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Add Group",
        "operationId": "AddGroup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/groups/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Group info",
        "operationId": "GroupInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update Group Members or Status",
        "operationId": "UpdateGroup",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateGroupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/group"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Remove group",
        "operationId": "RemoveGroup",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login": {
      "get": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Returns login strategy, form or sso.",
        "operationId": "LoginDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loginDetails"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Login to Console",
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login/oauth2/auth": {
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Identity Provider oauth2 callback endpoint.",
        "operationId": "LoginOauth2Auth",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginOauth2AuthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login/operator": {
      "post": {
        "security": [],
        "tags": [
          "UserAPI"
        ],
        "summary": "Login to Operator Console.",
        "operationId": "LoginOperator",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loginOperatorRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful login.",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Logout from Console.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/resourcequotas/{resource-quota-name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get Resource Quota",
        "operationId": "GetResourceQuota",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resource-quota-name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/resourceQuota"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Tenants by Namespace",
        "operationId": "ListTenants",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listTenantsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Info",
        "operationId": "TenantInfo",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenant"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update Tenant",
        "operationId": "UpdateTenant",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateTenantRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Delete tenant and underlying pvcs",
        "operationId": "DeleteTenant",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/deleteTenantRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/certificates": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Update Certificates",
        "operationId": "TenantUpdateCertificate",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tlsConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/encryption": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Update Encryption",
        "operationId": "TenantUpdateEncryption",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/encryptionConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/usage": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get Usage For The Tenant",
        "operationId": "GetTenantUsage",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenantUsage"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/namespaces/{namespace}/tenants/{tenant}/zones": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Update Zones",
        "operationId": "TenantUpdateZones",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zoneUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tenant"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Tenant Add Zone",
        "operationId": "TenantAddZone",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/zone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/operator/{namespace}/{tenant}/buckets": {
      "get": {
        "tags": [
          "OperatorAPI"
        ],
        "summary": "List Buckets for Operator Console",
        "operationId": "OperatorListBuckets",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tenant",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listBucketsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Policies",
        "operationId": "ListPolicies",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listPoliciesResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Add Policy",
        "operationId": "AddPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addPolicyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/policies/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Policy info",
        "operationId": "PolicyInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/policy"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Remove policy",
        "operationId": "RemovePolicy",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/profiling/start": {
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Start recording profile data",
        "operationId": "ProfilingStart",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profilingStartRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/startProfilingList"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/profiling/stop": {
      "post": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "AdminAPI"
        ],
        "summary": "Stop and download profile data",
        "operationId": "ProfilingStop",
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/remote-buckets": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List Remote Buckets",
        "operationId": "ListRemoteBuckets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listRemoteBucketsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Add Remote Bucket",
        "operationId": "AddRemoteBucket",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createRemoteBucket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/remote-buckets/{name}": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Remote Bucket Details",
        "operationId": "RemoteBucketDetails",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/remoteBucket"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/remote-buckets/{source-bucket-name}/{arn}": {
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Remote Bucket",
        "operationId": "DeleteRemoteBucket",
        "parameters": [
          {
            "type": "string",
            "name": "source-bucket-name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "arn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/service-accounts": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "List User's Service Accounts",
        "operationId": "ListUserServiceAccounts",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceAccounts"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Create Service Account",
        "operationId": "CreateServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/serviceAccountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/serviceAccountCreds"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/service-accounts/{access_key}": {
      "delete": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Delete Service Account",
        "operationId": "DeleteServiceAccount",
        "parameters": [
          {
            "type": "string",
            "name": "access_key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/service/restart": {
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Restart Service",
        "operationId": "RestartService",
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "tags": [
          "UserAPI"
        ],
        "summary": "Endpoint to check if your session is still valid",
        "operationId": "SessionCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sessionResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/set-policy-multi/{name}": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Set policy to multiple users/groups",
        "operationId": "SetPolicyMultiple",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setPolicyMultipleRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/set-policy/{name}": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Set policy",
        "operationId": "SetPolicy",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/setPolicyRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/tenants": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Tenant of All Namespaces",
        "operationId": "ListAllTenants",
        "parameters": [
          {
            "type": "string",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listTenantsResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Create Tenant",
        "operationId": "CreateTenant",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createTenantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/createTenantResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "List Users",
        "operationId": "ListUsers",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/listUsersResponse"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Add User",
        "operationId": "AddUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users-groups-bulk": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Bulk functionality to Add Users to Groups",
        "operationId": "BulkUpdateUsersGroups",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bulkUserGroups"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{name}": {
      "get": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Get User Info",
        "operationId": "GetUserInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update User Info",
        "operationId": "UpdateUserInfo",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Remove user",
        "operationId": "RemoveUser",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{name}/groups": {
      "put": {
        "tags": [
          "AdminAPI"
        ],
        "summary": "Update Groups for a user",
        "operationId": "UpdateUserGroups",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUserGroups"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AwsConfigurationSecretsmanager": {
      "type": "object",
      "required": [
        "endpoint",
        "region",
        "credentials"
      ],
      "properties": {
        "credentials": {
          "type": "object",
          "required": [
            "accesskey",
            "secretkey"
          ],
          "properties": {
            "accesskey": {
              "type": "string"
            },
            "secretkey": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "endpoint": {
          "type": "string"
        },
        "kmskey": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      }
    },
    "AwsConfigurationSecretsmanagerCredentials": {
      "type": "object",
      "required": [
        "accesskey",
        "secretkey"
      ],
      "properties": {
        "accesskey": {
          "type": "string"
        },
        "secretkey": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "CreateTenantResponseConsole": {
      "type": "object",
      "properties": {
        "access_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        }
      }
    },
    "GemaltoConfigurationKeysecure": {
      "type": "object",
      "required": [
        "endpoint",
        "credentials"
      ],
      "properties": {
        "credentials": {
          "type": "object",
          "required": [
            "token",
            "domain"
          ],
          "properties": {
            "domain": {
              "type": "string"
            },
            "retry": {
              "type": "integer",
              "format": "int64"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "endpoint": {
          "type": "string"
        },
        "tls": {
          "type": "object",
          "required": [
            "ca"
          ],
          "properties": {
            "ca": {
              "type": "string"
            }
          }
        }
      }
    },
    "GemaltoConfigurationKeysecureCredentials": {
      "type": "object",
      "required": [
        "token",
        "domain"
      ],
      "properties": {
        "domain": {
          "type": "string"
        },
        "retry": {
          "type": "integer",
          "format": "int64"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "GemaltoConfigurationKeysecureTLS": {
      "type": "object",
      "required": [
        "ca"
      ],
      "properties": {
        "ca": {
          "type": "string"
        }
      }
    },
    "IdpConfigurationActiveDirectory": {
      "type": "object",
      "required": [
        "url",
        "username_format",
        "user_search_filter"
      ],
      "properties": {
        "group_name_attribute": {
          "type": "string"
        },
        "group_search_base_dn": {
          "type": "string"
        },
        "group_search_filter": {
          "type": "string"
        },
        "server_insecure": {
          "type": "boolean"
        },
        "skip_tls_verification": {
          "type": "boolean"
        },
        "url": {
          "type": "string"
        },
        "user_search_filter": {
          "type": "string"
        },
        "username_format": {
          "type": "string"
        }
      }
    },
    "IdpConfigurationOidc": {
      "type": "object",
      "required": [
        "url",
        "client_id",
        "secret_id"
      ],
      "properties": {
        "client_id": {
          "type": "string"
        },
        "secret_id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "NodeSelectorTermMatchExpressionsItems0": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NodeSelectorTermMatchFieldsItems0": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PodAffinityTermLabelSelector": {
      "description": "A label query over a set of resources, in this case pods.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PodAffinityTermLabelSelectorMatchExpressionsItems0"
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PodAffinityTermLabelSelectorMatchExpressionsItems0": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VaultConfigurationApprole": {
      "type": "object",
      "required": [
        "id",
        "secret"
      ],
      "properties": {
        "engine": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "retry": {
          "type": "integer",
          "format": "int64"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "VaultConfigurationStatus": {
      "type": "object",
      "properties": {
        "ping": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "VaultConfigurationTLS": {
      "type": "object",
      "properties": {
        "ca": {
          "type": "string"
        },
        "crt": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "ZoneAffinityNodeAffinity": {
      "description": "Describes node affinity scheduling rules for the pod.",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
          "type": "object",
          "required": [
            "nodeSelectorTerms"
          ],
          "properties": {
            "nodeSelectorTerms": {
              "description": "Required. A list of node selector terms. The terms are ORed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/nodeSelectorTerm"
              }
            }
          }
        }
      }
    },
    "ZoneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "type": "object",
      "required": [
        "preference",
        "weight"
      ],
      "properties": {
        "preference": {
          "description": "A node selector term, associated with the corresponding weight.",
          "type": "object",
          "$ref": "#/definitions/nodeSelectorTerm"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ZoneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution": {
      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
      "type": "object",
      "required": [
        "nodeSelectorTerms"
      ],
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodeSelectorTerm"
          }
        }
      }
    },
    "ZoneAffinityPodAffinity": {
      "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/podAffinityTerm"
          }
        }
      }
    },
    "ZoneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "type": "object",
      "required": [
        "podAffinityTerm",
        "weight"
      ],
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/podAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ZoneAffinityPodAntiAffinity": {
      "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
      "type": "object",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/podAffinityTerm"
          }
        }
      }
    },
    "ZoneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "type": "object",
      "required": [
        "podAffinityTerm",
        "weight"
      ],
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/podAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ZoneTolerationsItems0": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "type": "object",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "$ref": "#/definitions/zoneTolerationSeconds"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      }
    },
    "ZoneVolumeConfiguration": {
      "type": "object",
      "required": [
        "size"
      ],
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "size": {
          "type": "integer"
        },
        "storage_class_name": {
          "type": "string"
        }
      }
    },
    "addBucketReplication": {
      "type": "object",
      "properties": {
        "arn": {
          "type": "string"
        },
        "destination_bucket": {
          "type": "string"
        }
      }
    },
    "addGroupRequest": {
      "type": "object",
      "required": [
        "group",
        "members"
      ],
      "properties": {
        "group": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "addPolicyRequest": {
      "type": "object",
      "required": [
        "name",
        "policy"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        }
      }
    },
    "addUserRequest": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey",
        "groups"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "adminInfoResponse": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "integer"
        },
        "objects": {
          "type": "integer"
        },
        "usage": {
          "type": "integer"
        }
      }
    },
    "arnsResponse": {
      "type": "object",
      "properties": {
        "arns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "awsConfiguration": {
      "type": "object",
      "required": [
        "secretsmanager"
      ],
      "properties": {
        "secretsmanager": {
          "type": "object",
          "required": [
            "endpoint",
            "region",
            "credentials"
          ],
          "properties": {
            "credentials": {
              "type": "object",
              "required": [
                "accesskey",
                "secretkey"
              ],
              "properties": {
                "accesskey": {
                  "type": "string"
                },
                "secretkey": {
                  "type": "string"
                },
                "token": {
                  "type": "string"
                }
              }
            },
            "endpoint": {
              "type": "string"
            },
            "kmskey": {
              "type": "string"
            },
            "region": {
              "type": "string"
            }
          }
        }
      }
    },
    "bucket": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/bucketAccess"
        },
        "creation_date": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 3
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "bucketAccess": {
      "type": "string",
      "default": "PRIVATE",
      "enum": [
        "PRIVATE",
        "PUBLIC",
        "CUSTOM"
      ]
    },
    "bucketEncryptionInfo": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string"
        },
        "kmsMasterKeyID": {
          "type": "string"
        }
      }
    },
    "bucketEncryptionRequest": {
      "type": "object",
      "properties": {
        "encType": {
          "$ref": "#/definitions/bucketEncryptionType"
        },
        "kmsKeyID": {
          "type": "string"
        }
      }
    },
    "bucketEncryptionType": {
      "type": "string",
      "default": "sse-s3",
      "enum": [
        "sse-s3",
        "sse-kms"
      ]
    },
    "bucketEventRequest": {
      "type": "object",
      "required": [
        "configuration"
      ],
      "properties": {
        "configuration": {
          "$ref": "#/definitions/notificationConfig"
        },
        "ignoreExisting": {
          "type": "boolean"
        }
      }
    },
    "bucketObject": {
      "type": "object",
      "properties": {
        "content_type": {
          "type": "string"
        },
        "expiration": {
          "type": "string"
        },
        "expiration_rule_id": {
          "type": "string"
        },
        "is_delete_marker": {
          "type": "boolean"
        },
        "is_latest": {
          "type": "boolean"
        },
        "last_modified": {
          "type": "string"
        },
        "legal_hold_status": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "retention_mode": {
          "type": "string"
        },
        "retention_until_date": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "user_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version_id": {
          "type": "string"
        }
      }
    },
    "bucketReplicationDestination": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string"
        }
      }
    },
    "bucketReplicationResponse": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bucketReplicationRule"
          }
        }
      }
    },
    "bucketReplicationRule": {
      "type": "object",
      "properties": {
        "delete_marker_replication": {
          "$ref": "#/definitions/bucketReplicationRuleMarker"
        },
        "destination": {
          "$ref": "#/definitions/bucketReplicationDestination"
        },
        "id": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ]
        }
      }
    },
    "bucketReplicationRuleMarker": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ]
        }
      }
    },
    "bucketVersioningResponse": {
      "type": "object",
      "properties": {
        "is_versioned": {
          "type": "boolean"
        }
      }
    },
    "bulkUserGroups": {
      "type": "object",
      "required": [
        "users",
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configDescription": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "configuration": {
      "type": "object",
      "properties": {
        "key_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurationKV"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "configurationKV": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "consoleConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/metadataFields"
        },
        {
          "type": "object",
          "properties": {
            "image": {
              "type": "string"
            }
          }
        }
      ]
    },
    "createRemoteBucket": {
      "required": [
        "accessKey",
        "secretKey",
        "targetURL",
        "sourceBucket",
        "targetBucket"
      ],
      "properties": {
        "accessKey": {
          "type": "string",
          "minLength": 3
        },
        "region": {
          "type": "string"
        },
        "secretKey": {
          "type": "string",
          "minLength": 8
        },
        "sourceBucket": {
          "type": "string"
        },
        "targetBucket": {
          "type": "string"
        },
        "targetURL": {
          "type": "string"
        }
      }
    },
    "createTenantRequest": {
      "type": "object",
      "required": [
        "name",
        "namespace",
        "zones"
      ],
      "properties": {
        "access_key": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "console": {
          "type": "object",
          "$ref": "#/definitions/consoleConfiguration"
        },
        "console_image": {
          "type": "string"
        },
        "enable_console": {
          "type": "boolean",
          "default": true
        },
        "enable_prometheus": {
          "type": "boolean",
          "default": false
        },
        "enable_tls": {
          "type": "boolean",
          "default": true
        },
        "encryption": {
          "type": "object",
          "$ref": "#/definitions/encryptionConfiguration"
        },
        "erasureCodingParity": {
          "type": "integer"
        },
        "idp": {
          "type": "object",
          "$ref": "#/definitions/idpConfiguration"
        },
        "image": {
          "type": "string"
        },
        "image_pull_secret": {
          "type": "string"
        },
        "image_registry": {
          "$ref": "#/definitions/imageRegistry"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mounth_path": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9-]{3,63}$"
        },
        "namespace": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        },
        "tls": {
          "type": "object",
          "$ref": "#/definitions/tlsConfiguration"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "createTenantResponse": {
      "type": "object",
      "properties": {
        "console": {
          "type": "object",
          "properties": {
            "access_key": {
              "type": "string"
            },
            "secret_key": {
              "type": "string"
            }
          }
        }
      }
    },
    "deleteTenantRequest": {
      "type": "object",
      "properties": {
        "delete_pvcs": {
          "type": "boolean"
        }
      }
    },
    "encryptionConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/metadataFields"
        },
        {
          "type": "object",
          "properties": {
            "aws": {
              "type": "object",
              "$ref": "#/definitions/awsConfiguration"
            },
            "client": {
              "type": "object",
              "$ref": "#/definitions/keyPairConfiguration"
            },
            "gemalto": {
              "type": "object",
              "$ref": "#/definitions/gemaltoConfiguration"
            },
            "image": {
              "type": "string"
            },
            "server": {
              "type": "object",
              "$ref": "#/definitions/keyPairConfiguration"
            },
            "vault": {
              "type": "object",
              "$ref": "#/definitions/vaultConfiguration"
            }
          }
        }
      ]
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "gemaltoConfiguration": {
      "type": "object",
      "required": [
        "keysecure"
      ],
      "properties": {
        "keysecure": {
          "type": "object",
          "required": [
            "endpoint",
            "credentials"
          ],
          "properties": {
            "credentials": {
              "type": "object",
              "required": [
                "token",
                "domain"
              ],
              "properties": {
                "domain": {
                  "type": "string"
                },
                "retry": {
                  "type": "integer",
                  "format": "int64"
                },
                "token": {
                  "type": "string"
                }
              }
            },
            "endpoint": {
              "type": "string"
            },
            "tls": {
              "type": "object",
              "required": [
                "ca"
              ],
              "properties": {
                "ca": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "group": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "iamEntity": {
      "type": "string",
      "pattern": "^[\\w+=,.@-]{1,64}$"
    },
    "idpConfiguration": {
      "type": "object",
      "properties": {
        "active_directory": {
          "type": "object",
          "required": [
            "url",
            "username_format",
            "user_search_filter"
          ],
          "properties": {
            "group_name_attribute": {
              "type": "string"
            },
            "group_search_base_dn": {
              "type": "string"
            },
            "group_search_filter": {
              "type": "string"
            },
            "server_insecure": {
              "type": "boolean"
            },
            "skip_tls_verification": {
              "type": "boolean"
            },
            "url": {
              "type": "string"
            },
            "user_search_filter": {
              "type": "string"
            },
            "username_format": {
              "type": "string"
            }
          }
        },
        "oidc": {
          "type": "object",
          "required": [
            "url",
            "client_id",
            "secret_id"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "secret_id": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      }
    },
    "imageRegistry": {
      "type": "object",
      "required": [
        "registry",
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "keyPairConfiguration": {
      "type": "object",
      "required": [
        "crt",
        "key"
      ],
      "properties": {
        "crt": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "listBucketEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationConfig"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of bucket events"
        }
      }
    },
    "listBucketsResponse": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "array",
          "title": "list of resulting buckets",
          "items": {
            "$ref": "#/definitions/bucket"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of buckets accessible to tenant user"
        }
      }
    },
    "listConfigResponse": {
      "type": "object",
      "properties": {
        "configurations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configDescription"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of configurations"
        }
      }
    },
    "listGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "title": "list of groups",
          "items": {
            "type": "string"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of groups"
        }
      }
    },
    "listObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "title": "list of resulting objects",
          "items": {
            "$ref": "#/definitions/bucketObject"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of objects"
        }
      }
    },
    "listPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "title": "list of policies",
          "items": {
            "$ref": "#/definitions/policy"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "total number of policies"
        }
      }
    },
    "listRemoteBucketsResponse": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "array",
          "title": "list of remote buckets",
          "items": {
            "$ref": "#/definitions/remoteBucket"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of remote buckets accessible to user"
        }
      }
    },
    "listTenantsResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "title": "list of resulting tenants",
          "items": {
            "$ref": "#/definitions/tenantList"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of tenants accessible to tenant user"
        }
      }
    },
    "listUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "title": "list of resulting users",
          "items": {
            "$ref": "#/definitions/user"
          }
        }
      }
    },
    "loginDetails": {
      "type": "object",
      "properties": {
        "loginStrategy": {
          "type": "string",
          "enum": [
            "form",
            "redirect",
            "service-account"
          ]
        },
        "redirect": {
          "type": "string"
        }
      }
    },
    "loginOauth2AuthRequest": {
      "type": "object",
      "required": [
        "state",
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "loginOperatorRequest": {
      "type": "object",
      "required": [
        "jwt"
      ],
      "properties": {
        "jwt": {
          "type": "string"
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        }
      }
    },
    "makeBucketRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "quota": {
          "$ref": "#/definitions/setBucketQuota"
        },
        "versioning": {
          "type": "boolean"
        }
      }
    },
    "maxAllocatableMemResponse": {
      "type": "object",
      "properties": {
        "max_memory": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "metadataFields": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "node_selector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "nodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "type": "object",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeSelectorTermMatchExpressionsItems0"
          }
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeSelectorTermMatchFieldsItems0"
          }
        }
      }
    },
    "nofiticationService": {
      "type": "string",
      "enum": [
        "webhook",
        "amqp",
        "kafka",
        "mqtt",
        "nats",
        "nsq",
        "mysql",
        "postgres",
        "elasticsearch",
        "redis"
      ]
    },
    "notifEndpointResponse": {
      "type": "object",
      "properties": {
        "notification_endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/notificationEndpointItem"
          }
        }
      }
    },
    "notificationConfig": {
      "type": "object",
      "required": [
        "arn"
      ],
      "properties": {
        "arn": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "title": "filter specific type of event. Defaults to all event (default: '[put,delete,get]')",
          "items": {
            "$ref": "#/definitions/notificationEventType"
          }
        },
        "id": {
          "type": "string"
        },
        "prefix": {
          "type": "string",
          "title": "filter event associated to the specified prefix"
        },
        "suffix": {
          "type": "string",
          "title": "filter event associated to the specified suffix"
        }
      }
    },
    "notificationDeleteRequest": {
      "type": "object",
      "required": [
        "events",
        "prefix",
        "suffix"
      ],
      "properties": {
        "events": {
          "type": "array",
          "title": "filter specific type of event. Defaults to all event (default: '[put,delete,get]')",
          "minLength": 1,
          "items": {
            "$ref": "#/definitions/notificationEventType"
          }
        },
        "prefix": {
          "type": "string",
          "title": "filter event associated to the specified prefix"
        },
        "suffix": {
          "type": "string",
          "title": "filter event associated to the specified suffix"
        }
      }
    },
    "notificationEndpoint": {
      "type": "object",
      "required": [
        "service",
        "account_id",
        "properties"
      ],
      "properties": {
        "account_id": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "service": {
          "$ref": "#/definitions/nofiticationService"
        }
      }
    },
    "notificationEndpointItem": {
      "type": "object",
      "properties": {
        "account_id": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/nofiticationService"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "notificationEventType": {
      "type": "string",
      "enum": [
        "put",
        "delete",
        "get"
      ]
    },
    "objectLegalHoldStatus": {
      "type": "string",
      "enum": [
        "enabled",
        "disabled"
      ]
    },
    "objectRetentionMode": {
      "type": "string",
      "enum": [
        "governance",
        "compliance"
      ]
    },
    "objectRetentionUnit": {
      "type": "string",
      "enum": [
        "days",
        "years"
      ]
    },
    "parityResponse": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "podAffinityTerm": {
      "description": "Required. A pod affinity term, associated with the corresponding weight.",
      "type": "object",
      "required": [
        "topologyKey"
      ],
      "properties": {
        "labelSelector": {
          "description": "A label query over a set of resources, in this case pods.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PodAffinityTermLabelSelectorMatchExpressionsItems0"
              }
            },
            "matchLabels": {
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "namespaces": {
          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      }
    },
    "policy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "policy": {
          "type": "string"
        }
      }
    },
    "policyEntity": {
      "type": "string",
      "default": "user",
      "enum": [
        "user",
        "group"
      ]
    },
    "principal": {
      "type": "object",
      "properties": {
        "accessKeyID": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secretAccessKey": {
          "type": "string"
        },
        "sessionToken": {
          "type": "string"
        }
      }
    },
    "profilerType": {
      "type": "string",
      "enum": [
        "cpu",
        "mem",
        "block",
        "mutex",
        "trace",
        "threads",
        "goroutines"
      ]
    },
    "profilingStartRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/profilerType"
        }
      }
    },
    "putBucketRetentionRequest": {
      "type": "object",
      "required": [
        "mode",
        "unit",
        "validity"
      ],
      "properties": {
        "mode": {
          "$ref": "#/definitions/objectRetentionMode"
        },
        "unit": {
          "$ref": "#/definitions/objectRetentionUnit"
        },
        "validity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "putObjectLegalHoldRequest": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/objectLegalHoldStatus"
        }
      }
    },
    "putObjectRetentionRequest": {
      "type": "object",
      "required": [
        "mode",
        "expires"
      ],
      "properties": {
        "expires": {
          "type": "string"
        },
        "governance_bypass": {
          "type": "boolean"
        },
        "mode": {
          "$ref": "#/definitions/objectRetentionMode"
        }
      }
    },
    "putObjectTagsRequest": {
      "type": "object",
      "properties": {
        "tags": {
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "remoteBucket": {
      "type": "object",
      "required": [
        "accessKey",
        "sourceBucket",
        "remoteARN"
      ],
      "properties": {
        "accessKey": {
          "type": "string",
          "minLength": 3
        },
        "remoteARN": {
          "type": "string"
        },
        "secretKey": {
          "type": "string",
          "minLength": 8
        },
        "service": {
          "type": "string",
          "enum": [
            "replication"
          ]
        },
        "sourceBucket": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "targetBucket": {
          "type": "string"
        },
        "targetURL": {
          "type": "string"
        }
      }
    },
    "resourceQuota": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourceQuotaElement"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "resourceQuotaElement": {
      "type": "object",
      "properties": {
        "hard": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "used": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "serviceAccountCreds": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "serviceAccountRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "type": "string",
          "title": "policy to be applied to the Service Account if any"
        }
      }
    },
    "serviceAccounts": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sessionResponse": {
      "type": "object",
      "properties": {
        "pages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "ok"
          ]
        }
      }
    },
    "setBucketPolicyRequest": {
      "type": "object",
      "required": [
        "access"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/bucketAccess"
        }
      }
    },
    "setBucketQuota": {
      "type": "object",
      "required": [
        "enabled"
      ],
      "properties": {
        "amount": {
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "quota_type": {
          "type": "string",
          "enum": [
            "fifo",
            "hard"
          ]
        }
      }
    },
    "setBucketVersioning": {
      "type": "object",
      "properties": {
        "versioning": {
          "type": "boolean"
        }
      }
    },
    "setConfigRequest": {
      "type": "object",
      "required": [
        "key_values"
      ],
      "properties": {
        "arn_resource_id": {
          "type": "string",
          "title": "Used if configuration is an event notification's target"
        },
        "key_values": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/configurationKV"
          }
        }
      }
    },
    "setPolicyMultipleRequest": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/iamEntity"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/iamEntity"
          }
        }
      }
    },
    "setPolicyRequest": {
      "type": "object",
      "required": [
        "entityType",
        "entityName"
      ],
      "properties": {
        "entityName": {
          "type": "string"
        },
        "entityType": {
          "$ref": "#/definitions/policyEntity"
        }
      }
    },
    "startProfilingItem": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "nodeName": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "startProfilingList": {
      "type": "object",
      "properties": {
        "startResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/startProfilingItem"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "number of start results"
        }
      }
    },
    "tenant": {
      "type": "object",
      "properties": {
        "console_image": {
          "type": "string"
        },
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "deletion_date": {
          "type": "string"
        },
        "enable_prometheus": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "total_size": {
          "type": "integer",
          "format": "int64"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    },
    "tenantList": {
      "type": "object",
      "properties": {
        "creation_date": {
          "type": "string"
        },
        "currentState": {
          "type": "string"
        },
        "deletion_date": {
          "type": "string"
        },
        "instance_count": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "total_size": {
          "type": "integer"
        },
        "volume_count": {
          "type": "integer"
        },
        "zone_count": {
          "type": "integer"
        }
      }
    },
    "tenantUsage": {
      "type": "object",
      "properties": {
        "disk_used": {
          "type": "integer",
          "format": "int64"
        },
        "used": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "tlsConfiguration": {
      "type": "object",
      "properties": {
        "console": {
          "type": "object",
          "$ref": "#/definitions/keyPairConfiguration"
        },
        "minio": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/keyPairConfiguration"
          }
        }
      }
    },
    "updateGroupRequest": {
      "type": "object",
      "required": [
        "members",
        "status"
      ],
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "updateTenantRequest": {
      "type": "object",
      "properties": {
        "console_image": {
          "type": "string",
          "pattern": "^((.*?)/(.*?):(.+))$"
        },
        "enable_prometheus": {
          "type": "boolean"
        },
        "image": {
          "type": "string",
          "pattern": "^((.*?)/(.*?):(.+))$"
        },
        "image_pull_secret": {
          "type": "string"
        },
        "image_registry": {
          "$ref": "#/definitions/imageRegistry"
        }
      }
    },
    "updateUser": {
      "type": "object",
      "required": [
        "status",
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      }
    },
    "updateUserGroups": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "memberOf": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policy": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "vaultConfiguration": {
      "type": "object",
      "required": [
        "endpoint",
        "approle"
      ],
      "properties": {
        "approle": {
          "type": "object",
          "required": [
            "id",
            "secret"
          ],
          "properties": {
            "engine": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "retry": {
              "type": "integer",
              "format": "int64"
            },
            "secret": {
              "type": "string"
            }
          }
        },
        "endpoint": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "properties": {
            "ping": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "tls": {
          "type": "object",
          "properties": {
            "ca": {
              "type": "string"
            },
            "crt": {
              "type": "string"
            },
            "key": {
              "type": "string"
            }
          }
        }
      }
    },
    "zone": {
      "type": "object",
      "required": [
        "servers",
        "volumes_per_server",
        "volume_configuration"
      ],
      "properties": {
        "affinity": {
          "$ref": "#/definitions/zoneAffinity"
        },
        "name": {
          "type": "string"
        },
        "node_selector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resources": {
          "$ref": "#/definitions/zoneResources"
        },
        "servers": {
          "type": "integer"
        },
        "tolerations": {
          "$ref": "#/definitions/zoneTolerations"
        },
        "volume_configuration": {
          "type": "object",
          "required": [
            "size"
          ],
          "properties": {
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "size": {
              "type": "integer"
            },
            "storage_class_name": {
              "type": "string"
            }
          }
        },
        "volumes_per_server": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "zoneAffinity": {
      "description": "If specified, affinity will define the pod's scheduling constraints",
      "type": "object",
      "properties": {
        "nodeAffinity": {
          "description": "Describes node affinity scheduling rules for the pod.",
          "type": "object",
          "properties": {
            "preferredDuringSchedulingIgnoredDuringExecution": {
              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZoneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0"
              }
            },
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
              "type": "object",
              "required": [
                "nodeSelectorTerms"
              ],
              "properties": {
                "nodeSelectorTerms": {
                  "description": "Required. A list of node selector terms. The terms are ORed.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/nodeSelectorTerm"
                  }
                }
              }
            }
          }
        },
        "podAffinity": {
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
          "type": "object",
          "properties": {
            "preferredDuringSchedulingIgnoredDuringExecution": {
              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZoneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0"
              }
            },
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/podAffinityTerm"
              }
            }
          }
        },
        "podAntiAffinity": {
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
          "type": "object",
          "properties": {
            "preferredDuringSchedulingIgnoredDuringExecution": {
              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZoneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0"
              }
            },
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/podAffinityTerm"
              }
            }
          }
        }
      }
    },
    "zoneResources": {
      "description": "If provided, use these requests and limit for cpu/memory resource allocation",
      "type": "object",
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "zoneTolerationSeconds": {
      "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
      "type": "object",
      "required": [
        "seconds"
      ],
      "properties": {
        "seconds": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "zoneTolerations": {
      "description": "Tolerations allows users to set entries like effect, key, operator, value.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ZoneTolerationsItems0"
      }
    },
    "zoneUpdateRequest": {
      "type": "object",
      "required": [
        "zones"
      ],
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/zone"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "http://min.io",
      "tokenUrl": "http://min.io"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
