{"version":3,"file":"static/js/7331.a4fdab74.chunk.js","mappings":"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","sources":["screens/Console/Common/Hooks/useApi.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Tenants/TenantDetails/DeletePod.tsx","screens/Console/Tenants/TenantDetails/PodsSummary.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n          id={\"confirm-cancel\"}\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          id={\"confirm-ok\"}\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { DialogContentText } from \"@mui/material\";\nimport { IPodListElement } from \"../ListTenants/types\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport { connect } from \"react-redux\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\n\ninterface IDeletePod {\n  deleteOpen: boolean;\n  selectedPod: IPodListElement;\n  closeDeleteModalAndRefresh: (refreshList: boolean) => any;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst DeletePod = ({\n  deleteOpen,\n  selectedPod,\n  closeDeleteModalAndRefresh,\n  setErrorSnackMessage,\n}: IDeletePod) => {\n  const [retypePod, setRetypePod] = useState(\"\");\n\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  const onConfirmDelete = () => {\n    if (retypePod !== selectedPod.name) {\n      setErrorSnackMessage({\n        errorMessage: \"Tenant name is incorrect\",\n        detailedError: \"\",\n      });\n      return;\n    }\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/namespaces/${selectedPod.namespace}/tenants/${selectedPod.tenant}/pods/${selectedPod.name}`\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Pod`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: retypePod !== selectedPod.name || deleteLoading,\n      }}\n      confirmationContent={\n        <DialogContentText>\n          To continue please type <b>{selectedPod.name}</b> in the box.\n          <Grid item xs={12}>\n            <InputBoxWrapper\n              id=\"retype-pod\"\n              name=\"retype-pod\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setRetypePod(event.target.value);\n              }}\n              label=\"\"\n              value={retypePod}\n            />\n          </Grid>\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst connector = connect(null, {\n  setErrorSnackMessage,\n});\n\nexport default connector(DeletePod);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  tableStyles,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { niceDays } from \"../../../../common/utils\";\nimport { IPodListElement } from \"../ListTenants/types\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport api from \"../../../../common/api\";\nimport TableWrapper from \"../../Common/TableWrapper/TableWrapper\";\nimport { AppState } from \"../../../../store\";\nimport { setTenantDetailsLoad } from \"../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport DeletePod from \"./DeletePod\";\nimport { Grid, InputAdornment, TextField } from \"@mui/material\";\nimport SearchIcon from \"../../../../icons/SearchIcon\";\n\ninterface IPodsSummary {\n  classes: any;\n  match: any;\n  history: any;\n  loadingTenant: boolean;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...tableStyles,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst PodsSummary = ({\n  classes,\n  match,\n  history,\n  loadingTenant,\n}: IPodsSummary) => {\n  const [pods, setPods] = useState<IPodListElement[]>([]);\n  const [loadingPods, setLoadingPods] = useState<boolean>(true);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedPod, setSelectedPod] = useState<any>(null);\n  const [filter, setFilter] = useState(\"\");\n  const tenantName = match.params[\"tenantName\"];\n  const tenantNamespace = match.params[\"tenantNamespace\"];\n\n  const podViewAction = (pod: IPodListElement) => {\n    history.push(\n      `/namespaces/${tenantNamespace}/tenants/${tenantName}/pods/${pod.name}`\n    );\n    return;\n  };\n\n  const closeDeleteModalAndRefresh = (reloadData: boolean) => {\n    setDeleteOpen(false);\n    setLoadingPods(true);\n  };\n\n  const confirmDeletePod = (pod: IPodListElement) => {\n    pod.tenant = tenantName;\n    pod.namespace = tenantNamespace;\n    setSelectedPod(pod);\n    setDeleteOpen(true);\n  };\n\n  const filteredRecords: IPodListElement[] = pods.filter((elementItem) =>\n    elementItem.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const podTableActions = [\n    { type: \"view\", onClick: podViewAction },\n    { type: \"delete\", onClick: confirmDeletePod },\n  ];\n\n  useEffect(() => {\n    if (loadingTenant) {\n      setLoadingPods(true);\n    }\n  }, [loadingTenant]);\n\n  useEffect(() => {\n    if (loadingPods) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/pods`\n        )\n        .then((result: IPodListElement[]) => {\n          for (let i = 0; i < result.length; i++) {\n            let currentTime = (Date.now() / 1000) | 0;\n            result[i].time = niceDays(\n              (currentTime - parseInt(result[i].timeCreated)).toString()\n            );\n          }\n          setPods(result);\n          setLoadingPods(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage({\n            errorMessage: \"Error loading pods\",\n            detailedError: err.detailedError,\n          });\n        });\n    }\n  }, [loadingPods, tenantName, tenantNamespace]);\n\n  return (\n    <Fragment>\n      {deleteOpen && (\n        <DeletePod\n          deleteOpen={deleteOpen}\n          selectedPod={selectedPod}\n          closeDeleteModalAndRefresh={closeDeleteModalAndRefresh}\n        />\n      )}\n      <h1 className={classes.sectionTitle}>Pods</h1>\n      <Grid item xs={12} className={classes.actionsTray}>\n        <TextField\n          placeholder=\"Search Pods\"\n          className={classes.searchField}\n          id=\"search-resource\"\n          label=\"\"\n          InputProps={{\n            disableUnderline: true,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          onChange={(e) => {\n            setFilter(e.target.value);\n          }}\n          variant=\"standard\"\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.tableBlock}>\n        <TableWrapper\n          columns={[\n            { label: \"Name\", elementKey: \"name\", width: 200 },\n            { label: \"Status\", elementKey: \"status\" },\n            { label: \"Age\", elementKey: \"time\" },\n            { label: \"Pod IP\", elementKey: \"podIP\" },\n            {\n              label: \"Restarts\",\n              elementKey: \"restarts\",\n              renderFunction: (input) => {\n                return input !== null ? input : 0;\n              },\n            },\n            { label: \"Node\", elementKey: \"node\" },\n          ]}\n          isLoading={loadingPods}\n          records={filteredRecords}\n          itemActions={podTableActions}\n          entityName=\"Pods\"\n          idField=\"name\"\n        />\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n});\n\nexport default withStyles(styles)(connector(PodsSummary));\n"],"names":["onSuccess","onError","useState","isLoading","setIsLoading","method","url","data","api","then","res","catch","err","withStyles","theme","createStyles","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","classes","title","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","titleIcon","open","event","reason","className","root","sx","padding","titleText","closeContainer","closeButton","onClick","disableRipple","size","content","actions","cancelButton","disabled","type","variant","color","id","confirmButton","loading","loadingPosition","startIcon","autoFocus","connect","setErrorSnackMessage","deleteOpen","selectedPod","closeDeleteModalAndRefresh","retypePod","setRetypePod","useApi","deleteLoading","invokeDeleteApi","ConfirmDialog","name","namespace","tenant","errorMessage","detailedError","DialogContentText","Grid","item","xs","InputBoxWrapper","onChange","target","value","label","connector","state","loadingTenant","tenants","tenantDetails","tenantDetailsStyles","tableStyles","containerForHeader","spacing","match","history","pods","setPods","loadingPods","setLoadingPods","setDeleteOpen","setSelectedPod","filter","setFilter","tenantName","params","tenantNamespace","filteredRecords","elementItem","toLowerCase","includes","podTableActions","pod","push","useEffect","result","i","length","currentTime","Date","now","time","niceDays","parseInt","timeCreated","toString","Fragment","reloadData","sectionTitle","actionsTray","TextField","placeholder","searchField","InputProps","disableUnderline","startAdornment","InputAdornment","position","SearchIcon","e","tableBlock","TableWrapper","columns","elementKey","width","renderFunction","input","records","itemActions","entityName","idField"],"sourceRoot":""}