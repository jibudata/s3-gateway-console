{"version":3,"file":"static/js/9567.a4177fb1.chunk.js","mappings":"iJAwDA,IArCwB,SAACA,GACvB,OACE,iCACEC,MAAM,6BACNC,UAAS,WACTC,KAAM,eACNC,QAAQ,eACJJ,GALN,eAOE,2BACE,qBAAUK,GAAG,qBAAb,UACE,iBACE,YAAU,sBACVF,KAAK,UACLG,EAAE,6BAIR,eACE,YAAU,aACVC,UAAU,kBACVC,SAAS,2BACTL,KAAK,UAJP,WAME,iBACE,YAAU,eACVG,EAAE,kZAEJ,iBACE,YAAU,eACVA,EAAE,kQAGN,iBAAM,YAAU,sBAAqBH,KAAK,OAAOG,EAAE,uBAGxD,C,oNCyFD,KAAeG,EAAAA,EAAAA,IAtGA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,UACRC,EAAAA,IAFQ,GAsGf,EAjG0B,SAAC,GASN,IARnBC,EAQkB,EARlBA,MAQkB,IAPlBC,MAAAA,OAOkB,MAPV,GAOU,MANlBC,QAAAA,OAMkB,MANR,GAMQ,MALlBC,KAAAA,OAKkB,MALX,OAKW,EAJlBC,EAIkB,EAJlBA,QACAC,EAGkB,EAHlBA,eAGkB,KAFlBC,SAEkB,EADlBC,cAAAA,OACkB,MADH,QACG,EAClB,OACE,UAAC,WAAD,YACE,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,CAAEC,aAAc,QAAvC,UACE,UAAC,IAAD,CAAYtB,UAAWe,EAAQQ,WAA/B,WACE,0BAAOX,IACM,KAAZC,IACC,gBAAKb,UAAWe,EAAQS,iBAAxB,UACE,SAAC,IAAD,CAASC,MAAOZ,EAASa,UAAU,YAAnC,UACE,gBAAK1B,UAAWe,EAAQF,QAAxB,UACE,SAAC,IAAD,gBAQZ,SAAC,KAAD,CACEM,MAAI,EACJC,GAAI,GACJO,MAAO,CACLC,UAAWV,EACXW,SAAU,OACVC,OAAQ,qBANZ,UASE,SAAC,IAAD,CACEnB,MAAOA,EACPoB,SAAUjB,EACVkB,SAAU,SAACC,GACTjB,EAAe,KAAM,KAAMiB,EAAIC,OAAOvB,MACvC,EACDR,GAAI,eACJgC,QAAS,GACTR,MAAO,CACLS,SAAU,GACVC,gBAAiB,UACjBC,WACE,+EACFC,UAAWrB,GAAgB,UAC3BsB,MAAO,gBAIb,SAAC,KAAD,CACErB,MAAI,EACJC,GAAI,GACJC,GAAI,CACFoB,WAAY,UACZX,OAAQ,oBACRY,UAAW,GANf,UASE,SAAC,IAAD,CACErB,GAAI,CACFsB,QAAS,OACTC,WAAY,SACZT,QAAS,MACTU,aAAc,MACdC,eAAgB,WAChB,WAAY,CACVC,OAAQ,OACRC,MAAO,OACPb,QAAS,MACT,aAAc,CACZc,WAAY,OAZpB,UAiBE,SAAC,IAAD,CAAgBpC,QAAS,oBAAzB,UACE,SAAC,IAAD,CAAiBqC,KAAMvC,EAAvB,UACE,SAAC,IAAD,CACEwC,KAAM,SACNhD,GAAI,mBACJiD,MAAM,SAAC,MAAD,IACNZ,MAAO,UACPa,QAAS,sBAQxB,G,oPCyCD,GAAe9C,EAAAA,EAAAA,IAvIA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kCACRC,EAAAA,IACA4C,EAAAA,IAFO,IAGVC,YAAa,CACXC,SAAU,IACVC,WAAY,SACZ5B,SAAU,SACV6B,aAAc,WACdC,UAAW,GAEbC,eAAgB,CACdC,OAAQ,SACR,4BAA6B,CAC3BC,SAAU,YAGXC,EAAAA,IAhBO,IAiBVxC,YAAW,kBACNb,EAAAA,GAAAA,YADK,IAERsD,WAAY,WAEdC,kBAAiB,kBACZvD,EAAAA,GAAAA,kBADW,IAEd8C,SAAU,OACV1B,OAAQ,oBACRoC,YAAa,WA1BJ,GAuIf,EAzGqB,SAAC,GAYA,IAXpBtD,EAWmB,EAXnBA,MACAG,EAUmB,EAVnBA,QACAiB,EASmB,EATnBA,SACA7B,EAQmB,EARnBA,GACAgE,EAOmB,EAPnBA,KAOmB,IANnBC,SAAAA,OAMmB,aALnBvD,QAAAA,OAKmB,MALT,GAKS,EAJnBwD,EAImB,EAJnBA,SAImB,IAHnBC,MAAAA,OAGmB,MAHX,GAGW,MAFnBC,OAAAA,OAEmB,MAFV,GAEU,MADnB5D,MAAAA,OACmB,MADX,GACW,EACnB,GAA4C6D,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAyBC,EAAzB,KAEA,OACE,SAAC,WAAD,WACE,UAACC,EAAA,GAAD,CACExD,MAAI,EACJC,GAAI,GACJpB,UAAS,UAAKe,EAAQ6C,eAAb,YAA+B7C,EAAQ6D,YAAvC,YACP7D,EAAQ8D,eADD,YAEK,KAAVP,EAAevD,EAAQ+D,aAAe,IAL5C,UAOa,KAAVlE,IACC,UAACmE,EAAA,EAAD,CACEC,QAAS7E,EACTH,UAAS,UAAe,KAAVsE,EAAevD,EAAQkE,gBAAkB,GAA9C,YACPlE,EAAQQ,YAHZ,WAME,4BACGX,EACAyD,EAAW,IAAM,MAEP,KAAZxD,IACC,gBAAKb,UAAWe,EAAQS,iBAAxB,UACE,SAAC0D,EAAA,EAAD,CAASzD,MAAOZ,EAASa,UAAU,YAAnC,UACE,gBAAK1B,UAAWe,EAAQF,QAAxB,UACE,SAACsE,EAAA,EAAD,aAQXV,GAA8B,KAAV9D,GACnB,iBAAKX,UAAWe,EAAQkD,iBAAxB,WACE,kBACEd,KAAK,OACLgB,KAAMA,EACNnC,SAAU,SAACoD,GACT,IAAMC,EAAWC,IAAIF,EAAG,uBAAwB,KCnHrC,SAACG,EAAUC,GACpC,IAAMC,EAAOF,EAAIrD,OAAOwD,MAAM,GACxBC,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GAErBE,EAAOG,OAAS,WAGd,IAAMC,EAAaJ,EAAOK,OAC1B,GAAID,EAAY,CACd,IAAME,EAAYF,EAAWG,WAAWC,MAAM,WAErB,IAArBF,EAAUG,QACZZ,EAASS,EAAU,GAEtB,CACF,CACF,CDmGeI,CAAYjB,GAAG,SAACkB,GACdtE,EAASsE,EAAMjB,EAChB,GACF,EACDd,OAAQA,EACRF,SAAUA,EACVD,SAAUA,EACVpE,UAAWe,EAAQ6C,iBAGV,KAAVjD,IACC,SAAC4F,EAAA,EAAD,CACE/D,MAAM,UACN,aAAW,iBACXgE,UAAU,OACVC,QAAS,WACP/B,GAAgB,EACjB,EACDgC,eAAe,EACfC,oBAAoB,EACpBC,KAAK,QATP,UAWE,SAACC,EAAA,EAAD,MAIO,KAAVvC,IAAgB,SAACwC,EAAA,EAAD,CAAYC,aAAczC,QAG7C,iBAAKtE,UAAWe,EAAQiG,aAAxB,WACE,gBAAKhH,UAAWe,EAAQwC,YAAxB,SAAsC5C,KACtC,SAAC4F,EAAA,EAAD,CACE/D,MAAM,UACN,aAAW,iBACXgE,UAAU,OACVC,QAAS,WACP/B,GAAgB,EACjB,EACDgC,eAAe,EACfC,oBAAoB,EACpBC,KAAK,QATP,UAWE,SAACK,EAAA,EAAD,aAOb,G,yOEtBD,KAAe1G,EAAAA,EAAAA,IAzHA,SAACC,GAAD,OACbC,EAAAA,EAAAA,GAAa,CACXyG,gBAAiB,CACfC,MAAO,OACPC,WAAY,iBACZvE,aAAc,mBAEhBwE,gBAAiB,CAAEF,MAAO,SAC1BG,mBAAoB,CAClBvE,OAAQ,OACRc,OAAQ,EACR/B,OAAQ,oBACRyF,WAAY,OACZC,aAAc,EACd,OAAQ,CACNxD,WAAY,QAEd,QAAS,CACP7B,QAAS,IAGbsF,kBAAmB,CACjBjF,MAAO,UACPG,QAAS,OACTC,WAAY,SACZ8E,SAAU,OACVpG,aAAc,EACd,WAAY,CACV0C,WAAY,SAGhB2D,mBAAoB,CAClBnF,MAAO,UACP,WAAY,CACVwB,WAAY,SAGhB4D,iBAAkB,CAChB9F,OAAQ,oBACR0F,aAAc,EACdhF,MAAO,UACPqF,cAAe,YACfC,UAAW,SACXlG,UAAW,IACXN,aAAc,IAEhByG,qBAAsB,CACpB5F,QAAS,WACT6F,aAAc,oBACd,QAAS,CACPC,SAAU,GAEZ,QAAS,CACP7F,SAAU,GACV8F,YAAa,GACbC,QAAS,IAEX,SAAU,CACR/F,SAAU,MA1DH,GAyHf,EApDuB,SAAC,GAIA,IAHtBrB,EAGqB,EAHrBA,QACAsG,EAEqB,EAFrBA,gBAEqB,IADrBe,SAAAA,OACqB,MADV,WAAQ,EACE,EACfC,EAAehB,EAAgBiB,SAAW,GAChD,OACE,SAAC,IAAD,CAEEjF,QAAQ,WACRb,MAAM,UACNxC,UAAWe,EAAQuG,mBACnB1G,OACE,UAAC,IAAD,YACE,SAAC,KAAD,CAAMO,MAAI,EAACC,GAAI,EAAGpB,UAAWe,EAAQmG,gBAArC,UACE,SAAC,IAAD,OAEF,UAAC,KAAD,CAAM/F,MAAI,EAACC,GAAI,GAAIpB,UAAWe,EAAQsG,gBAAtC,WACE,SAAC,IAAD,CAAYhE,QAAQ,YAAYV,QAAQ,QAAQ4F,cAAY,EAA5D,SACGlB,EAAgBlD,QAEnB,UAAC,IAAD,CAAKnE,UAAWe,EAAQ0G,kBAAxB,WACE,SAAC,IAAD,CAAejF,MAAM,UAAUJ,SAAS,UAD1C,QAGE,iBAAMpC,UAAW,QAAjB,0BACA,2BACE,SAAC,IAAD,CAAQwI,OAAO,aAAf,SAA6BnB,EAAgBoB,eAGjD,SAAC,IAAD,KACA,mBACA,SAAC,IAAD,CAAKzI,UAAWe,EAAQ4G,mBAAxB,UACE,iBAAM3H,UAAU,QAAhB,mBAA4BqI,EAAajC,OAAzC,qBAEF,SAAC,IAAD,CAAMpG,UAAWe,EAAQ6G,iBAAzB,SACGS,EAAaK,KAAI,SAACC,GAAD,OAChB,UAAC,KAAD,CAAU3I,UAAWe,EAAQgH,qBAA7B,WACE,SAAC,IAAD,WACE,SAAC,IAAD,OAEF,SAAC,IAAD,CAAca,QAASD,MALT,YAY1BP,SAAUA,GAvCLf,EAAgBlD,KA0C1B,G,gWC4mDD,WAAe5D,EAAAA,EAAAA,IAvsDA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,0DACRoI,EAAAA,IACAC,EAAAA,IAFO,IAGVC,KAAM,CAAE/E,WAAY,QACpBgF,OAAQ,CAAEC,UAAW,UACrBC,SAAU,CACRhB,YAAa,GACbvF,QAAS,OACT,cAAe,CACbsF,SAAU,IAGZ,4BAA6B,CAC3BnE,SAAU,aAGXqF,EAAAA,EAAAA,IAAmB3I,EAAM4I,QAAQ,KACjCC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IArBQ,GAusDf,EA/qDyB,SAAC,GAAoC,IAAD,qEAAjCzI,GAAiC,EAAjCA,QACpB0I,IAAWC,EAAAA,EAAAA,MAEXC,IAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAqBA,EAAMC,QAAQC,UAAnC,IAC3B,IAAwDvF,EAAAA,EAAAA,UAAiB,GAAzE,iBAAOwF,GAAP,MAA6BC,GAA7B,MACA,IACEzF,EAAAA,EAAAA,UAAiB,IADnB,iBAAO0F,GAAP,MAAmCC,GAAnC,MAEA,IAAkD3F,EAAAA,EAAAA,WAAkB,GAApE,iBAAO4F,GAAP,MAA0BC,GAA1B,MACA,IAA4C7F,EAAAA,EAAAA,UAAiB,SAA7D,iBAAO8F,GAAP,MAAuBC,GAAvB,MACA,IAAgC/F,EAAAA,EAAAA,UAAiB,KAAjD,iBAAOgG,GAAP,MAAiBC,GAAjB,MACA,IAA0BjG,EAAAA,EAAAA,UAAiB,IAA3C,iBAAOkG,GAAP,MAAcC,GAAd,MACA,IACEnG,EAAAA,EAAAA,WAAkB,GADpB,iBAAOoG,GAAP,MAA8BC,GAA9B,MAEA,IAA8CrG,EAAAA,EAAAA,UAA2B,CACvEsG,QAAS,OACTC,oBAAqB,SACrBC,WAAY,OACZC,cAAc,EACdC,UAAW,SALb,iBAAOC,GAAP,MAAwBC,GAAxB,MAOA,IAAoD5G,EAAAA,EAAAA,UAAc,MAAlE,iBAAO6G,GAAP,MAA2BC,GAA3B,MACA,IAAgD9G,EAAAA,EAAAA,UAAc,MAA9D,iBAAO+G,GAAP,MAAyBC,GAAzB,MACA,IAAwDhH,EAAAA,EAAAA,UAAc,MAAtE,iBAAOiH,GAAP,MAA6BC,GAA7B,MACA,IAAoDlH,EAAAA,EAAAA,UAAc,MAAlE,iBAAOmH,GAAP,MAA2BC,GAA3B,MACA,IAAgDpH,EAAAA,EAAAA,UAAc,MAA9D,iBAAOqH,GAAP,MAAyBC,GAAzB,MACA,IACEtH,EAAAA,EAAAA,WAAkB,GADpB,iBAAOuH,GAAP,MAAkCC,GAAlC,MAEA,IAAoDxH,EAAAA,EAAAA,WAAkB,GAAtE,iBAAOyH,GAAP,MAA2BC,GAA3B,MACA,IACE1H,EAAAA,EAAAA,UAAkC,MADpC,iBAAO2H,GAAP,MAAmCC,GAAnC,MAEA,IACE5H,EAAAA,EAAAA,UAAkC,MADpC,iBAAO6H,GAAP,MAA8BC,GAA9B,MAEA,IAA8C9H,EAAAA,EAAAA,UAAyB,MAAvE,iBAAO+H,GAAP,MAAwBC,GAAxB,MACA,IAA8DhI,EAAAA,EAAAA,UAE5D,IAFF,iBAAOiI,GAAP,MAAgCC,GAAhC,MAGA,IAAoDlI,EAAAA,EAAAA,WAAkB,GAAtE,iBAAOmI,GAAP,MAA2BC,GAA3B,MACA,IAAsCpI,EAAAA,EAAAA,WAAkB,GAAxD,iBAAOqI,GAAP,MAAoBC,GAApB,MACA,IACEtI,EAAAA,EAAAA,WAAkB,GADpB,iBAAOuI,GAAP,MAA+BC,GAA/B,MAEA,IACExI,EAAAA,EAAAA,UAAkC,MADpC,iBAAOyI,GAAP,MAAqCC,GAArC,MAEA,IACE1I,EAAAA,EAAAA,UAAkC,MADpC,iBAAO2I,GAAP,MAAiCC,GAAjC,MAEA,IACE5I,EAAAA,EAAAA,UAAyB,MAD3B,iBAAO6I,GAAP,MAA+BC,GAA/B,MAEA,IAAkD9I,EAAAA,EAAAA,UAChD,MADF,iBAAO+I,GAAP,MAA0BC,GAA1B,MAGA,IAAoDhJ,EAAAA,EAAAA,UAClD,MADF,iBAAOiJ,GAAP,MAA2BC,GAA3B,MAGA,IACElJ,EAAAA,EAAAA,UAAkC,MADpC,iBAAOmJ,GAAP,MAAmCC,GAAnC,MAEA,IACEpJ,EAAAA,EAAAA,UAAyB,MAD3B,iBAAOqJ,GAAP,MAA6BC,GAA7B,MAEA,IAAgDtJ,EAAAA,EAAAA,UAAc,CAAC,GAA/D,iBAAOuJ,GAAP,MAAyBC,GAAzB,MACMC,GAAkB,SAACC,GACvBF,IAAoBG,EAAAA,EAAAA,IAAqBJ,GAAkBG,GAC5D,EACD,IAAsC1J,EAAAA,EAAAA,WAAkB,GAAxD,iBAAO4J,GAAP,MAAoBC,GAApB,OAGAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAsC,GAE1C,GAAInE,GAAmB,CAiEY,IAAD,YAmCF,YA0BI,kBA6BF,cA1FhC,GAhEAmE,EAAoB,kBACfA,GADe,CAElB,CACEC,SAAU,WACVnK,UAAU,EACV1D,MAAO6J,GACPiE,iBAAkBC,SAASlE,IAAY,EACvCmE,wBAAyB,qCAE3B,CACEH,SAAU,gCACVnK,UAAU,EACV1D,MAAOwK,GAAgBD,UACvBuD,iBACgC,KAA9BtD,GAAgBD,WAChBwD,SAASvD,GAAgBD,WAAa,EACxCyD,wBAAwB,8CAE1B,CACEH,SAAU,iCACVnK,UAAU,EACV1D,MAAOwK,GAAgBH,WACvByD,iBACiC,KAA/BtD,GAAgBH,YAChB0D,SAASvD,GAAgBH,YAAc,EACzC2D,wBAAwB,+CAE1B,CACEH,SAAU,8BACVnK,UAAU,EACV1D,MAAOwK,GAAgBL,QACvB2D,iBAC8B,KAA5BtD,GAAgBL,SAChB4D,SAASvD,GAAgBL,SAAW,EACtC6D,wBAAwB,8CAIxB5C,KACFwC,EAAoB,kBACfA,GADe,CAElB,CACEC,SAAU,YACVnK,UAAU,EACV1D,OAAwB,OAAjB4M,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBqB,cAAe,IAE3C,CACEJ,SAAU,aACVnK,UAAU,EACV1D,OAAwB,OAAjB4M,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBsB,eAAgB,IAE5C,CACEL,SAAU,YACVnK,UAAU,EACV1D,OAAsB,OAAf4L,SAAe,IAAfA,QAAA,EAAAA,GAAiBqC,cAAe,IAEzC,CACEJ,SAAU,aACVnK,UAAU,EACV1D,OAAsB,OAAf4L,SAAe,IAAfA,QAAA,EAAAA,GAAiBsC,eAAgB,OAKvB,UAAnBvE,GACFiE,EAAoB,kBACfA,GADe,CAElB,CACEC,SAAU,iBACVnK,UAAU,EACV1D,MAAK,OAAE0K,SAAF,IAAEA,QAAF,EAAEA,GAAoByD,UAE7B,CACEN,SAAU,WACVnK,UAAU,EACV1D,MAAK,OAAE0K,SAAF,IAAEA,IAAF,UAAEA,GAAoB0D,eAAtB,aAAE,EAA6B5O,IAEtC,CACEqO,SAAU,eACVnK,UAAU,EACV1D,MAAK,OAAE0K,SAAF,IAAEA,IAAF,UAAEA,GAAoB0D,eAAtB,aAAE,EAA6BC,QAEtC,CACER,SAAU,aACVnK,UAAU,EACV1D,MAAK,OAAE0K,SAAF,IAAEA,IAAF,UAAEA,GAAoB4D,cAAtB,aAAE,EAA4BC,KACnCT,iBAAkBC,SAAQ,OAACrD,SAAD,IAACA,IAAD,UAACA,GAAoB4D,cAArB,aAAC,EAA4BC,MAAQ,EAC/DP,wBAAyB,kCAE3B,CACEH,SAAU,cACVnK,UAAU,EACV1D,MAAK,OAAE0K,SAAF,IAAEA,IAAF,UAAEA,GAAoB0D,eAAtB,aAAE,EAA6BI,MACpCV,iBAAkBC,SAAQ,OAACrD,SAAD,IAACA,IAAD,UAACA,GAAoB0D,eAArB,aAAC,EAA6BI,OAAS,EACjER,wBAAyB,oCAK/B,GAAuB,QAAnBrE,GACFiE,EAAoB,kBACfA,GADe,CAElB,CACEC,SAAU,eACVnK,UAAU,EACV1D,MAAK,OAAE4K,SAAF,IAAEA,IAAF,UAAEA,GAAkB6D,sBAApB,aAAE,EAAkCN,UAE3C,CACEN,SAAU,aACVnK,UAAU,EACV1D,MAAK,OAAE4K,SAAF,IAAEA,IAAF,UAAEA,GAAkB6D,sBAApB,aAAE,EAAkCC,QAE3C,CACEb,SAAU,gBACVnK,UAAU,EACV1D,MAAK,OAAE4K,SAAF,IAAEA,IAAF,UAAEA,GAAkB6D,sBAApB,iBAAE,EAAkCE,mBAApC,aAAE,EAA+CC,WAExD,CACEf,SAAU,gBACVnK,UAAU,EACV1D,MAAK,OAAE4K,SAAF,IAAEA,IAAF,UAAEA,GAAkB6D,sBAApB,iBAAE,EAAkCE,mBAApC,aAAE,EAA+CE,aAK5D,GAAuB,YAAnBlF,GACFiE,EAAoB,kBACfA,GADe,CAElB,CACEC,SAAU,mBACVnK,UAAU,EACV1D,MAAK,OAAE8K,SAAF,IAAEA,IAAF,UAAEA,GAAsBgE,iBAAxB,aAAE,EAAiCX,UAE1C,CACEN,SAAU,gBACVnK,UAAU,EACV1D,MAAK,OAAE8K,SAAF,IAAEA,IAAF,UAAEA,GAAsBgE,iBAAxB,iBAAE,EAAiCH,mBAAnC,aAAE,EAA8CI,OAEvD,CACElB,SAAU,iBACVnK,UAAU,EACV1D,MAAK,OAAE8K,SAAF,IAAEA,IAAF,UAAEA,GAAsBgE,iBAAxB,iBAAE,EAAiCH,mBAAnC,aAAE,EAA8CK,QAEvD,CACEnB,SAAU,gBACVnK,UAAU,EACV1D,MAAK,OAAE8K,SAAF,IAAEA,IAAF,UAAEA,GAAsBgE,iBAAxB,iBAAE,EAAiCH,mBAAnC,aAAE,EAA8CH,MACrDV,iBACEC,SAAQ,OAACjD,SAAD,IAACA,IAAD,UAACA,GAAsBgE,iBAAvB,iBAAC,EAAiCH,mBAAlC,aAAC,EAA8CH,OAAS,EAClER,wBAAyB,oCAK/B,GAAuB,UAAnBrE,GACFiE,EAAoB,kBACfA,GADe,CAElB,CACEC,SAAU,iBACVnK,UAAU,EACV1D,MAAK,OAAEgL,SAAF,IAAEA,IAAF,UAAEA,GAAoBiE,gBAAtB,aAAE,EAA8Bd,UAEvC,CACEN,SAAU,kBACVnK,UAAU,EACV1D,MAAK,OAAEgL,SAAF,IAAEA,IAAF,UAAEA,GAAoBiE,gBAAtB,iBAAE,EAA8BN,mBAAhC,aAAE,EAA2CO,WAEpD,CACErB,SAAU,kBACVnK,UAAU,EACV1D,MAAK,OAAEgL,SAAF,IAAEA,IAAF,UAAEA,GAAoBiE,gBAAtB,iBAAE,EAA8BN,mBAAhC,aAAE,EAA2CQ,WAEpD,CACEtB,SAAU,sBACVnK,UAAU,EACV1D,MAAK,OAAEgL,SAAF,IAAEA,IAAF,UAAEA,GAAoBiE,gBAAtB,iBAAE,EAA8BN,mBAAhC,aAAE,EAA2CS,gBAIzD,CAED,IAAMC,GAAYC,EAAAA,EAAAA,GAAqB1B,GAEvCzB,GAAiD,IAAlCoD,OAAOC,KAAKH,GAAW5J,QAEtC4H,GAAoBgC,EACrB,GAAE,CACDjE,GACA3B,GACAE,GAHC,OAIDiD,SAJC,IAIDA,QAJC,EAIDA,GAAmBqB,YAJlB,OAKDrB,SALC,IAKDA,QALC,EAKDA,GAAmBsB,aALlB,OAMDtC,SANC,IAMDA,QANC,EAMDA,GAAiBqC,YANhB,OAODrC,SAPC,IAODA,QAPC,EAODA,GAAiBsC,aAPhB,OAQDxB,SARC,IAQDA,QARC,EAQDA,GAAwBuB,YARvB,OASDvB,SATC,IASDA,QATC,EASDA,GAAwBwB,aATvB,OAUDpB,SAVC,IAUDA,QAVC,EAUDA,GAAoBmB,YAVnB,OAWDnB,SAXC,IAWDA,QAXC,EAWDA,GAAoBoB,aACpB1D,GACAE,GACAE,GACAE,GACAE,GACAE,GACArB,KAGF,IAAM4F,GAAsB,WACrBxF,KACHC,IAAyB,GACzBwF,EAAAA,EAAAA,OAEI,MAFJ,oCAG0B1G,SAH1B,IAG0BA,QAH1B,EAG0BA,GAAQ2G,UAHlC,2BAGuD3G,SAHvD,IAGuDA,QAHvD,EAGuDA,GAAQxF,KAH/D,gBAKGoM,MAAK,SAACC,GACLrG,GAA8BqG,EAAKC,KAC/BD,EAAKE,OACPnG,GAAkB,SAClBe,GAAsBkF,EAAKE,OACvBF,EAAKE,MAAMC,MACbzD,GAAgCsD,EAAKE,MAAMC,IAAIC,KAC/CxD,GAA4BoD,EAAKE,MAAMC,IAAIE,MAEpCL,EAAKM,KACdvG,GAAkB,OAClBiB,GAAoBgF,EAAKM,MAChBN,EAAKO,SACdxG,GAAkB,WAClBmB,GAAwB8E,EAAKO,SACzBP,EAAKO,QAAQtB,UAAUkB,KACzB/C,GAA8B4C,EAAKO,QAAQtB,UAAUkB,IAAIE,KAElDL,EAAKQ,KACdzG,GAAkB,OAClBuB,GAAoB0E,EAAKQ,MAChBR,EAAKS,QACd1G,GAAkB,SAClBqB,GAAsB4E,EAAKS,QAG7B5G,IAAqB,GACrBM,GAAS6F,EAAK9F,OACdD,GAAY+F,EAAKhG,UACbgG,EAAKrF,iBACPC,GAAmBoF,EAAKrF,kBAEtBqF,EAAKU,QAAUV,EAAKW,cACtBnF,IAA6B,GAE3BwE,EAAKU,QACP9E,GAA8BoE,EAAKU,QAEjCV,EAAKW,aACP7E,GAAyBkE,EAAKW,aAEhCtG,IAAyB,EAC1B,IACAuG,OAAM,SAACC,GACNC,QAAQhN,MAAM+M,GACdxG,IAAyB,EAC1B,IAEN,GAEDyD,EAAAA,EAAAA,YAAU,WACR8B,IAED,GAAE,IAEH,IAAMmB,GAAoB,SAAClK,GACzBqF,GAA2B,GAAD,eACrBD,IADqB,CAExBpF,EAAgBlD,QAEdkD,EAAgBlD,QAAhB,OAAyBgI,SAAzB,IAAyBA,QAAzB,EAAyBA,GAA4BhI,OACvDiI,GAA8B,MAE5B/E,EAAgBlD,QAAhB,OAAyBkI,SAAzB,IAAyBA,QAAzB,EAAyBA,GAAuBlI,OAClDmI,GAAyB,MAEvBjF,EAAgBlD,QAAhB,OAAyB8I,SAAzB,IAAyBA,QAAzB,EAAyBA,GAA8B9I,OACzD+I,GAAgC,MAE9B7F,EAAgBlD,QAAhB,OAAyBgJ,SAAzB,IAAyBA,QAAzB,EAAyBA,GAA0BhJ,OACrDiJ,GAA4B,MAE1B/F,EAAgBlD,QAAhB,OAAyBwJ,SAAzB,IAAyBA,QAAzB,EAAyBA,GAA4BxJ,OACvDyJ,GAA8B,KAEjC,EAsND,OACE,UAAC,WAAD,WACGQ,KACC,SAAC,IAAD,CACEoD,OAAQpD,GACR3M,MACE2I,GACI,wCACA,yCAENqH,YAAarH,GAAoB,SAAW,UAC5CsH,WAAW,SACXC,QAAS,kBAAMtD,IAAe,EAArB,EACTuD,UAjO8B,WAAO,IAAD,4EAC1C,GAAIxH,GAAmB,CACrB,IAAIyH,EAAgB,CAAC,EACrB,OAAQvH,IACN,IAAK,UACH,IAAIwH,EAAqB,CAAC,EAE1B,OAAIjE,SAAJ,IAAIA,IAAAA,GAAsBgB,eACxBiD,EAAqB,CACnBnB,IAAK,CACHE,GAAE,OAAEhD,SAAF,IAAEA,QAAF,EAAEA,GAAsBgB,gBAIhCgD,EAAgB,CACdd,QAAS,CACPtB,WAAU,QACRX,UAA8B,OAApBrD,SAAoB,IAApBA,IAAA,UAAAA,GAAsBgE,iBAAtB,eAAiCX,WAAY,GACvDQ,YAAa,CACXI,OACsB,OAApBjE,SAAoB,IAApBA,IAAA,UAAAA,GAAsBgE,iBAAtB,mBAAiCH,mBAAjC,eAA8CI,QAAS,GACzDC,QACsB,OAApBlE,SAAoB,IAApBA,IAAA,UAAAA,GAAsBgE,iBAAtB,mBAAiCH,mBAAjC,eAA8CK,SAAU,GAC1DR,MAAOT,SAAQ,OACbjD,SADa,IACbA,IADa,UACbA,GAAsBgE,iBADT,iBACb,EAAiCH,mBADpB,aACb,EAA8CH,SAG/C2C,KAIT,MACF,IAAK,MACHD,EAAgB,CACdf,IAAK,CACH1B,eAAgB,CACdN,UAA0B,OAAhBvD,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,eAAkCN,WAAY,GACxDO,QAAwB,OAAhB9D,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,eAAkCC,SAAU,GACpD0C,QAAwB,OAAhBxG,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,eAAkC2C,SAAU,GACpDzC,YAAa,CACXC,WACkB,OAAhBhE,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,mBAAkCE,mBAAlC,eAA+CC,YAC/C,GACFC,WACkB,OAAhBjE,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,mBAAkCE,mBAAlC,eAA+CE,YAC/C,GACFE,OACkB,OAAhBnE,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,mBAAkCE,mBAAlC,eAA+CI,QAAS,OAKlE,MACF,IAAK,QACHmC,EAAgB,CACdZ,MAAO,CACLrB,SAAU,CACRd,UAA4B,OAAlBnD,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,eAA8Bd,WAAY,GACpDQ,YAAa,CACXO,WACoB,OAAlBlE,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,mBAA8BN,mBAA9B,eAA2CO,YAAa,GAC1DC,WACoB,OAAlBnE,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,mBAA8BN,mBAA9B,eAA2CQ,YAAa,GAC1DC,eACoB,OAAlBpE,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,mBAA8BN,mBAA9B,eAA2CS,gBAC3C,OAKV,MACF,IAAK,MACH8B,EAAgB,CACdb,IAAK,CACHgB,cAAe,CACbC,YAA4B,OAAhBpG,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,qBAAlB,eAAiCC,aAAc,GAC3DnD,UAA0B,OAAhBjD,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,qBAAlB,eAAiClD,WAAY,GACvDQ,YAAa,CACX4C,cACkB,OAAhBrG,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,qBAAlB,mBAAiC1C,mBAAjC,eACI4C,eAAgB,GACtBpC,WACkB,OAAhBjE,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,qBAAlB,mBAAiC1C,mBAAjC,eAA8CQ,YAC9C,GACFqC,gBACkB,OAAhBtG,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,qBAAlB,mBAAiC1C,mBAAjC,eACI6C,iBAAkB,GACxBC,aACkB,OAAhBvG,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,qBAAlB,mBAAiC1C,mBAAjC,eAA8C8C,cAC9C,OAKV,MACF,IAAK,QACH,IAAIC,EAAe,KACfC,EAAgB,KAEI,OAAtBjF,SAAsB,IAAtBA,IAAAA,GAAwBuB,aAAxB,OACAvB,SADA,IACAA,IAAAA,GAAwBwB,eAExBwD,EAAe,CACbE,IAAG,OAAElF,SAAF,IAAEA,QAAF,EAAEA,GAAwBuB,YAC7BgC,IAAG,OAAEvD,SAAF,IAAEA,QAAF,EAAEA,GAAwBwB,eAGjC,OAAIpB,SAAJ,IAAIA,IAAAA,GAAoBoB,eACtByD,EAAgB,CACdzB,GAAE,OAAEpD,SAAF,IAAEA,QAAF,EAAEA,GAAoBoB,eAG5B,IAAI2D,EAAW,MACXH,GAAgBC,KAClBE,EAAW,CACT7B,KAAI,kBACC0B,GACAC,KAITT,EAAgB,CACdnB,OAAM,gBACJ5B,UAA4B,OAAlBzD,SAAkB,IAAlBA,QAAA,EAAAA,GAAoByD,WAAY,GAC1C2D,QAA0B,OAAlBpH,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBoH,SAAU,GACtCnC,WAA6B,OAAlBjF,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBiF,YAAa,GAC5CoC,QAA0B,OAAlBrH,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBqH,SAAU,GACtC3D,QAAS,CACP0D,QAA0B,OAAlBpH,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB0D,eAApB,eAA6B0D,SAAU,GAC/CtS,IAAsB,OAAlBkL,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB0D,eAApB,eAA6B5O,KAAM,GACvC6O,QAA0B,OAAlB3D,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB0D,eAApB,eAA6BC,SAAU,GAC/CG,MAAOT,SAAQ,OAACrD,SAAD,IAACA,IAAD,UAACA,GAAoB0D,eAArB,aAAC,EAA6BI,SAE5CqD,GAXA,IAYHvD,OAAQ,CACNC,KAAMR,SAAQ,OAACrD,SAAD,IAACA,IAAD,UAACA,GAAoB4D,cAArB,aAAC,EAA4BC,UAOrD,IAAIyD,EAA+B,CAAC,EAChCC,EAA+B,CAAC,EAEjB,OAAfrG,SAAe,IAAfA,IAAAA,GAAiBqC,aAAjB,OAAgCrC,SAAhC,IAAgCA,IAAAA,GAAiBsC,eACnD+D,EAA0B,CACxBC,OAAQ,CACNN,IAAG,OAAEhG,SAAF,IAAEA,QAAF,EAAEA,GAAiBqC,YACtBgC,IAAG,OAAErE,SAAF,IAAEA,QAAF,EAAEA,GAAiBsC,gBAKP,OAAjBtB,SAAiB,IAAjBA,IAAAA,GAAmBqB,aAAnB,OAAkCrB,SAAlC,IAAkCA,IAAAA,GAAmBsB,eACvD8D,EAA0B,CACxBzB,OAAQ,CACNqB,IAAG,OAAEhF,SAAF,IAAEA,QAAF,EAAEA,GAAmBqB,YACxBgC,IAAG,OAAErD,SAAF,IAAEA,QAAF,EAAEA,GAAmBsB,gBAI9B,IAAMiE,GAAQ,wBACZrC,IAAKzG,GAAuBE,GAA6B,GACzD6I,mBAAoBtG,IAA2B,GAC/CjC,SAAUA,GACVW,gBAAiBA,GACjBT,MAAOA,IACJkI,GACAD,GACAd,GAEA5F,KACHC,IAAsB,GACtBmE,EAAAA,EAAAA,OAEI,MAFJ,oCAG0B1G,SAH1B,IAG0BA,QAH1B,EAG0BA,GAAQ2G,UAHlC,2BAGuD3G,SAHvD,IAGuDA,QAHvD,EAGuDA,GAAQxF,KAH/D,eAII2O,GAEDvC,MAAK,WACJlC,IAAe,GACfnC,IAAsB,GACtBkE,IACD,IACAgB,OAAM,SAACC,GACNnF,IAAsB,GACtBzC,IAASuJ,EAAAA,EAAAA,IAAqB3B,GAC/B,IAEN,MACMpF,KACHC,IAAsB,GACtBmE,EAAAA,EAAAA,OAEI,SAFJ,oCAG0B1G,SAH1B,IAG0BA,QAH1B,EAG0BA,GAAQ2G,UAHlC,2BAGuD3G,SAHvD,IAGuDA,QAHvD,EAGuDA,GAAQxF,KAH/D,eAII,CAAC,GAEFoM,MAAK,WACJH,KACA/B,IAAe,GACfnC,IAAsB,EACvB,IACAkF,OAAM,SAACC,GACNnF,IAAsB,GACtBzC,IAASuJ,EAAAA,EAAAA,IAAqB3B,GAC/B,IAGR,EAgBO4B,qBACE,SAAC,IAAD,UACG7I,GACG,gDACA,4DAKZ,UAAC,KAAD,CAAM8I,WAAS,EAAC9J,QAAS,EAAzB,WACE,SAAC,KAAD,CAAMjI,MAAI,EAACC,IAAE,EAAb,UACE,eAAIpB,UAAWe,GAAQoS,aAAvB,2BAEF,SAAC,KAAD,CAAMhS,MAAI,EAACC,GAAI,EAAG0B,eAAgB,MAAOsQ,UAAW,QAApD,UACE,SAAC,IAAD,CACExS,MAAO,GACPyS,gBAAiB,CAAC,UAAW,YAC7BC,QAASlJ,GACTzJ,MAAO,oBACPR,GAAG,oBACHgE,KAAK,oBACLnC,SAAU,WACRqI,IAAsBD,GACvB,EACDmJ,YAAY,QAGhB,SAAC,KAAD,CAAMnS,GAAI,GAAV,UACE,eAAIpB,UAAWe,GAAQyS,YAExBpJ,KACC,UAAC,EAAAqJ,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,UAAC,IAAD,CACET,MAAOqJ,GACPhI,SAAU,SAACoD,EAA0BsO,GACnCzJ,GAAwByJ,EACzB,EACDC,eAAe,UACfC,UAAU,UACV,aAAW,eACXvQ,QAAQ,aACRwQ,cAAc,OAThB,WAWE,SAAC,IAAD,CAAK1T,GAAG,cAAcS,MAAM,aAC5B,SAAC,IAAD,CAAKT,GAAG,wBAAwBS,MAAM,kBAIzCoJ,IACC,SAAC,EAAAyJ,SAAD,WACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACET,MAAOuJ,GACPpJ,KAAM,OACNE,eAAgB,SAAC8S,EAAQxN,EAAM3F,GAC7BwJ,GAA8BxJ,EAC/B,EACDO,aAAc,eAKpB,UAAC,EAAAuS,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAIpB,UAAWe,GAAQgT,sBAAtC,UACE,SAAC,IAAD,CACEC,iBAAkB1J,GAClBnK,GAAG,iBACHgE,KAAK,iBACLvD,MAAM,MACNoB,SAAU,SAACoD,GACTmF,GAAkBnF,EAAElD,OAAOvB,MAC5B,EACDsT,gBAAiB,CACf,CAAErT,MAAO,QAASD,MAAO,SACzB,CAAEC,MAAO,MAAOD,MAAO,OACvB,CAAEC,MAAO,UAAWD,MAAO,WAC3B,CAAEC,MAAO,MAAOD,MAAO,OACvB,CAAEC,MAAO,QAASD,MAAO,cAIX,UAAnB2J,KACC,UAAC,EAAAmJ,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,iBACHgE,KAAK,iBACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnByD,SAAU1J,EAAElD,OAAOvB,QAHb,EAMVC,MAAM,WACND,OAAyB,OAAlB0K,SAAkB,IAAlBA,QAAA,EAAAA,GAAoByD,WAAY,GACvCxK,MAAOyJ,GAAgB,YAAkB,GACzC1J,UAAQ,OAGZ,SAAC,KAAD,CAAMlD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,eACHgE,KAAK,eACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnBoH,OAAQrN,EAAElD,OAAOvB,QAHX,EAMVC,MAAM,SACND,OAAyB,OAAlB0K,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBoH,SAAU,QAGzC,SAAC,KAAD,CAAMtR,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,kBACHgE,KAAK,kBACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnBiF,UAAWlL,EAAElD,OAAOvB,QAHd,EAMVC,MAAM,YACND,OAAyB,OAAlB0K,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBiF,YAAa,QAG5C,SAAC,KAAD,CAAMnP,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,eACHgE,KAAK,eACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnBqH,OAAQtN,EAAElD,OAAOvB,QAHX,EAMVC,MAAM,SACND,OAAyB,OAAlB0K,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBqH,SAAU,QAGzC,SAAC,KAAD,CAAMvR,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,0BAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,uBACHgE,KAAK,uBACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnB0D,SAAQ,kBAAD,OACF1D,SADE,IACFA,QADE,EACFA,GAAoB0D,SADlB,IAEL0D,OAAQrN,EAAElD,OAAOvB,UALb,EASVC,MAAM,SACND,OAAyB,OAAlB0K,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB0D,eAApB,eAA6B0D,SAAU,QAGlD,SAAC,KAAD,CAAMtR,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE+B,KAAMwJ,GAAqB,OAAS,WACpCxM,GAAG,WACHgE,KAAK,WACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnB0D,SAAQ,kBAAD,OACF1D,SADE,IACFA,QADE,EACFA,GAAoB0D,SADlB,IAEL5O,GAAIiF,EAAElD,OAAOvB,UALT,EASVC,MAAM,aACND,OAAyB,OAAlB0K,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB0D,eAApB,eAA6B5O,KAAM,GAC1CkE,UAAQ,EACRC,MAAOyJ,GAAgB,UAAgB,GACvCmG,YACEvH,IACE,SAAC,IAAD,KAEA,SAAC,IAAD,IAGJwH,cAAe,kBACbvH,IAAuBD,GADV,OAKnB,SAAC,KAAD,CAAMxL,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE+B,KAAM4J,GAAyB,OAAS,WACxC5M,GAAG,eACHgE,KAAK,eACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnB0D,SAAQ,kBAAD,OACF1D,SADE,IACFA,QADE,EACFA,GAAoB0D,SADlB,IAELC,OAAQ5J,EAAElD,OAAOvB,UALb,EASVC,MAAM,iBACND,OAAyB,OAAlB0K,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB0D,eAApB,eAA6BC,SAAU,GAC9C3K,UAAQ,EACRC,MAAOyJ,GAAgB,cAAoB,GAC3CmG,YACEnH,IACE,SAAC,IAAD,KAEA,SAAC,IAAD,IAGJoH,cAAe,kBACbnH,IAA2BD,GADd,OAKnB,SAAC,KAAD,CAAM5L,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE+B,KAAK,SACLiR,IAAI,IACJjU,GAAG,cACHgE,KAAK,cACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnB0D,SAAQ,kBAAD,OACF1D,SADE,IACFA,QADE,EACFA,GAAoB0D,SADlB,IAELI,MAAO/J,EAAElD,OAAOvB,UALZ,EASVC,MAAM,kBACN0D,MAAOyJ,GAAgB,aAAmB,GAC1CpN,OAAyB,OAAlB0K,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB0D,eAApB,eAA6BI,QAAS,QAGjD,SAAC,KAAD,CAAMhO,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,+CAEF,UAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,WACE,sBAAUpB,UAAWe,GAAQsT,WAA7B,WACE,mBAAQrU,UAAWe,GAAQuT,gBAA3B,6DAGCrH,IACC,SAAC,IAAD,CACE5F,gBAAiB4F,GACjB7E,SAAU,kBACRmJ,GAAkBtE,GADV,KAKZ,UAAC,EAAAwG,SAAD,YACE,SAAC,IAAD,CACEzR,SAAU,SAACuS,EAAclP,GAAf,OACRiI,GAA0B,CACxBsB,YAAa2F,GAAgB,GAC7BpU,IAA0B,OAAtBkN,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBlN,KAAM,GAClCoS,IAAKlN,GAAY,GACjBmP,MAA4B,OAAtBnH,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBmH,OAAQ,GACtC3F,cACwB,OAAtBxB,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBwB,eAAgB,IAPpC,EAUVtK,OAAO,YACPpE,GAAG,YACHgE,KAAK,YACLvD,MAAM,MACND,OAA6B,OAAtB0M,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBkF,MAAO,MAExC,SAAC,IAAD,CACEvQ,SAAU,SAACuS,EAAclP,GAAf,OACRiI,GAA0B,CACxBsB,aACwB,OAAtBvB,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBuB,cAAe,GACzCzO,IAA0B,OAAtBkN,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBlN,KAAM,GAClCoS,KAA2B,OAAtBlF,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBkF,MAAO,GACpCiC,KAAMnP,GAAY,GAClBwJ,aAAc0F,GAAgB,IAPxB,EAUVhQ,OAAO,uBACPpE,GAAG,aACHgE,KAAK,aACLvD,MAAM,OACND,OAA6B,OAAtB0M,SAAsB,IAAtBA,QAAA,EAAAA,GAAwBmH,OAAQ,YAK/C,sBAAUxU,UAAWe,GAAQsT,WAA7B,WACE,mBAAQrU,UAAWe,GAAQuT,gBAA3B,6CAGCnH,IACC,SAAC,IAAD,CACE9F,gBAAiB8F,GACjB/E,SAAU,kBACRmJ,GAAkBpE,GADV,KAKZ,SAAC,IAAD,CACEnL,SAAU,SAACuS,EAAclP,GAAf,OACRqI,GAAsB,CACpBkB,aACoB,OAAlBnB,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBmB,cAAe,GACrCzO,IAAsB,OAAlBsN,SAAkB,IAAlBA,QAAA,EAAAA,GAAoBtN,KAAM,GAC9BoS,KAAuB,OAAlB9E,SAAkB,IAAlBA,QAAA,EAAAA,GAAoB8E,MAAO,GAChCiC,KAAMnP,GAAY,GAClBwJ,aAAc0F,GAAgB,IAPxB,EAUVhQ,OAAO,uBACPpE,GAAG,WACHgE,KAAK,WACLvD,MAAM,KACND,OAAyB,OAAlB8M,SAAkB,IAAlBA,QAAA,EAAAA,GAAoB+G,OAAQ,YAK3C,SAAC,KAAD,CAAMrT,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,wBAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE+B,KAAK,SACLiR,IAAI,IACJjU,GAAG,aACHgE,KAAK,aACLnC,SAAU,SAACoD,GAAD,OACRkG,IAAsB,kBACjBD,IADgB,IAEnB4D,QAAO,kBAAD,OACD5D,SADC,IACDA,QADC,EACDA,GAAoB4D,QADnB,IAEJC,KAAM9J,EAAElD,OAAOvB,UALX,EASVC,MAAM,iBACN0D,MAAOyJ,GAAgB,YAAkB,GACzCpN,OAAyB,OAAlB0K,SAAkB,IAAlBA,IAAA,UAAAA,GAAoB4D,cAApB,eAA4BC,OAAQ,UAK/B,UAAnB5E,KACC,UAAC,EAAAmJ,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,iBACHgE,KAAK,iBACLnC,SAAU,SAACoD,GAAD,OACRwG,IAAsB,kBACjBD,IADgB,IAEnBiE,UAAS,kBAAD,OACHjE,SADG,IACHA,QADG,EACHA,GAAoBiE,UADjB,IAENd,SAAU1J,EAAElD,OAAOvB,UALf,EASVC,MAAM,WACN0D,MAAOyJ,GAAgB,gBAAsB,GAC7CpN,OAAyB,OAAlBgL,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,eAA8Bd,WAAY,QAGrD,SAAC,KAAD,CAAM3N,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,6BAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,kBACHgE,KAAK,kBACLnC,SAAU,SAACoD,GAAD,aACRwG,IAAsB,kBACjBD,IADgB,IAEnBiE,UAAS,kBAAD,OACHjE,SADG,IACHA,QADG,EACHA,GAAoBiE,UADjB,IAENN,aAAY,kBAAD,OACN3D,SADM,IACNA,IADM,UACNA,GAAoBiE,gBADd,aACN,EAA8BN,aADxB,IAETO,UAAWzK,EAAElD,OAAOvB,YAPlB,EAYVC,MAAM,YACND,OACoB,OAAlBgL,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,mBAA8BN,mBAA9B,eACIO,YAAa,GAEnBvL,MAAOyJ,GAAgB,iBAAuB,QAGlD,SAAC,KAAD,CAAM5M,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,kBACHgE,KAAK,kBACLnC,SAAU,SAACoD,GAAD,aACRwG,IAAsB,kBACjBD,IADgB,IAEnBiE,UAAS,kBAAD,OACHjE,SADG,IACHA,QADG,EACHA,GAAoBiE,UADjB,IAENN,aAAY,kBAAD,OACN3D,SADM,IACNA,IADM,UACNA,GAAoBiE,gBADd,aACN,EAA8BN,aADxB,IAETQ,UAAW1K,EAAElD,OAAOvB,YAPlB,EAYVC,MAAM,YACND,OACoB,OAAlBgL,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,mBAA8BN,mBAA9B,eACIQ,YAAa,GAEnBxL,MAAOyJ,GAAgB,iBAAuB,QAGlD,SAAC,KAAD,CAAM5M,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,sBACHgE,KAAK,sBACLnC,SAAU,SAACoD,GAAD,aACRwG,IAAsB,kBACjBD,IADgB,IAEnBiE,UAAS,kBAAD,OACHjE,SADG,IACHA,QADG,EACHA,GAAoBiE,UADjB,IAENN,aAAY,kBAAD,OACN3D,SADM,IACNA,IADM,UACNA,GAAoBiE,gBADd,aACN,EAA8BN,aADxB,IAETS,cAAe3K,EAAElD,OAAOvB,YAPtB,EAYVC,MAAM,gBACND,OACoB,OAAlBgL,SAAkB,IAAlBA,IAAA,UAAAA,GAAoBiE,gBAApB,mBAA8BN,mBAA9B,eACIS,gBAAiB,GAEvBzL,MAAOyJ,GAAgB,qBAA2B,UAKtC,QAAnBzD,KACC,UAAC,EAAAmJ,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,iBACHgE,KAAK,iBACLnC,SAAU,SAACoD,GAAD,OACR0G,IAAoB,kBACfD,IADc,IAEjBmG,eAAc,kBAAD,OACRnG,SADQ,IACRA,QADQ,EACRA,GAAkBmG,eADV,IAEXC,WAAY7M,EAAElD,OAAOvB,UALjB,EASVC,MAAM,aACND,OAAuB,OAAhBkL,SAAgB,IAAhBA,QAAA,EAAAA,GAAkBmG,cAAcC,aAAc,QAGzD,SAAC,KAAD,CAAM9Q,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,eACHgE,KAAK,eACLnC,SAAU,SAACoD,GAAD,OACR0G,IAAoB,kBACfD,IADc,IAEjBmG,eAAc,kBAAD,OACRnG,SADQ,IACRA,QADQ,EACRA,GAAkBmG,eADV,IAEXlD,SAAU1J,EAAElD,OAAOvB,UALf,EASVC,MAAM,WACND,OAAuB,OAAhBkL,SAAgB,IAAhBA,QAAA,EAAAA,GAAkBmG,cAAclD,WAAY,QAGvD,SAAC,KAAD,CAAM3N,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,6BAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,mBACHgE,KAAK,mBACLnC,SAAU,SAACoD,GAAD,OACR0G,IAAoB,kBACfD,IADc,IAEjBmG,eAAc,kBAAD,OACRnG,SADQ,IACRA,QADQ,EACRA,GAAkBmG,eADV,IAEX1C,aAAY,kBAAD,OACNzD,SADM,IACNA,QADM,EACNA,GAAkBmG,cAAc1C,aAD1B,IAET4C,aAAc9M,EAAElD,OAAOvB,YAPrB,EAYVC,MAAM,eACND,OACkB,OAAhBkL,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,cAAc1C,mBAAhC,eACI4C,eAAgB,QAI1B,SAAC,KAAD,CAAM/Q,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,gBACHgE,KAAK,gBACLnC,SAAU,SAACoD,GAAD,OACR0G,IAAoB,kBACfD,IADc,IAEjBmG,eAAc,kBAAD,OACRnG,SADQ,IACRA,QADQ,EACRA,GAAkBmG,eADV,IAEX1C,aAAY,kBAAD,OACNzD,SADM,IACNA,QADM,EACNA,GAAkBmG,cAAc1C,aAD1B,IAETQ,UAAW1K,EAAElD,OAAOvB,YAPlB,EAYVC,MAAM,YACND,OACkB,OAAhBkL,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,cAAc1C,mBAAhC,eACIQ,YAAa,QAIvB,SAAC,KAAD,CAAM3O,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,qBACHgE,KAAK,qBACLnC,SAAU,SAACoD,GAAD,OACR0G,IAAoB,kBACfD,IADc,IAEjBmG,eAAc,kBAAD,OACRnG,SADQ,IACRA,QADQ,EACRA,GAAkBmG,eADV,IAEX1C,aAAY,kBAAD,OACNzD,SADM,IACNA,QADM,EACNA,GAAkBmG,cAAc1C,aAD1B,IAET6C,eAAgB/M,EAAElD,OAAOvB,YAPvB,EAYVC,MAAM,iBACND,OACkB,OAAhBkL,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,cAAc1C,mBAAhC,eACI6C,iBAAkB,QAI5B,SAAC,KAAD,CAAMhR,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,kBACHgE,KAAK,kBACLnC,SAAU,SAACoD,GAAD,OACR0G,IAAoB,kBACfD,IADc,IAEjBmG,eAAc,kBAAD,OACRnG,SADQ,IACRA,QADQ,EACRA,GAAkBmG,eADV,IAEX1C,aAAY,kBAAD,OACNzD,SADM,IACNA,QADM,EACNA,GAAkBmG,cAAc1C,aAD1B,IAET8C,YAAahN,EAAElD,OAAOvB,YAPpB,EAYVC,MAAM,cACND,OACkB,OAAhBkL,SAAgB,IAAhBA,IAAA,UAAAA,GAAkBmG,cAAc1C,mBAAhC,eACI8C,cAAe,UAMT,QAAnB9H,KACC,UAAC,EAAAmJ,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,eACHgE,KAAK,eACLnC,SAAU,SAACoD,GAAD,OACRoG,IAAoB,kBACfD,IADc,IAEjB6D,gBAAe,kBAAD,OACT7D,SADS,IACTA,QADS,EACTA,GAAkB6D,gBADT,IAEZN,SAAU1J,EAAElD,OAAOvB,UALf,EASVC,MAAM,WACND,OAAuB,OAAhB4K,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,eAAkCN,WAAY,GACrDzK,UAAQ,EACRC,MAAOyJ,GAAgB,cAAoB,QAG/C,SAAC,KAAD,CAAM5M,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,aACHgE,KAAK,aACLnC,SAAU,SAACoD,GAAD,OACRoG,IAAoB,kBACfD,IADc,IAEjB6D,gBAAe,kBAAD,OACT7D,SADS,IACTA,QADS,EACTA,GAAkB6D,gBADT,IAEZC,OAAQjK,EAAElD,OAAOvB,UALb,EASVC,MAAM,SACND,OAAuB,OAAhB4K,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,eAAkCC,SAAU,GACnD/K,MAAOyJ,GAAgB,YAAkB,GACzC1J,UAAQ,OAGZ,SAAC,KAAD,CAAMlD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,aACHgE,KAAK,aACLnC,SAAU,SAACoD,GAAD,OACRoG,IAAoB,kBACfD,IADc,IAEjB6D,gBAAe,kBAAD,OACT7D,SADS,IACTA,QADS,EACTA,GAAkB6D,gBADT,IAEZ2C,OAAQ3M,EAAElD,OAAOvB,UALb,EASVC,MAAM,UACND,OAAuB,OAAhB4K,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,eAAkC2C,SAAU,QAGvD,SAAC,KAAD,CAAM5Q,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,6BAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,gBACHgE,KAAK,gBACLnC,SAAU,SAACoD,GAAD,aACRoG,IAAoB,kBACfD,IADc,IAEjB6D,gBAAe,kBAAD,OACT7D,SADS,IACTA,QADS,EACTA,GAAkB6D,gBADT,IAEZE,aAAY,kBAAD,OACN/D,SADM,IACNA,IADM,UACNA,GAAkB6D,sBADZ,aACN,EACCE,aAFK,IAGTC,UAAWnK,EAAElD,OAAOvB,YARlB,EAaVC,MAAM,aACND,OACkB,OAAhB4K,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,mBAAkCE,mBAAlC,eACIC,YAAa,GAEnBjL,MAAOyJ,GAAgB,eAAqB,GAC5C1J,UAAQ,OAGZ,SAAC,KAAD,CAAMlD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,gBACHgE,KAAK,gBACLnC,SAAU,SAACoD,GAAD,aACRoG,IAAoB,kBACfD,IADc,IAEjB6D,gBAAe,kBAAD,OACT7D,SADS,IACTA,QADS,EACTA,GAAkB6D,gBADT,IAEZE,aAAY,kBAAD,OACN/D,SADM,IACNA,IADM,UACNA,GAAkB6D,sBADZ,aACN,EACCE,aAFK,IAGTE,UAAWpK,EAAElD,OAAOvB,YARlB,EAaVC,MAAM,aACND,OACkB,OAAhB4K,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,mBAAkCE,mBAAlC,eACIE,YAAa,GAEnBlL,MAAOyJ,GAAgB,eAAqB,GAC5C1J,UAAQ,OAGZ,SAAC,KAAD,CAAMlD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,YACHgE,KAAK,YACLnC,SAAU,SAACoD,GAAD,aACRoG,IAAoB,kBACfD,IADc,IAEjB6D,gBAAe,kBAAD,OACT7D,SADS,IACTA,QADS,EACTA,GAAkB6D,gBADT,IAEZE,aAAY,kBAAD,OACN/D,SADM,IACNA,IADM,UACNA,GAAkB6D,sBADZ,aACN,EACCE,aAFK,IAGTI,MAAOtK,EAAElD,OAAOvB,YARd,EAaVC,MAAM,QACND,OACkB,OAAhB4K,SAAgB,IAAhBA,IAAA,UAAAA,GAAkB6D,sBAAlB,mBAAkCE,mBAAlC,eACII,QAAS,UAMH,YAAnBpF,KACC,UAAC,EAAAmJ,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,mBACHgE,KAAK,mBACLnC,SAAU,SAACoD,GAAD,OACRsG,IAAwB,kBACnBD,IADkB,IAErBgE,WAAU,kBAAD,OACJhE,SADI,IACJA,QADI,EACJA,GAAsBgE,WADlB,IAEPX,SAAU1J,EAAElD,OAAOvB,UALf,EASVC,MAAM,WACND,OAA2B,OAApB8K,SAAoB,IAApBA,IAAA,UAAAA,GAAsBgE,iBAAtB,eAAiCX,WAAY,GACpDxK,MAAOyJ,GAAgB,kBAAwB,GAC/C1J,UAAQ,OAGZ,SAAC,KAAD,CAAMlD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,6BAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,gBACHgE,KAAK,gBACLnC,SAAU,SAACoD,GAAD,aACRsG,IAAwB,kBACnBD,IADkB,IAErBgE,WAAU,kBAAD,OACJhE,SADI,IACJA,QADI,EACJA,GAAsBgE,WADlB,IAEPH,aAAY,kBAAD,OACN7D,SADM,IACNA,IADM,UACNA,GAAsBgE,iBADhB,aACN,EAAiCH,aAD3B,IAETI,MAAOtK,EAAElD,OAAOvB,YAPd,EAYVC,MAAM,QACND,OACsB,OAApB8K,SAAoB,IAApBA,IAAA,UAAAA,GAAsBgE,iBAAtB,oBAAiCH,mBAAjC,iBAA8CI,QAC9C,GAEFpL,MAAOyJ,GAAgB,eAAqB,GAC5C1J,UAAQ,OAGZ,SAAC,KAAD,CAAMlD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACEjB,GAAG,iBACHgE,KAAK,iBACLnC,SAAU,SAACoD,GAAD,aACRsG,IAAwB,kBACnBD,IADkB,IAErBgE,WAAU,kBAAD,OACJhE,SADI,IACJA,QADI,EACJA,GAAsBgE,WADlB,IAEPH,aAAY,kBAAD,OACN7D,SADM,IACNA,IADM,UACNA,GAAsBgE,iBADhB,aACN,EAAiCH,aAD3B,IAETK,OAAQvK,EAAElD,OAAOvB,YAPf,EAYVC,MAAM,SACND,OACsB,OAApB8K,SAAoB,IAApBA,IAAA,WAAAA,GAAsBgE,iBAAtB,sBAAiCH,mBAAjC,iBACIK,SAAU,GAEhBrL,MAAOyJ,GAAgB,gBAAsB,GAC7C1J,UAAQ,OAGZ,SAAC,KAAD,CAAMlD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE+B,KAAK,SACLiR,IAAI,IACJjU,GAAG,gBACHgE,KAAK,gBACLnC,SAAU,SAACoD,GAAD,aACRsG,IAAwB,kBACnBD,IADkB,IAErBgE,WAAU,kBAAD,OACJhE,SADI,IACJA,QADI,EACJA,GAAsBgE,WADlB,IAEPH,aAAY,kBAAD,OACN7D,SADM,IACNA,IADM,UACNA,GAAsBgE,iBADhB,aACN,EAAiCH,aAD3B,IAETH,MAAO/J,EAAElD,OAAOvB,YAPd,EAYVC,MAAM,kBACND,OACsB,OAApB8K,SAAoB,IAApBA,IAAA,WAAAA,GAAsBgE,iBAAtB,sBAAiCH,mBAAjC,iBAA8CH,QAC9C,GAEF7K,MAAOyJ,GAAgB,eAAqB,QAGhD,SAAC,KAAD,CACE5M,MAAI,EACJC,GAAI,GACJO,MAAO,CACLL,aAAc,IAJlB,UAOE,sBAAUtB,UAAWe,GAAQsT,WAA7B,WACE,mBAAQrU,UAAWe,GAAQuT,gBAA3B,qDAGC3G,IACC,SAAC,IAAD,CACEtG,gBAAiBsG,GACjBvF,SAAU,kBACRmJ,GAAkB5D,GADV,KAKZ,SAAC,IAAD,CACE3L,SAAU,SAACuS,EAAclP,GAAf,OACRyI,GAAyB,CACvBc,aACsB,OAApBf,SAAoB,IAApBA,QAAA,EAAAA,GAAsBe,cAAe,GACvCzO,IAAwB,OAApB0N,SAAoB,IAApBA,QAAA,EAAAA,GAAsB1N,KAAM,GAChCoS,KAAyB,OAApB1E,SAAoB,IAApBA,QAAA,EAAAA,GAAsB0E,MAAO,GAClCiC,KAAMnP,GAAY,GAClBwJ,aAAc0F,GAAgB,IAPxB,EAUVhQ,OAAO,uBACPpE,GAAG,aACHgE,KAAK,aACLvD,MAAM,KACND,OAA2B,OAApBkN,SAAoB,IAApBA,QAAA,EAAAA,GAAsB2G,OAAQ,iBAUrD,SAAC,KAAD,CAAMrT,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,kDAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACET,MAAM,0BACNR,GAAG,0BACHgE,KAAK,0BACLmP,QAASvH,GACT/J,SAAU,kBACRgK,IAA8BD,GADtB,EAGVnL,MAAO,0BAGVmL,KACC,UAAC,EAAA0H,SAAD,YACE,SAAC,KAAD,CAAMtS,MAAI,EAACC,GAAI,GAAf,UACE,sBAAUpB,UAAWe,GAAQsT,WAA7B,WACE,mBAAQrU,UAAWe,GAAQuT,gBAA3B,oDAGCnI,IACC,SAAC,IAAD,CACE9E,gBAAiB8E,GACjB/D,SAAU,kBACRmJ,GAAkBpF,GADV,KAKZ,UAAC,EAAAsH,SAAD,YACE,SAAC,IAAD,CACEzR,SAAU,SAACuS,EAAclP,GACvBmI,GAAqB,CACnBoB,YAAa2F,GAAgB,GAC7BpU,IAAqB,OAAjBoN,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBpN,KAAM,GAC7BoS,IAAKlN,GAAY,GACjBmP,MAAuB,OAAjBjH,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBiH,OAAQ,GACjC3F,cACmB,OAAjBtB,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBsB,eAAgB,KAEvCZ,GAAgB,YACjB,EACD1J,OAAO,YACPpE,GAAG,YACHgE,KAAK,YACLvD,MAAM,MACND,MAAK,OAAE4M,SAAF,IAAEA,QAAF,EAAEA,GAAmBgF,OAE5B,SAAC,IAAD,CACEvQ,SAAU,SAACuS,EAAclP,GACvBmI,GAAqB,CACnBoB,aAA8B,OAAjBrB,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBqB,cAAe,GAC/CzO,IAAqB,OAAjBoN,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBpN,KAAM,GAC7BoS,KAAsB,OAAjBhF,SAAiB,IAAjBA,QAAA,EAAAA,GAAmBgF,MAAO,GAC/BiC,KAAMnP,GAAY,GAClBwJ,aAAc0F,GAAgB,KAEhCtG,GAAgB,aACjB,EACD1J,OAAO,uBACPpE,GAAG,aACHgE,KAAK,aACLvD,MAAM,OACND,MAAK,OAAE4M,SAAF,IAAEA,QAAF,EAAEA,GAAmBiH,gBAMpC,SAAC,KAAD,CAAMrT,MAAI,EAACC,GAAI,GAAf,UACE,sBAAUpB,UAAWe,GAAQsT,WAA7B,WACE,mBAAQrU,UAAWe,GAAQuT,gBAA3B,6DAGCjI,IACC,SAAC,IAAD,CACEhF,gBAAiBgF,GACjBjE,SAAU,kBACRmJ,GAAkBlF,GADV,KAKZ,UAAC,EAAAoH,SAAD,YACE,SAAC,IAAD,CACEzR,SAAU,SAACuS,EAAclP,GACvBmH,GAAmB,CACjBoC,YAAa2F,GAAgB,GAC7BpU,IAAmB,OAAfoM,SAAe,IAAfA,QAAA,EAAAA,GAAiBpM,KAAM,GAC3BoS,IAAKlN,GAAY,GACjBmP,MAAqB,OAAfjI,SAAe,IAAfA,QAAA,EAAAA,GAAiBiI,OAAQ,GAC/B3F,cAA6B,OAAftC,SAAe,IAAfA,QAAA,EAAAA,GAAiBsC,eAAgB,KAEjDZ,GAAgB,YACjB,EACD1J,OAAO,YACPpE,GAAG,YACHgE,KAAK,YACLvD,MAAM,MACND,MAAK,OAAE4L,SAAF,IAAEA,QAAF,EAAEA,GAAiBgG,OAE1B,SAAC,IAAD,CACEvQ,SAAU,SAACuS,EAAclP,GACvBmH,GAAmB,CACjBoC,aAA4B,OAAfrC,SAAe,IAAfA,QAAA,EAAAA,GAAiBqC,cAAe,GAC7CzO,IAAmB,OAAfoM,SAAe,IAAfA,QAAA,EAAAA,GAAiBpM,KAAM,GAC3BoS,KAAoB,OAAfhG,SAAe,IAAfA,QAAA,EAAAA,GAAiBgG,MAAO,GAC7BiC,KAAMnP,GAAY,GAClBwJ,aAAc0F,GAAgB,KAEhCtG,GAAgB,aACjB,EACD1J,OAAO,uBACPpE,GAAG,aACHgE,KAAK,aACLvD,MAAM,OACND,MAAK,OAAE4L,SAAF,IAAEA,QAAF,EAAEA,GAAiBiI,mBAQtC,SAAC,KAAD,CAAMrT,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE+B,KAAK,OACLhD,GAAG,QACHgE,KAAK,QACLnC,SAAU,SAACoD,GAAD,OACRuF,GAASvF,EAAElD,OAAOvB,MADV,EAGVC,MAAM,QACN6T,YAAY,oBACZ9T,MAAO+J,QAGX,SAAC,KAAD,CAAMvJ,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE+B,KAAK,SACLiR,IAAI,IACJjU,GAAG,WACHgE,KAAK,WACLnC,SAAU,SAACoD,GAAD,OACRqF,GAAYrF,EAAElD,OAAOvB,MADb,EAGVC,MAAM,WACND,MAAO6J,GACPnG,UAAQ,EACRC,MAAOyJ,GAAgB,UAAgB,QAG3C,SAAC,KAAD,CAAM5M,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,yCAEF,SAAC,KAAD,CAAMD,MAAI,EAACC,GAAI,GAAf,UACE,iBACEpB,UAAS,UAAKe,GAAQ2T,eAAb,YAA+B3T,GAAQ4T,qBADlD,WAGE,gBACE3U,UAAS,UAAKe,GAAQ6T,aAAb,YAA6B7T,GAAQ8T,aADhD,UAGE,SAAC,IAAD,CACE1R,KAAK,SACLhD,GAAG,gCACHgE,KAAK,gCACLnC,SAAU,SAACoD,GACTgG,IAAmB,kBACdD,IADa,IAEhBD,UAAW9F,EAAElD,OAAOvB,QAEvB,EACDC,MAAM,cACND,MAAOwK,GAAgBD,UACvB7G,UAAQ,EACRC,MACEyJ,GAAgB,+BAAqC,GAEvDqG,IAAI,SAGR,gBACEpU,UAAS,UAAKe,GAAQ6T,aAAb,YAA6B7T,GAAQ8T,aADhD,UAGE,SAAC,IAAD,CACE1R,KAAK,SACLhD,GAAG,iCACHgE,KAAK,iCACLnC,SAAU,SAACoD,GACTgG,IAAmB,kBACdD,IADa,IAEhBH,WAAY5F,EAAElD,OAAOvB,QAExB,EACDC,MAAM,eACND,MAAOwK,GAAgBH,WACvB3G,UAAQ,EACRC,MACEyJ,GAAgB,gCAAsC,GAExDqG,IAAI,SAGR,gBACEpU,UAAS,UAAKe,GAAQ6T,aAAb,YAA6B7T,GAAQ8T,aADhD,UAGE,SAAC,IAAD,CACE1R,KAAK,SACLhD,GAAG,8BACHgE,KAAK,8BACLnC,SAAU,SAACoD,GACTgG,IAAmB,kBACdD,IADa,IAEhBL,QAAS1F,EAAElD,OAAOvB,QAErB,EACDC,MAAM,UACND,MAAOwK,GAAgBL,QACvBzG,UAAQ,EACRC,MACEyJ,GAAgB,6BAAmC,GAErDqG,IAAI,cAKZ,SAAC,KAAD,CAAMjT,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACET,MAAM,iCACNR,GAAG,mCACHgE,KAAK,mCACLmP,QAASnI,GAAgBF,aACzBjJ,SAAU,SAACoD,GACT,IACMkO,EADUlO,EAAElD,OACMoR,QACxBlI,IAAmB,kBACdD,IADa,IAEhBF,aAAcqI,IAEjB,EACD1S,MAAO,6BAKf,SAAC,KAAD,CAAMO,MAAI,EAACC,GAAI,GAAIC,GAAI,CAAEsB,QAAS,OAAQG,eAAgB,YAA1D,UACE,SAAC,IAAD,CACE3C,GAAI,kBACJgD,KAAK,SACLE,QAAQ,aACRe,UAAWyI,GACXpG,QAAS,kBAAM4H,IAAe,EAArB,EACTzN,MAAO,gBAMlB,G,mFCpuDD,KAAeL,EAAAA,EAAAA,IA5BA,SAACC,GAAD,aACbC,EAAAA,EAAAA,GAAa,CACXqU,WAAY,CACVtS,OAAO,UAAAhC,EAAMuU,eAAN,eAAezQ,MAAM0Q,OAAQ,YAH3B,GA4Bf,EAfmB,SAAC,GAIK,IAHvBjU,EAGsB,EAHtBA,QACAgG,EAEsB,EAFtBA,aAEsB,IADtBkO,UAAAA,OACsB,SACtB,OACE,UAAC,WAAD,WACGA,IAAa,mBACd,SAAC,IAAD,CAAYzO,UAAU,IAAInD,QAAQ,QAAQrD,UAAWe,EAAQ+T,WAA7D,SACG/N,MAIR,G,wBCjCc,SAASmO,EAAgBC,GAItC,OAHAD,EAAkBhF,OAAOkF,eAAiBlF,OAAOmF,eAAeC,OAAS,SAAyBH,GAChG,OAAOA,EAAEI,WAAarF,OAAOmF,eAAeF,EAC9C,EACOD,EAAgBC,EACzB,C,sGCJe,SAASK,EAAUC,EAAUC,GAC1C,GAA0B,oBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAIC,UAAU,sDAGtBF,EAASG,UAAY1F,OAAO2F,OAAOH,GAAcA,EAAWE,UAAW,CACrEE,YAAa,CACXnV,MAAO8U,EACPM,UAAU,EACVC,cAAc,KAGlB9F,OAAO+F,eAAeR,EAAU,YAAa,CAC3CM,UAAU,IAERL,IAAY,OAAeD,EAAUC,EAC3C,C,kFCfe,SAASQ,EAA2BC,EAAMC,GACvD,GAAIA,IAA2B,YAAlB,OAAQA,IAAsC,oBAATA,GAChD,OAAOA,EACF,QAAa,IAATA,EACT,MAAM,IAAIT,UAAU,4DAGtB,OAAO,OAAsBQ,EAC/B,C","sources":["icons/CertificateIcon.tsx","screens/Console/Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as React from \"react\";\nimport { SVGProps } from \"react\";\n\nconst CertificateIcon = (props: SVGProps<SVGSVGElement>) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={`min-icon`}\n      fill={\"currentcolor\"}\n      viewBox=\"0 0 256 256\"\n      {...props}\n    >\n      <defs>\n        <clipPath id=\"certificate_svg__a\">\n          <path\n            data-name=\"Rect\\xE1ngulo 2156\"\n            fill=\"#07193e\"\n            d=\"M0 0h256v222.048H0z\"\n          />\n        </clipPath>\n      </defs>\n      <g\n        data-name=\"Grupo 4763\"\n        transform=\"translate(0 17)\"\n        clipPath=\"url(#certificate_svg__a)\"\n        fill=\"#07193e\"\n      >\n        <path\n          data-name=\"Trazado 8152\"\n          d=\"M240-.002H16a16 16 0 0 0-16 16v160a16 16 0 0 0 16 16h120l4.64-5.6 7.44-9.12A66.72 66.72 0 0 1 256 98.958v-82.96a16 16 0 0 0-16-16m-130.96 149.7H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 1 1 0 14.592m0-56H47.3a7.3 7.3 0 1 1 0-14.592h61.74a7.3 7.3 0 0 1 0 14.592m66.96-39.3a6.419 6.419 0 0 1-6.4 6.4H46.4a6.419 6.419 0 0 1-6.4-6.4v-1.792a6.419 6.419 0 0 1 6.4-6.4h123.2a6.419 6.419 0 0 1 6.4 6.4Z\"\n        />\n        <path\n          data-name=\"Trazado 8153\"\n          d=\"M256 137.486a50.96 50.96 0 1 0-86.16 36.72l-15.52 18.96 7.2 28.88 29.28-35.68a50.018 50.018 0 0 0 28.4 0l29.28 35.68 7.2-28.88-15.52-18.96a50.75 50.75 0 0 0 15.84-36.72m-50.928 29.688a29.688 29.688 0 0 1-.072-59.376h.072a29.688 29.688 0 0 1 0 59.376\"\n        />\n      </g>\n      <path data-name=\"Rect\\xE1ngulo 2157\" fill=\"none\" d=\"M0 0h256v256H0z\" />\n    </svg>\n  );\n};\nexport default CertificateIcon;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box, InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport { fieldBasic } from \"../common/styleLibrary\";\nimport { CopyIcon } from \"../../../../../icons\";\nimport { Button } from \"mds\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport TooltipWrapper from \"../../TooltipWrapper/TooltipWrapper\";\n\ninterface ICodeWrapper {\n  value: string;\n  label?: string;\n  mode?: string;\n  tooltip?: string;\n  classes: any;\n  onChange?: (editor: any, data: any, value: string) => any;\n  onBeforeChange: (editor: any, data: any, value: string) => any;\n  readOnly?: boolean;\n  editorHeight?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n  });\n\nconst CodeMirrorWrapper = ({\n  value,\n  label = \"\",\n  tooltip = \"\",\n  mode = \"json\",\n  classes,\n  onBeforeChange,\n  readOnly = false,\n  editorHeight = \"250px\",\n}: ICodeWrapper) => {\n  return (\n    <React.Fragment>\n      <Grid item xs={12} sx={{ marginBottom: \"10px\" }}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n        style={{\n          maxHeight: editorHeight,\n          overflow: \"auto\",\n          border: \"1px solid #eaeaea\",\n        }}\n      >\n        <CodeEditor\n          value={value}\n          language={mode}\n          onChange={(evn) => {\n            onBeforeChange(null, null, evn.target.value);\n          }}\n          id={\"code_wrapper\"}\n          padding={15}\n          style={{\n            fontSize: 12,\n            backgroundColor: \"#fefefe\",\n            fontFamily:\n              \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            minHeight: editorHeight || \"initial\",\n            color: \"#000000\",\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          background: \"#f7f7f7\",\n          border: \"1px solid #eaeaea\",\n          borderTop: 0,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"2px\",\n            paddingRight: \"5px\",\n            justifyContent: \"flex-end\",\n            \"& button\": {\n              height: \"26px\",\n              width: \"26px\",\n              padding: \"2px\",\n              \" .min-icon\": {\n                marginLeft: \"0\",\n              },\n            },\n          }}\n        >\n          <TooltipWrapper tooltip={\"Copy to Clipboard\"}>\n            <CopyToClipboard text={value}>\n              <Button\n                type={\"button\"}\n                id={\"copy-code-mirror\"}\n                icon={<CopyIcon />}\n                color={\"primary\"}\n                variant={\"regular\"}\n              />\n            </CopyToClipboard>\n          </TooltipWrapper>\n        </Box>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CodeMirrorWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport Chip from \"@mui/material/Chip\";\nimport {\n  Box,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\nimport Moment from \"react-moment\";\nimport CertificateIcon from \"../../../../icons/CertificateIcon\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    certificateIcon: {\n      float: \"left\",\n      paddingTop: \"5px !important\",\n      paddingRight: \"10px !important\",\n    },\n    certificateInfo: { float: \"right\" },\n    certificateWrapper: {\n      height: \"auto\",\n      margin: 5,\n      border: \"1px solid #E2E2E2\",\n      userSelect: \"text\",\n      borderRadius: 4,\n      \"& h6\": {\n        fontWeight: \"bold\",\n      },\n      \"& div\": {\n        padding: 0,\n      },\n    },\n    certificateExpiry: {\n      color: \"#616161\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      marginBottom: 5,\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateDomains: {\n      color: \"#616161\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificatesList: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 4,\n      color: \"#616161\",\n      textTransform: \"lowercase\",\n      overflowY: \"scroll\",\n      maxHeight: 145,\n      marginBottom: 10,\n    },\n    certificatesListItem: {\n      padding: \"0px 16px\",\n      borderBottom: \"1px solid #E2E2E2\",\n      \"& div\": {\n        minWidth: 0,\n      },\n      \"& svg\": {\n        fontSize: 12,\n        marginRight: 10,\n        opacity: 0.5,\n      },\n      \"& span\": {\n        fontSize: 12,\n      },\n    },\n  });\n\ninterface ITLSCertificate {\n  classes: any;\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  classes,\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n  return (\n    <Chip\n      key={certificateInfo.name}\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.certificateWrapper}\n      label={\n        <Container>\n          <Grid item xs={1} className={classes.certificateIcon}>\n            <CertificateIcon />\n          </Grid>\n          <Grid item xs={11} className={classes.certificateInfo}>\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n              {certificateInfo.name}\n            </Typography>\n            <Box className={classes.certificateExpiry}>\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expiry:&nbsp;</span>\n              <span>\n                <Moment format=\"YYYY/MM/DD\">{certificateInfo.expiry}</Moment>\n              </span>\n            </Box>\n            <Divider />\n            <br />\n            <Box className={classes.certificateDomains}>\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n            </Box>\n            <List className={classes.certificatesList}>\n              {certificates.map((dom) => (\n                <ListItem className={classes.certificatesListItem}>\n                  <ListItemAvatar>\n                    <LanguageIcon />\n                  </ListItemAvatar>\n                  <ListItemText primary={dom} />\n                </ListItem>\n              ))}\n            </List>\n          </Grid>\n        </Container>\n      }\n      onDelete={onDelete}\n    />\n  );\n};\n\nexport default withStyles(styles)(TLSCertificate);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {\n  ICertificateInfo,\n  ISecurityContext,\n  ITenantEncryptionResponse,\n} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport { DialogContentText } from \"@mui/material\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport SectionTitle from \"../../Common/SectionTitle\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport CodeMirrorWrapper from \"../../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\n\ninterface ITenantEncryption {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantEncryption = ({ classes }: ITenantEncryption) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const [editRawConfiguration, setEditRawConfiguration] = useState<number>(0);\n  const [encryptionRawConfiguration, setEncryptionRawConfiguration] =\n    useState<string>(\"\");\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"2\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<ISecurityContext>({\n    fsGroup: \"1000\",\n    fsGroupChangePolicy: \"Always\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [serverTLSCertificateSecret, setServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificateSecret, setMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [mTLSCertificate, setMTLSCertificate] = useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\n    useState<boolean>(false);\n  const [vaultClientCertificateSecret, setVaultClientCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultCACertificateSecret, setVaultCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [vaultClientCertificate, setVaultClientCertificate] =\n    useState<KeyPair | null>(null);\n  const [serverCertificate, setServerCertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [vaultCACertificate, setVaultCACertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [gemaltoCACertificateSecret, setGemaltoCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [gemaltoCACertificate, setGemaltotCACertificate] =\n    useState<KeyPair | null>(null);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: serverCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: serverCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: mTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: mTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    serverCertificate?.encoded_key,\n    serverCertificate?.encoded_cert,\n    mTLSCertificate?.encoded_key,\n    mTLSCertificate?.encoded_cert,\n    vaultClientCertificate?.encoded_key,\n    vaultClientCertificate?.encoded_cert,\n    vaultCACertificate?.encoded_key,\n    vaultCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          setEncryptionRawConfiguration(resp.raw);\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n            if (resp.vault.tls) {\n              setVaultClientCertificateSecret(resp.vault.tls.crt);\n              setVaultCACertificateSecret(resp.vault.tls.ca);\n            }\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n            if (resp.gemalto.keysecure.tls) {\n              setGemaltoCACertificateSecret(resp.gemalto.keysecure.tls.ca);\n            }\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server || resp.mtls_client) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server) {\n            setServerTLSCertificateSecret(resp.server);\n          }\n          if (resp.mtls_client) {\n            setMTLSCertificateSecret(resp.mtls_client);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === serverTLSCertificateSecret?.name) {\n      setServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === mTLSCertificateSecret?.name) {\n      setMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultClientCertificateSecret?.name) {\n      setVaultClientCertificateSecret(null);\n    }\n    if (certificateInfo.name === vaultCACertificateSecret?.name) {\n      setVaultCACertificateSecret(null);\n    }\n    if (certificateInfo.name === gemaltoCACertificateSecret?.name) {\n      setGemaltoCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          let gemaltoCAIntroduce = {};\n\n          if (gemaltoCACertificate?.encoded_cert) {\n            gemaltoCAIntroduce = {\n              tls: {\n                ca: gemaltoCACertificate?.encoded_cert,\n              },\n            };\n          }\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry\n                  ),\n                },\n                ...gemaltoCAIntroduce,\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          let vaultKeyPair = null;\n          let vaultCAInsert = null;\n          if (\n            vaultClientCertificate?.encoded_key &&\n            vaultClientCertificate?.encoded_cert\n          ) {\n            vaultKeyPair = {\n              key: vaultClientCertificate?.encoded_key,\n              crt: vaultClientCertificate?.encoded_cert,\n            };\n          }\n          if (vaultCACertificate?.encoded_cert) {\n            vaultCAInsert = {\n              ca: vaultCACertificate?.encoded_cert,\n            };\n          }\n          let vaultTLS = null;\n          if (vaultKeyPair || vaultCAInsert) {\n            vaultTLS = {\n              tls: {\n                ...vaultKeyPair,\n                ...vaultCAInsert,\n              },\n            };\n          }\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              ...vaultTLS,\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n\n      if (mTLSCertificate?.encoded_key && mTLSCertificate?.encoded_cert) {\n        encryptionClientKeyPair = {\n          client: {\n            key: mTLSCertificate?.encoded_key,\n            crt: mTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      if (serverCertificate?.encoded_key && serverCertificate?.encoded_cert) {\n        encryptionServerKeyPair = {\n          server: {\n            key: serverCertificate?.encoded_key,\n            crt: serverCertificate?.encoded_cert,\n          },\n        };\n      }\n      const dataSend = {\n        raw: editRawConfiguration ? encryptionRawConfiguration : \"\",\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {}\n          )\n          .then(() => {\n            fetchEncryptionInfo();\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {confirmOpen && (\n        <ConfirmDialog\n          isOpen={confirmOpen}\n          title={\n            encryptionEnabled\n              ? \"Enable encryption at rest for tenant?\"\n              : \"Disable encryption at rest for tenant?\"\n          }\n          confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n          cancelText=\"Cancel\"\n          onClose={() => setConfirmOpen(false)}\n          onConfirm={updateEncryptionConfiguration}\n          confirmationContent={\n            <DialogContentText>\n              {encryptionEnabled\n                ? \"Data will be encrypted using and external KMS\"\n                : \"Current encrypted information will not be accessible\"}\n            </DialogContentText>\n          }\n        />\n      )}\n      <Grid container spacing={1}>\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Encryption</h1>\n        </Grid>\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={encryptionEnabled}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={() => {\n              setEncryptionEnabled(!encryptionEnabled);\n            }}\n            description=\"\"\n          />\n        </Grid>\n        <Grid xs={12}>\n          <hr className={classes.hrClass} />\n        </Grid>\n        {encryptionEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <Tabs\n                value={editRawConfiguration}\n                onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\n                  setEditRawConfiguration(newValue);\n                }}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                aria-label=\"cluster-tabs\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                <Tab id=\"kms-options\" label=\"Options\" />\n                <Tab id=\"kms-raw-configuration\" label=\"Raw Edit\" />\n              </Tabs>\n            </Grid>\n\n            {editRawConfiguration ? (\n              <Fragment>\n                <Grid item xs={12}>\n                  <CodeMirrorWrapper\n                    value={encryptionRawConfiguration}\n                    mode={\"yaml\"}\n                    onBeforeChange={(editor, data, value) => {\n                      setEncryptionRawConfiguration(value);\n                    }}\n                    editorHeight={\"550px\"}\n                  />\n                </Grid>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <Grid item xs={12} className={classes.encryptionTypeOptions}>\n                  <RadioGroupSelector\n                    currentSelection={encryptionType}\n                    id=\"encryptionType\"\n                    name=\"encryptionType\"\n                    label=\"KMS\"\n                    onChange={(e) => {\n                      setEncryptionType(e.target.value);\n                    }}\n                    selectorOptions={[\n                      { label: \"Vault\", value: \"vault\" },\n                      { label: \"AWS\", value: \"aws\" },\n                      { label: \"Gemalto\", value: \"gemalto\" },\n                      { label: \"GCP\", value: \"gcp\" },\n                      { label: \"Azure\", value: \"azure\" },\n                    ]}\n                  />\n                </Grid>\n                {encryptionType === \"vault\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_endpoint\"\n                        name=\"vault_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            endpoint: e.target.value,\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={vaultConfiguration?.endpoint || \"\"}\n                        error={validationErrors[\"vault_ping\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_engine\"\n                        name=\"vault_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            engine: e.target.value,\n                          })\n                        }\n                        label=\"Engine\"\n                        value={vaultConfiguration?.engine || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_namespace\"\n                        name=\"vault_namespace\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            namespace: e.target.value,\n                          })\n                        }\n                        label=\"Namespace\"\n                        value={vaultConfiguration?.namespace || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_prefix\"\n                        name=\"vault_prefix\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            prefix: e.target.value,\n                          })\n                        }\n                        label=\"Prefix\"\n                        value={vaultConfiguration?.prefix || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>App Role</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_approle_engine\"\n                        name=\"vault_approle_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              engine: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Engine\"\n                        value={vaultConfiguration?.approle?.engine || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type={showVaultAppRoleID ? \"text\" : \"password\"}\n                        id=\"vault_id\"\n                        name=\"vault_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              id: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"AppRole ID\"\n                        value={vaultConfiguration?.approle?.id || \"\"}\n                        required\n                        error={validationErrors[\"vault_id\"] || \"\"}\n                        overlayIcon={\n                          showVaultAppRoleID ? (\n                            <VisibilityOffIcon />\n                          ) : (\n                            <RemoveRedEyeIcon />\n                          )\n                        }\n                        overlayAction={() =>\n                          setShowVaultAppRoleID(!showVaultAppRoleID)\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type={showVaultAppRoleSecret ? \"text\" : \"password\"}\n                        id=\"vault_secret\"\n                        name=\"vault_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              secret: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"AppRole Secret\"\n                        value={vaultConfiguration?.approle?.secret || \"\"}\n                        required\n                        error={validationErrors[\"vault_secret\"] || \"\"}\n                        overlayIcon={\n                          showVaultAppRoleSecret ? (\n                            <VisibilityOffIcon />\n                          ) : (\n                            <RemoveRedEyeIcon />\n                          )\n                        }\n                        overlayAction={() =>\n                          setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"vault_retry\"\n                        name=\"vault_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              retry: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Retry (Seconds)\"\n                        error={validationErrors[\"vault_retry\"] || \"\"}\n                        value={vaultConfiguration?.approle?.retry || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Vault Certificates (optional)</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Mutual TLS authentication with Vault (optional)\n                        </legend>\n                        {vaultClientCertificateSecret ? (\n                          <TLSCertificate\n                            certificateInfo={vaultClientCertificateSecret}\n                            onDelete={() =>\n                              removeCertificate(vaultClientCertificateSecret)\n                            }\n                          />\n                        ) : (\n                          <Fragment>\n                            <FileSelector\n                              onChange={(encodedValue, fileName) =>\n                                setVaultClientCertificate({\n                                  encoded_key: encodedValue || \"\",\n                                  id: vaultClientCertificate?.id || \"\",\n                                  key: fileName || \"\",\n                                  cert: vaultClientCertificate?.cert || \"\",\n                                  encoded_cert:\n                                    vaultClientCertificate?.encoded_cert || \"\",\n                                })\n                              }\n                              accept=\".key,.pem\"\n                              id=\"vault_key\"\n                              name=\"vault_key\"\n                              label=\"Key\"\n                              value={vaultClientCertificate?.key || \"\"}\n                            />\n                            <FileSelector\n                              onChange={(encodedValue, fileName) =>\n                                setVaultClientCertificate({\n                                  encoded_key:\n                                    vaultClientCertificate?.encoded_key || \"\",\n                                  id: vaultClientCertificate?.id || \"\",\n                                  key: vaultClientCertificate?.key || \"\",\n                                  cert: fileName || \"\",\n                                  encoded_cert: encodedValue || \"\",\n                                })\n                              }\n                              accept=\".cer,.crt,.cert,.pem\"\n                              id=\"vault_cert\"\n                              name=\"vault_cert\"\n                              label=\"Cert\"\n                              value={vaultClientCertificate?.cert || \"\"}\n                            />\n                          </Fragment>\n                        )}\n                      </fieldset>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Vault CA certificate (optional)\n                        </legend>\n                        {vaultCACertificateSecret ? (\n                          <TLSCertificate\n                            certificateInfo={vaultCACertificateSecret}\n                            onDelete={() =>\n                              removeCertificate(vaultCACertificateSecret)\n                            }\n                          />\n                        ) : (\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              setVaultCACertificate({\n                                encoded_key:\n                                  vaultCACertificate?.encoded_key || \"\",\n                                id: vaultCACertificate?.id || \"\",\n                                key: vaultCACertificate?.key || \"\",\n                                cert: fileName || \"\",\n                                encoded_cert: encodedValue || \"\",\n                              })\n                            }\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"vault_ca\"\n                            name=\"vault_ca\"\n                            label=\"CA\"\n                            value={vaultCACertificate?.cert || \"\"}\n                          />\n                        )}\n                      </fieldset>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Status</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"vault_ping\"\n                        name=\"vault_ping\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            status: {\n                              ...vaultConfiguration?.status,\n                              ping: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Ping (Seconds)\"\n                        error={validationErrors[\"vault_ping\"] || \"\"}\n                        value={vaultConfiguration?.status?.ping || \"\"}\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"azure\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_endpoint\"\n                        name=\"azure_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        error={validationErrors[\"azure_endpoint\"] || \"\"}\n                        value={azureConfiguration?.keyvault?.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_tenant_id\"\n                        name=\"azure_tenant_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                tenant_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Tenant ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.tenant_id || \"\"\n                        }\n                        error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_id\"\n                        name=\"azure_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_id || \"\"\n                        }\n                        error={validationErrors[\"azure_client_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_secret\"\n                        name=\"azure_client_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_secret: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Secret\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_secret || \"\"\n                        }\n                        error={validationErrors[\"azure_client_secret\"] || \"\"}\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gcp\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_project_id\"\n                        name=\"gcp_project_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              project_id: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Project ID\"\n                        value={gcpConfiguration?.secretmanager.project_id || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_endpoint\"\n                        name=\"gcp_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={gcpConfiguration?.secretmanager.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_email\"\n                        name=\"gcp_client_email\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_email: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Email\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_email || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_id\"\n                        name=\"gcp_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key_id\"\n                        name=\"gcp_private_key_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key\"\n                        name=\"gcp_private_key\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key || \"\"\n                        }\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"aws\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_endpoint\"\n                        name=\"aws_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\n                        required\n                        error={validationErrors[\"aws_endpoint\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_region\"\n                        name=\"aws_region\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              region: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Region\"\n                        value={awsConfiguration?.secretsmanager?.region || \"\"}\n                        error={validationErrors[\"aws_region\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_kmsKey\"\n                        name=\"aws_kmsKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              kmskey: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"KMS Key\"\n                        value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_accessKey\"\n                        name=\"aws_accessKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                accesskey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Access Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.accesskey || \"\"\n                        }\n                        error={validationErrors[\"aws_accessKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_secretKey\"\n                        name=\"aws_secretKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                secretkey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Secret Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.secretkey || \"\"\n                        }\n                        error={validationErrors[\"aws_secretKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_token\"\n                        name=\"aws_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.token || \"\"\n                        }\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gemalto\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_endpoint\"\n                        name=\"gemalto_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\n                        error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_token\"\n                        name=\"gemalto_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.token ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_token\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_domain\"\n                        name=\"gemalto_domain\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                domain: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Domain\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials\n                            ?.domain || \"\"\n                        }\n                        error={validationErrors[\"gemalto_domain\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"gemalto_retry\"\n                        name=\"gemalto_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                retry: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Retry (seconds)\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.retry ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_retry\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      xs={12}\n                      style={{\n                        marginBottom: 15,\n                      }}\n                    >\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Custom CA Root certificate verification\n                        </legend>\n                        {gemaltoCACertificateSecret ? (\n                          <TLSCertificate\n                            certificateInfo={gemaltoCACertificateSecret}\n                            onDelete={() =>\n                              removeCertificate(gemaltoCACertificateSecret)\n                            }\n                          />\n                        ) : (\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              setGemaltotCACertificate({\n                                encoded_key:\n                                  gemaltoCACertificate?.encoded_key || \"\",\n                                id: gemaltoCACertificate?.id || \"\",\n                                key: gemaltoCACertificate?.key || \"\",\n                                cert: fileName || \"\",\n                                encoded_cert: encodedValue || \"\",\n                              })\n                            }\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"gemalto_ca\"\n                            name=\"gemalto_ca\"\n                            label=\"CA\"\n                            value={gemaltoCACertificate?.cert || \"\"}\n                          />\n                        )}\n                      </fieldset>\n                    </Grid>\n                  </Fragment>\n                )}\n              </Fragment>\n            )}\n\n            <Grid item xs={12}>\n              <SectionTitle>Additional Configuration for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCertsForKES\"\n                id=\"enableCustomCertsForKES\"\n                name=\"enableCustomCertsForKES\"\n                checked={enabledCustomCertificates}\n                onChange={() =>\n                  setEnabledCustomCertificates(!enabledCustomCertificates)\n                }\n                label={\"Custom Certificates\"}\n              />\n            </Grid>\n            {enabledCustomCertificates && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      KES server TLS Certificates (optional)\n                    </legend>\n                    {serverTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={serverTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(serverTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setServerCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: serverCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: serverCertificate?.cert || \"\",\n                              encoded_cert:\n                                serverCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"serverKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"serverKey\"\n                          name=\"serverKey\"\n                          label=\"Key\"\n                          value={serverCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setServerCertificate({\n                              encoded_key: serverCertificate?.encoded_key || \"\",\n                              id: serverCertificate?.id || \"\",\n                              key: serverCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"serverCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"serverCert\"\n                          name=\"serverCert\"\n                          label=\"Cert\"\n                          value={serverCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication with MinIO (optional)\n                    </legend>\n                    {mTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={mTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(mTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: mTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: mTLSCertificate?.cert || \"\",\n                              encoded_cert: mTLSCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"clientKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"clientKey\"\n                          name=\"clientKey\"\n                          label=\"Key\"\n                          value={mTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMTLSCertificate({\n                              encoded_key: mTLSCertificate?.encoded_key || \"\",\n                              id: mTLSCertificate?.id || \"\",\n                              key: mTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"clientCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"clientCert\"\n                          name=\"clientCert\"\n                          label=\"Cert\"\n                          value={mTLSCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"text\"\n                id=\"image\"\n                name=\"image\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setImage(e.target.value)\n                }\n                label=\"Image\"\n                placeholder=\"minio/kes:v0.17.6\"\n                value={image}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setReplicas(e.target.value)\n                }\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <SectionTitle>SecurityContext for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n              >\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsUser\"\n                    name=\"kes_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsGroup\"\n                    name=\"kes_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_fsGroup\"\n                    name=\"kes_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"kesSecurityContextRunAsNonRoot\"\n                id=\"kes_securityContext_runAsNonRoot\"\n                name=\"kes_securityContext_runAsNonRoot\"\n                checked={securityContext.runAsNonRoot}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setSecurityContext({\n                    ...securityContext,\n                    runAsNonRoot: checked,\n                  });\n                }}\n                label={\"Do not run as Root\"}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        <Grid item xs={12} sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button\n            id={\"save-encryption\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={!isFormValid}\n            onClick={() => setConfirmOpen(true)}\n            label={\"Save\"}\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantEncryption);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}"],"names":["props","xmlns","className","fill","viewBox","id","d","transform","clipPath","withStyles","theme","createStyles","fieldBasic","value","label","tooltip","mode","classes","onBeforeChange","readOnly","editorHeight","item","xs","sx","marginBottom","inputLabel","tooltipContainer","title","placement","style","maxHeight","overflow","border","language","onChange","evn","target","padding","fontSize","backgroundColor","fontFamily","minHeight","color","background","borderTop","display","alignItems","paddingRight","justifyContent","height","width","marginLeft","text","type","icon","variant","tooltipHelper","valueString","maxWidth","whiteSpace","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","fontWeight","textBoxContainer","paddingLeft","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","Grid","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","Tooltip","HelpIcon","e","fileName","get","evt","callback","file","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","certificateIcon","float","paddingTop","certificateInfo","certificateWrapper","userSelect","borderRadius","certificateExpiry","flexWrap","certificateDomains","certificatesList","textTransform","overflowY","certificatesListItem","borderBottom","minWidth","marginRight","opacity","onDelete","certificates","domains","gutterBottom","format","expiry","map","dom","primary","tenantDetailsStyles","spacingUtils","bold","italic","fontStyle","fileItem","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","editRawConfiguration","setEditRawConfiguration","encryptionRawConfiguration","setEncryptionRawConfiguration","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","fsGroup","fsGroupChangePolicy","runAsGroup","runAsNonRoot","runAsUser","securityContext","setSecurityContext","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","serverTLSCertificateSecret","setServerTLSCertificateSecret","mTLSCertificateSecret","setMTLSCertificateSecret","mTLSCertificate","setMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","showVaultAppRoleID","setShowVaultAppRoleID","isFormValid","setIsFormValid","showVaultAppRoleSecret","setShowVaultAppRoleSecret","vaultClientCertificateSecret","setVaultClientCertificateSecret","vaultCACertificateSecret","setVaultCACertificateSecret","vaultClientCertificate","setVaultClientCertificate","serverCertificate","setServerCertificate","vaultCACertificate","setVaultCACertificate","gemaltoCACertificateSecret","setGemaltoCACertificateSecret","gemaltoCACertificate","setGemaltotCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","fieldKey","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","Object","keys","fetchEncryptionInfo","api","namespace","then","resp","raw","vault","tls","crt","ca","aws","gemalto","gcp","azure","server","mtls_client","catch","err","console","removeCertificate","isOpen","confirmText","cancelText","onClose","onConfirm","insertEncrypt","gemaltoCAIntroduce","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","key","vaultTLS","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","client","dataSend","secretsToBeDeleted","setErrorSnackMessage","confirmationContent","container","sectionTitle","textAlign","indicatorLabels","checked","description","hrClass","Fragment","newValue","indicatorColor","textColor","scrollButtons","editor","encryptionTypeOptions","currentSelection","selectorOptions","overlayIcon","overlayAction","min","fieldGroup","descriptionText","encodedValue","cert","placeholder","multiContainer","responsiveContainer","formFieldRow","rightSpacer","errorBlock","palette","main","withBreak","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","subClass","superClass","TypeError","prototype","create","constructor","writable","configurable","defineProperty","_possibleConstructorReturn","self","call"],"sourceRoot":""}