{"version":3,"file":"static/js/5646.b8051dec.chunk.js","mappings":"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","sources":["common/HelpBox.tsx","screens/Console/Common/CredentialsPrompt/CredentialItem.tsx","screens/Console/Common/CredentialsPrompt/CredentialsPrompt.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Tenants/AddTenant/Steps/Configure.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider.tsx","screens/Console/Tenants/AddTenant/Steps/Security.tsx","screens/Console/Common/SectionH1.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption.tsx","screens/Console/Tenants/AddTenant/Steps/Affinity.tsx","screens/Console/Tenants/AddTenant/Steps/Images.tsx","screens/Console/Tenants/AddTenant/Steps/helpers/AddNamespaceModal.tsx","screens/Console/Tenants/AddTenant/Steps/SizePreview.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NameTenantMain.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantResources.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigLogSearch.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigPrometheus.tsx","screens/Console/Tenants/AddTenant/AddTenant.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 2,\n      backgroundColor: \"#FBFAFA\",\n      paddingLeft: 25,\n      paddingTop: 31,\n      paddingBottom: 21,\n      paddingRight: 30,\n    },\n    leftItems: {\n      fontSize: 16,\n      fontWeight: \"bold\",\n      marginBottom: 15,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& .min-icon\": {\n        marginRight: 15,\n        height: 28,\n        width: 38,\n      },\n    },\n    helpText: {\n      fontSize: 16,\n      paddingLeft: 5,\n    },\n  });\n\ninterface IHelpBox {\n  classes: any;\n  iconComponent: any;\n  title: string;\n  help: any;\n}\n\nconst HelpBox = ({ classes, iconComponent, title, help }: IHelpBox) => {\n  return (\n    <div className={classes.root}>\n      <Grid container>\n        <Grid item xs={12} className={classes.leftItems}>\n          {iconComponent}\n          {title}\n        </Grid>\n        <Grid item xs={12} className={classes.helpText}>\n          {help}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(HelpBox);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { InputAdornment, OutlinedInput } from \"@mui/material\";\nimport BoxIconButton from \"../BoxIconButton/BoxIconButton\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { CopyIcon } from \"../../../../icons\";\nimport { fieldBasic } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      padding: \"20px 0 8px 0\",\n    },\n    inputWithCopy: {\n      \"& .MuiInputBase-root \": {\n        width: \"100%\",\n        background: \"#FBFAFA\",\n        \"& .MuiInputBase-input\": {\n          height: \".8rem\",\n        },\n        \"& .MuiInputAdornment-positionEnd\": {\n          marginRight: \".5rem\",\n          \"& .MuiButtonBase-root\": {\n            height: \"2rem\",\n          },\n        },\n      },\n      \"& .MuiButtonBase-root .min-icon\": {\n        width: \".8rem\",\n        height: \".8rem\",\n      },\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: \".8rem\",\n    },\n  });\n\nconst CredentialItem = ({\n  label = \"\",\n  value = \"\",\n  classes = {},\n}: {\n  label: string;\n  value: string;\n  classes: any;\n}) => {\n  return (\n    <div className={classes.container}>\n      <div className={classes.inputLabel}>{label}:</div>\n      <div className={classes.inputWithCopy}>\n        <OutlinedInput\n          value={value}\n          readOnly\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <CopyToClipboard text={value}>\n                <BoxIconButton\n                  aria-label=\"copy\"\n                  tooltip={\"Copy\"}\n                  onClick={() => {}}\n                  onMouseDown={() => {}}\n                  edge=\"end\"\n                >\n                  <CopyIcon />\n                </BoxIconButton>\n              </CopyToClipboard>\n            </InputAdornment>\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(CredentialItem);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { NewServiceAccount } from \"./types\";\nimport ModalWrapper from \"../ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport CredentialItem from \"./CredentialItem\";\nimport WarnIcon from \"../../../../icons/WarnIcon\";\nimport { DownloadIcon, ServiceAccountCredentialsIcon } from \"../../../../icons\";\n\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n    credentialTitle: {\n      padding: \".8rem 0 0 0\",\n      fontWeight: 600,\n      fontSize: \".9rem\",\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \"1rem\",\n    },\n    credentialsPanel: {\n      overflowY: \"auto\",\n      maxHeight: 350,\n    },\n    promptTitle: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    buttonSpacer: {\n      marginRight: \".9rem\",\n    },\n  });\n\ninterface ICredentialsPromptProps {\n  classes: any;\n  newServiceAccount: NewServiceAccount | null;\n  open: boolean;\n  entity: string;\n  closeModal: () => void;\n}\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n};\n\nconst CredentialsPrompt = ({\n  classes,\n  newServiceAccount,\n  open,\n  closeModal,\n  entity,\n}: ICredentialsPromptProps) => {\n  if (!newServiceAccount) {\n    return null;\n  }\n  const consoleCreds = get(newServiceAccount, \"console\", null);\n  const idp = get(newServiceAccount, \"idp\", false);\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModal();\n      }}\n      title={\n        <div className={classes.promptTitle}>\n          <div>New {entity} Created</div>\n        </div>\n      }\n      titleIcon={<ServiceAccountCredentialsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formScrollable}>\n          A new {entity} has been created with the following details:\n          {!idp && consoleCreds && (\n            <React.Fragment>\n              <Grid item xs={12} className={classes.credentialsPanel}>\n                <div className={classes.credentialTitle}>\n                  Console Credentials\n                </div>\n                {Array.isArray(consoleCreds) &&\n                  consoleCreds.map((credentialsPair, index) => {\n                    return (\n                      <>\n                        <CredentialItem\n                          label=\"Access Key\"\n                          value={credentialsPair.accessKey}\n                        />\n                        <CredentialItem\n                          label=\"Secret Key\"\n                          value={credentialsPair.secretKey}\n                        />\n                      </>\n                    );\n                  })}\n                {!Array.isArray(consoleCreds) && (\n                  <>\n                    <CredentialItem\n                      label=\"Access Key\"\n                      value={consoleCreds.accessKey}\n                    />\n                    <CredentialItem\n                      label=\"Secret Key\"\n                      value={consoleCreds.secretKey}\n                    />\n                  </>\n                )}\n              </Grid>\n            </React.Fragment>\n          )}\n          {(consoleCreds === null || consoleCreds === undefined) && (\n            <>\n              <CredentialItem\n                label=\"Access Key\"\n                value={newServiceAccount.accessKey || \"\"}\n              />\n              <CredentialItem\n                label=\"Secret Key\"\n                value={newServiceAccount.secretKey || \"\"}\n              />\n            </>\n          )}\n          {idp ? (\n            <div className={classes.warningBlock}>\n              Please Login via the configured external identity provider.\n            </div>\n          ) : (\n            <div className={classes.warningBlock}>\n              <WarnIcon />\n              <span>\n                Write these down, as this is the only time the secret will be\n                displayed.\n              </span>\n            </div>\n          )}\n        </Grid>\n        <Grid item xs={12} className={classes.buttonContainer}>\n          {!idp && (\n            <>\n              <RBIconButton\n                id={\"download-button\"}\n                tooltip={\n                  \"Download credentials in a JSON file formatted for import using mc alias import. This will only include the default login credentials.\"\n                }\n                text={\"Download for import\"}\n                className={classes.buttonSpacer}\n                onClick={() => {\n                  let consoleExtras = {};\n\n                  if (consoleCreds) {\n                    if (!Array.isArray(consoleCreds)) {\n                      consoleExtras = {\n                        url: consoleCreds.url,\n                        accessKey: consoleCreds.accessKey,\n                        secretKey: consoleCreds.secretKey,\n                        api: \"s3v4\",\n                        path: \"auto\",\n                      };\n                    } else {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          url: itemMap.url,\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                          api: \"s3v4\",\n                          path: \"auto\",\n                        };\n                      });\n                      consoleExtras = cCreds[0];\n                    }\n                  } else {\n                    consoleExtras = {\n                      url: newServiceAccount.url,\n                      accessKey: newServiceAccount.accessKey,\n                      secretKey: newServiceAccount.secretKey,\n                      api: \"s3v4\",\n                      path: \"auto\",\n                    };\n                  }\n\n                  download(\n                    \"credentials.json\",\n                    JSON.stringify({\n                      ...consoleExtras,\n                    })\n                  );\n                }}\n                icon={<DownloadIcon />}\n                variant=\"contained\"\n                color=\"primary\"\n              />\n\n              {Array.isArray(consoleCreds) && consoleCreds.length > 1 && (\n                <RBIconButton\n                  id={\"download-all-button\"}\n                  tooltip={\n                    \"Download all access credentials to a JSON file. NOTE: This file is not formatted for import using mc alias import. If you plan to import this alias from the file, please use the Download for Import button. \"\n                  }\n                  text={\"Download all access credentials\"}\n                  className={classes.buttonSpacer}\n                  onClick={() => {\n                    let allCredentials = {};\n                    if (consoleCreds) {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                        };\n                      });\n                      allCredentials = cCreds;\n                    }\n                    download(\n                      \"all_credentials.json\",\n                      JSON.stringify({\n                        ...allCredentials,\n                      })\n                    );\n                  }}\n                  icon={<DownloadIcon />}\n                  variant=\"contained\"\n                  color=\"primary\"\n                />\n              )}\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(CredentialsPrompt);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n  titleIcon = null,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  addNewMinIODomain,\n  isPageValid,\n  removeMinIODomain,\n  updateAddField,\n} from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addNewMinIODomain: typeof addNewMinIODomain;\n  removeMinIODomain: typeof removeMinIODomain;\n  classes: any;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  tenantCustom: boolean;\n  setDomains: boolean;\n  consoleDomain: string;\n  minioDomains: string[];\n  tenantSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n      marginBottom: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n    wrapperContainer: {\n      display: \"flex\",\n      marginBottom: 15,\n    },\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        width: 15,\n        height: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Configure = ({\n  classes,\n  exposeMinIO,\n  exposeConsole,\n  tenantCustom,\n  updateAddField,\n  setDomains,\n  consoleDomain,\n  minioDomains,\n  isPageValid,\n  tenantSecurityContext,\n  addNewMinIODomain,\n  removeMinIODomain,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (tenantCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"tenant_securityContext_runAsUser\",\n          required: true,\n          value: tenantSecurityContext.runAsUser,\n          customValidation:\n            tenantSecurityContext.runAsUser === \"\" ||\n            parseInt(tenantSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_runAsGroup\",\n          required: true,\n          value: tenantSecurityContext.runAsGroup,\n          customValidation:\n            tenantSecurityContext.runAsGroup === \"\" ||\n            parseInt(tenantSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_fsGroup\",\n          required: true,\n          value: tenantSecurityContext.fsGroup,\n          customValidation:\n            tenantSecurityContext.fsGroup === \"\" ||\n            parseInt(tenantSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    if (setDomains) {\n      const minioExtraValidations = minioDomains.map((validation, index) => {\n        return {\n          fieldKey: `minio-domain-${index.toString()}`,\n          required: false,\n          value: validation,\n          pattern:\n            /((http|https):\\/\\/)+[a-zA-Z0-9\\-.]{3,}\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2,})?$/,\n          customPatternMessage:\n            \"MinIO domain is not in the form of http|https://subdomain.domain\",\n        };\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        ...minioExtraValidations,\n        {\n          fieldKey: \"console_domain\",\n          required: false,\n          value: consoleDomain,\n          pattern:\n            /((http|https):\\/\\/)+[a-zA-Z0-9\\-.]{3,}\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2,})?(:[1-9]{1}([0-9]{1,4})?)?(\\/[a-zA-Z0-9]{1,})*?$/,\n          customPatternMessage:\n            \"Console domain is not in the form of http|https://subdomain.domain:port/subpath1/subpath2\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    isPageValid,\n    tenantCustom,\n    tenantSecurityContext,\n    setDomains,\n    consoleDomain,\n    minioDomains,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const updateMinIODomain = (value: string, index: number) => {\n    const copyDomains = [...minioDomains];\n    copyDomains[index] = value;\n\n    updateField(\"minioDomains\", copyDomains);\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Configure</h3>\n        <span className={classes.descriptionText}>\n          Basic configurations for tenant management\n        </span>\n      </div>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Services</h3>\n        <span className={classes.descriptionText}>\n          Whether the tenant's services should request an external IP via\n          LoadBalancer service type.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_minio\"\n          id=\"expose_minio\"\n          name=\"expose_minio\"\n          checked={exposeMinIO}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeMinIO\", checked);\n          }}\n          label={\"Expose MiniO Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_console\"\n          id=\"expose_console\"\n          name=\"expose_console\"\n          checked={exposeConsole}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeConsole\", checked);\n          }}\n          label={\"Expose Console Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"custom_domains\"\n          id=\"custom_domains\"\n          name=\"custom_domains\"\n          checked={setDomains}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"setDomains\", checked);\n          }}\n          label={\"Set Custom Domains\"}\n        />\n      </Grid>\n      {setDomains && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              Custom Domains for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div className={classes.containerItem}>\n                <InputBoxWrapper\n                  id=\"console_domain\"\n                  name=\"console_domain\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"consoleDomain\", e.target.value);\n                    cleanValidation(\"tenant_securityContext_runAsUser\");\n                  }}\n                  label=\"Console Domain\"\n                  value={consoleDomain}\n                  placeholder={\n                    \"Eg. http://subdomain.domain:port/subpath1/subpath2\"\n                  }\n                  error={validationErrors[\"console_domain\"] || \"\"}\n                />\n              </div>\n              <div>\n                <h4>MinIO Domains</h4>\n                <div className={`${classes.responsiveSectionItem}`}>\n                  {minioDomains.map((domain, index) => {\n                    return (\n                      <div\n                        className={`${classes.containerItem} ${classes.wrapperContainer}`}\n                        key={`minio-domain-key-${index.toString()}`}\n                      >\n                        <InputBoxWrapper\n                          id={`minio-domain-${index.toString()}`}\n                          name={`minio-domain-${index.toString()}`}\n                          onChange={(\n                            e: React.ChangeEvent<HTMLInputElement>\n                          ) => {\n                            updateMinIODomain(e.target.value, index);\n                          }}\n                          label={`MinIO Domain ${index + 1}`}\n                          value={domain}\n                          placeholder={\"Eg. http://subdomain.domain\"}\n                          error={\n                            validationErrors[\n                              `minio-domain-${index.toString()}`\n                            ] || \"\"\n                          }\n                        />\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={addNewMinIODomain}\n                            disabled={index !== minioDomains.length - 1}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => removeMinIODomain(index)}\n                            disabled={minioDomains.length <= 1}\n                          >\n                            <RemoveIcon />\n                          </IconButton>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"tenant_configuration\"\n          name=\"tenant_configuration\"\n          checked={tenantCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"tenantCustom\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n      </Grid>\n      {tenantCustom && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsUser\"\n                    name=\"tenant_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={tenantSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsGroup\"\n                    name=\"tenant_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={tenantSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_fsGroup\"\n                    name=\"tenant_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={tenantSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"tenantSecurityContextRunAsNonRoot\"\n                  id=\"tenant_securityContext_runAsNonRoot\"\n                  name=\"tenant_securityContext_runAsNonRoot\"\n                  checked={tenantSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"tenantSecurityContext\", {\n                      ...tenantSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  setDomains: state.tenants.createTenant.fields.configure.setDomains,\n  consoleDomain: state.tenants.createTenant.fields.configure.consoleDomain,\n  minioDomains: state.tenants.createTenant.fields.configure.minioDomains,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addNewMinIODomain,\n  removeMinIODomain,\n});\n\nexport default withStyles(styles)(connector(Configure));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Tooltip, Typography } from \"@mui/material\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError, getRandomString } from \"../../utils\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface IIdentityProviderProps {\n  classes: any;\n  idpSelection: string;\n  accessKeys: string[];\n  secretKeys: string[];\n  openIDConfigurationURL: string;\n  openIDClientID: string;\n  openIDSecretID: string;\n  openIDCallbackURL: string;\n  openIDClaimName: string;\n  openIDScopes: string;\n  ADURL: string;\n  ADSkipTLS: boolean;\n  ADServerInsecure: boolean;\n  ADGroupSearchBaseDN: string;\n  ADGroupSearchFilter: string;\n  ADUserDNs: string[];\n  ADLookupBindDN: string;\n  ADLookupBindPassword: string;\n  ADUserDNSearchBaseDN: string;\n  ADUserDNSearchFilter: string;\n  ADServerStartTLS: boolean;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    shortened: {\n      gridTemplateColumns: \"auto auto 50px 50px\",\n      display: \"grid\",\n      gridGap: 15,\n      marginBottom: 10,\n      \"& input\": {\n        fontWeight: 400,\n      },\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    protocolRadioOptions: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      marginBottom: 10,\n\n      \"& label\": {\n        fontSize: 14,\n      },\n      \"& div\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n      },\n    },\n    adUserDnRows: {\n      display: \"flex\",\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst IdentityProvider = ({\n  classes,\n  idpSelection,\n  accessKeys,\n  secretKeys,\n  openIDConfigurationURL,\n  openIDClientID,\n  openIDSecretID,\n  openIDCallbackURL,\n  openIDClaimName,\n  openIDScopes,\n  ADURL,\n  ADSkipTLS,\n  ADServerInsecure,\n  ADGroupSearchBaseDN,\n  ADGroupSearchFilter,\n  ADUserDNs,\n  ADLookupBindDN,\n  ADLookupBindPassword,\n  ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter,\n  ADServerStartTLS,\n  updateAddField,\n  isPageValid,\n}: IIdentityProviderProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"identityProvider\", field, value);\n    },\n    [updateAddField]\n  );\n  const updateUserField = (index: number, value: string) => {\n    const newUserField = [...accessKeys];\n    newUserField[index] = value;\n    updateField(\"accessKeys\", newUserField);\n  };\n  const updatePwordField = (index: number, value: string) => {\n    const newUserField = [...secretKeys];\n    newUserField[index] = value;\n    updateField(\"secretKeys\", newUserField);\n  };\n  const updateADUserField = (index: number, value: string) => {\n    const newADUserDNsField = [...ADUserDNs];\n    newADUserDNsField[index] = value;\n    updateField(\"ADUserDNs\", newADUserDNsField);\n  };\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"Built-in\") {\n      customIDPValidation = [...customIDPValidation];\n      for (var i = 0; i < accessKeys.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `accesskey-${i.toString()}`,\n          required: true,\n          value: accessKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n        customIDPValidation.push({\n          fieldKey: `secretkey-${i.toString()}`,\n          required: true,\n          value: secretKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n      }\n    }\n\n    if (idpSelection === \"OpenID\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n      // validate user DNs\n      for (let i = 0; i < ADUserDNs.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `ad-userdn-${i.toString()}`,\n          required: true,\n          value: ADUserDNs[i],\n        });\n      }\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    isPageValid(\"identityProvider\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    ADLookupBindDN,\n    idpSelection,\n    accessKeys,\n    secretKeys,\n    openIDClientID,\n    openIDSecretID,\n    ADURL,\n    ADGroupSearchBaseDN,\n    ADGroupSearchFilter,\n    ADUserDNs,\n    isPageValid,\n    openIDConfigurationURL,\n    openIDClaimName,\n  ]);\n  let inputs = null;\n  if (idpSelection === \"Built-in\") {\n    inputs = accessKeys.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`accesskey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Access Key\"}\n              name={`accesskey-${index.toString()}`}\n              value={accessKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateUserField(index, e.target.value);\n                cleanValidation(`accesskey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-accesskey-${index.toString()}`}\n              error={validationErrors[`accesskey-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`secretkey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Secret Key\"}\n              name={`secretkey-${index.toString()}`}\n              value={secretKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updatePwordField(index, e.target.value);\n                cleanValidation(`secretkey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-secretkey-${index.toString()}`}\n              error={validationErrors[`secretkey-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      accessKeys.push(\"\");\n                      secretKeys.push(\"\");\n                      updateUserField(accessKeys.length - 1, \"\");\n                      updatePwordField(secretKeys.length - 1, \"\");\n                    }}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      if (accessKeys.length > 1) {\n                        accessKeys.splice(index, 1);\n                        secretKeys.splice(index, 1);\n                        updateUserField(\n                          accessKeys.length - 1,\n                          accessKeys[accessKeys.length - 1]\n                        );\n                      }\n                    }}\n                  >\n                    <RemoveIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Randomize Credentials\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    onClick={() => {\n                      updateUserField(index, getRandomString(16));\n                      updatePwordField(index, getRandomString(32));\n                    }}\n                    size={\"small\"}\n                  >\n                    <CasinoIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  if (idpSelection === \"AD\") {\n    inputs = ADUserDNs.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.adUserDnRows}>\n            <InputBoxWrapper\n              id={`ad-userdn-${index.toString()}`}\n              label={\"\"}\n              placeholder=\"\"\n              name={`ad-userdn-${index.toString()}`}\n              value={ADUserDNs[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateADUserField(index, e.target.value);\n                cleanValidation(`ad-userdn-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-ad-userdn-${index.toString()}`}\n              error={validationErrors[`ad-userdn-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    ADUserDNs.push(\"\");\n                    updateADUserField(ADUserDNs.length - 1, \"\");\n                  }}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  style={{ marginLeft: 16 }}\n                  onClick={() => {\n                    if (ADUserDNs.length > 1) {\n                      ADUserDNs.splice(index, 1);\n                      updateUserField(\n                        ADUserDNs.length - 1,\n                        ADUserDNs[ADUserDNs.length - 1]\n                      );\n                    }\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Identity Provider</h3>\n        <span className={classes.descriptionText}>\n          Access to the tenant can be controlled via an external Identity\n          Manager.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.protocolRadioOptions}>\n        <label>Protocol</label>\n        <RadioGroupSelector\n          currentSelection={idpSelection}\n          id=\"idp-options\"\n          name=\"idp-options\"\n          label=\" \"\n          onChange={(e) => {\n            updateField(\"idpSelection\", e.target.value);\n          }}\n          selectorOptions={[\n            { label: \"Built-in\", value: \"Built-in\" },\n            { label: \"OpenID\", value: \"OpenID\" },\n            { label: \"Active Directory\", value: \"AD\" },\n          ]}\n        />\n      </Grid>\n      {idpSelection === \"Built-in\" && (\n        <Fragment>\n          Add additional users\n          {inputs}\n        </Fragment>\n      )}\n      {idpSelection === \"OpenID\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_CONFIGURATION_URL\"\n              name=\"openID_CONFIGURATION_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDConfigurationURL\", e.target.value);\n                cleanValidation(\"openID_CONFIGURATION_URL\");\n              }}\n              label=\"Configuration URL\"\n              value={openIDConfigurationURL}\n              placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n              error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_clientID\"\n              name=\"openID_clientID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClientID\", e.target.value);\n                cleanValidation(\"openID_clientID\");\n              }}\n              label=\"Client ID\"\n              value={openIDClientID}\n              error={validationErrors[\"openID_clientID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_secretID\"\n              name=\"openID_secretID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDSecretID\", e.target.value);\n                cleanValidation(\"openID_secretID\");\n              }}\n              label=\"Secret ID\"\n              value={openIDSecretID}\n              error={validationErrors[\"openID_secretID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_callbackURL\"\n              name=\"openID_callbackURL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDCallbackURL\", e.target.value);\n                cleanValidation(\"openID_callbackURL\");\n              }}\n              label=\"Callback URL\"\n              value={openIDCallbackURL}\n              placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n              error={validationErrors[\"openID_callbackURL\"] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_claimName\"\n              name=\"openID_claimName\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClaimName\", e.target.value);\n                cleanValidation(\"openID_claimName\");\n              }}\n              label=\"Claim Name\"\n              value={openIDClaimName}\n              error={validationErrors[\"openID_claimName\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_scopes\"\n              name=\"openID_scopes\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDScopes\", e.target.value);\n                cleanValidation(\"openID_scopes\");\n              }}\n              label=\"Scopes\"\n              value={openIDScopes}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {idpSelection === \"AD\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"AD_URL\"\n              name=\"AD_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADURL\", e.target.value);\n                cleanValidation(\"AD_URL\");\n              }}\n              label=\"LDAP Server Address\"\n              value={ADURL}\n              placeholder=\"ldap-server:636\"\n              error={validationErrors[\"AD_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_skipTLS\"\n              id=\"ad_skipTLS\"\n              name=\"ad_skipTLS\"\n              checked={ADSkipTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADSkipTLS\", checked);\n              }}\n              label={\"Skip TLS Verification\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverInsecure\"\n              id=\"ad_serverInsecure\"\n              name=\"ad_serverInsecure\"\n              checked={ADServerInsecure}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerInsecure\", checked);\n              }}\n              label={\"Server Insecure\"}\n            />\n          </Grid>\n          {ADServerInsecure ? (\n            <Grid item xs={12}>\n              <Typography\n                className={classes.error}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Warning: All traffic with Active Directory will be unencrypted\n              </Typography>\n              <br />\n            </Grid>\n          ) : null}\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverStartTLS\"\n              id=\"ad_serverStartTLS\"\n              name=\"ad_serverStartTLS\"\n              checked={ADServerStartTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerStartTLS\", checked);\n              }}\n              label={\"Start TLS connection to AD/LDAP server\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindDN\"\n              name=\"ad_lookupBindDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindDN\", e.target.value);\n                cleanValidation(\"ad_lookupBindDN\");\n              }}\n              label=\"Lookup Bind DN\"\n              value={ADLookupBindDN}\n              placeholder=\"cn=admin,dc=min,dc=io\"\n              error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindPassword\"\n              name=\"ad_lookupBindPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindPassword\", e.target.value);\n              }}\n              label=\"Lookup Bind Password\"\n              value={ADLookupBindPassword}\n              placeholder=\"admin\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchBaseDN\"\n              name=\"ad_userDNSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchBaseDN\", e.target.value);\n              }}\n              label=\"User DN Search Base DN\"\n              value={ADUserDNSearchBaseDN}\n              placeholder=\"dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchFilter\"\n              name=\"ad_userDNSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchFilter\", e.target.value);\n              }}\n              label=\"User DN Search Filter\"\n              value={ADUserDNSearchFilter}\n              placeholder=\"(sAMAcountName=%s)\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchBaseDN\"\n              name=\"ad_groupSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchBaseDN\", e.target.value);\n              }}\n              label=\"Group Search Base DN\"\n              value={ADGroupSearchBaseDN}\n              placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchFilter\"\n              name=\"ad_groupSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchFilter\", e.target.value);\n              }}\n              label=\"Group Search Filter\"\n              value={ADGroupSearchFilter}\n              placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n            />\n          </Grid>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              List of user DNs (Distinguished Names) to be Tenant Administrators\n            </legend>\n            <Grid item xs={12}>\n              {inputs}\n            </Grid>\n          </fieldset>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  idpSelection: state.tenants.createTenant.fields.identityProvider.idpSelection,\n  accessKeys: state.tenants.createTenant.fields.identityProvider.accessKeys,\n  secretKeys: state.tenants.createTenant.fields.identityProvider.secretKeys,\n  openIDConfigurationURL:\n    state.tenants.createTenant.fields.identityProvider.openIDConfigurationURL,\n  openIDClientID:\n    state.tenants.createTenant.fields.identityProvider.openIDClientID,\n  openIDSecretID:\n    state.tenants.createTenant.fields.identityProvider.openIDSecretID,\n  openIDCallbackURL:\n    state.tenants.createTenant.fields.identityProvider.openIDCallbackURL,\n  openIDClaimName:\n    state.tenants.createTenant.fields.identityProvider.openIDClaimName,\n  openIDScopes: state.tenants.createTenant.fields.identityProvider.openIDScopes,\n  ADURL: state.tenants.createTenant.fields.identityProvider.ADURL,\n  ADSkipTLS: state.tenants.createTenant.fields.identityProvider.ADSkipTLS,\n  ADServerInsecure:\n    state.tenants.createTenant.fields.identityProvider.ADServerInsecure,\n  ADGroupSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchBaseDN,\n  ADGroupSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchFilter,\n  ADUserDNs: state.tenants.createTenant.fields.identityProvider.ADUserDNs,\n  ADLookupBindDN:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindDN,\n  ADLookupBindPassword:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindPassword,\n  ADUserDNSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchFilter,\n  ADServerStartTLS:\n    state.tenants.createTenant.fields.identityProvider.ADServerStartTLS,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(IdentityProvider));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  addCaCertificate,\n  addFileToCaCertificates,\n  addFileToKeyPair,\n  addKeyPair,\n  deleteCaCertificate,\n  deleteKeyPair,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SectionTitle from \"../../../Common/SectionTitle\";\n\ninterface ISecurityProps {\n  classes: any;\n  enableTLS: boolean;\n  enableAutoCert: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  caCertificates: KeyPair[];\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileToCaCertificates: typeof addFileToCaCertificates;\n  deleteCaCertificate: typeof deleteCaCertificate;\n  addCaCertificate: typeof addCaCertificate;\n  addKeyPair: typeof addKeyPair;\n  addFileToKeyPair: typeof addFileToKeyPair;\n  deleteKeyPair: typeof deleteKeyPair;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    minioCertificateRows: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    minioCertsContainer: {\n      marginBottom: 15,\n    },\n    minioCACertsRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n\n    ...createTenantCommon,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Security = ({\n  classes,\n  enableTLS,\n  enableAutoCert,\n  enableCustomCerts,\n  minioCertificates,\n  caCertificates,\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n}: ISecurityProps) => {\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"security\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n\n  useEffect(() => {\n    if (!enableTLS) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableAutoCert) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableCustomCerts) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    isPageValid(\"security\", false);\n  }, [enableTLS, enableAutoCert, enableCustomCerts, isPageValid]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Security</h3>\n      </div>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <FormSwitchWrapper\n            value=\"enableTLS\"\n            id=\"enableTLS\"\n            name=\"enableTLS\"\n            checked={enableTLS}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"enableTLS\", checked);\n            }}\n            label={\"TLS\"}\n            description={\n              \"Securing all the traffic using TLS. This is required for Encryption Configuration\"\n            }\n          />\n        </Grid>\n        {enableTLS && (\n          <Fragment>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableAutoCert\"\n                id=\"enableAutoCert\"\n                name=\"enableAutoCert\"\n                checked={enableAutoCert}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  updateField(\"enableAutoCert\", checked);\n                }}\n                label={\"AutoCert\"}\n                description={\n                  \"The internode certificates will be generated and managed by MinIO Operator\"\n                }\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCerts\"\n                id=\"enableCustomCerts\"\n                name=\"enableCustomCerts\"\n                checked={enableCustomCerts}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  updateField(\"enableCustomCerts\", checked);\n                }}\n                label={\"Custom Certificates\"}\n                description={\"Certificates used to terminated TLS at MinIO\"}\n              />\n            </Grid>\n            {enableCustomCerts && (\n              <Fragment>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <SectionTitle>MinIO Certificates</SectionTitle>\n                  {minioCertificates.map((keyPair: KeyPair) => (\n                    <Grid\n                      item\n                      xs={12}\n                      key={`minio-certs-${keyPair.id}`}\n                      className={classes.minioCertificateRows}\n                    >\n                      <Grid item xs={10} className={classes.fileItem}>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            addFileToKeyPair(\n                              keyPair.id,\n                              \"cert\",\n                              fileName,\n                              encodedValue\n                            );\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"tlsCert\"\n                          name=\"tlsCert\"\n                          label=\"Cert\"\n                          value={keyPair.cert}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            addFileToKeyPair(\n                              keyPair.id,\n                              \"key\",\n                              fileName,\n                              encodedValue\n                            );\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"tlsKey\"\n                          name=\"tlsKey\"\n                          label=\"Key\"\n                          value={keyPair.key}\n                        />\n                      </Grid>\n\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton size={\"small\"} onClick={addKeyPair}>\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              deleteKeyPair(keyPair.id);\n                            }}\n                          >\n                            <RemoveIcon />\n                          </IconButton>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  ))}\n                </Grid>\n\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <SectionTitle>MinIO CA Certificates</SectionTitle>\n\n                  {caCertificates.map((keyPair: KeyPair) => (\n                    <Grid\n                      item\n                      xs={12}\n                      key={`minio-CA-certs-${keyPair.id}`}\n                      className={classes.minioCACertsRow}\n                    >\n                      <Grid item xs={6}>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            addFileToCaCertificates(\n                              keyPair.id,\n                              \"cert\",\n                              fileName,\n                              encodedValue\n                            );\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"tlsCert\"\n                          name=\"tlsCert\"\n                          label=\"Cert\"\n                          value={keyPair.cert}\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <div className={classes.rowActions}>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={addCaCertificate}\n                            >\n                              <AddIcon />\n                            </IconButton>\n                          </div>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                deleteCaCertificate(keyPair.id);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  ))}\n                </Grid>\n              </Fragment>\n            )}\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  caCertificates: state.tenants.createTenant.certificates.caCertificates,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n});\n\nexport default withStyles(styles)(connector(Security));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\n\ntype Props = {};\n\nconst SectionH1: React.FC<Props> = ({ children }) => {\n  return (\n    <h1 style={{ margin: 0, marginBottom: \".8rem\", fontSize: \"1.3rem\" }}>\n      {children}\n    </h1>\n  );\n};\n\nexport default SectionH1;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Paper } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  addFileClientCert,\n  addFileGemaltoCa,\n  addFileServerCert,\n  addFileVaultCa,\n  addFileVaultCert,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport { ISecurityContext } from \"../../types\";\nimport SectionH1 from \"../../../Common/SectionH1\";\n\ninterface IEncryptionProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileServerCert: typeof addFileServerCert;\n  addFileClientCert: typeof addFileClientCert;\n  addFileVaultCert: typeof addFileVaultCert;\n  addFileVaultCa: typeof addFileVaultCa;\n  addFileGemaltoCa: typeof addFileGemaltoCa;\n  enableEncryption: boolean;\n  encryptionType: string;\n  gemaltoEndpoint: string;\n  gemaltoToken: string;\n  gemaltoDomain: string;\n  gemaltoRetry: string;\n  awsEndpoint: string;\n  awsRegion: string;\n  awsKMSKey: string;\n  awsAccessKey: string;\n  awsSecretKey: string;\n  awsToken: string;\n  vaultEndpoint: string;\n  vaultEngine: string;\n  vaultNamespace: string;\n  vaultPrefix: string;\n  vaultAppRoleEngine: string;\n  vaultId: string;\n  vaultSecret: string;\n  vaultRetry: string;\n  vaultPing: string;\n  azureEndpoint: string;\n  azureTenantID: string;\n  azureClientID: string;\n  azureClientSecret: string;\n  gcpProjectID: string;\n  gcpEndpoint: string;\n  gcpClientEmail: string;\n  gcpClientID: string;\n  gcpPrivateKeyID: string;\n  gcpPrivateKey: string;\n  enableCustomCertsForKES: boolean;\n  enableAutoCert: boolean;\n  enableTLS: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  serverCertificate: KeyPair;\n  clientCertificate: KeyPair;\n  vaultCertificate: KeyPair;\n  vaultCA: KeyPair;\n  gemaltoCA: KeyPair;\n  kesSecurityContext: ISecurityContext;\n  replicas: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    encryptionTypeOptions: {\n      marginBottom: 15,\n    },\n    mutualTlsConfig: {\n      marginTop: 15,\n      \"& fieldset\": {\n        flex: 1,\n      },\n    },\n    rightSpacer: {\n      marginRight: 15,\n    },\n    responsiveContainer: {\n      \"@media (max-width: 900px)\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n      },\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Encryption = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n  enableEncryption,\n  enableCustomCerts,\n  encryptionType,\n  gemaltoEndpoint,\n  gemaltoToken,\n  gemaltoDomain,\n  gemaltoRetry,\n  awsEndpoint,\n  awsRegion,\n  awsKMSKey,\n  awsAccessKey,\n  awsSecretKey,\n  awsToken,\n  vaultEndpoint,\n  vaultEngine,\n  vaultNamespace,\n  vaultPrefix,\n  vaultAppRoleEngine,\n  vaultId,\n  vaultSecret,\n  vaultRetry,\n  vaultPing,\n  azureEndpoint,\n  azureTenantID,\n  azureClientID,\n  azureClientSecret,\n  gcpProjectID,\n  gcpEndpoint,\n  gcpClientEmail,\n  gcpClientID,\n  gcpPrivateKeyID,\n  gcpPrivateKey,\n  enableCustomCertsForKES,\n  enableAutoCert,\n  enableTLS,\n  minioCertificates,\n  serverCertificate,\n  clientCertificate,\n  vaultCertificate,\n  vaultCA,\n  gemaltoCA,\n  kesSecurityContext,\n  replicas,\n}: IEncryptionProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  let encryptionAvailable = false;\n  if (\n    enableTLS &&\n    (enableAutoCert ||\n      (minioCertificates &&\n        minioCertificates.filter(\n          (item) => item.encoded_key && item.encoded_cert\n        ).length > 0))\n  ) {\n    encryptionAvailable = true;\n  }\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"encryption\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (enableEncryption) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: kesSecurityContext.runAsUser,\n          customValidation:\n            kesSecurityContext.runAsUser === \"\" ||\n            parseInt(kesSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: kesSecurityContext.runAsGroup,\n          customValidation:\n            kesSecurityContext.runAsGroup === \"\" ||\n            parseInt(kesSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: kesSecurityContext.fsGroup,\n          customValidation:\n            kesSecurityContext.fsGroup === \"\" ||\n            parseInt(kesSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enableCustomCerts) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_cert,\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_cert,\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultEndpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultId,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultSecret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultPing,\n            customValidation: parseInt(vaultPing) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultRetry,\n            customValidation: parseInt(vaultRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsEndpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsRegion,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsAccessKey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsSecretKey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoEndpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoToken,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoDomain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoRetry,\n            customValidation: parseInt(gemaltoRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureEndpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureTenantID,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureClientID,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureClientSecret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    isPageValid(\"encryption\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enableEncryption,\n    encryptionType,\n    vaultEndpoint,\n    vaultEngine,\n    vaultId,\n    vaultSecret,\n    vaultPing,\n    vaultRetry,\n    awsEndpoint,\n    awsRegion,\n    awsSecretKey,\n    awsAccessKey,\n    gemaltoEndpoint,\n    gemaltoToken,\n    gemaltoDomain,\n    gemaltoRetry,\n    gcpProjectID,\n    gcpEndpoint,\n    gcpClientEmail,\n    gcpClientID,\n    gcpPrivateKeyID,\n    gcpPrivateKey,\n    azureEndpoint,\n    azureTenantID,\n    azureClientID,\n    azureClientSecret,\n    isPageValid,\n    enableAutoCert,\n    enableCustomCerts,\n    serverCertificate.encoded_key,\n    serverCertificate.encoded_cert,\n    clientCertificate.encoded_key,\n    clientCertificate.encoded_cert,\n    kesSecurityContext,\n    replicas,\n  ]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <SectionH1>Encryption</SectionH1>\n        </Grid>\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={enableEncryption}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"enableEncryption\", checked);\n            }}\n            description=\"\"\n            disabled={!encryptionAvailable}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <span className={classes.descriptionText}>\n            MinIO Server-Side Encryption (SSE) protects objects as part of write\n            operations, allowing clients to take advantage of server processing\n            power to secure objects at the storage layer (encryption-at-rest).\n            SSE also provides key functionality to regulatory and compliance\n            requirements around secure locking and erasure.\n          </span>\n        </Grid>\n        <Grid xs={12}>\n          <hr className={classes.hrClass} />\n        </Grid>\n\n        {enableEncryption && (\n          <Fragment>\n            <Grid item xs={12} className={classes.encryptionTypeOptions}>\n              <RadioGroupSelector\n                currentSelection={encryptionType}\n                id=\"encryptionType\"\n                name=\"encryptionType\"\n                label=\"Encryption Options\"\n                onChange={(e) => {\n                  updateField(\"encryptionType\", e.target.value);\n                }}\n                selectorOptions={[\n                  { label: \"Vault\", value: \"vault\" },\n                  { label: \"AWS\", value: \"aws\" },\n                  { label: \"Gemalto\", value: \"gemalto\" },\n                  { label: \"GCP\", value: \"gcp\" },\n                  { label: \"Azure\", value: \"azure\" },\n                ]}\n              />\n            </Grid>\n            {encryptionType === \"vault\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_endpoint\"\n                    name=\"vault_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultEndpoint\", e.target.value);\n                      cleanValidation(\"vault_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={vaultEndpoint}\n                    error={validationErrors[\"vault_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_engine\"\n                    name=\"vault_engine\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultEngine\", e.target.value);\n                      cleanValidation(\"vault_engine\");\n                    }}\n                    label=\"Engine\"\n                    value={vaultEngine}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_namespace\"\n                    name=\"vault_namespace\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultNamespace\", e.target.value);\n                    }}\n                    label=\"Namespace\"\n                    value={vaultNamespace}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_prefix\"\n                    name=\"vault_prefix\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultPrefix\", e.target.value);\n                    }}\n                    label=\"Prefix\"\n                    value={vaultPrefix}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      App Role\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"vault_approle_engine\"\n                        name=\"vault_approle_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultAppRoleEngine\", e.target.value);\n                        }}\n                        label=\"Engine\"\n                        value={vaultAppRoleEngine}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"vault_id\"\n                        name=\"vault_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultId\", e.target.value);\n                          cleanValidation(\"vault_id\");\n                        }}\n                        label=\"AppRole ID\"\n                        value={vaultId}\n                        error={validationErrors[\"vault_id\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"vault_secret\"\n                        name=\"vault_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultSecret\", e.target.value);\n                          cleanValidation(\"vault_secret\");\n                        }}\n                        label=\"AppRole Secret\"\n                        value={vaultSecret}\n                        error={validationErrors[\"vault_secret\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"vault_retry\"\n                        name=\"vault_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultRetry\", e.target.value);\n                          cleanValidation(\"vault_retry\");\n                        }}\n                        label=\"Retry (Seconds)\"\n                        value={vaultRetry}\n                        error={validationErrors[\"vault_retry\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n\n                <Grid container className={classes.mutualTlsConfig}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication (optional)\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileVaultCert(\"key\", fileName, encodedValue);\n                        cleanValidation(\"vault_key\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"vault_key\"\n                      name=\"vault_key\"\n                      label=\"Key\"\n                      value={vaultCertificate.key}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileVaultCert(\"cert\", fileName, encodedValue);\n                        cleanValidation(\"vault_cert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"vault_cert\"\n                      name=\"vault_cert\"\n                      label=\"Cert\"\n                      value={vaultCertificate.cert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileVaultCa(fileName, encodedValue);\n                        cleanValidation(\"vault_ca\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"vault_ca\"\n                      name=\"vault_ca\"\n                      label=\"CA\"\n                      value={vaultCA.cert}\n                    />\n                  </fieldset>\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  className={classes.formFieldRow}\n                  style={{ marginTop: 15 }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>Status</legend>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"vault_ping\"\n                      name=\"vault_ping\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultPing\", e.target.value);\n                        cleanValidation(\"vault_ping\");\n                      }}\n                      label=\"Ping (Seconds)\"\n                      value={vaultPing}\n                      error={validationErrors[\"vault_ping\"] || \"\"}\n                    />\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"azure\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"azure_endpoint\"\n                    name=\"azure_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"azureEndpoint\", e.target.value);\n                      cleanValidation(\"azure_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={azureEndpoint}\n                    error={validationErrors[\"azure_endpoint\"] || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"azure_tenant_id\"\n                        name=\"azure_tenant_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"azureTenantID\", e.target.value);\n                          cleanValidation(\"azure_tenant_id\");\n                        }}\n                        label=\"Tenant ID\"\n                        value={azureTenantID}\n                        error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"azure_client_id\"\n                        name=\"azure_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"azureClientID\", e.target.value);\n                          cleanValidation(\"azure_client_id\");\n                        }}\n                        label=\"Client ID\"\n                        value={azureClientID}\n                        error={validationErrors[\"azure_client_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"azure_client_secret\"\n                        name=\"azure_client_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"azureClientSecret\", e.target.value);\n                          cleanValidation(\"azure_client_secret\");\n                        }}\n                        label=\"Client Secret\"\n                        value={azureClientSecret}\n                        error={validationErrors[\"azure_client_secret\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gcp\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"gcp_project_id\"\n                    name=\"gcp_project_id\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"gcpProjectID\", e.target.value);\n                    }}\n                    label=\"Project ID\"\n                    value={gcpProjectID}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"gcp_endpoint\"\n                    name=\"gcp_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"gcpEndpoint\", e.target.value);\n                    }}\n                    label=\"Endpoint\"\n                    value={gcpEndpoint}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_email\"\n                        name=\"gcp_client_email\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpClientEmail\", e.target.value);\n                        }}\n                        label=\"Client Email\"\n                        value={gcpClientEmail}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_id\"\n                        name=\"gcp_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpClientID\", e.target.value);\n                        }}\n                        label=\"Client ID\"\n                        value={gcpClientID}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key_id\"\n                        name=\"gcp_private_key_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpPrivateKeyID\", e.target.value);\n                        }}\n                        label=\"Private Key ID\"\n                        value={gcpPrivateKeyID}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key\"\n                        name=\"gcp_private_key\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpPrivateKey\", e.target.value);\n                        }}\n                        label=\"Private Key\"\n                        value={gcpPrivateKey}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"aws\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"aws_endpoint\"\n                    name=\"aws_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"awsEndpoint\", e.target.value);\n                      cleanValidation(\"aws_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={awsEndpoint}\n                    error={validationErrors[\"aws_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"aws_region\"\n                    name=\"aws_region\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"awsRegion\", e.target.value);\n                      cleanValidation(\"aws_region\");\n                    }}\n                    label=\"Region\"\n                    value={awsRegion}\n                    error={validationErrors[\"aws_region\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"aws_kmsKey\"\n                    name=\"aws_kmsKey\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"awsKMSKey\", e.target.value);\n                    }}\n                    label=\"KMS Key\"\n                    value={awsKMSKey}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"aws_accessKey\"\n                        name=\"aws_accessKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"awsAccessKey\", e.target.value);\n                          cleanValidation(\"aws_accessKey\");\n                        }}\n                        label=\"Access Key\"\n                        value={awsAccessKey}\n                        error={validationErrors[\"aws_accessKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"aws_secretKey\"\n                        name=\"aws_secretKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"awsSecretKey\", e.target.value);\n                          cleanValidation(\"aws_secretKey\");\n                        }}\n                        label=\"Secret Key\"\n                        value={awsSecretKey}\n                        error={validationErrors[\"aws_secretKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"aws_token\"\n                        name=\"aws_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"awsToken\", e.target.value);\n                        }}\n                        label=\"Token\"\n                        value={awsToken}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gemalto\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"gemalto_endpoint\"\n                    name=\"gemalto_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"gemaltoEndpoint\", e.target.value);\n                      cleanValidation(\"gemalto_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={gemaltoEndpoint}\n                    error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gemalto_token\"\n                        name=\"gemalto_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gemaltoToken\", e.target.value);\n                          cleanValidation(\"gemalto_token\");\n                        }}\n                        label=\"Token\"\n                        value={gemaltoToken}\n                        error={validationErrors[\"gemalto_token\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gemalto_domain\"\n                        name=\"gemalto_domain\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gemaltoDomain\", e.target.value);\n                          cleanValidation(\"gemalto_domain\");\n                        }}\n                        label=\"Domain\"\n                        value={gemaltoDomain}\n                        error={validationErrors[\"gemalto_domain\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"gemalto_retry\"\n                        name=\"gemalto_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gemaltoRetry\", e.target.value);\n                          cleanValidation(\"gemalto_retry\");\n                        }}\n                        label=\"Retry (seconds)\"\n                        value={gemaltoRetry}\n                        error={validationErrors[\"gemalto_retry\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Custom CA Root certificate verification\n                    </legend>\n\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileGemaltoCa(fileName, encodedValue);\n                        cleanValidation(\"gemalto_ca\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"gemalto_ca\"\n                      name=\"gemalto_ca\"\n                      label=\"CA\"\n                      value={gemaltoCA.cert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <div className={classes.headerElement}>\n              <h4 className={classes.h3Section}>Additional Configurations</h4>\n            </div>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCertsForKES\"\n                id=\"enableCustomCertsForKES\"\n                name=\"enableCustomCertsForKES\"\n                checked={enableCustomCertsForKES || !enableAutoCert}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n\n                  updateField(\"enableCustomCertsForKES\", checked);\n                }}\n                label={\"Custom Certificates\"}\n                disabled={!enableAutoCert}\n              />\n            </Grid>\n            {(enableCustomCertsForKES || !enableAutoCert) && (\n              <Fragment>\n                <Grid container>\n                  <Grid item xs={12} style={{ marginBottom: 15 }}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Encryption Service Certificates\n                      </legend>\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          addFileServerCert(\"key\", fileName, encodedValue);\n                          cleanValidation(\"serverKey\");\n                        }}\n                        accept=\".key,.pem\"\n                        id=\"serverKey\"\n                        name=\"serverKey\"\n                        label=\"Key\"\n                        error={validationErrors[\"serverKey\"] || \"\"}\n                        value={serverCertificate.key}\n                        required={!enableAutoCert}\n                      />\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          addFileServerCert(\"cert\", fileName, encodedValue);\n                          cleanValidation(\"serverCert\");\n                        }}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"serverCert\"\n                        name=\"serverCert\"\n                        label=\"Cert\"\n                        error={validationErrors[\"serverCert\"] || \"\"}\n                        value={serverCertificate.cert}\n                        required={!enableAutoCert}\n                      />\n                    </fieldset>\n                  </Grid>\n                </Grid>\n                <Grid container style={{ marginBottom: 15 }}>\n                  <Grid item xs={12}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Mutual TLS authentication with MinIO\n                      </legend>\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          addFileClientCert(\"key\", fileName, encodedValue);\n                          cleanValidation(\"clientKey\");\n                        }}\n                        accept=\".key,.pem\"\n                        id=\"clientKey\"\n                        name=\"clientKey\"\n                        label=\"Key\"\n                        error={validationErrors[\"clientKey\"] || \"\"}\n                        value={clientCertificate.key}\n                        required={!enableAutoCert}\n                      />\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          addFileClientCert(\"cert\", fileName, encodedValue);\n                          cleanValidation(\"clientCert\");\n                        }}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"clientCert\"\n                        name=\"clientCert\"\n                        label=\"Cert\"\n                        error={validationErrors[\"clientCert\"] || \"\"}\n                        value={clientCertificate.cert}\n                        required={!enableAutoCert}\n                      />\n                    </fieldset>\n                  </Grid>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <Grid item xs={12} classes={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type=\"number\"\n                  min=\"1\"\n                  id=\"replicas\"\n                  name=\"replicas\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"replicas\", e.target.value);\n                    cleanValidation(\"replicas\");\n                  }}\n                  label=\"Replicas\"\n                  value={replicas}\n                  required\n                  error={validationErrors[\"replicas\"] || \"\"}\n                />\n              </Grid>\n\n              <fieldset\n                className={classes.fieldGroup}\n                style={{ marginTop: 15 }}\n              >\n                <legend className={classes.descriptionText}>\n                  SecurityContext for KES pods\n                </legend>\n                <Grid item xs={12} className={classes.kesSecurityContext}>\n                  <div\n                    className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                  >\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_runAsUser\"\n                        name=\"kes_securityContext_runAsUser\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"kesSecurityContext\", {\n                            ...kesSecurityContext,\n                            runAsUser: e.target.value,\n                          });\n                          cleanValidation(\"kes_securityContext_runAsUser\");\n                        }}\n                        label=\"Run As User\"\n                        value={kesSecurityContext.runAsUser}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_runAsUser\"] ||\n                          \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_runAsGroup\"\n                        name=\"kes_securityContext_runAsGroup\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"kesSecurityContext\", {\n                            ...kesSecurityContext,\n                            runAsGroup: e.target.value,\n                          });\n                          cleanValidation(\"kes_securityContext_runAsGroup\");\n                        }}\n                        label=\"Run As Group\"\n                        value={kesSecurityContext.runAsGroup}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_runAsGroup\"] ||\n                          \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_fsGroup\"\n                        name=\"kes_securityContext_fsGroup\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"kesSecurityContext\", {\n                            ...kesSecurityContext,\n                            fsGroup: e.target.value,\n                          });\n                          cleanValidation(\"kes_securityContext_fsGroup\");\n                        }}\n                        label=\"FsGroup\"\n                        value={kesSecurityContext.fsGroup}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                  </div>\n                </Grid>\n                <br />\n                <Grid item xs={12}>\n                  <div className={classes.multiContainer}>\n                    <FormSwitchWrapper\n                      value=\"kesSecurityContextRunAsNonRoot\"\n                      id=\"kes_securityContext_runAsNonRoot\"\n                      name=\"kes_securityContext_runAsNonRoot\"\n                      checked={kesSecurityContext.runAsNonRoot}\n                      onChange={(e) => {\n                        const targetD = e.target;\n                        const checked = targetD.checked;\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsNonRoot: checked,\n                        });\n                      }}\n                      label={\"Do not run as Root\"}\n                    />\n                  </div>\n                </Grid>\n              </fieldset>\n            </Grid>\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  replicas: state.tenants.createTenant.fields.encryption.replicas,\n  enableEncryption:\n    state.tenants.createTenant.fields.encryption.enableEncryption,\n  encryptionType: state.tenants.createTenant.fields.encryption.encryptionType,\n  gemaltoEndpoint: state.tenants.createTenant.fields.encryption.gemaltoEndpoint,\n  gemaltoToken: state.tenants.createTenant.fields.encryption.gemaltoToken,\n  gemaltoDomain: state.tenants.createTenant.fields.encryption.gemaltoDomain,\n  gemaltoRetry: state.tenants.createTenant.fields.encryption.gemaltoRetry,\n  awsEndpoint: state.tenants.createTenant.fields.encryption.awsEndpoint,\n  awsRegion: state.tenants.createTenant.fields.encryption.awsRegion,\n  awsKMSKey: state.tenants.createTenant.fields.encryption.awsKMSKey,\n  awsAccessKey: state.tenants.createTenant.fields.encryption.awsAccessKey,\n  awsSecretKey: state.tenants.createTenant.fields.encryption.awsSecretKey,\n  awsToken: state.tenants.createTenant.fields.encryption.awsToken,\n  vaultEndpoint: state.tenants.createTenant.fields.encryption.vaultEndpoint,\n  vaultEngine: state.tenants.createTenant.fields.encryption.vaultEngine,\n  vaultNamespace: state.tenants.createTenant.fields.encryption.vaultNamespace,\n  vaultPrefix: state.tenants.createTenant.fields.encryption.vaultPrefix,\n  vaultAppRoleEngine:\n    state.tenants.createTenant.fields.encryption.vaultAppRoleEngine,\n  vaultId: state.tenants.createTenant.fields.encryption.vaultId,\n  vaultSecret: state.tenants.createTenant.fields.encryption.vaultSecret,\n  vaultRetry: state.tenants.createTenant.fields.encryption.vaultRetry,\n  vaultPing: state.tenants.createTenant.fields.encryption.vaultPing,\n  azureEndpoint: state.tenants.createTenant.fields.encryption.azureEndpoint,\n  azureTenantID: state.tenants.createTenant.fields.encryption.azureTenantID,\n  azureClientID: state.tenants.createTenant.fields.encryption.azureClientID,\n  azureClientSecret:\n    state.tenants.createTenant.fields.encryption.azureClientSecret,\n  gcpProjectID: state.tenants.createTenant.fields.encryption.gcpProjectID,\n  gcpEndpoint: state.tenants.createTenant.fields.encryption.gcpEndpoint,\n  gcpClientEmail: state.tenants.createTenant.fields.encryption.gcpClientEmail,\n  gcpClientID: state.tenants.createTenant.fields.encryption.gcpClientID,\n  gcpPrivateKeyID: state.tenants.createTenant.fields.encryption.gcpPrivateKeyID,\n  gcpPrivateKey: state.tenants.createTenant.fields.encryption.gcpPrivateKey,\n  enableCustomCertsForKES:\n    state.tenants.createTenant.fields.encryption.enableCustomCertsForKES,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  serverCertificate: state.tenants.createTenant.certificates.serverCertificate,\n  clientCertificate: state.tenants.createTenant.certificates.clientCertificate,\n  vaultCertificate: state.tenants.createTenant.certificates.vaultCertificate,\n  vaultCA: state.tenants.createTenant.certificates.vaultCA,\n  gemaltoCA: state.tenants.createTenant.certificates.gemaltoCA,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  kesSecurityContext:\n    state.tenants.createTenant.fields.encryption.kesSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n});\n\nexport default withStyles(styles)(connector(Encryption));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState } from \"../../../../../store\";\nimport {\n  addNewToleration,\n  isPageValid,\n  removeToleration,\n  setKeyValuePairs,\n  setTolerationInfo,\n  updateAddField,\n} from \"../../actions\";\nimport { setModalErrorSnackMessage } from \"../../../../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport {\n  ErrorResponseHandler,\n  ITolerationModel,\n} from \"../../../../../common/types\";\nimport { LabelKeyPair } from \"../../types\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../common/api\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport TolerationSelector from \"../../../Common/TolerationSelector/TolerationSelector\";\n\ninterface IAffinityProps {\n  classes: any;\n  podAffinity: string;\n  nodeSelectorLabels: string;\n  withPodAntiAffinity: boolean;\n  keyValuePairs: LabelKeyPair[];\n  tolerations: ITolerationModel[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setKeyValuePairs: typeof setKeyValuePairs;\n  setTolerationInfo: typeof setTolerationInfo;\n  addNewToleration: typeof addNewToleration;\n  removeToleration: typeof removeToleration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({\n  classes,\n  podAffinity,\n  nodeSelectorLabels,\n  withPodAntiAffinity,\n  setModalErrorSnackMessage,\n  updateAddField,\n  keyValuePairs,\n  setKeyValuePairs,\n  isPageValid,\n  tolerations,\n  setTolerationInfo,\n  addNewToleration,\n  removeToleration,\n}: IAffinityProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"affinity\", field, value);\n    },\n    [updateAddField]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          setModalErrorSnackMessage(err);\n          setKeyValueMap({});\n        });\n    }\n  }, [setModalErrorSnackMessage, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"affinity\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    setTolerationInfo(index, alterToleration);\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Pod Placement</h3>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n\n                              arrCp[i].key = e.target.value as string;\n                              arrCp[i].value = keyValueMap[newKey][0];\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].key = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value as string;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = Object.assign([], keyValuePairs);\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              setKeyValuePairs(arrCp);\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                setKeyValuePairs(arrCp);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <h3>Tolerations</h3>\n          <span className={classes.error}>\n            {validationErrors[\"tolerations\"]}\n          </span>\n          <Grid container>\n            {tolerations &&\n              tolerations.map((tol, i) => {\n                return (\n                  <Grid\n                    item\n                    xs={12}\n                    className={classes.affinityRow}\n                    key={`affinity-keyVal-${i.toString()}`}\n                  >\n                    <TolerationSelector\n                      effect={tol.effect}\n                      onEffectChange={(value) => {\n                        updateToleration(i, \"effect\", value);\n                      }}\n                      tolerationKey={tol.key}\n                      onTolerationKeyChange={(value) => {\n                        updateToleration(i, \"key\", value);\n                      }}\n                      operator={tol.operator}\n                      onOperatorChange={(value) => {\n                        updateToleration(i, \"operator\", value);\n                      }}\n                      value={tol.value}\n                      onValueChange={(value) => {\n                        updateToleration(i, \"value\", value);\n                      }}\n                      tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                      onSecondsChange={(value) => {\n                        updateToleration(i, \"tolerationSeconds\", {\n                          seconds: value,\n                        });\n                      }}\n                      index={i}\n                    />\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={addNewToleration}\n                        disabled={i !== tolerations.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </div>\n\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => removeToleration(i)}\n                        disabled={tolerations.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </div>\n                  </Grid>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => {\n  const createTenant = state.tenants.createTenant;\n\n  return {\n    podAffinity: createTenant.fields.affinity.podAffinity,\n    nodeSelectorLabels: createTenant.fields.affinity.nodeSelectorLabels,\n    withPodAntiAffinity: createTenant.fields.affinity.withPodAntiAffinity,\n    keyValuePairs: createTenant.nodeSelectorPairs,\n    tolerations: createTenant.tolerations,\n  };\n};\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  isPageValid,\n  setKeyValuePairs,\n  setTolerationInfo,\n  addNewToleration,\n  removeToleration,\n});\n\nexport default withStyles(styles)(connector(Affinity));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\n\ninterface IImagesProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  customImage: boolean;\n  imageName: string;\n  customDockerhub: boolean;\n  imageRegistry: string;\n  imageRegistryUsername: string;\n  imageRegistryPassword: string;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  prometheusCustom: boolean;\n  tenantCustom: boolean;\n  logSearchCustom: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  kesImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Images = ({\n  classes,\n  storageClasses,\n  customImage,\n  imageName,\n  customDockerhub,\n  imageRegistry,\n  imageRegistryUsername,\n  imageRegistryPassword,\n  exposeMinIO,\n  exposeConsole,\n  prometheusCustom,\n  tenantCustom,\n  logSearchCustom,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  kesImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  logSearchSelectedStorageClass,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n}: IImagesProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n    if (logSearchCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchImage\",\n          required: false,\n          value: logSearchImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/operator:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresImage\",\n          required: false,\n          value: logSearchPostgresImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/postgres:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresInitImage\",\n          required: false,\n          value: logSearchPostgresInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusImage\",\n          required: false,\n          value: prometheusImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/prometheus:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusSidecarImage\",\n          required: false,\n          value: prometheusSidecarImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'project/container:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusInitImage\",\n          required: false,\n          value: prometheusInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    logSearchImage,\n    kesImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    isPageValid,\n    prometheusCustom,\n    tenantCustom,\n    logSearchCustom,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Container Images</h3>\n        <span className={classes.descriptionText}>\n          Specify the container images used by the Tenant and it's features.\n        </span>\n      </div>\n\n      <Fragment>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"image\"\n            name=\"image\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageName\", e.target.value);\n              cleanValidation(\"image\");\n            }}\n            label=\"MinIO\"\n            value={imageName}\n            error={validationErrors[\"image\"] || \"\"}\n            placeholder=\"E.g. minio/minio:RELEASE.2022-02-26T02-54-46Z\"\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"kesImage\"\n            name=\"kesImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"kesImage\", e.target.value);\n              cleanValidation(\"kesImage\");\n            }}\n            label=\"KES\"\n            value={kesImage}\n            error={validationErrors[\"kesImage\"] || \"\"}\n            placeholder=\"E.g. minio/kes:v0.17.6\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Log Search</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchImage\"\n            name=\"logSearchImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchImage\", e.target.value);\n              cleanValidation(\"logSearchImage\");\n            }}\n            label=\"API\"\n            value={logSearchImage}\n            error={validationErrors[\"logSearchImage\"] || \"\"}\n            placeholder=\"E.g. minio/operator:v4.4.10\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresImage\"\n            name=\"logSearchPostgresImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresImage\");\n            }}\n            label=\"PostgreSQL\"\n            value={logSearchPostgresImage}\n            error={validationErrors[\"logSearchPostgresImage\"] || \"\"}\n            placeholder=\"E.g. library/postgres:13\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresInitImage\"\n            name=\"logSearchPostgresInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresInitImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresInitImage\");\n            }}\n            label=\"PostgreSQL Init\"\n            value={logSearchPostgresInitImage}\n            error={validationErrors[\"logSearchPostgresInitImage\"] || \"\"}\n            placeholder=\"E.g. library/busybox:1.33.1\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Monitoring</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusImage\"\n            name=\"prometheusImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusImage\", e.target.value);\n              cleanValidation(\"prometheusImage\");\n            }}\n            label=\"Prometheus\"\n            value={prometheusImage}\n            error={validationErrors[\"prometheusImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusSidecarImage\"\n            name=\"prometheusSidecarImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusSidecarImage\", e.target.value);\n              cleanValidation(\"prometheusSidecarImage\");\n            }}\n            label=\"Prometheus Sidecar\"\n            value={prometheusSidecarImage}\n            error={validationErrors[\"prometheusSidecarImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusInitImage\"\n            name=\"prometheusInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusInitImage\", e.target.value);\n              cleanValidation(\"prometheusInitImage\");\n            }}\n            label=\"Prometheus Init\"\n            value={prometheusInitImage}\n            error={validationErrors[\"prometheusInitImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n      </Fragment>\n\n      {customImage && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <h4>Custom Container Registry</h4>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"custom_docker_hub\"\n              id=\"custom_docker_hub\"\n              name=\"custom_docker_hub\"\n              checked={customDockerhub}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"customDockerhub\", checked);\n              }}\n              label={\"Use a private container registry\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {customDockerhub && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registry\"\n              name=\"registry\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistry\", e.target.value);\n              }}\n              label=\"Endpoint\"\n              value={imageRegistry}\n              error={validationErrors[\"registry\"] || \"\"}\n              placeholder=\"E.g. https://index.docker.io/v1/\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryUsername\"\n              name=\"registryUsername\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryUsername\", e.target.value);\n              }}\n              label=\"Username\"\n              value={imageRegistryUsername}\n              error={validationErrors[\"registryUsername\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryPassword\"\n              name=\"registryPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryPassword\", e.target.value);\n              }}\n              label=\"Password\"\n              value={imageRegistryPassword}\n              error={validationErrors[\"registryPassword\"] || \"\"}\n              required\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  customImage: state.tenants.createTenant.fields.configure.customImage,\n  imageName: state.tenants.createTenant.fields.configure.imageName,\n  customDockerhub: state.tenants.createTenant.fields.configure.customDockerhub,\n  imageRegistry: state.tenants.createTenant.fields.configure.imageRegistry,\n  imageRegistryUsername:\n    state.tenants.createTenant.fields.configure.imageRegistryUsername,\n  imageRegistryPassword:\n    state.tenants.createTenant.fields.configure.imageRegistryPassword,\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  prometheusCustom:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  logSearchCustom: state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  kesImage: state.tenants.createTenant.fields.configure.kesImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Images));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  modalBasic,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"../../../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...modalBasic,\n    ...deleteDialogStyles,\n  });\n\ninterface IAddNamespace {\n  classes: any;\n  namespace: string;\n  addNamespaceOpen: boolean;\n  closeAddNamespaceModalAndRefresh: (reloadNamespaceData: boolean) => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst AddNamespaceModal = ({\n  classes,\n  namespace,\n  addNamespaceOpen,\n  closeAddNamespaceModalAndRefresh,\n  setErrorSnackMessage,\n}: IAddNamespace) => {\n  const [addNamespaceLoading, setAddNamespaceLoading] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    if (addNamespaceLoading) {\n      api\n        .invoke(\"POST\", \"/api/v1/namespace\", {\n          name: namespace,\n        })\n        .then((res) => {\n          setAddNamespaceLoading(false);\n          closeAddNamespaceModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddNamespaceLoading(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    addNamespaceLoading,\n    closeAddNamespaceModalAndRefresh,\n    namespace,\n    setErrorSnackMessage,\n  ]);\n\n  const addNamespace = () => {\n    setAddNamespaceLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`New namespace`}\n      confirmText={\"Create\"}\n      confirmButtonProps={{\n        color: \"primary\",\n        variant: \"contained\",\n      }}\n      isOpen={addNamespaceOpen}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={addNamespaceLoading}\n      onConfirm={addNamespace}\n      onClose={() => {\n        closeAddNamespaceModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {addNamespaceLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to add a namespace called\n            <br />\n            <b className={classes.wrapText}>{namespace}</b>?\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(AddNamespaceModal));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { niceBytes } from \"../../../../../common/utils\";\nimport { Opts } from \"../../ListTenants/utils\";\nimport { IResourcesSize } from \"../../ListTenants/types\";\nimport { IErasureCodeCalc } from \"../../../../../common/types\";\n\nimport { Divider } from \"@mui/material\";\nimport { IntegrationConfiguration } from \"./TenantResources/utils\";\n\ninterface ISizePreviewProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  volumeSize: string;\n  sizeFactor: string;\n  drivesPerServer: string;\n  nodes: string;\n  memoryNode: string;\n  ecParity: string;\n  ecParityChoices: Opts[];\n  cleanECChoices: string[];\n  resourcesSize: IResourcesSize;\n  distribution: any;\n  ecParityCalc: IErasureCodeCalc;\n  limitSize: any;\n  selectedStorageClass: string;\n  cpuToUse: string;\n  integrationSelection: IntegrationConfiguration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 4,\n    },\n    table: {\n      \"& .MuiTableCell-root\": {\n        fontSize: 13,\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst SizePreview = ({\n  classes,\n  nodes,\n  memoryNode,\n  ecParity,\n  distribution,\n  ecParityCalc,\n  cpuToUse,\n  integrationSelection,\n}: ISizePreviewProps) => {\n  const usableInformation = ecParityCalc.storageFactors.find(\n    (element) => element.erasureCode === ecParity\n  );\n\n  return (\n    <div className={classes.root}>\n      <h4>Resource Allocation</h4>\n      <Divider />\n      <Table className={classes.table} aria-label=\"simple table\" size={\"small\"}>\n        <TableBody>\n          <TableRow>\n            <TableCell scope=\"row\">Number of Servers</TableCell>\n            <TableCell align=\"right\">\n              {parseInt(nodes) > 0 ? nodes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? distribution.disks : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drive Capacity</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? niceBytes(distribution.pvSize) : \"-\"}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n\n          <TableRow>\n            <TableCell scope=\"row\">Total Volumes</TableCell>\n            <TableCell align=\"right\">\n              {distribution ? distribution.persistentVolumes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory per Node</TableCell>\n                  <TableCell align=\"right\">{memoryNode} Gi</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    CPU Selection\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {cpuToUse}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n        </TableBody>\n      </Table>\n      {ecParityCalc.error === 0 && usableInformation && (\n        <Fragment>\n          <h4>Erasure Code Configuration</h4>\n          <Divider />\n          <Table\n            className={classes.table}\n            aria-label=\"simple table\"\n            size={\"small\"}\n          >\n            <TableBody>\n              <TableRow>\n                <TableCell scope=\"row\">EC Parity</TableCell>\n                <TableCell align=\"right\">\n                  {ecParity !== \"\" ? ecParity : \"-\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Raw Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(ecParityCalc.rawCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Usable Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(usableInformation.maxCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                  Server Failures Tolerated\n                </TableCell>\n                <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                  {distribution\n                    ? Math.floor(\n                        usableInformation.maxFailureTolerations /\n                          distribution.disks\n                      )\n                    : \"-\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Fragment>\n      )}\n      {integrationSelection.typeSelection !== \"\" &&\n        integrationSelection.storageClass !== \"\" && (\n          <Fragment>\n            <h4>Single Instance Configuration</h4>\n            <Divider />\n            <Table\n              className={classes.table}\n              aria-label=\"simple table\"\n              size={\"small\"}\n            >\n              <TableBody>\n                <TableRow>\n                  <TableCell scope=\"row\">CPU</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.CPU !== 0\n                      ? integrationSelection.CPU\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.memory !== 0\n                      ? `${integrationSelection.memory} Gi`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.drivesPerServer !== 0\n                      ? `${integrationSelection.drivesPerServer}`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    Drive Size\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {integrationSelection.driveSize.driveSize}\n                    {integrationSelection.driveSize.sizeUnit}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Fragment>\n        )}\n    </div>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  volumeSize: state.tenants.createTenant.fields.tenantSize.volumeSize,\n  sizeFactor: state.tenants.createTenant.fields.tenantSize.sizeFactor,\n  drivesPerServer: state.tenants.createTenant.fields.tenantSize.drivesPerServer,\n  nodes: state.tenants.createTenant.fields.tenantSize.nodes,\n  memoryNode:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequest,\n  ecParity: state.tenants.createTenant.fields.tenantSize.ecParity,\n  ecParityChoices: state.tenants.createTenant.fields.tenantSize.ecParityChoices,\n  cleanECChoices: state.tenants.createTenant.fields.tenantSize.cleanECChoices,\n  resourcesSize: state.tenants.createTenant.fields.tenantSize.resourcesSize,\n  distribution: state.tenants.createTenant.fields.tenantSize.distribution,\n  ecParityCalc: state.tenants.createTenant.fields.tenantSize.ecParityCalc,\n  limitSize: state.tenants.createTenant.fields.tenantSize.limitSize,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  cpuToUse: state.tenants.createTenant.fields.tenantSize.resourcesCPURequest,\n  integrationSelection:\n    state.tenants.createTenant.fields.tenantSize.integrationSelection,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(SizePreview));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport {\n  isPageValid,\n  setLimitSize,\n  setStorageType,\n  setStorageClassesList,\n  updateAddField,\n} from \"../../../actions\";\nimport {\n  getLimitSizes,\n  IQuotaElement,\n  IQuotas,\n  Opts,\n} from \"../../../ListTenants/utils\";\nimport { AppState } from \"../../../../../../store\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport AddIcon from \"../../../../../../icons/AddIcon\";\nimport AddNamespaceModal from \"../helpers/AddNamespaceModal\";\nimport SizePreview from \"../SizePreview\";\nimport TenantSize from \"./TenantSize\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport { IMkEnvs, mkPanelConfigurations } from \"./utils\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    sizePreview: {\n      position: \"fixed\",\n      marginLeft: 10,\n      background: \"#FFFFFF\",\n      border: \"1px solid #EAEAEA\",\n      padding: 2,\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface INameTenantMainScreen {\n  classes: any;\n  storageClasses: Opts[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setStorageClassesList: typeof setStorageClassesList;\n  setLimitSize: typeof setLimitSize;\n  tenantName: string;\n  namespace: string;\n  selectedStorageClass: string;\n  selectedStorageType: string;\n  formToRender?: IMkEnvs;\n  features?: string[];\n  setStorageType: typeof setStorageType;\n}\n\nconst NameTenantMain = ({\n  classes,\n  storageClasses,\n  tenantName,\n  namespace,\n  selectedStorageClass,\n  selectedStorageType,\n  formToRender = IMkEnvs.default,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setModalErrorSnackMessage,\n  features,\n  setStorageType,\n}: INameTenantMainScreen) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [emptyNamespace, setEmptyNamespace] = useState<boolean>(true);\n  const [loadingNamespaceInfo, setLoadingNamespaceInfo] =\n    useState<boolean>(false);\n  const [showCreateButton, setShowCreateButton] = useState<boolean>(false);\n  const [openAddNSConfirm, setOpenAddNSConfirm] = useState<boolean>(false);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: string) => {\n      updateAddField(\"nameTenant\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Storage classes retrieval\n  const getNamespaceInformation = useCallback(() => {\n    setShowCreateButton(false);\n    // Empty tenantValidation\n    api\n      .invoke(\"GET\", `/api/v1/namespaces/${namespace}/tenants`)\n      .then((res: any[]) => {\n        const tenantsList = get(res, \"tenants\", []);\n\n        if (tenantsList && tenantsList.length > 0) {\n          setEmptyNamespace(false);\n          setLoadingNamespaceInfo(false);\n          return;\n        }\n        setEmptyNamespace(true);\n\n        // Storagequotas retrieval\n        api\n          .invoke(\n            \"GET\",\n            `/api/v1/namespaces/${namespace}/resourcequotas/${namespace}-storagequota`\n          )\n          .then((res: IQuotas) => {\n            const elements: IQuotaElement[] = get(res, \"elements\", []);\n            setLimitSize(getLimitSizes(res));\n\n            const newStorage = elements.map((storageClass: any) => {\n              const name = get(storageClass, \"name\", \"\").split(\n                \".storageclass.storage.k8s.io/requests.storage\"\n              )[0];\n\n              return { label: name, value: name };\n            });\n\n            setStorageClassesList(newStorage);\n\n            const stExists = newStorage.findIndex(\n              (storageClass) => storageClass.value === selectedStorageClass\n            );\n\n            if (newStorage.length > 0 && stExists === -1) {\n              updateField(\"selectedStorageClass\", newStorage[0].value);\n            } else if (newStorage.length === 0) {\n              updateField(\"selectedStorageClass\", \"\");\n              setStorageClassesList([]);\n            }\n            setLoadingNamespaceInfo(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingNamespaceInfo(false);\n            setShowCreateButton(true);\n            updateField(\"selectedStorageClass\", \"\");\n            setStorageClassesList([]);\n            console.error(\"Namespace error: \", err);\n          });\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setModalErrorSnackMessage({\n          errorMessage: \"Error validating if namespace already has tenants\",\n          detailedError: err.detailedError,\n        });\n      });\n  }, [\n    namespace,\n    setLimitSize,\n    setModalErrorSnackMessage,\n    setStorageClassesList,\n    updateField,\n    selectedStorageClass,\n  ]);\n\n  const debounceNamespace = useMemo(\n    () => debounce(getNamespaceInformation, 500),\n    [getNamespaceInformation]\n  );\n\n  useEffect(() => {\n    if (namespace !== \"\") {\n      debounceNamespace();\n      setLoadingNamespaceInfo(true);\n\n      // Cancel previous debounce calls during useEffect cleanup.\n      return debounceNamespace.cancel;\n    }\n  }, [debounceNamespace, namespace]);\n\n  // Validation\n  useEffect(() => {\n    let customNamespaceError = false;\n    let errorMessage = \"\";\n\n    if (!emptyNamespace && !loadingNamespaceInfo) {\n      customNamespaceError = true;\n      errorMessage = \"You can only create one tenant per namespace\";\n    } else if (\n      storageClasses.length < 1 &&\n      emptyNamespace &&\n      !loadingNamespaceInfo\n    ) {\n      customNamespaceError = true;\n      errorMessage = \"Please enter a valid namespace\";\n    }\n\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"tenant-name\",\n        required: true,\n        pattern: /^[a-z0-9-]{3,63}$/,\n        customPatternMessage:\n          \"Name only can contain lowercase letters, numbers and '-'. Min. Length: 3\",\n        value: tenantName,\n      },\n      {\n        fieldKey: \"namespace\",\n        required: true,\n        value: namespace,\n        customValidation: customNamespaceError,\n        customValidationMessage: errorMessage,\n      },\n    ]);\n\n    const isValid =\n      !(\"tenant-name\" in commonValidation) &&\n      !(\"namespace\" in commonValidation) &&\n      ((formToRender === IMkEnvs.default && storageClasses.length > 0) ||\n        (formToRender !== IMkEnvs.default && selectedStorageType !== \"\"));\n\n    isPageValid(\"nameTenant\", isValid);\n\n    setValidationErrors(commonValidation);\n  }, [\n    storageClasses,\n    namespace,\n    tenantName,\n    isPageValid,\n    emptyNamespace,\n    loadingNamespaceInfo,\n    selectedStorageType,\n    formToRender,\n  ]);\n\n  const frmValidationCleanup = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const addNamespace = () => {\n    setOpenAddNSConfirm(true);\n  };\n\n  const closeAddNamespace = (refresh: boolean) => {\n    setOpenAddNSConfirm(false);\n\n    if (refresh) {\n      debounceNamespace();\n    }\n  };\n\n  return (\n    <Fragment>\n      {openAddNSConfirm && (\n        <AddNamespaceModal\n          addNamespaceOpen={openAddNSConfirm}\n          closeAddNamespaceModalAndRefresh={closeAddNamespace}\n          namespace={namespace}\n        />\n      )}\n      <Grid container>\n        <Grid item xs={8} md={9}>\n          <Paper className={classes.paperWrapper} sx={{ minHeight: 550 }}>\n            <Grid container>\n              <Grid item xs={12}>\n                <div className={classes.headerElement}>\n                  <h3 className={classes.h3Section}>Name</h3>\n                  <span className={classes.descriptionText}>\n                    How would you like to name this new tenant?\n                  </span>\n                </div>\n                <div className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"tenant-name\"\n                    name=\"tenant-name\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantName\", e.target.value);\n                      frmValidationCleanup(\"tenant-name\");\n                    }}\n                    label=\"Name\"\n                    value={tenantName}\n                    required\n                    error={validationErrors[\"tenant-name\"] || \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"namespace\"\n                  name=\"namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"namespace\", e.target.value);\n                    frmValidationCleanup(\"namespace\");\n                  }}\n                  label=\"Namespace\"\n                  value={namespace}\n                  error={validationErrors[\"namespace\"] || \"\"}\n                  overlayId={\"add-namespace\"}\n                  overlayIcon={showCreateButton ? <AddIcon /> : null}\n                  overlayAction={addNamespace}\n                  required\n                />\n              </Grid>\n              {formToRender === IMkEnvs.default ? (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_class\"\n                    name=\"storage_class\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      updateField(\n                        \"selectedStorageClass\",\n                        e.target.value as string\n                      );\n                    }}\n                    label=\"Storage Class\"\n                    value={selectedStorageClass}\n                    options={storageClasses}\n                    disabled={storageClasses.length < 1}\n                  />\n                </Grid>\n              ) : (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_type\"\n                    name=\"storage_type\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      setStorageType(e.target.value as string, features);\n                    }}\n                    label={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorLabel`,\n                      \"Storage Type\"\n                    )}\n                    value={selectedStorageType}\n                    options={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorValues`,\n                      []\n                    )}\n                  />\n                </Grid>\n              )}\n              {formToRender === IMkEnvs.default ? (\n                <TenantSize />\n              ) : (\n                get(\n                  mkPanelConfigurations,\n                  `${formToRender}.sizingComponent`,\n                  null\n                )\n              )}\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={4} md={3}>\n          <div className={classes.sizePreview}>\n            <SizePreview />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  tenantName: state.tenants.createTenant.fields.nameTenant.tenantName,\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  selectedStorageType:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageType,\n  storageClasses: state.tenants.createTenant.storageClasses,\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setStorageType,\n});\n\nexport default withStyles(styles)(connector(NameTenantMain));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport NameTenantMain from \"./NameTenantMain\";\nimport { IMkEnvs, resourcesConfigurations } from \"./utils\";\nimport { AppState } from \"../../../../../../store\";\n\ninterface ITenantResources {\n  features?: string[];\n}\n\nconst TenantResources = ({ features }: ITenantResources) => {\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  if (formRender === null) {\n    return null;\n  }\n\n  return <NameTenantMain formToRender={formRender} />;\n};\n\nconst mapState = (state: AppState) => ({\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, null);\n\nexport default connector(TenantResources);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport SectionH1 from \"../../../Common/SectionH1\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  logSearchEnabled: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  logSearchSecurityContext: ISecurityContext;\n  logSearchPostgresSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    logSearchEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigLogSearch = ({\n  classes,\n  storageClasses,\n  logSearchEnabled,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  logSearchSelectedStorageClass,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  logSearchSecurityContext,\n  logSearchPostgresSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (logSearchEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsUser\",\n          required: true,\n          value: logSearchSecurityContext.runAsUser,\n          customValidation:\n            logSearchSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_fsGroup\",\n          required: true,\n          value: logSearchSecurityContext.fsGroup,\n          customValidation:\n            logSearchSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsUser\",\n          required: true,\n          value: logSearchPostgresSecurityContext.runAsUser,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_fsGroup\",\n          required: true,\n          value: logSearchPostgresSecurityContext.fsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    logSearchImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    isPageValid,\n    logSearchEnabled,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n    tenantSecurityContext,\n    logSearchSecurityContext,\n    logSearchPostgresSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterLogSearch = storageClasses.filter(\n        (item: any) => item.value === logSearchSelectedStorageClass\n      );\n      if (filterLogSearch.length === 0) {\n        updateField(\"logSearchSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    logSearchSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <SectionH1>Audit Log</SectionH1>\n        </Grid>\n        <Grid item xs={4}>\n          <FormSwitchWrapper\n            value=\"enableLogging\"\n            id=\"enableLogging\"\n            name=\"enableLogging\"\n            checked={logSearchEnabled}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"logSearchEnabled\", checked);\n            }}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <span className={classes.descriptionText}>\n            Deploys a small PostgreSQL database and stores access logs of all\n            calls into the tenant.\n          </span>\n        </Grid>\n        <Grid xs={12}>\n          <hr className={classes.hrClass} />\n        </Grid>\n        {logSearchEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <SelectWrapper\n                id=\"log_search_storage_class\"\n                name=\"log_search_storage_class\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  updateField(\n                    \"logSearchSelectedStorageClass\",\n                    e.target.value as string\n                  );\n                }}\n                label=\"Log Search Storage Class\"\n                value={logSearchSelectedStorageClass}\n                options={configureSTClasses}\n                disabled={configureSTClasses.length < 1}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <InputBoxWrapper\n                  type=\"number\"\n                  id=\"log_search_volume_size\"\n                  name=\"log_search_volume_size\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"logSearchVolumeSize\", e.target.value);\n                    cleanValidation(\"log_search_volume_size\");\n                  }}\n                  label=\"Storage Size\"\n                  overlayObject={\n                    <InputUnitMenu\n                      id={\"size-unit\"}\n                      onUnitChange={() => {}}\n                      unitSelected={\"Gi\"}\n                      unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                      disabled={true}\n                    />\n                  }\n                  value={logSearchVolumeSize}\n                  required\n                  error={validationErrors[\"log_search_volume_size\"] || \"\"}\n                  min=\"0\"\n                />\n              </div>\n            </Grid>\n\n            <fieldset\n              className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n            >\n              <legend className={classes.descriptionText}>\n                SecurityContext for LogSearch\n              </legend>\n\n              <Grid item xs={12}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n                >\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"logSearch_securityContext_runAsUser\"\n                      name=\"logSearch_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchSecurityContext\", {\n                          ...logSearchSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"logSearch_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={logSearchSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\n                          \"logSearch_securityContext_runAsUser\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"logSearch_securityContext_runAsGroup\"\n                      name=\"logSearch_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchSecurityContext\", {\n                          ...logSearchSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"logSearch_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={logSearchSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"logSearch_securityContext_runAsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"logSearch_securityContext_fsGroup\"\n                      name=\"logSearch_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchSecurityContext\", {\n                          ...logSearchSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"logSearch_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={logSearchSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"logSearch_securityContext_fsGroup\"] ||\n                        \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"logSearchSecurityContextRunAsNonRoot\"\n                    id=\"logSearch_securityContext_runAsNonRoot\"\n                    name=\"logSearch_securityContext_runAsNonRoot\"\n                    checked={logSearchSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n            <fieldset className={classes.fieldGroup}>\n              <legend className={classes.descriptionText}>\n                SecurityContext for PostgreSQL\n              </legend>\n\n              <Grid item xs={12}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n                >\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"postgres_securityContext_runAsUser\"\n                      name=\"postgres_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchPostgresSecurityContext\", {\n                          ...logSearchPostgresSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"postgres_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={logSearchPostgresSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\n                          \"postgres_securityContext_runAsUser\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"postgres_securityContext_runAsGroup\"\n                      name=\"postgres_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchPostgresSecurityContext\", {\n                          ...logSearchPostgresSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"postgres_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={logSearchPostgresSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"postgres_securityContext_runAsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"postgres_securityContext_fsGroup\"\n                      name=\"postgres_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchPostgresSecurityContext\", {\n                          ...logSearchPostgresSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"postgres_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={logSearchPostgresSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"postgres_securityContext_fsGroup\"] ||\n                        \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"postgresSecurityContextRunAsNonRoot\"\n                    id=\"postgres_securityContext_runAsNonRoot\"\n                    name=\"postgres_securityContext_runAsNonRoot\"\n                    checked={logSearchPostgresSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  logSearchEnabled:\n    state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  logSearchSecurityContext:\n    state.tenants.createTenant.fields.configure.logSearchSecurityContext,\n  logSearchPostgresSecurityContext:\n    state.tenants.createTenant.fields.configure\n      .logSearchPostgresSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigLogSearch));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport SectionH1 from \"../../../Common/SectionH1\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  prometheusEnabled: boolean;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  prometheusSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    prometheusEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigPrometheus = ({\n  classes,\n  storageClasses,\n  prometheusEnabled,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  prometheusSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greater than 0`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsUser\",\n          required: true,\n          value: prometheusSecurityContext.runAsUser,\n          customValidation:\n            prometheusSecurityContext.runAsUser === \"\" ||\n            parseInt(prometheusSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsGroup\",\n          required: true,\n          value: prometheusSecurityContext.runAsGroup,\n          customValidation:\n            prometheusSecurityContext.runAsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_fsGroup\",\n          required: true,\n          value: prometheusSecurityContext.fsGroup,\n          customValidation:\n            prometheusSecurityContext.fsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    isPageValid,\n    prometheusEnabled,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    tenantSecurityContext,\n    prometheusSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterPrometheus = storageClasses.filter(\n        (item: any) => item.value === prometheusSelectedStorageClass\n      );\n      if (filterPrometheus.length === 0) {\n        updateField(\"prometheusSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    prometheusSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <SectionH1>Monitoring</SectionH1>\n        </Grid>\n        <Grid item xs={4}>\n          <FormSwitchWrapper\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={prometheusEnabled}\n            value={\"monitoring_status\"}\n            id=\"monitoring-status\"\n            name=\"monitoring-status\"\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"prometheusEnabled\", checked);\n            }}\n            description=\"\"\n          />\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <span className={classes.descriptionText}>\n          A small Prometheus will be deployed to keep metrics about the tenant.\n        </span>\n      </Grid>\n      <Grid xs={12}>\n        <hr className={classes.hrClass} />\n      </Grid>\n      <Grid container spacing={1}>\n        {prometheusEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <SelectWrapper\n                id=\"prometheus_storage_class\"\n                name=\"prometheus_storage_class\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  updateField(\n                    \"prometheusSelectedStorageClass\",\n                    e.target.value as string\n                  );\n                }}\n                label=\"Storage Class\"\n                value={prometheusSelectedStorageClass}\n                options={configureSTClasses}\n                disabled={configureSTClasses.length < 1}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <InputBoxWrapper\n                  type=\"number\"\n                  id=\"prometheus_volume_size\"\n                  name=\"prometheus_volume_size\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"prometheusVolumeSize\", e.target.value);\n                    cleanValidation(\"prometheus_volume_size\");\n                  }}\n                  label=\"Storage Size\"\n                  overlayObject={\n                    <InputUnitMenu\n                      id={\"size-unit\"}\n                      onUnitChange={() => {}}\n                      unitSelected={\"Gi\"}\n                      unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                      disabled={true}\n                    />\n                  }\n                  value={prometheusVolumeSize}\n                  required\n                  error={validationErrors[\"prometheus_volume_size\"] || \"\"}\n                  min=\"0\"\n                />\n              </div>\n            </Grid>\n            <fieldset\n              className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n            >\n              <legend className={classes.descriptionText}>\n                SecurityContext\n              </legend>\n              <Grid item xs={12} className={classes.configSectionItem}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n                >\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"prometheus_securityContext_runAsUser\"\n                      name=\"prometheus_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"prometheusSecurityContext\", {\n                          ...prometheusSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"prometheus_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={prometheusSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\n                          \"prometheus_securityContext_runAsUser\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"prometheus_securityContext_runAsGroup\"\n                      name=\"prometheus_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"prometheusSecurityContext\", {\n                          ...prometheusSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\n                          \"prometheus_securityContext_runAsGroup\"\n                        );\n                      }}\n                      label=\"Run As Group\"\n                      value={prometheusSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"prometheus_securityContext_runAsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"prometheus_securityContext_fsGroup\"\n                      name=\"prometheus_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"prometheusSecurityContext\", {\n                          ...prometheusSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"prometheus_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={prometheusSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"prometheus_securityContext_fsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.configSectionItem}>\n                <div\n                  className={`${classes.multiContainer} ${classes.fieldSpaceTop}`}\n                >\n                  <FormSwitchWrapper\n                    value=\"prometheusSecurityContextRunAsNonRoot\"\n                    id=\"prometheus_securityContext_runAsNonRoot\"\n                    name=\"prometheus_securityContext_runAsNonRoot\"\n                    checked={prometheusSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  prometheusEnabled:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  prometheusSecurityContext:\n    state.tenants.createTenant.fields.configure.prometheusSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigPrometheus));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress } from \"@mui/material\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalBasic,\n  settingsCommon,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport api from \"../../../../common/api\";\nimport { generatePoolName, getBytes } from \"../../../../common/utils\";\nimport GenericWizard from \"../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../Common/GenericWizard/types\";\nimport { NewServiceAccount } from \"../../Common/CredentialsPrompt/types\";\nimport {\n  ErrorResponseHandler,\n  ITenantCreator,\n  ITolerationModel,\n} from \"../../../../common/types\";\nimport { KeyPair } from \"../ListTenants/utils\";\n\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { getDefaultAffinity, getNodeSelector } from \"../TenantDetails/utils\";\nimport CredentialsPrompt from \"../../Common/CredentialsPrompt/CredentialsPrompt\";\nimport { AppState } from \"../../../../store\";\nimport { ICertificatesItems, IFieldStore } from \"../types\";\nimport { resetAddTenantForm, updateAddField } from \"../actions\";\nimport Configure from \"./Steps/Configure\";\nimport IdentityProvider from \"./Steps/IdentityProvider\";\nimport Security from \"./Steps/Security\";\nimport Encryption from \"./Steps/Encryption\";\nimport Affinity from \"./Steps/Affinity\";\nimport PageHeader from \"../../Common/PageHeader/PageHeader\";\nimport history from \"../../../../history\";\nimport Images from \"./Steps/Images\";\nimport PageLayout from \"../../Common/Layout/PageLayout\";\nimport BackLink from \"../../../../common/BackLink\";\nimport TenantResources from \"./Steps/TenantResources/TenantResources\";\nimport ConfigLogSearch from \"./Steps/ConfigLogSearch\";\nimport ConfigPrometheus from \"./Steps/ConfigPrometheus\";\nimport {\n  IMkEnvs,\n  resourcesConfigurations,\n} from \"./Steps/TenantResources/utils\";\nimport HelpBox from \"../../../../common/HelpBox\";\nimport { StorageIcon } from \"../../../../icons\";\n\ninterface IAddTenantProps {\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  resetAddTenantForm: typeof resetAddTenantForm;\n  updateAddField: typeof updateAddField;\n  fields: IFieldStore;\n  certificates: ICertificatesItems;\n  selectedStorageClass: string;\n  namespace: string;\n  validPages: string[];\n  classes: any;\n  features?: string[];\n  tolerations: ITolerationModel[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n    ...settingsCommon,\n  });\n\nconst AddTenant = ({\n  classes,\n  fields,\n  certificates,\n  selectedStorageClass,\n  namespace,\n  validPages,\n  setErrorSnackMessage,\n  resetAddTenantForm,\n  features,\n  tolerations,\n}: IAddTenantProps) => {\n  // Modals\n  const [showNewCredentials, setShowNewCredentials] = useState<boolean>(false);\n  const [createdAccount, setCreatedAccount] =\n    useState<NewServiceAccount | null>(null);\n\n  // Fields\n  const [addSending, setAddSending] = useState<boolean>(false);\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  /* Send Information to backend */\n  useEffect(() => {\n    const tenantName = fields.nameTenant.tenantName;\n    const selectedStorageClass = fields.nameTenant.selectedStorageClass;\n    const imageName = fields.configure.imageName;\n    const customDockerhub = fields.configure.customDockerhub;\n    const imageRegistry = fields.configure.imageRegistry;\n    const imageRegistryUsername = fields.configure.imageRegistryUsername;\n    const imageRegistryPassword = fields.configure.imageRegistryPassword;\n    const exposeMinIO = fields.configure.exposeMinIO;\n    const exposeConsole = fields.configure.exposeConsole;\n    const idpSelection = fields.identityProvider.idpSelection;\n    const openIDConfigurationURL =\n      fields.identityProvider.openIDConfigurationURL;\n    const openIDClientID = fields.identityProvider.openIDClientID;\n    const openIDClaimName = fields.identityProvider.openIDClaimName;\n    const openIDCallbackURL = fields.identityProvider.openIDCallbackURL;\n    const openIDScopes = fields.identityProvider.openIDScopes;\n    const openIDSecretID = fields.identityProvider.openIDSecretID;\n    const ADURL = fields.identityProvider.ADURL;\n    const ADSkipTLS = fields.identityProvider.ADSkipTLS;\n    const ADServerInsecure = fields.identityProvider.ADServerInsecure;\n    const ADGroupSearchBaseDN = fields.identityProvider.ADGroupSearchBaseDN;\n    const ADGroupSearchFilter = fields.identityProvider.ADGroupSearchFilter;\n    const ADUserDNs = fields.identityProvider.ADUserDNs;\n    const ADLookupBindDN = fields.identityProvider.ADLookupBindDN;\n    const ADLookupBindPassword = fields.identityProvider.ADLookupBindPassword;\n    const ADUserDNSearchBaseDN = fields.identityProvider.ADUserDNSearchBaseDN;\n    const ADUserDNSearchFilter = fields.identityProvider.ADUserDNSearchFilter;\n    const ADServerStartTLS = fields.identityProvider.ADServerStartTLS;\n    const accessKeys = fields.identityProvider.accessKeys;\n    const secretKeys = fields.identityProvider.secretKeys;\n    const minioCertificates = certificates.minioCertificates;\n    const caCertificates = certificates.caCertificates;\n    const consoleCaCertificates = certificates.consoleCaCertificates;\n    const consoleCertificate = certificates.consoleCertificate;\n    const serverCertificate = certificates.serverCertificate;\n    const clientCertificate = certificates.clientCertificate;\n    const vaultCertificate = certificates.vaultCertificate;\n    const vaultCA = certificates.vaultCA;\n    const gemaltoCA = certificates.gemaltoCA;\n    const enableEncryption = fields.encryption.enableEncryption;\n    const encryptionType = fields.encryption.encryptionType;\n    const gemaltoEndpoint = fields.encryption.gemaltoEndpoint;\n    const gemaltoToken = fields.encryption.gemaltoToken;\n    const gemaltoDomain = fields.encryption.gemaltoDomain;\n    const gemaltoRetry = fields.encryption.gemaltoRetry;\n    const awsEndpoint = fields.encryption.awsEndpoint;\n    const awsRegion = fields.encryption.awsRegion;\n    const awsKMSKey = fields.encryption.awsKMSKey;\n    const awsAccessKey = fields.encryption.awsAccessKey;\n    const awsSecretKey = fields.encryption.awsSecretKey;\n    const awsToken = fields.encryption.awsToken;\n    const vaultEndpoint = fields.encryption.vaultEndpoint;\n    const vaultEngine = fields.encryption.vaultEngine;\n    const vaultNamespace = fields.encryption.vaultNamespace;\n    const vaultPrefix = fields.encryption.vaultPrefix;\n    const vaultAppRoleEngine = fields.encryption.vaultAppRoleEngine;\n    const vaultId = fields.encryption.vaultId;\n    const vaultSecret = fields.encryption.vaultSecret;\n    const vaultRetry = fields.encryption.vaultRetry;\n    const vaultPing = fields.encryption.vaultPing;\n    const azureEndpoint = fields.encryption.azureEndpoint;\n    const azureTenantID = fields.encryption.azureTenantID;\n    const azureClientID = fields.encryption.azureClientID;\n    const azureClientSecret = fields.encryption.azureClientSecret;\n    const gcpProjectID = fields.encryption.gcpProjectID;\n    const gcpEndpoint = fields.encryption.gcpEndpoint;\n    const gcpClientEmail = fields.encryption.gcpClientEmail;\n    const gcpClientID = fields.encryption.gcpClientID;\n    const gcpPrivateKeyID = fields.encryption.gcpPrivateKeyID;\n    const gcpPrivateKey = fields.encryption.gcpPrivateKey;\n    const enableAutoCert = fields.security.enableAutoCert;\n    const enableTLS = fields.security.enableTLS;\n    const ecParity = fields.tenantSize.ecParity;\n    const distribution = fields.tenantSize.distribution;\n    const tenantCustom = fields.configure.tenantCustom;\n    const logSearchEnabled = fields.configure.logSearchEnabled;\n    const prometheusEnabled = fields.configure.prometheusEnabled;\n    const logSearchVolumeSize = fields.configure.logSearchVolumeSize;\n    const logSearchSelectedStorageClass =\n      fields.configure.logSearchSelectedStorageClass;\n    const logSearchImage = fields.configure.logSearchImage;\n    const kesImage = fields.configure.kesImage;\n    const logSearchPostgresImage = fields.configure.logSearchPostgresImage;\n    const logSearchPostgresInitImage =\n      fields.configure.logSearchPostgresInitImage;\n    const prometheusImage = fields.configure.prometheusImage;\n    const prometheusSidecarImage = fields.configure.prometheusSidecarImage;\n    const prometheusInitImage = fields.configure.prometheusInitImage;\n    const prometheusSelectedStorageClass =\n      fields.configure.prometheusSelectedStorageClass;\n    const prometheusVolumeSize = fields.configure.prometheusVolumeSize;\n    const affinityType = fields.affinity.podAffinity;\n    const nodeSelectorLabels = fields.affinity.nodeSelectorLabels;\n    const withPodAntiAffinity = fields.affinity.withPodAntiAffinity;\n\n    const tenantSecurityContext = fields.configure.tenantSecurityContext;\n    const logSearchSecurityContext = fields.configure.logSearchSecurityContext;\n    const logSearchPostgresSecurityContext =\n      fields.configure.logSearchPostgresSecurityContext;\n    const prometheusSecurityContext =\n      fields.configure.prometheusSecurityContext;\n    const kesSecurityContext = fields.encryption.kesSecurityContext;\n    const kesReplicas = fields.encryption.replicas;\n    const setDomains = fields.configure.setDomains;\n    const minioDomains = fields.configure.minioDomains;\n    const consoleDomain = fields.configure.consoleDomain;\n\n    if (addSending) {\n      const tolerationValues = tolerations.filter(\n        (toleration) => toleration.key.trim() !== \"\"\n      );\n\n      const poolName = generatePoolName([]);\n\n      let affinityObject = {};\n\n      switch (affinityType) {\n        case \"default\":\n          affinityObject = {\n            affinity: getDefaultAffinity(tenantName, poolName),\n          };\n          break;\n        case \"nodeSelector\":\n          affinityObject = {\n            affinity: getNodeSelector(\n              nodeSelectorLabels,\n              withPodAntiAffinity,\n              tenantName,\n              poolName\n            ),\n          };\n          break;\n      }\n\n      const erasureCode = ecParity.split(\":\")[1];\n\n      let dataSend: ITenantCreator = {\n        name: tenantName,\n        namespace: namespace,\n        access_key: \"\",\n        secret_key: \"\",\n        access_keys: [],\n        secret_keys: [],\n        enable_tls: enableTLS && enableAutoCert,\n        enable_console: true,\n        enable_prometheus: true,\n        service_name: \"\",\n        image: imageName,\n        expose_minio: exposeMinIO,\n        expose_console: exposeConsole,\n        pools: [\n          {\n            name: poolName,\n            servers: distribution.nodes,\n            volumes_per_server: distribution.disks,\n            volume_configuration: {\n              size: distribution.pvSize,\n              storage_class_name: selectedStorageClass,\n            },\n            securityContext: tenantCustom ? tenantSecurityContext : null,\n            ...affinityObject,\n            tolerations: tolerationValues,\n          },\n        ],\n        erasureCodingParity: parseInt(erasureCode, 10),\n      };\n\n      // Set Resources\n      if (\n        fields.tenantSize.resourcesCPURequest !== \"\" ||\n        fields.tenantSize.resourcesCPULimit !== \"\" ||\n        fields.tenantSize.resourcesMemoryRequest !== \"\" ||\n        fields.tenantSize.resourcesMemoryLimit !== \"\"\n      ) {\n        dataSend.pools[0].resources = {};\n        // requests\n        if (\n          fields.tenantSize.resourcesCPURequest !== \"\" ||\n          fields.tenantSize.resourcesMemoryRequest !== \"\"\n        ) {\n          dataSend.pools[0].resources.requests = {};\n          if (fields.tenantSize.resourcesCPURequest !== \"\") {\n            dataSend.pools[0].resources.requests.cpu = parseInt(\n              fields.tenantSize.resourcesCPURequest\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryRequest !== \"\") {\n            dataSend.pools[0].resources.requests.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryRequest, \"Gi\", true)\n            );\n          }\n        }\n        // limits\n        if (\n          fields.tenantSize.resourcesCPULimit !== \"\" ||\n          fields.tenantSize.resourcesMemoryLimit !== \"\"\n        ) {\n          dataSend.pools[0].resources.limits = {};\n          if (fields.tenantSize.resourcesCPULimit !== \"\") {\n            dataSend.pools[0].resources.limits.cpu = parseInt(\n              fields.tenantSize.resourcesCPULimit\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryLimit !== \"\") {\n            dataSend.pools[0].resources.limits.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryLimit, \"Gi\", true)\n            );\n          }\n        }\n      }\n      if (customDockerhub) {\n        dataSend = {\n          ...dataSend,\n          image_registry: {\n            registry: imageRegistry,\n            username: imageRegistryUsername,\n            password: imageRegistryPassword,\n          },\n        };\n      }\n\n      if (logSearchEnabled) {\n        dataSend = {\n          ...dataSend,\n          logSearchConfiguration: {\n            storageClass:\n              logSearchSelectedStorageClass === \"default\"\n                ? \"\"\n                : logSearchSelectedStorageClass,\n            storageSize: parseInt(logSearchVolumeSize),\n            image: logSearchImage,\n            postgres_image: logSearchPostgresImage,\n            postgres_init_image: logSearchPostgresInitImage,\n            securityContext: logSearchSecurityContext,\n            postgres_securityContext: logSearchPostgresSecurityContext,\n          },\n        };\n      }\n\n      if (prometheusEnabled) {\n        dataSend = {\n          ...dataSend,\n          prometheusConfiguration: {\n            storageClass:\n              prometheusSelectedStorageClass === \"default\"\n                ? \"\"\n                : prometheusSelectedStorageClass,\n            storageSize: parseInt(prometheusVolumeSize),\n            image: prometheusImage,\n            sidecar_image: prometheusSidecarImage,\n            init_image: prometheusInitImage,\n            securityContext: prometheusSecurityContext,\n          },\n        };\n      }\n\n      let tenantCerts: any = null;\n      let consoleCerts: any = null;\n      let caCerts: any = null;\n      let consoleCaCerts: any = null;\n\n      if (caCertificates.length > 0) {\n        caCerts = {\n          ca_certificates: caCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (consoleCaCertificates.length > 0) {\n        consoleCaCerts = {\n          console_ca_certificates: consoleCaCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (enableTLS && minioCertificates.length > 0) {\n        tenantCerts = {\n          minio: minioCertificates\n            .map((keyPair: KeyPair) => ({\n              crt: keyPair.encoded_cert,\n              key: keyPair.encoded_key,\n            }))\n            .filter((keyPair) => keyPair.crt && keyPair.key),\n        };\n      }\n\n      if (\n        enableTLS &&\n        consoleCertificate.encoded_cert !== \"\" &&\n        consoleCertificate.encoded_key !== \"\"\n      ) {\n        consoleCerts = {\n          console: {\n            crt: consoleCertificate.encoded_cert,\n            key: consoleCertificate.encoded_key,\n          },\n        };\n      }\n\n      if (tenantCerts || consoleCerts || caCerts || consoleCaCerts) {\n        dataSend = {\n          ...dataSend,\n          tls: {\n            ...tenantCerts,\n            ...consoleCerts,\n            ...caCerts,\n            ...consoleCaCerts,\n          },\n        };\n      }\n\n      if (enableEncryption) {\n        let insertEncrypt = {};\n\n        switch (encryptionType) {\n          case \"gemalto\":\n            let gemaltoCAIntroduce = {};\n\n            if (gemaltoCA.encoded_cert !== \"\") {\n              gemaltoCAIntroduce = {\n                ca: gemaltoCA.encoded_cert,\n              };\n            }\n            insertEncrypt = {\n              gemalto: {\n                keysecure: {\n                  endpoint: gemaltoEndpoint,\n                  credentials: {\n                    token: gemaltoToken,\n                    domain: gemaltoDomain,\n                    retry: parseInt(gemaltoRetry),\n                  },\n                  tls: {\n                    ...gemaltoCAIntroduce,\n                  },\n                },\n              },\n            };\n            break;\n          case \"aws\":\n            insertEncrypt = {\n              aws: {\n                secretsmanager: {\n                  endpoint: awsEndpoint,\n                  region: awsRegion,\n                  kmskey: awsKMSKey,\n                  credentials: {\n                    accesskey: awsAccessKey,\n                    secretkey: awsSecretKey,\n                    token: awsToken,\n                  },\n                },\n              },\n            };\n            break;\n          case \"azure\":\n            insertEncrypt = {\n              azure: {\n                keyvault: {\n                  endpoint: azureEndpoint,\n                  credentials: {\n                    tenant_id: azureTenantID,\n                    client_id: azureClientID,\n                    client_secret: azureClientSecret,\n                  },\n                },\n              },\n            };\n            break;\n          case \"gcp\":\n            insertEncrypt = {\n              gcp: {\n                secretmanager: {\n                  project_id: gcpProjectID,\n                  endpoint: gcpEndpoint,\n                  credentials: {\n                    client_email: gcpClientEmail,\n                    client_id: gcpClientID,\n                    private_key_id: gcpPrivateKeyID,\n                    private_key: gcpPrivateKey,\n                  },\n                },\n              },\n            };\n            break;\n          case \"vault\":\n            let vaultKeyPair = null;\n            let vaultCAInsert = null;\n            if (\n              vaultCertificate.encoded_key !== \"\" &&\n              vaultCertificate.encoded_cert !== \"\"\n            ) {\n              vaultKeyPair = {\n                key: vaultCertificate.encoded_key,\n                crt: vaultCertificate.encoded_cert,\n              };\n            }\n            if (vaultCA.encoded_cert !== \"\") {\n              vaultCAInsert = {\n                ca: vaultCA.encoded_cert,\n              };\n            }\n            let vaultTLS = null;\n            if (vaultKeyPair || vaultCAInsert) {\n              vaultTLS = {\n                tls: {\n                  ...vaultKeyPair,\n                  ...vaultCAInsert,\n                },\n              };\n            }\n            insertEncrypt = {\n              vault: {\n                endpoint: vaultEndpoint,\n                engine: vaultEngine,\n                namespace: vaultNamespace,\n                prefix: vaultPrefix,\n                approle: {\n                  engine: vaultAppRoleEngine,\n                  id: vaultId,\n                  secret: vaultSecret,\n                  retry: parseInt(vaultRetry),\n                },\n                ...vaultTLS,\n                status: {\n                  ping: parseInt(vaultPing),\n                },\n              },\n            };\n            break;\n        }\n\n        let encryptionServerKeyPair: any = {};\n        let encryptionClientKeyPair: any = {};\n\n        if (\n          clientCertificate.encoded_key !== \"\" &&\n          clientCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionClientKeyPair = {\n            client: {\n              key: clientCertificate.encoded_key,\n              crt: clientCertificate.encoded_cert,\n            },\n          };\n        }\n\n        if (\n          serverCertificate.encoded_key !== \"\" &&\n          serverCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionServerKeyPair = {\n            server: {\n              key: serverCertificate.encoded_key,\n              crt: serverCertificate.encoded_cert,\n            },\n          };\n        }\n\n        dataSend = {\n          ...dataSend,\n          encryption: {\n            replicas: kesReplicas,\n            securityContext: kesSecurityContext,\n            image: kesImage,\n            ...encryptionClientKeyPair,\n            ...encryptionServerKeyPair,\n            ...insertEncrypt,\n          },\n        };\n      }\n\n      let dataIDP: any = {};\n      switch (idpSelection) {\n        case \"Built-in\":\n          let keyarray = [];\n          for (let i = 0; i < accessKeys.length; i++) {\n            keyarray.push({\n              access_key: accessKeys[i],\n              secret_key: secretKeys[i],\n            });\n          }\n          dataIDP = {\n            keys: keyarray,\n          };\n          break;\n        case \"OpenID\":\n          dataIDP = {\n            oidc: {\n              configuration_url: openIDConfigurationURL,\n              client_id: openIDClientID,\n              secret_id: openIDSecretID,\n              claim_name: openIDClaimName,\n              callback_url: openIDCallbackURL,\n              scopes: openIDScopes,\n            },\n          };\n          break;\n        case \"AD\":\n          dataIDP = {\n            active_directory: {\n              url: ADURL,\n              skip_tls_verification: ADSkipTLS,\n              server_insecure: ADServerInsecure,\n              group_search_base_dn: ADGroupSearchBaseDN,\n              group_search_filter: ADGroupSearchFilter,\n              user_dns: ADUserDNs,\n              lookup_bind_dn: ADLookupBindDN,\n              lookup_bind_password: ADLookupBindPassword,\n              user_dn_search_base_dn: ADUserDNSearchBaseDN,\n              user_dn_search_filter: ADUserDNSearchFilter,\n              server_start_tls: ADServerStartTLS,\n            },\n          };\n          break;\n      }\n\n      let domains: any = {};\n      let sendDomain: any = {};\n\n      if (setDomains) {\n        if (consoleDomain !== \"\") {\n          domains.console = consoleDomain;\n        }\n\n        const filteredDomains = minioDomains.filter((dom) => dom.trim() !== \"\");\n\n        if (filteredDomains.length > 0) {\n          domains.minio = filteredDomains;\n        }\n\n        if (Object.keys(domains).length > 0) {\n          sendDomain.domains = domains;\n        }\n      }\n\n      dataSend = {\n        ...dataSend,\n        ...sendDomain,\n        idp: { ...dataIDP },\n      };\n      api\n        .invoke(\"POST\", `/api/v1/tenants`, dataSend)\n        .then((res) => {\n          const consoleSAList = get(res, \"console\", []);\n\n          let newSrvAcc: NewServiceAccount = {\n            idp: get(res, \"externalIDP\", false),\n            console: [],\n          };\n\n          if (consoleSAList) {\n            if (Array.isArray(consoleSAList)) {\n              const consoleItem = consoleSAList.map((consoleKey) => {\n                return {\n                  accessKey: consoleKey.access_key,\n                  secretKey: consoleKey.secret_key,\n                  api: \"s3v4\",\n                  path: \"auto\",\n                  url: consoleKey.url,\n                };\n              });\n\n              newSrvAcc.console = consoleItem;\n            } else {\n              newSrvAcc = {\n                console: {\n                  accessKey: res.console.access_key,\n                  secretKey: res.console.secret_key,\n                  url: res.console.url,\n                },\n              };\n            }\n          }\n          setAddSending(false);\n          setShowNewCredentials(true);\n          setCreatedAccount(newSrvAcc);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          setErrorSnackMessage(err);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addSending]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      resetAddTenantForm();\n      history.push(\"/tenants\");\n    },\n  };\n  const requiredPages = [\n    \"nameTenant\",\n    \"tenantSize\",\n    \"configure\",\n    \"affinity\",\n    \"identityProvider\",\n    \"security\",\n    \"encryption\",\n  ];\n  const createButton = {\n    label: \"Create\",\n    type: \"submit\",\n    enabled:\n      !addSending &&\n      selectedStorageClass !== \"\" &&\n      requiredPages.every((v) => validPages.includes(v)),\n    action: () => {\n      setAddSending(true);\n    },\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <TenantResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configure\",\n      advancedOnly: true,\n      componentRender: <Configure />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Images\",\n      advancedOnly: true,\n      componentRender: <Images />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <Affinity />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Identity Provider\",\n      advancedOnly: true,\n      componentRender: <IdentityProvider />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Security\",\n      advancedOnly: true,\n      componentRender: <Security />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Encryption\",\n      advancedOnly: true,\n      componentRender: <Encryption />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Audit Log\",\n      advancedOnly: true,\n      componentRender: <ConfigLogSearch />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Monitoring\",\n      advancedOnly: true,\n      componentRender: <ConfigPrometheus />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  let filteredWizardSteps = wizardSteps;\n\n  const closeCredentialsModal = () => {\n    resetAddTenantForm();\n    history.push(\"/tenants\");\n  };\n\n  return (\n    <Fragment>\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={createdAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Tenant\"\n        />\n      )}\n      <PageHeader\n        label={\n          <BackLink\n            to={\"/tenants\"}\n            label={\"Tenants\"}\n            executeOnClick={resetAddTenantForm}\n          />\n        }\n      />\n\n      <PageLayout>\n        {addSending && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.pageBox}>\n          <GenericWizard wizardSteps={filteredWizardSteps} />\n        </Grid>\n        {formRender === IMkEnvs.aws && (\n          <Grid item xs={12} style={{ marginTop: 16 }}>\n            <HelpBox\n              title={\"EBS Volume Configuration.\"}\n              iconComponent={<StorageIcon />}\n              help={\n                <Fragment>\n                  <b>Performance Optimized</b>: Uses the <i>gp3</i> EBS storage\n                  class class configured at 1,000Mi/s throughput and 16,000\n                  IOPS, however the minimum volume size for this type of EBS\n                  volume is <b>32Gi</b>.\n                  <br />\n                  <br />\n                  <b>Storage Optimized</b>: Uses the <i>sc1</i> EBS storage\n                  class, however the minimum volume size for this type of EBS\n                  volume is &nbsp;\n                  <b>16Ti</b> to unlock their maximum throughput speed of\n                  250Mi/s.\n                </Fragment>\n              }\n            />\n          </Grid>\n        )}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  validPages: state.tenants.createTenant.validPages,\n  fields: state.tenants.createTenant.fields,\n  certificates: state.tenants.createTenant.certificates,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  features: state.console.session.features,\n  tolerations: state.tenants.createTenant.tolerations,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  updateAddField,\n  resetAddTenantForm,\n});\n\nexport default withStyles(styles)(connector(AddTenant));\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","root","border","borderRadius","backgroundColor","paddingLeft","paddingTop","paddingBottom","paddingRight","leftItems","fontSize","fontWeight","marginBottom","display","alignItems","marginRight","height","width","helpText","classes","iconComponent","title","help","className","container","item","xs","flexFlow","padding","inputWithCopy","background","inputLabel","fieldBasic","label","value","OutlinedInput","readOnly","endAdornment","InputAdornment","position","text","BoxIconButton","tooltip","onClick","onMouseDown","edge","download","filename","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","warningBlock","color","margin","credentialTitle","buttonContainer","textAlign","marginTop","credentialsPanel","overflowY","maxHeight","promptTitle","buttonSpacer","newServiceAccount","open","closeModal","entity","consoleCreds","get","idp","ModalWrapper","modalOpen","onClose","titleIcon","Grid","formScrollable","Array","isArray","map","credentialsPair","index","accessKey","secretKey","undefined","WarnIcon","RBIconButton","id","consoleExtras","itemMap","url","api","path","JSON","stringify","icon","variant","length","allCredentials","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","fileInputField","fileInputStyles","textBoxContainer","onChange","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","placement","HelpIcon","type","e","fileName","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","fileProcess","data","IconButton","component","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","connector","connect","state","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","deleteDialogStyles","content","customDialogSize","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","useEffect","message","customSize","paper","fullWidth","detailedErrorMsg","scroll","event","reason","titleText","closeContainer","closeButton","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","exposeMinIO","tenants","createTenant","fields","configure","exposeConsole","setDomains","consoleDomain","minioDomains","tenantCustom","tenantSecurityContext","updateAddField","isPageValid","addNewMinIODomain","removeMinIODomain","configSectionItem","tenantCustomizationFields","marginLeft","containerItem","fieldGroup","createTenantCommon","responsiveSectionItem","wrapperContainer","overlayAction","modalBasic","wizardCommon","validationErrors","setValidationErrors","updateField","useCallback","field","customAccountValidation","fieldKey","runAsUser","customValidation","parseInt","customValidationMessage","runAsGroup","fsGroup","minioExtraValidations","validation","pattern","customPatternMessage","commonVal","commonFormValidation","Object","keys","cleanValidation","fieldName","clearValidationError","Paper","paperWrapper","headerElement","h3Section","descriptionText","FormSwitchWrapper","checked","InputBoxWrapper","placeholder","domain","copyDomains","updateMinIODomain","Add","RemoveIcon","multiContainer","min","runAsNonRoot","idpSelection","identityProvider","accessKeys","secretKeys","openIDConfigurationURL","openIDClientID","openIDSecretID","openIDCallbackURL","openIDClaimName","openIDScopes","ADURL","ADSkipTLS","ADServerInsecure","ADGroupSearchBaseDN","ADGroupSearchFilter","ADUserDNs","ADLookupBindDN","ADLookupBindPassword","ADUserDNSearchBaseDN","ADUserDNSearchFilter","ADServerStartTLS","shortened","gridTemplateColumns","gridGap","buttonTray","protocolRadioOptions","adUserDnRows","formFieldStyles","updateUserField","newUserField","updatePwordField","updateADUserField","newADUserDNsField","customIDPValidation","i","push","inputs","_","Fragment","splice","getRandomString","Casino","Delete","RadioGroupSelector","currentSelection","selectorOptions","formFieldRow","Typography","gutterBottom","enableTLS","security","enableAutoCert","enableCustomCerts","minioCertificates","certificates","caCertificates","addFileToCaCertificates","deleteCaCertificate","addCaCertificate","addKeyPair","addFileToKeyPair","deleteKeyPair","minioCertificateRows","justifyContent","borderBottom","flex","fileItem","minWidth","minioCertsContainer","minioCACertsRow","rowActions","spacing","description","SectionTitle","keyPair","FileSelector","encodedValue","cert","key","AddIcon","replicas","encryption","enableEncryption","encryptionType","gemaltoEndpoint","gemaltoToken","gemaltoDomain","gemaltoRetry","awsEndpoint","awsRegion","awsKMSKey","awsAccessKey","awsSecretKey","awsToken","vaultEndpoint","vaultEngine","vaultNamespace","vaultPrefix","vaultAppRoleEngine","vaultId","vaultSecret","vaultRetry","vaultPing","azureEndpoint","azureTenantID","azureClientID","azureClientSecret","gcpProjectID","gcpEndpoint","gcpClientEmail","gcpClientID","gcpPrivateKeyID","gcpPrivateKey","enableCustomCertsForKES","serverCertificate","clientCertificate","vaultCertificate","vaultCA","gemaltoCA","kesSecurityContext","addFileServerCert","addFileClientCert","addFileVaultCert","addFileVaultCa","addFileGemaltoCa","encryptionTypeOptions","mutualTlsConfig","rightSpacer","responsiveContainer","encryptionAvailable","filter","encoded_key","encoded_cert","encryptionValidation","indicatorLabels","hrClass","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","setModalErrorSnackMessage","setKeyValuePairs","setTolerationInfo","addNewToleration","removeToleration","affinityConfigField","affinityFieldLabel","radioField","affinityLabelKey","affinityLabelValue","affinityRow","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","then","res","k","catch","err","vl","kvp","kvs","a","indexOf","join","valid","splittedLabels","forEach","splitItem","updateToleration","alterToleration","affinityHelpText","SelectWrapper","newKey","arrCp","assign","options","v","tol","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","storageClasses","customImage","imageName","customDockerhub","imageRegistry","imageRegistryUsername","imageRegistryPassword","prometheusCustom","prometheusEnabled","logSearchCustom","logSearchEnabled","logSearchVolumeSize","logSearchSizeFactor","prometheusVolumeSize","prometheusSizeFactor","logSearchSelectedStorageClass","logSearchImage","kesImage","logSearchPostgresImage","logSearchPostgresInitImage","prometheusSelectedStorageClass","prometheusImage","prometheusSidecarImage","prometheusInitImage","selectedStorageClass","nameTenant","mapDispatchToProps","setErrorSnackMessage","wrapText","wordWrap","namespace","addNamespaceOpen","closeAddNamespaceModalAndRefresh","addNamespaceLoading","setAddNamespaceLoading","ConfirmDialog","confirmText","confirmButtonProps","isOpen","isLoading","onConfirm","confirmationContent","LinearProgress","DialogContentText","volumeSize","tenantSize","sizeFactor","drivesPerServer","nodes","memoryNode","resourcesMemoryRequest","ecParity","ecParityChoices","cleanECChoices","resourcesSize","distribution","ecParityCalc","limitSize","cpuToUse","resourcesCPURequest","integrationSelection","table","usableInformation","storageFactors","find","erasureCode","Divider","Table","TableBody","TableRow","TableCell","scope","align","typeSelection","storageClass","disks","niceBytes","pvSize","persistentVolumes","rawCapacity","maxCapacity","Math","floor","maxFailureTolerations","CPU","memory","driveSize","sizeUnit","tenantName","selectedStorageType","features","console","session","setStorageClassesList","setLimitSize","setStorageType","sizePreview","formToRender","IMkEnvs","emptyNamespace","setEmptyNamespace","loadingNamespaceInfo","setLoadingNamespaceInfo","showCreateButton","setShowCreateButton","openAddNSConfirm","setOpenAddNSConfirm","getNamespaceInformation","tenantsList","elements","getLimitSizes","newStorage","stExists","findIndex","detailedError","debounceNamespace","useMemo","debounce","cancel","customNamespaceError","commonValidation","isValid","frmValidationCleanup","refresh","md","sx","minHeight","overlayId","overlayIcon","mkPanelConfigurations","TenantSize","formRender","setFormRender","setConfiguration","resourcesConfigurations","includes","logSearchSecurityContext","logSearchPostgresSecurityContext","logSearchEnabledFields","fieldSpaceTop","configureSTClasses","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","prometheusSecurityContext","prometheusEnabledFields","validPages","resetAddTenantForm","pageBox","settingsCommon","showNewCredentials","setShowNewCredentials","createdAccount","setCreatedAccount","addSending","setAddSending","consoleCaCertificates","consoleCertificate","affinityType","kesReplicas","tolerationValues","toleration","trim","poolName","generatePoolName","affinityObject","getDefaultAffinity","getNodeSelector","dataSend","access_key","secret_key","access_keys","secret_keys","enable_tls","enable_console","enable_prometheus","service_name","image","expose_minio","expose_console","pools","servers","volumes_per_server","volume_configuration","storage_class_name","securityContext","erasureCodingParity","resourcesCPULimit","resourcesMemoryLimit","resources","requests","cpu","getBytes","limits","image_registry","registry","username","password","logSearchConfiguration","storageSize","postgres_image","postgres_init_image","postgres_securityContext","prometheusConfiguration","sidecar_image","init_image","tenantCerts","consoleCerts","caCerts","consoleCaCerts","ca_certificates","console_ca_certificates","minio","crt","tls","insertEncrypt","gemaltoCAIntroduce","ca","gemalto","keysecure","endpoint","credentials","token","retry","aws","secretsmanager","region","kmskey","accesskey","secretkey","azure","keyvault","tenant_id","client_id","client_secret","gcp","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","vaultTLS","vault","engine","prefix","approle","secret","status","ping","encryptionServerKeyPair","encryptionClientKeyPair","client","server","dataIDP","keyarray","oidc","configuration_url","secret_id","claim_name","callback_url","scopes","active_directory","skip_tls_verification","server_insecure","group_search_base_dn","group_search_filter","user_dns","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","server_start_tls","domains","sendDomain","filteredDomains","dom","consoleSAList","newSrvAcc","consoleItem","consoleKey","cancelButton","enabled","action","history","createButton","every","filteredWizardSteps","componentRender","buttons","advancedOnly","CredentialsPrompt","PageHeader","BackLink","to","executeOnClick","PageLayout","GenericWizard","wizardSteps","HelpBox","errorBlock","palette","main","withBreak"],"sourceRoot":""}