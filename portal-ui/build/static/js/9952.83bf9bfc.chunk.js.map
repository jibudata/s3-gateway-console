{"version":3,"file":"static/js/9952.83bf9bfc.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddKeyModal.tsx","screens/Console/Buckets/BucketDetails/EnableBucketEncryption.tsx","screens/Console/KMS/KMSHelpbox.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { Grid, InputBox } from \"mds\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport KMSHelpBox from \"../../KMS/KMSHelpbox\";\n\ninterface IAddKeyModalProps {\n  closeAddModalAndRefresh: (refresh: boolean) => void;\n  addOpen: boolean;\n}\n\nconst AddKeyModal = ({\n  closeAddModalAndRefresh,\n  addOpen,\n}: IAddKeyModalProps) => {\n  const dispatch = useAppDispatch();\n  const onAddSuccess = () => closeAddModalAndRefresh(true);\n  const onAddError = (err: ErrorResponseHandler) => {\n    closeAddModalAndRefresh(false);\n    dispatch(setErrorSnackMessage(err));\n  };\n  const onClose = () => closeAddModalAndRefresh(false);\n\n  const [addLoading, invokeAddApi] = useApi(onAddSuccess, onAddError);\n  const [keyName, setKeyName] = useState<string>(\"\");\n\n  const onConfirmAdd = () => {\n    invokeAddApi(\"POST\", \"/api/v1/kms/keys/\", { key: keyName });\n  };\n\n  return (\n    <ConfirmDialog\n      title={\"\"}\n      confirmText={\"Create\"}\n      isOpen={addOpen}\n      isLoading={addLoading}\n      onConfirm={onConfirmAdd}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: keyName.indexOf(\" \") !== -1 || keyName === \"\" || addLoading,\n        variant: \"callAction\",\n      }}\n      confirmationContent={\n        <Fragment>\n          <KMSHelpBox\n            helpText={\"Create Key\"}\n            contents={[\n              \"Create a new cryptographic key in the Key Management Service server connected to MINIO.\",\n            ]}\n          />\n\n          <Grid item xs={12} sx={{ marginTop: 15 }}>\n            <InputBox\n              id=\"key-name\"\n              name=\"key-name\"\n              label=\"Key Name\"\n              autoFocus={true}\n              value={keyName}\n              error={\n                keyName.indexOf(\" \") !== -1\n                  ? \"Key name cannot contain spaces\"\n                  : \"\"\n              }\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setKeyName(e.target.value);\n              }}\n            />\n          </Grid>\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default AddKeyModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\n\nimport {\n  AddIcon,\n  Box,\n  BucketEncryptionIcon,\n  Button,\n  FormLayout,\n  Grid,\n  ProgressBar,\n  Select,\n} from \"mds\";\nimport {\n  ApiError,\n  BucketEncryptionInfo,\n  BucketEncryptionType,\n  KmsKeyInfo,\n} from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_SCOPES,\n} from \"../../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../../common/SecureComponent\";\nimport TooltipWrapper from \"../../Common/TooltipWrapper/TooltipWrapper\";\nimport AddKeyModal from \"./AddKeyModal\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\n\ninterface IEnableBucketEncryptionProps {\n  open: boolean;\n  encryptionEnabled: boolean;\n  encryptionCfg: BucketEncryptionInfo | null;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst EnableBucketEncryption = ({\n  open,\n  encryptionCfg,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IEnableBucketEncryptionProps) => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [kmsKeyID, setKmsKeyID] = useState<string>(\"\");\n  const [encryptionType, setEncryptionType] = useState<\n    BucketEncryptionType | \"disabled\"\n  >(\"disabled\");\n  const [keys, setKeys] = useState<KmsKeyInfo[] | undefined>([]);\n  const [loadingKeys, setLoadingKeys] = useState<boolean>(false);\n  const [addOpen, setAddOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (encryptionCfg) {\n      if (encryptionCfg.algorithm === \"AES256\") {\n        setEncryptionType(BucketEncryptionType.SseS3);\n      } else {\n        setEncryptionType(BucketEncryptionType.SseKms);\n        setKmsKeyID(encryptionCfg.kmsMasterKeyID || \"\");\n      }\n    }\n  }, [encryptionCfg]);\n\n  useEffect(() => {\n    if (encryptionType === \"sse-kms\") {\n      api.kms\n        .kmsListKeys()\n        .then((res) => {\n          setKeys(res.data.results);\n          setLoadingKeys(false);\n        })\n        .catch((err) => {\n          setLoadingKeys(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        });\n    }\n  }, [encryptionType, loadingKeys, dispatch]);\n\n  const enableBucketEncryption = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (loading) {\n      return;\n    }\n    if (encryptionType === \"disabled\") {\n      api.buckets\n        .disableBucketEncryption(selectedBucket)\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch(async (res) => {\n          const err = (await res.json()) as ApiError;\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err)));\n        });\n    } else {\n      api.buckets\n        .enableBucketEncryption(selectedBucket, {\n          encType: encryptionType,\n          kmsKeyID: kmsKeyID,\n        })\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n\n        .catch(async (res) => {\n          const err = (await res.json()) as ApiError;\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err)));\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      {addOpen && (\n        <AddKeyModal\n          addOpen={addOpen}\n          closeAddModalAndRefresh={(refresh: boolean) => {\n            setAddOpen(false);\n            setLoadingKeys(true);\n          }}\n        />\n      )}\n\n      <ModalWrapper\n        modalOpen={open}\n        onClose={() => {\n          closeModalAndRefresh();\n        }}\n        title=\"Enable Bucket Encryption\"\n        titleIcon={<BucketEncryptionIcon />}\n      >\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            enableBucketEncryption(e);\n          }}\n        >\n          <FormLayout withBorders={false} containerPadding={false}>\n            <Select\n              onChange={(value) => {\n                setEncryptionType(value as BucketEncryptionType | \"disabled\");\n              }}\n              id=\"select-encryption-type\"\n              name=\"select-encryption-type\"\n              label={\"Encryption Type\"}\n              value={encryptionType}\n              options={[\n                {\n                  label: \"Disabled\",\n                  value: \"disabled\",\n                },\n                {\n                  label: \"SSE-S3\",\n                  value: BucketEncryptionType.SseS3,\n                },\n                {\n                  label: \"SSE-KMS\",\n                  value: BucketEncryptionType.SseKms,\n                },\n              ]}\n            />\n            {encryptionType === \"sse-kms\" && (\n              <Box sx={{ display: \"flex\", gap: 10 }} className={\"inputItem\"}>\n                {keys && (\n                  <Select\n                    onChange={(value) => {\n                      setKmsKeyID(value);\n                    }}\n                    id=\"select-kms-key-id\"\n                    name=\"select-kms-key-id\"\n                    label={\"KMS Key ID\"}\n                    value={kmsKeyID}\n                    options={keys.map((key: KmsKeyInfo) => {\n                      return {\n                        label: key.name || \"\",\n                        value: key.name || \"\",\n                      };\n                    })}\n                  />\n                )}\n                <SecureComponent\n                  scopes={[IAM_SCOPES.KMS_IMPORT_KEY]}\n                  resource={CONSOLE_UI_RESOURCE}\n                  errorProps={{ disabled: true }}\n                >\n                  <TooltipWrapper tooltip={\"Add key\"}>\n                    <Button\n                      id={\"import-key\"}\n                      variant={\"regular\"}\n                      icon={<AddIcon />}\n                      onClick={(e) => {\n                        setAddOpen(true);\n                        e.preventDefault();\n                      }}\n                    />\n                  </TooltipWrapper>\n                </SecureComponent>\n              </Box>\n            )}\n            <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n              <Button\n                id={\"cancel\"}\n                type=\"submit\"\n                variant=\"regular\"\n                onClick={() => {\n                  closeModalAndRefresh();\n                }}\n                disabled={loading}\n                label={\"Cancel\"}\n              />\n              <Button\n                id={\"save\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={loading}\n                label={\"Save\"}\n              />\n            </Grid>\n            {loading && (\n              <Grid item xs={12}>\n                <ProgressBar />\n              </Grid>\n            )}\n          </FormLayout>\n        </form>\n      </ModalWrapper>\n    </Fragment>\n  );\n};\n\nexport default EnableBucketEncryption;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { HelpBox, HelpIconFilled, Box } from \"mds\";\n\ninterface IKMSHelpBoxProps {\n  helpText: string;\n  contents: string[];\n}\n\nconst KMSHelpBox = ({ helpText, contents }: IKMSHelpBoxProps) => {\n  return (\n    <HelpBox\n      iconComponent={<HelpIconFilled />}\n      title={helpText}\n      help={\n        <Fragment>\n          {contents.map((content) => (\n            <Box sx={{ paddingBottom: \"20px\" }}>{content}</Box>\n          ))}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default KMSHelpBox;\n"],"names":["_ref","closeAddModalAndRefresh","addOpen","dispatch","useAppDispatch","_useApi","useApi","err","setErrorSnackMessage","_useApi2","_slicedToArray","addLoading","invokeAddApi","_useState","useState","_useState2","keyName","setKeyName","_jsx","ConfirmDialog","title","confirmText","isOpen","isLoading","onConfirm","key","onClose","confirmButtonProps","disabled","indexOf","variant","confirmationContent","_jsxs","Fragment","children","KMSHelpBox","helpText","contents","Grid","item","xs","sx","marginTop","InputBox","id","name","label","autoFocus","value","error","onChange","e","target","open","encryptionCfg","selectedBucket","closeModalAndRefresh","loading","setLoading","_useState3","_useState4","kmsKeyID","setKmsKeyID","_useState5","_useState6","encryptionType","setEncryptionType","_useState7","_useState8","keys","setKeys","_useState9","_useState10","loadingKeys","setLoadingKeys","_useState11","_useState12","setAddOpen","useEffect","algorithm","BucketEncryptionType","SseS3","SseKms","kmsMasterKeyID","api","kms","kmsListKeys","then","res","data","results","catch","setModalErrorSnackMessage","errorToHandler","AddKeyModal","refresh","ModalWrapper","modalOpen","titleIcon","BucketEncryptionIcon","noValidate","autoComplete","onSubmit","preventDefault","buckets","disableBucketEncryption","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","json","sent","stop","_x","apply","arguments","enableBucketEncryption","encType","_ref3","_callee2","_context2","_x2","FormLayout","withBorders","containerPadding","Select","options","Box","display","gap","className","map","SecureComponent","scopes","IAM_SCOPES","KMS_IMPORT_KEY","resource","CONSOLE_UI_RESOURCE","errorProps","TooltipWrapper","tooltip","Button","icon","AddIcon","onClick","modalStyleUtils","modalButtonBar","type","ProgressBar","HelpBox","iconComponent","HelpIconFilled","help","content","paddingBottom"],"sourceRoot":""}