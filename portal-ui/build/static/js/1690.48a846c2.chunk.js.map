{"version":3,"file":"static/js/1690.48a846c2.chunk.js","mappings":"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","sources":["screens/Console/EventDestinations/CustomForms/ResetConfigurationModal.tsx","screens/Console/IDP/AddIDPConfigurationHelpbox.tsx","screens/Console/IDP/LDAP/LDAPResultsBlock.tsx","screens/Console/IDP/LDAP/LDAPEntitiesQuery.tsx","screens/Console/IDP/LDAP/IDPLDAPConfigurationDetails.tsx","screens/Console/IDP/utils.tsx","screens/Console/Policies/PolicySelectors.tsx","utils/sortFunctions.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\nimport { ConfirmDeleteIcon, ProgressBar } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IResetConfiguration {\n  configurationName: string;\n  closeResetModalAndRefresh: (reloadConfiguration: boolean) => void;\n  resetOpen: boolean;\n}\n\nconst ResetConfigurationModal = ({\n  configurationName,\n  closeResetModalAndRefresh,\n  resetOpen,\n}: IResetConfiguration) => {\n  const dispatch = useAppDispatch();\n  const [resetLoading, setResetLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (resetLoading) {\n      api.configs\n        .resetConfig(configurationName)\n        .then(() => {\n          setResetLoading(false);\n          closeResetModalAndRefresh(true);\n        })\n        .catch((err) => {\n          setResetLoading(false);\n          dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        });\n    }\n  }, [closeResetModalAndRefresh, configurationName, resetLoading, dispatch]);\n\n  const resetConfiguration = () => {\n    setResetLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Restore Defaults`}\n      confirmText={\"Yes, Reset Configuration\"}\n      isOpen={resetOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={resetLoading}\n      onConfirm={resetConfiguration}\n      onClose={() => {\n        closeResetModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <Fragment>\n          {resetLoading && <ProgressBar />}\n          <Fragment>\n            Are you sure you want to restore these configurations to default\n            values?\n            <br />\n            <b\n              style={{\n                maxWidth: \"200px\",\n                whiteSpace: \"normal\",\n                wordWrap: \"break-word\",\n              }}\n            >\n              Please note that this may cause your system to not be accessible\n            </b>\n          </Fragment>\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default ResetConfigurationModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { HelpIconFilled, Box } from \"mds\";\n\ninterface IContent {\n  icon: React.ReactNode;\n  text: string;\n  iconDescription: string;\n}\n\ninterface IAddIDPConfigurationHelpBoxProps {\n  helpText: string;\n  docLink: string;\n  docText: string;\n  contents: IContent[];\n}\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\n\nconst AddIDPConfigurationHelpBox = ({\n  helpText,\n  docLink,\n  docText,\n  contents,\n}: IAddIDPConfigurationHelpBoxProps) => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>{helpText}</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        {contents.map((content, index) => (\n          <Fragment key={`feature-item-${index}`}>\n            {content.icon && (\n              <Box sx={{ paddingBottom: \"20px\" }}>\n                <FeatureItem\n                  icon={content.icon}\n                  description={content.iconDescription}\n                />\n              </Box>\n            )}\n            <Box sx={{ paddingBottom: \"20px\" }}>{content.text}</Box>\n          </Fragment>\n        ))}\n        <Box sx={{ paddingBottom: \"20px\" }}>\n          <a href={docLink} target=\"_blank\" rel=\"noopener\">\n            {docText}\n          </a>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddIDPConfigurationHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { Box, CollapseCaret, GroupsMenuIcon, SectionTitle } from \"mds\";\nimport { LdapEntities } from \"api/consoleApi\";\n\ninterface IResultBlock {\n  entityName: \"Group\" | \"User\" | \"Policy\";\n  results: LdapEntities;\n}\n\ninterface IEntityResultName {\n  name: string;\n}\n\ninterface IEntityResultItem {\n  blockName: \"Policies\" | \"Groups\" | \"Users\";\n  results: string[];\n}\n\nconst EntityResultTitle = ({ name }: IEntityResultName) => {\n  return (\n    <h4>\n      <CollapseCaret style={{ transform: \"rotateZ(90deg)\" }} />\n      {name}\n    </h4>\n  );\n};\n\nconst EntityResultItems = ({ blockName, results }: IEntityResultItem) => {\n  return (\n    <Fragment>\n      <strong>{blockName}:</strong>\n      <ul>\n        {results.map((res, index) => (\n          <li key={`policy-${blockName}-${index}`}>{res}</li>\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nconst LDAPResultsBlock = ({ entityName, results }: IResultBlock) => {\n  let entityLength = 0;\n\n  switch (entityName) {\n    case \"Group\":\n      entityLength = results.groups?.length || 0;\n      break;\n    case \"Policy\":\n      entityLength = results.policies?.length || 0;\n      break;\n    case \"User\":\n      entityLength = results.users?.length || 0;\n      break;\n  }\n\n  return (\n    <Box\n      className={\"resultElement\"}\n      sx={{\n        marginTop: 50,\n        \"&:first-of-type\": {\n          marginTop: 0,\n        },\n      }}\n    >\n      <SectionTitle\n        separator\n        sx={{ fontSize: 12 }}\n        icon={<GroupsMenuIcon style={{ width: 17, height: 17 }} />}\n        actions={\n          <Box sx={{ fontSize: 14 }}>\n            <strong>{entityLength}</strong> Entit\n            {entityLength === 1 ? \"y\" : \"ies\"} Found\n          </Box>\n        }\n      >\n        {entityName} Mappings\n      </SectionTitle>\n      <Box\n        className={\"resultsList\"}\n        sx={{\n          h4: {\n            borderBottom: \"#e2e2e2 1px solid\",\n            padding: \"12px 0\",\n            margin: 0,\n            marginBottom: 15,\n            display: \"flex\",\n            alignItems: \"center\",\n            \"& svg\": {\n              marginRight: 10,\n              fill: \"#3C77A7\",\n            },\n          },\n        }}\n      >\n        {entityName === \"Group\" &&\n          results.groups?.map((groupData, index) => {\n            return (\n              <Fragment key={`policy-res-${index}`}>\n                <EntityResultTitle name={groupData.group || \"\"} />\n                {groupData.policies && (\n                  <EntityResultItems\n                    blockName={\"Policies\"}\n                    results={groupData.policies}\n                  />\n                )}\n              </Fragment>\n            );\n          })}\n        {entityName === \"User\" &&\n          results.users?.map((groupData, index) => {\n            return (\n              <Fragment key={`users-res-${index}`}>\n                <EntityResultTitle name={groupData.user || \"\"} />\n                {groupData.policies && (\n                  <EntityResultItems\n                    blockName={\"Policies\"}\n                    results={groupData.policies}\n                  />\n                )}\n              </Fragment>\n            );\n          })}\n        {entityName === \"Policy\" &&\n          results.policies?.map((groupData, index) => {\n            return (\n              <Fragment key={`policy-map-${index}`}>\n                <EntityResultTitle name={groupData.policy || \"\"} />\n                {groupData.groups && (\n                  <EntityResultItems\n                    blockName={\"Groups\"}\n                    results={groupData.groups}\n                  />\n                )}\n                {groupData.users && (\n                  <EntityResultItems\n                    blockName={\"Users\"}\n                    results={groupData.users}\n                  />\n                )}\n              </Fragment>\n            );\n          })}\n      </Box>\n    </Box>\n  );\n};\n\nexport default LDAPResultsBlock;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport {\n  AddIcon,\n  Box,\n  Button,\n  Grid,\n  InputBox,\n  Loader,\n  RemoveIcon,\n  SearchIcon,\n  SectionTitle,\n  TimeIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { DateTime } from \"luxon\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { LdapEntities } from \"api/consoleApi\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport LDAPResultsBlock from \"./LDAPResultsBlock\";\nimport PolicySelectors from \"../../Policies/PolicySelectors\";\n\nconst LDAPEntitiesQuery = () => {\n  const dispatch = useAppDispatch();\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [users, setUsers] = useState<string[]>([\"\"]);\n  const [groups, setGroups] = useState<string[]>([\"\"]);\n  const [results, setResults] = useState<LdapEntities | null>(null);\n\n  const selectedPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const searchEntities = () => {\n    setLoading(true);\n\n    let data: any = {};\n\n    let cleanPolicies = selectedPolicies.filter((pol) => pol !== \"\");\n    let cleanUsers = users.filter((usr) => usr !== \"\");\n    let cleanGroups = groups.filter((grp) => grp !== \"\");\n\n    if (cleanPolicies.length > 0) {\n      data[\"policies\"] = cleanPolicies;\n    }\n\n    if (cleanUsers.length > 0) {\n      data[\"users\"] = cleanUsers;\n    }\n\n    if (cleanGroups.length > 0) {\n      data[\"groups\"] = cleanGroups;\n    }\n\n    api.ldapEntities\n      .getLdapEntities(data)\n      .then((result) => {\n        setResults(result.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        setLoading(false);\n      });\n  };\n\n  const alterUsersList = (addItem: boolean, index: number) => {\n    if (addItem) {\n      const alterUsers = [...users, \"\"];\n      setUsers(alterUsers);\n\n      return;\n    }\n\n    const filteredUsers = users.filter((_, indx) => indx !== index);\n\n    setUsers(filteredUsers);\n  };\n\n  const alterGroupsList = (addItem: boolean, index: number) => {\n    if (addItem) {\n      const alterGroups = [...groups, \"\"];\n      setGroups(alterGroups);\n\n      return;\n    }\n\n    const filteredGroups = groups.filter((_, indx) => indx !== index);\n\n    setGroups(filteredGroups);\n  };\n\n  return (\n    <Box sx={{ marginTop: 15, paddingTop: 0 }}>\n      <Grid container sx={{ marginTop: 5 }}>\n        <Grid item sm={12} md={6} lg={5} sx={{ padding: 10, paddingTop: 0 }}>\n          <SectionTitle>Query Filters</SectionTitle>\n\n          <Box\n            sx={{\n              padding: \"0 10px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: 40,\n            }}\n          >\n            <Box sx={{ padding: \"10px 26px\" }} withBorders>\n              <Box sx={{ display: \"flex\" }}>\n                <h4 style={{ margin: 0, marginBottom: 10, fontSize: 14 }}>\n                  Users\n                </h4>\n              </Box>\n              <Box\n                sx={{\n                  overflowY: \"auto\",\n                  minHeight: 50,\n                  maxHeight: 250,\n                  \"& > div > div\": {\n                    width: \"100%\",\n                  },\n                }}\n              >\n                {users.map((userDat, index) => {\n                  return (\n                    <InputBox\n                      id={`search-user-${index}`}\n                      key={`search-user-${index}`}\n                      value={userDat}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        const usersElements = [...users];\n                        usersElements[index] = e.target.value;\n                        setUsers(usersElements);\n                      }}\n                      overlayIcon={\n                        users.length === index + 1 ? (\n                          <AddIcon />\n                        ) : (\n                          <RemoveIcon />\n                        )\n                      }\n                      overlayAction={() => {\n                        alterUsersList(users.length === index + 1, index);\n                      }}\n                    />\n                  );\n                })}\n              </Box>\n            </Box>\n            <Box sx={{ padding: \"10px 26px\" }} withBorders>\n              <h4 style={{ margin: 0, marginBottom: 10, fontSize: 14 }}>\n                Groups\n              </h4>\n              <Box\n                sx={{\n                  overflowY: \"auto\",\n                  minHeight: 50,\n                  maxHeight: \"calc(100vh - 340px)\",\n                  \"& > div > div\": {\n                    width: \"100%\",\n                  },\n                }}\n              >\n                {groups.map((groupDat, index) => {\n                  return (\n                    <InputBox\n                      id={`search-group-${index}`}\n                      key={`search-group-${index}`}\n                      value={groupDat}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        const groupsElements = [...groups];\n                        groupsElements[index] = e.target.value;\n                        setGroups(groupsElements);\n                      }}\n                      overlayIcon={\n                        groups.length === index + 1 ? (\n                          <AddIcon />\n                        ) : (\n                          <RemoveIcon />\n                        )\n                      }\n                      overlayAction={() => {\n                        alterGroupsList(groups.length === index + 1, index);\n                      }}\n                    />\n                  );\n                })}\n              </Box>\n            </Box>\n            <Box sx={{ padding: \"10px 26px\" }} withBorders>\n              <h4 style={{ margin: 0, marginBottom: 10, fontSize: 14 }}>\n                Policies\n              </h4>\n              <Box\n                sx={{\n                  minHeight: 265,\n                  maxHeight: \"calc(100vh - 740px)\",\n                }}\n              >\n                <PolicySelectors selectedPolicy={selectedPolicies} noTitle />\n              </Box>\n            </Box>\n          </Box>\n        </Grid>\n        <Grid\n          item\n          sm={12}\n          md={6}\n          lg={7}\n          sx={{\n            padding: 10,\n            paddingTop: 0,\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          {loading ? (\n            <Box sx={{ textAlign: \"center\" }}>\n              <Loader />\n            </Box>\n          ) : (\n            <Fragment>\n              <SectionTitle\n                actions={\n                  <Box\n                    sx={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      alignItems: \"center\",\n                      fontSize: 14,\n                    }}\n                  >\n                    {results?.timestamp ? (\n                      <Fragment>\n                        <TimeIcon\n                          style={{\n                            width: 14,\n                            height: 14,\n                            marginRight: 5,\n                            fill: \"#BEBFBF\",\n                          }}\n                        />\n                        {DateTime.fromISO(results.timestamp).toFormat(\n                          \"D HH:mm:ss\",\n                        )}\n                      </Fragment>\n                    ) : (\n                      \"\"\n                    )}\n                  </Box>\n                }\n              >\n                Query Results\n              </SectionTitle>\n              {results ? (\n                <Box\n                  sx={{\n                    backgroundColor: \"#FBFAFA\",\n                    padding: \"8px 22px\",\n                    flexGrow: 1,\n                    overflowY: \"auto\",\n                  }}\n                >\n                  {!results.groups && !results.users && !results.policies && (\n                    <Box sx={{ textAlign: \"center\" }}>\n                      <h4>No Results Available</h4>\n                    </Box>\n                  )}\n                  {!!results.groups && (\n                    <LDAPResultsBlock results={results} entityName={\"Group\"} />\n                  )}\n                  {!!results.users && (\n                    <LDAPResultsBlock results={results} entityName={\"User\"} />\n                  )}\n                  {!!results.policies && (\n                    <LDAPResultsBlock results={results} entityName={\"Policy\"} />\n                  )}\n                </Box>\n              ) : (\n                <Box sx={{ textAlign: \"center\" }}>No query results yet</Box>\n              )}\n            </Fragment>\n          )}\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid\n          item\n          xs={12}\n          sx={{\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            marginTop: 45,\n            padding: \"0 20px\",\n          }}\n        >\n          <Button\n            id={\"search-entity\"}\n            type={\"button\"}\n            variant={\"callAction\"}\n            onClick={searchEntities}\n            icon={<SearchIcon />}\n          >\n            Search\n          </Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default LDAPEntitiesQuery;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  ConsoleIcon,\n  EditIcon,\n  FormLayout,\n  Grid,\n  HelpBox,\n  InputBox,\n  Loader,\n  PageLayout,\n  RefreshIcon,\n  Switch,\n  Tabs,\n  Tooltip,\n  ValuePair,\n  WarnIcon,\n  ScreenTitle,\n} from \"mds\";\nimport { api } from \"api\";\nimport { ConfigurationKV } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\nimport { useAppDispatch } from \"../../../../store\";\nimport {\n  setErrorSnackMessage,\n  setHelpName,\n  setServerNeedsRestart,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { ldapFormFields, ldapHelpBoxContents } from \"../utils\";\nimport PageHeaderWrapper from \"../../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport AddIDPConfigurationHelpBox from \"../AddIDPConfigurationHelpbox\";\nimport LDAPEntitiesQuery from \"./LDAPEntitiesQuery\";\nimport ResetConfigurationModal from \"../../EventDestinations/CustomForms/ResetConfigurationModal\";\nimport HelpMenu from \"../../HelpMenu\";\n\nconst enabledConfigLDAP = [\n  \"server_addr\",\n  \"lookup_bind_dn\",\n  \"user_dn_search_base_dn\",\n  \"user_dn_search_filter\",\n];\n\nconst IDPLDAPConfigurationDetails = () => {\n  const dispatch = useAppDispatch();\n\n  const formFields = ldapFormFields;\n\n  const [loading, setLoading] = useState<boolean>(true);\n  const [isEnabled, setIsEnabled] = useState<boolean>(false);\n  const [hasConfiguration, setHasConfiguration] = useState<boolean>(false);\n  const [fields, setFields] = useState<any>({});\n  const [overrideFields, setOverrideFields] = useState<any>({});\n  const [record, setRecord] = useState<ConfigurationKV[] | undefined>(\n    undefined,\n  );\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [resetOpen, setResetOpen] = useState<boolean>(false);\n  const [curTab, setCurTab] = useState<string>(\"configuration\");\n  const [envOverride, setEnvOverride] = useState<boolean>(false);\n\n  const toggleEditMode = () => {\n    if (editMode && record) {\n      parseFields(record);\n    }\n    setEditMode(!editMode);\n  };\n\n  const parseFields = (record: ConfigurationKV[]) => {\n    let fields: any = {};\n    let ovrFlds: any = {};\n    if (record && record.length > 0) {\n      const enabled = record.find((item: any) => item.key === \"enable\");\n\n      let totalCoincidences = 0;\n      let totalOverride = 0;\n\n      record.forEach((item: any) => {\n        if (item.env_override) {\n          fields[item.key] = item.env_override.value;\n          ovrFlds[item.key] = item.env_override.name;\n        } else {\n          fields[item.key] = item.value;\n        }\n\n        if (\n          enabledConfigLDAP.includes(item.key) &&\n          ((item.value && item.value !== \"\" && item.value !== \"off\") ||\n            (item.env_override &&\n              item.env_override.value !== \"\" &&\n              item.env_override.value !== \"off\"))\n        ) {\n          totalCoincidences++;\n        }\n\n        if (enabledConfigLDAP.includes(item.key) && item.env_override) {\n          totalOverride++;\n        }\n      });\n\n      const hasConfig = totalCoincidences !== 0;\n\n      if (hasConfig && ((enabled && enabled.value !== \"off\") || !enabled)) {\n        setIsEnabled(true);\n      } else {\n        setIsEnabled(false);\n      }\n\n      if (totalOverride !== 0) {\n        setEnvOverride(true);\n      }\n\n      setHasConfiguration(hasConfig);\n    }\n    setOverrideFields(ovrFlds);\n    setFields(fields);\n  };\n\n  useEffect(() => {\n    const loadRecord = () => {\n      api.configs\n        .configInfo(\"identity_ldap\")\n        .then((res) => {\n          if (res.data.length > 0) {\n            setRecord(res.data[0].key_values);\n            parseFields(res.data[0].key_values || []);\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setLoading(false);\n          dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n        });\n    };\n\n    if (loading) {\n      loadRecord();\n    }\n  }, [dispatch, loading]);\n\n  const validSave = () => {\n    for (const [key, value] of Object.entries(formFields)) {\n      if (\n        value.required &&\n        !(\n          fields[key] !== undefined &&\n          fields[key] !== null &&\n          fields[key] !== \"\"\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const saveRecord = () => {\n    const keyVals = Object.keys(formFields).map((key) => {\n      return {\n        key,\n        value: fields[key],\n      };\n    });\n\n    api.configs\n      .setConfig(\"identity_ldap\", {\n        key_values: keyVals,\n      })\n      .then((res) => {\n        setEditMode(false);\n        setRecord(keyVals);\n        parseFields(keyVals);\n        dispatch(setServerNeedsRestart(res.data.restart || false));\n        setFields({ ...fields, lookup_bind_password: \"\" });\n\n        if (!res.data.restart) {\n          dispatch(setSnackBarMessage(\"Configuration saved successfully\"));\n        }\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  const closeDeleteModalAndRefresh = async (refresh: boolean) => {\n    setResetOpen(false);\n\n    if (refresh) {\n      dispatch(setServerNeedsRestart(refresh));\n      setRecord(undefined);\n      setFields({});\n      setIsEnabled(false);\n      setHasConfiguration(false);\n      setEditMode(false);\n    }\n  };\n\n  const toggleConfiguration = (value: boolean) => {\n    const payload = {\n      key_values: [\n        {\n          key: \"enable\",\n          value: value ? \"on\" : \"off\",\n        },\n      ],\n    };\n\n    api.configs\n      .setConfig(\"identity_ldap\", payload)\n      .then((res) => {\n        setIsEnabled(!isEnabled);\n        dispatch(setServerNeedsRestart(res.data.restart || false));\n        if (!res.data.restart) {\n          dispatch(setSnackBarMessage(\"Configuration saved successfully\"));\n        }\n      })\n      .catch((err) => {\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  const renderFormField = (key: string, value: any) => {\n    switch (value.type) {\n      case \"toggle\":\n        return (\n          <Switch\n            key={key}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={fields[key] === \"on\"}\n            value={\"is-field-enabled\"}\n            id={\"is-field-enabled\"}\n            name={\"is-field-enabled\"}\n            label={value.label}\n            tooltip={value.tooltip}\n            onChange={(e) =>\n              setFields({ ...fields, [key]: e.target.checked ? \"on\" : \"off\" })\n            }\n            description=\"\"\n            disabled={!editMode}\n          />\n        );\n      default:\n        return (\n          <InputBox\n            key={key}\n            id={key}\n            required={value.required}\n            name={key}\n            label={value.label}\n            tooltip={value.tooltip}\n            error={value.hasError(fields[key], editMode)}\n            value={fields[key] ? fields[key] : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setFields({ ...fields, [key]: e.target.value })\n            }\n            placeholder={value.placeholder}\n            disabled={!editMode}\n            type={value.type}\n          />\n        );\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"LDAP\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Grid item xs={12}>\n      {resetOpen && (\n        <ResetConfigurationModal\n          configurationName={\"identity_ldap\"}\n          closeResetModalAndRefresh={closeDeleteModalAndRefresh}\n          resetOpen={resetOpen}\n        />\n      )}\n      <PageHeaderWrapper label={\"LDAP\"} actions={<HelpMenu />} />\n      <PageLayout variant={\"constrained\"}>\n        <Tabs\n          horizontal\n          options={[\n            {\n              tabConfig: { id: \"configuration\", label: \"Configuration\" },\n              content: (\n                <Fragment>\n                  <ScreenTitle\n                    icon={null}\n                    title={editMode ? \"Edit Configuration\" : \"\"}\n                    actions={\n                      !editMode ? (\n                        <Fragment>\n                          <Tooltip\n                            tooltip={\n                              envOverride\n                                ? \"Configuration cannot be edited in this module as LDAP environment variables are set for this MinIO instance.\"\n                                : \"\"\n                            }\n                          >\n                            <Button\n                              id={\"edit\"}\n                              type=\"button\"\n                              variant={\"callAction\"}\n                              icon={<EditIcon />}\n                              onClick={toggleEditMode}\n                              label={\"Edit Configuration\"}\n                              disabled={loading || envOverride}\n                            />\n                          </Tooltip>\n                          {hasConfiguration && (\n                            <Tooltip\n                              tooltip={\n                                envOverride\n                                  ? \"Configuration cannot be disabled / enabled in this module as LDAP environment variables are set for this MinIO instance.\"\n                                  : \"\"\n                              }\n                            >\n                              <Button\n                                id={\"is-configuration-enabled\"}\n                                onClick={() => toggleConfiguration(!isEnabled)}\n                                label={\n                                  isEnabled ? \"Disable LDAP\" : \"Enable LDAP\"\n                                }\n                                variant={isEnabled ? \"secondary\" : \"regular\"}\n                                disabled={envOverride}\n                              />\n                            </Tooltip>\n                          )}\n                          <Button\n                            id={\"refresh-idp-config\"}\n                            onClick={() => setLoading(true)}\n                            label={\"Refresh\"}\n                            icon={<RefreshIcon />}\n                          />\n                        </Fragment>\n                      ) : null\n                    }\n                  />\n                  <br />\n                  {loading ? (\n                    <Box\n                      sx={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        marginTop: 10,\n                      }}\n                    >\n                      <Loader />\n                    </Box>\n                  ) : (\n                    <Fragment>\n                      {editMode ? (\n                        <Fragment>\n                          <FormLayout\n                            helpBox={\n                              <AddIDPConfigurationHelpBox\n                                helpText={\n                                  \"Learn more about LDAP Configurations\"\n                                }\n                                contents={ldapHelpBoxContents}\n                                docLink={\n                                  \"https://min.io/docs/minio/linux/operations/external-iam.html?ref=con#minio-external-iam-ad-ldap\"\n                                }\n                                docText={\"Learn more about LDAP Configurations\"}\n                              />\n                            }\n                          >\n                            {editMode && hasConfiguration ? (\n                              <Box sx={{ marginBottom: 15 }}>\n                                <HelpBox\n                                  title={\n                                    <Box\n                                      style={{\n                                        display: \"flex\",\n                                        justifyContent: \"space-between\",\n                                        alignItems: \"center\",\n                                        flexGrow: 1,\n                                      }}\n                                    >\n                                      Lookup Bind Password must be re-entered to\n                                      change LDAP configurations\n                                    </Box>\n                                  }\n                                  iconComponent={<WarnIcon />}\n                                  help={null}\n                                />\n                              </Box>\n                            ) : null}\n                            {Object.entries(formFields).map(([key, value]) =>\n                              renderFormField(key, value),\n                            )}\n                            <Box\n                              sx={{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"flex-end\",\n                                marginTop: \"20px\",\n                                gap: \"15px\",\n                              }}\n                            >\n                              {editMode && hasConfiguration && (\n                                <Button\n                                  id={\"clear\"}\n                                  type=\"button\"\n                                  variant=\"secondary\"\n                                  onClick={() => setResetOpen(true)}\n                                  label={\"Reset Configuration\"}\n                                />\n                              )}\n                              <Button\n                                id={\"cancel\"}\n                                type=\"button\"\n                                variant=\"regular\"\n                                onClick={toggleEditMode}\n                                label={\"Cancel\"}\n                              />\n                              <Button\n                                id={\"save-key\"}\n                                type=\"submit\"\n                                variant=\"callAction\"\n                                color=\"primary\"\n                                disabled={loading || !validSave()}\n                                label={\"Save\"}\n                                onClick={saveRecord}\n                              />\n                            </Box>\n                          </FormLayout>\n                        </Fragment>\n                      ) : (\n                        <Fragment>\n                          <Box\n                            sx={{\n                              display: \"grid\",\n                              gridTemplateColumns: \"1fr\",\n                              gridAutoFlow: \"dense\",\n                              gap: 3,\n                              padding: \"15px\",\n                              border: \"1px solid #eaeaea\",\n                              [`@media (min-width: 576px)`]: {\n                                gridTemplateColumns: \"2fr 1fr\",\n                                gridAutoFlow: \"row\",\n                              },\n                            }}\n                          >\n                            <ValuePair\n                              label={\"LDAP Enabled\"}\n                              value={isEnabled ? \"Yes\" : \"No\"}\n                            />\n                            {hasConfiguration && (\n                              <Fragment>\n                                {Object.entries(formFields).map(\n                                  ([key, value]) => {\n                                    if (!value.editOnly) {\n                                      let label: React.ReactNode = value.label;\n                                      let val: React.ReactNode = fields[key]\n                                        ? fields[key]\n                                        : \"\";\n\n                                      if (overrideFields[key]) {\n                                        label = (\n                                          <Box\n                                            sx={{\n                                              display: \"flex\",\n                                              alignItems: \"center\",\n                                              gap: 5,\n                                              \"& .min-icon\": {\n                                                height: 20,\n                                                width: 20,\n                                              },\n                                              \"& span\": {\n                                                height: 20,\n                                                display: \"flex\",\n                                                alignItems: \"center\",\n                                              },\n                                            }}\n                                          >\n                                            <span>{value.label}</span>\n                                            <Tooltip\n                                              tooltip={`This value is set from the ${overrideFields[key]} environment variable`}\n                                              placement={\"right\"}\n                                            >\n                                              <span className={\"muted\"}>\n                                                <ConsoleIcon />\n                                              </span>\n                                            </Tooltip>\n                                          </Box>\n                                        );\n\n                                        val = (\n                                          <i>\n                                            <span className={\"muted\"}>\n                                              {val}\n                                            </span>\n                                          </i>\n                                        );\n                                      }\n                                      return (\n                                        <ValuePair\n                                          key={key}\n                                          label={label}\n                                          value={val}\n                                        />\n                                      );\n                                    }\n                                    return null;\n                                  },\n                                )}\n                              </Fragment>\n                            )}\n                          </Box>\n                        </Fragment>\n                      )}\n                    </Fragment>\n                  )}\n                </Fragment>\n              ),\n            },\n            {\n              tabConfig: {\n                id: \"entities\",\n                label: \"Entities\",\n                disabled: !hasConfiguration || !isEnabled,\n              },\n              content: (\n                <Fragment>\n                  {hasConfiguration && (\n                    <Box>\n                      <LDAPEntitiesQuery />\n                    </Box>\n                  )}\n                </Fragment>\n              ),\n            },\n          ]}\n          currentTabOrPath={curTab}\n          onTabClick={(newTab) => {\n            setCurTab(newTab);\n            setEditMode(false);\n          }}\n        />\n      </PageLayout>\n    </Grid>\n  );\n};\n\nexport default IDPLDAPConfigurationDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { LockIcon, LoginIcon } from \"mds\";\n\nexport const ldapHelpBoxContents = [\n  {\n    text: \"MinIO supports using an Active Directory or LDAP (AD/LDAP) service for external management of user identities. Configuring an external IDentity Provider (IDP) enables Single-Sign On (SSO) workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: <LoginIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"MinIO queries the configured Active Directory / LDAP server to verify the credentials specified by the application and optionally return a list of groups in which the user has membership. MinIO supports two modes (Lookup-Bind Mode and Username-Bind Mode) for performing these queries\",\n    icon: null,\n    iconDescription: \"\",\n  },\n  {\n    text: \"MinIO recommends using Lookup-Bind mode as the preferred method for verifying AD/LDAP credentials. Username-Bind mode is a legacy method retained for backwards compatibility only.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDHelpBoxContents = [\n  {\n    text: \"MinIO supports using an OpenID Connect (OIDC) compatible IDentity Provider (IDP) such as Okta, KeyCloak, Dex, Google, or Facebook for external management of user identities.\",\n    icon: <LockIcon />,\n    iconDescription: \"Create Configurations\",\n  },\n  {\n    text: \"Configuring an external IDP enables Single-Sign On workflows, where applications authenticate against the external IDP before accessing MinIO.\",\n    icon: null,\n    iconDescription: \"\",\n  },\n];\n\nexport const openIDFormFields = {\n  config_url: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Config URL is required\" : \"\";\n    },\n    label: \"Config URL\",\n    tooltip: \"Config URL for identity provider configuration\",\n    placeholder:\n      \"https://identity-provider-url/.well-known/openid-configuration\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_id: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client ID is required\" : \"\";\n    },\n    label: \"Client ID\",\n    tooltip: \"Identity provider Client ID\",\n    placeholder: \"Enter Client ID\",\n    type: \"text\",\n    editOnly: false,\n  },\n  client_secret: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Client Secret is required\" : \"\";\n    },\n    label: \"Client Secret\",\n    tooltip: \"Identity provider Client Secret\",\n    placeholder: \"Enter Client Secret\",\n    type: \"password\",\n    editOnly: true,\n  },\n  claim_name: {\n    required: false,\n    label: \"Claim Name\",\n    tooltip: \"Claim from which MinIO will read the policy or role to use\",\n    placeholder: \"Enter Claim Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  display_name: {\n    required: false,\n    label: \"Display Name\",\n    tooltip: \"\",\n    placeholder: \"Enter Display Name\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_prefix: {\n    required: false,\n    label: \"Claim Prefix\",\n    tooltip: \"\",\n    placeholder: \"Enter Claim Prefix\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  scopes: {\n    required: false,\n    label: \"Scopes\",\n    tooltip: \"\",\n    placeholder: \"openid,profile,email\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri: {\n    required: false,\n    label: \"Redirect URI\",\n    tooltip: \"\",\n    placeholder: \"https://console-endpoint-url/oauth_callback\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  role_policy: {\n    required: false,\n    label: \"Role Policy\",\n    tooltip: \"\",\n    placeholder: \"readonly\",\n    type: \"text\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  claim_userinfo: {\n    required: false,\n    label: \"Claim User Info\",\n    tooltip: \"\",\n    placeholder: \"Claim User Info\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n  redirect_uri_dynamic: {\n    required: false,\n    label: \"Redirect URI Dynamic\",\n    tooltip: \"\",\n    placeholder: \"Redirect URI Dynamic\",\n    type: \"toggle\",\n    hasError: (s: string, editMode: boolean) => \"\",\n    editOnly: false,\n  },\n};\n\nexport const ldapFormFields = {\n  server_insecure: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Insecure\",\n    tooltip: \"Disable SSL certificate verification \",\n    placeholder: \"myldapserver.com:636\",\n    type: \"toggle\",\n    editOnly: false,\n  },\n  server_addr: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Server Address is required\" : \"\";\n    },\n    label: \"Server Address\",\n    tooltip: 'AD/LDAP server address e.g. \"myldapserver.com:636\"',\n    placeholder: \"myldapserver.com:636\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind DN is required\" : \"\";\n    },\n    label: \"Lookup Bind DN\",\n    tooltip:\n      \"DN (Distinguished Name) for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"cn=admin,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  lookup_bind_password: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"Lookup Bind Password is required\" : \"\";\n    },\n    label: \"Lookup Bind Password\",\n    tooltip:\n      \"Password for LDAP read-only service account used to perform DN and group lookups\",\n    placeholder: \"admin\",\n    type: \"password\",\n    editOnly: true,\n  },\n  user_dn_search_base_dn: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Base DN is required\" : \"\";\n    },\n    label: \"User DN Search Base\",\n    tooltip: \"\",\n    placeholder: \"DC=example,DC=net\",\n    type: \"text\",\n    editOnly: false,\n  },\n  user_dn_search_filter: {\n    required: true,\n    hasError: (s: string, editMode: boolean) => {\n      return !s && editMode ? \"User DN Search Filter is required\" : \"\";\n    },\n    label: \"User DN Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(sAMAcountName=%s)\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_base_dn: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Base DN\",\n    tooltip: \"\",\n    placeholder: \"ou=swengg,dc=min,dc=io\",\n    type: \"text\",\n    editOnly: false,\n  },\n  group_search_filter: {\n    required: false,\n    hasError: (s: string, editMode: boolean) => \"\",\n    label: \"Group Search Filter\",\n    tooltip: \"\",\n    placeholder: \"(&(objectclass=groupofnames)(member=%d))\",\n    type: \"text\",\n    editOnly: false,\n  },\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n"],"names":["_ref","configurationName","closeResetModalAndRefresh","resetOpen","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","resetLoading","setResetLoading","useEffect","api","configs","resetConfig","then","catch","err","setErrorSnackMessage","errorToHandler","error","_jsx","ConfirmDialog","title","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","onClose","confirmationContent","_jsxs","Fragment","children","ProgressBar","style","maxWidth","whiteSpace","wordWrap","FeatureItem","icon","description","Box","sx","display","marginRight","height","width","marginBottom","fontSize","fontStyle","color","_ref2","helpText","docLink","docText","contents","flex","border","borderRadius","flexFlow","padding","fontWeight","alignItems","paddingBottom","HelpIconFilled","map","content","index","iconDescription","text","concat","href","target","rel","EntityResultTitle","name","CollapseCaret","transform","EntityResultItems","blockName","results","res","_ref3","_results$groups","_results$policies","_results$users","_results$groups2","_results$users2","_results$policies2","entityName","entityLength","groups","length","policies","users","className","marginTop","SectionTitle","separator","GroupsMenuIcon","actions","h4","borderBottom","margin","fill","groupData","group","user","policy","loading","setLoading","_useState3","_useState4","setUsers","_useState5","_useState6","setGroups","_useState7","_useState8","setResults","selectedPolicies","useSelector","state","createUser","paddingTop","Grid","container","item","sm","md","lg","flexDirection","gap","withBorders","overflowY","minHeight","maxHeight","userDat","InputBox","id","value","onChange","e","usersElements","_toConsumableArray","overlayIcon","AddIcon","RemoveIcon","overlayAction","addItem","alterUsers","filteredUsers","filter","_","indx","alterUsersList","groupDat","groupsElements","alterGroups","filteredGroups","alterGroupsList","PolicySelectors","selectedPolicy","noTitle","textAlign","Loader","timestamp","TimeIcon","DateTime","fromISO","toFormat","backgroundColor","flexGrow","LDAPResultsBlock","xs","justifyContent","Button","type","variant","onClick","data","cleanPolicies","pol","cleanUsers","usr","cleanGroups","grp","ldapEntities","getLdapEntities","result","SearchIcon","enabledConfigLDAP","formFields","ldapFormFields","isEnabled","setIsEnabled","hasConfiguration","setHasConfiguration","fields","setFields","_useState9","_useState10","overrideFields","setOverrideFields","_useState11","undefined","_useState12","record","setRecord","_useState13","_useState14","editMode","setEditMode","_useState15","_useState16","setResetOpen","_useState17","_useState18","curTab","setCurTab","_useState19","_useState20","envOverride","setEnvOverride","toggleEditMode","parseFields","ovrFlds","enabled","find","key","totalCoincidences","totalOverride","forEach","env_override","includes","hasConfig","configInfo","key_values","closeDeleteModalAndRefresh","_asyncToGenerator","_regeneratorRuntime","mark","_callee","refresh","wrap","_context","prev","next","setServerNeedsRestart","stop","_x","apply","arguments","setHelpName","ResetConfigurationModal","PageHeaderWrapper","label","HelpMenu","PageLayout","Tabs","horizontal","options","tabConfig","ScreenTitle","Tooltip","tooltip","EditIcon","disabled","payload","setConfig","restart","setSnackBarMessage","toggleConfiguration","RefreshIcon","FormLayout","helpBox","AddIDPConfigurationHelpBox","ldapHelpBoxContents","HelpBox","iconComponent","WarnIcon","help","Object","entries","Switch","indicatorLabels","checked","_objectSpread","_defineProperty","required","hasError","placeholder","renderFormField","_i","_Object$entries","_Object$entries$_i","validSave","keyVals","keys","lookup_bind_password","gridTemplateColumns","gridAutoFlow","ValuePair","_ref5","_ref6","editOnly","val","placement","ConsoleIcon","LDAPEntitiesQuery","currentTabOrPath","onTabClick","newTab","LoginIcon","openIDHelpBoxContents","LockIcon","openIDFormFields","config_url","s","client_id","client_secret","claim_name","display_name","claim_prefix","scopes","redirect_uri","role_policy","claim_userinfo","redirect_uri_dynamic","server_insecure","server_addr","lookup_bind_dn","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","_ref$noTitle","records","setRecords","setFilter","currentPolicies","fetchPolicies","useCallback","listPolicies","_res$data$policies","sort","policySort","setModalErrorSnackMessage","filteredRecords","elementItem","SearchBox","DataTable","columns","elementKey","onSelect","targetD","elements","push","element","setSelectedPolicies","selectedItems","idField","customPaperHeight","usersSort","a","b","accessKey","stringSort","policyDetailsSort"],"sourceRoot":""}