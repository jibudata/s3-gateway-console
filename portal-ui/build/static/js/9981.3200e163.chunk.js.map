{"version":3,"file":"static/js/9981.3200e163.chunk.js","mappings":"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","sources":["common/BackLink.tsx","screens/Console/Common/CredentialsPrompt/CredentialItem.tsx","screens/Console/Common/CredentialsPrompt/CredentialsPrompt.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/Layout/PageLayout.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Tenants/AddTenant/Steps/Configure.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider.tsx","screens/Console/Tenants/AddTenant/Steps/Security.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption.tsx","screens/Console/Tenants/AddTenant/Steps/Affinity.tsx","screens/Console/Tenants/AddTenant/Steps/Images.tsx","screens/Console/Tenants/AddTenant/Steps/helpers/AddNamespaceModal.tsx","screens/Console/Tenants/AddTenant/Steps/SizePreview.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NameTenantMain.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantResources.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigLogSearch.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigPrometheus.tsx","screens/Console/Tenants/AddTenant/AddTenant.tsx","screens/Console/Tenants/TenantDetails/utils.ts","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { BackSettingsIcon } from \"../icons\";\nimport { Box } from \"@mui/material\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    link: {\n      display: \"block\",\n      textDecoration: \"none\",\n      \"&:active\": {\n        color: theme.palette.primary.light,\n      },\n    },\n    iconBox: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      \"&:hover\": {\n        background: \"rgba(234,237,238)\",\n      },\n      height: \"30px\",\n      paddingBottom: 4,\n      paddingTop: 8,\n      paddingRight: 16,\n      paddingLeft: 0,\n      borderRadius: 4,\n    },\n    icon: {\n      lineHeight: 1,\n      marginRight: \"14px\",\n      alignItems: \"center\",\n      width: \"22px\",\n      \"& .min-icon\": {\n        color: theme.palette.primary.light,\n        width: \"16px\",\n        height: \"16px\",\n      },\n    },\n    label: {\n      lineHeight: 1,\n      alignItems: \"center\",\n      paddingTop: 1,\n      fontSize: \"14px\",\n      fontWeight: 600,\n      color: theme.palette.primary.light,\n    },\n  });\n\ninterface IBackLink {\n  classes: any;\n  to: string;\n  label: string;\n  className?: any;\n  executeOnClick?: () => void;\n}\n\nconst BackLink = ({\n  to,\n  label,\n  classes,\n  className,\n  executeOnClick,\n}: IBackLink) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      <Link\n        to={to}\n        className={`${classes.link} ${className ? className : \"\"}`}\n        onClick={() => {\n          if (executeOnClick) {\n            executeOnClick();\n          }\n        }}\n      >\n        <div className={classes.iconBox}>\n          <div className={classes.icon}>\n            <BackSettingsIcon />\n          </div>\n          <div className={classes.label}>{label}</div>\n        </div>\n      </Link>\n    </Box>\n  );\n};\n\nexport default withStyles(styles)(BackLink);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { InputAdornment, OutlinedInput } from \"@mui/material\";\nimport BoxIconButton from \"../BoxIconButton/BoxIconButton\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { CopyIcon } from \"../../../../icons\";\nimport { fieldBasic } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      padding: \"20px 0 8px 0\",\n    },\n    inputWithCopy: {\n      \"& .MuiInputBase-root \": {\n        width: \"100%\",\n        background: \"#FBFAFA\",\n        \"& .MuiInputBase-input\": {\n          height: \".8rem\",\n        },\n        \"& .MuiInputAdornment-positionEnd\": {\n          marginRight: \".5rem\",\n          \"& .MuiButtonBase-root\": {\n            height: \"2rem\",\n          },\n        },\n      },\n      \"& .MuiButtonBase-root .min-icon\": {\n        width: \".8rem\",\n        height: \".8rem\",\n      },\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: \".8rem\",\n    },\n  });\n\nconst CredentialItem = ({\n  label = \"\",\n  value = \"\",\n  classes = {},\n}: {\n  label: string;\n  value: string;\n  classes: any;\n}) => {\n  return (\n    <div className={classes.container}>\n      <div className={classes.inputLabel}>{label}:</div>\n      <div className={classes.inputWithCopy}>\n        <OutlinedInput\n          value={value}\n          readOnly\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <CopyToClipboard text={value}>\n                <BoxIconButton\n                  aria-label=\"copy\"\n                  tooltip={\"Copy\"}\n                  onClick={() => {}}\n                  onMouseDown={() => {}}\n                  edge=\"end\"\n                >\n                  <CopyIcon />\n                </BoxIconButton>\n              </CopyToClipboard>\n            </InputAdornment>\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(CredentialItem);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { NewServiceAccount } from \"./types\";\nimport ModalWrapper from \"../ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport CredentialItem from \"./CredentialItem\";\nimport WarnIcon from \"../../../../icons/WarnIcon\";\nimport { DownloadIcon, ServiceAccountCredentialsIcon } from \"../../../../icons\";\n\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n    credentialTitle: {\n      padding: \".8rem 0 0 0\",\n      fontWeight: 600,\n      fontSize: \".9rem\",\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \"1rem\",\n    },\n    credentialsPanel: {\n      overflowY: \"auto\",\n      maxHeight: 350,\n    },\n    promptTitle: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    buttonSpacer: {\n      marginRight: \".9rem\",\n    },\n    promptIcon: {\n      marginRight: \".1rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"2rem\",\n      width: \"2rem\",\n    },\n  });\n\ninterface ICredentialsPromptProps {\n  classes: any;\n  newServiceAccount: NewServiceAccount | null;\n  open: boolean;\n  entity: string;\n  closeModal: () => void;\n}\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n};\n\nconst CredentialsPrompt = ({\n  classes,\n  newServiceAccount,\n  open,\n  closeModal,\n  entity,\n}: ICredentialsPromptProps) => {\n  if (!newServiceAccount) {\n    return null;\n  }\n  const consoleCreds = get(newServiceAccount, \"console\", null);\n  const idp = get(newServiceAccount, \"idp\", false);\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModal();\n      }}\n      title={\n        <div className={classes.promptTitle}>\n          <div>New {entity} Created</div>\n        </div>\n      }\n      titleIcon={<ServiceAccountCredentialsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formScrollable}>\n          A new {entity} has been created with the following details:\n          {!idp && consoleCreds && (\n            <React.Fragment>\n              <Grid item xs={12} className={classes.credentialsPanel}>\n                <div className={classes.credentialTitle}>\n                  Console Credentials\n                </div>\n                {Array.isArray(consoleCreds) &&\n                  consoleCreds.map((credentialsPair, index) => {\n                    return (\n                      <>\n                        <CredentialItem\n                          label=\"Access Key\"\n                          value={credentialsPair.accessKey}\n                        />\n                        <CredentialItem\n                          label=\"Secret Key\"\n                          value={credentialsPair.secretKey}\n                        />\n                      </>\n                    );\n                  })}\n                {!Array.isArray(consoleCreds) && (\n                  <>\n                    <CredentialItem\n                      label=\"Access Key\"\n                      value={consoleCreds.accessKey}\n                    />\n                    <CredentialItem\n                      label=\"Secret Key\"\n                      value={consoleCreds.secretKey}\n                    />\n                  </>\n                )}\n              </Grid>\n            </React.Fragment>\n          )}\n          {idp ? (\n            <div className={classes.warningBlock}>\n              Please Login via the configured external identity provider.\n            </div>\n          ) : (\n            <div className={classes.warningBlock}>\n              <WarnIcon />\n              <span>\n                Write these down, as this is the only time the secret will be\n                displayed.\n              </span>\n            </div>\n          )}\n        </Grid>\n        <Grid item xs={12} className={classes.buttonContainer}>\n          {!idp && (\n            <>\n              <RBIconButton\n                id={\"download-button\"}\n                tooltip={\n                  \"Download credentials in a JSON file formatted for import using mc alias import. This will only include the default login credentials.\"\n                }\n                text={\"Download for import\"}\n                className={classes.buttonSpacer}\n                onClick={() => {\n                  let consoleExtras = {};\n\n                  if (consoleCreds) {\n                    if (!Array.isArray(consoleCreds)) {\n                      consoleExtras = {\n                        url: consoleCreds.url,\n                        accessKey: consoleCreds.accessKey,\n                        secretKey: consoleCreds.secretKey,\n                        api: \"s3v4\",\n                        path: \"auto\",\n                      };\n                    } else {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          url: itemMap.url,\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                          api: \"s3v4\",\n                          path: \"auto\",\n                        };\n                      });\n                      consoleExtras = cCreds[0];\n                    }\n                  }\n\n                  download(\n                    \"credentials.json\",\n                    JSON.stringify({\n                      ...consoleExtras,\n                    })\n                  );\n                }}\n                icon={<DownloadIcon />}\n                variant=\"contained\"\n                color=\"primary\"\n              />\n\n              {Array.isArray(consoleCreds) && consoleCreds.length > 1 && (\n                <RBIconButton\n                  id={\"download-all-button\"}\n                  tooltip={\n                    \"Download all access credentials to a JSON file. NOTE: This file is not formatted for import using mc alias import. If you plan to import this alias from the file, please use the Download for Import button. \"\n                  }\n                  text={\"Download all access credentials\"}\n                  className={classes.buttonSpacer}\n                  onClick={() => {\n                    let allCredentials = {};\n                    if (consoleCreds) {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                        };\n                      });\n                      allCredentials = cCreds;\n                    }\n                    download(\n                      \"all_credentials.json\",\n                      JSON.stringify({\n                        ...allCredentials,\n                      })\n                    );\n                  }}\n                  icon={<DownloadIcon />}\n                  variant=\"contained\"\n                  color=\"primary\"\n                />\n              )}\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(CredentialsPrompt);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","import React from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { pageContentStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...pageContentStyles,\n  });\n\ntype PageLayoutProps = {\n  className?: string;\n  classes?: any;\n  children: any;\n};\n\nconst PageLayout = ({ classes, className = \"\", children }: PageLayoutProps) => {\n  return (\n    <div className={classes.contentSpacer}>\n      <Grid container>\n        <Grid item xs={12} className={className}>\n          {children}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(PageLayout);\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n          id={\"confirm-cancel\"}\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          id={\"confirm-ok\"}\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  classes: any;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  tenantCustom: boolean;\n  tenantSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Configure = ({\n  classes,\n  exposeMinIO,\n  exposeConsole,\n  tenantCustom,\n  updateAddField,\n  isPageValid,\n  tenantSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (tenantCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"tenant_securityContext_runAsUser\",\n          required: true,\n          value: tenantSecurityContext.runAsUser,\n          customValidation:\n            tenantSecurityContext.runAsUser === \"\" ||\n            parseInt(tenantSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_runAsGroup\",\n          required: true,\n          value: tenantSecurityContext.runAsGroup,\n          customValidation:\n            tenantSecurityContext.runAsGroup === \"\" ||\n            parseInt(tenantSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_fsGroup\",\n          required: true,\n          value: tenantSecurityContext.fsGroup,\n          customValidation:\n            tenantSecurityContext.fsGroup === \"\" ||\n            parseInt(tenantSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, tenantCustom, tenantSecurityContext]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Configure</h3>\n        <span className={classes.descriptionText}>\n          Basic configurations for tenant management\n        </span>\n      </div>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Services</h3>\n        <span className={classes.descriptionText}>\n          Whether the tenant's services should request an external IP via\n          LoadBalancer service type.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_minio\"\n          id=\"expose_minio\"\n          name=\"expose_minio\"\n          checked={exposeMinIO}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeMinIO\", checked);\n          }}\n          label={\"Expose MiniO Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_console\"\n          id=\"expose_console\"\n          name=\"expose_console\"\n          checked={exposeConsole}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeConsole\", checked);\n          }}\n          label={\"Expose Console Service\"}\n        />\n      </Grid>\n\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"tenant_configuration\"\n          name=\"tenant_configuration\"\n          checked={tenantCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"tenantCustom\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n      </Grid>\n      {tenantCustom && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsUser\"\n                    name=\"tenant_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={tenantSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsGroup\"\n                    name=\"tenant_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={tenantSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_fsGroup\"\n                    name=\"tenant_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={tenantSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"tenantSecurityContextRunAsNonRoot\"\n                  id=\"tenant_securityContext_runAsNonRoot\"\n                  name=\"tenant_securityContext_runAsNonRoot\"\n                  checked={tenantSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"tenantSecurityContext\", {\n                      ...tenantSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Configure));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Tooltip, Typography } from \"@mui/material\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError, getRandomString } from \"../../utils\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface IIdentityProviderProps {\n  classes: any;\n  idpSelection: string;\n  accessKeys: string[];\n  secretKeys: string[];\n  openIDConfigurationURL: string;\n  openIDClientID: string;\n  openIDSecretID: string;\n  openIDCallbackURL: string;\n  openIDClaimName: string;\n  openIDScopes: string;\n  ADURL: string;\n  ADSkipTLS: boolean;\n  ADServerInsecure: boolean;\n  ADGroupSearchBaseDN: string;\n  ADGroupSearchFilter: string;\n  ADUserDNs: string[];\n  ADLookupBindDN: string;\n  ADLookupBindPassword: string;\n  ADUserDNSearchBaseDN: string;\n  ADUserDNSearchFilter: string;\n  ADServerStartTLS: boolean;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    shortened: {\n      gridTemplateColumns: \"auto auto 50px 50px\",\n      display: \"grid\",\n      gridGap: 15,\n      marginBottom: 10,\n      \"& input\": {\n        fontWeight: 400,\n      },\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    protocolRadioOptions: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      marginBottom: 10,\n\n      \"& label\": {\n        fontSize: 14,\n      },\n      \"& div\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n      },\n    },\n    adUserDnRows: {\n      display: \"flex\",\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst IdentityProvider = ({\n  classes,\n  idpSelection,\n  accessKeys,\n  secretKeys,\n  openIDConfigurationURL,\n  openIDClientID,\n  openIDSecretID,\n  openIDCallbackURL,\n  openIDClaimName,\n  openIDScopes,\n  ADURL,\n  ADSkipTLS,\n  ADServerInsecure,\n  ADGroupSearchBaseDN,\n  ADGroupSearchFilter,\n  ADUserDNs,\n  ADLookupBindDN,\n  ADLookupBindPassword,\n  ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter,\n  ADServerStartTLS,\n  updateAddField,\n  isPageValid,\n}: IIdentityProviderProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"identityProvider\", field, value);\n    },\n    [updateAddField]\n  );\n  const updateUserField = (index: number, value: string) => {\n    const newUserField = [...accessKeys];\n    newUserField[index] = value;\n    updateField(\"accessKeys\", newUserField);\n  };\n  const updatePwordField = (index: number, value: string) => {\n    const newUserField = [...secretKeys];\n    newUserField[index] = value;\n    updateField(\"secretKeys\", newUserField);\n  };\n  const updateADUserField = (index: number, value: string) => {\n    const newADUserDNsField = [...ADUserDNs];\n    newADUserDNsField[index] = value;\n    updateField(\"ADUserDNs\", newADUserDNsField);\n  };\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"Built-in\") {\n      customIDPValidation = [...customIDPValidation];\n      for (var i = 0; i < accessKeys.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `accesskey-${i.toString()}`,\n          required: true,\n          value: accessKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n        customIDPValidation.push({\n          fieldKey: `secretkey-${i.toString()}`,\n          required: true,\n          value: secretKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n      }\n    }\n\n    if (idpSelection === \"OpenID\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n      // validate user DNs\n      for (let i = 0; i < ADUserDNs.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `ad-userdn-${i.toString()}`,\n          required: true,\n          value: ADUserDNs[i],\n        });\n      }\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    isPageValid(\"identityProvider\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    ADLookupBindDN,\n    idpSelection,\n    accessKeys,\n    secretKeys,\n    openIDClientID,\n    openIDSecretID,\n    ADURL,\n    ADGroupSearchBaseDN,\n    ADGroupSearchFilter,\n    ADUserDNs,\n    isPageValid,\n    openIDConfigurationURL,\n    openIDClaimName,\n  ]);\n  let inputs = null;\n  if (idpSelection === \"Built-in\") {\n    inputs = accessKeys.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`accesskey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Access Key\"}\n              name={`accesskey-${index.toString()}`}\n              value={accessKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateUserField(index, e.target.value);\n                cleanValidation(`accesskey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-accesskey-${index.toString()}`}\n              error={validationErrors[`accesskey-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`secretkey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Secret Key\"}\n              name={`secretkey-${index.toString()}`}\n              value={secretKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updatePwordField(index, e.target.value);\n                cleanValidation(`secretkey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-secretkey-${index.toString()}`}\n              error={validationErrors[`secretkey-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      accessKeys.push(\"\");\n                      secretKeys.push(\"\");\n                      updateUserField(accessKeys.length - 1, \"\");\n                      updatePwordField(secretKeys.length - 1, \"\");\n                    }}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      if (accessKeys.length > 1) {\n                        accessKeys.splice(index, 1);\n                        secretKeys.splice(index, 1);\n                        updateUserField(\n                          accessKeys.length - 1,\n                          accessKeys[accessKeys.length - 1]\n                        );\n                      }\n                    }}\n                  >\n                    <RemoveIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Randomize Credentials\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    onClick={() => {\n                      updateUserField(index, getRandomString(16));\n                      updatePwordField(index, getRandomString(32));\n                    }}\n                    size={\"small\"}\n                  >\n                    <CasinoIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  if (idpSelection === \"AD\") {\n    inputs = ADUserDNs.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.adUserDnRows}>\n            <InputBoxWrapper\n              id={`ad-userdn-${index.toString()}`}\n              label={\"\"}\n              placeholder=\"\"\n              name={`ad-userdn-${index.toString()}`}\n              value={ADUserDNs[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateADUserField(index, e.target.value);\n                cleanValidation(`ad-userdn-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-ad-userdn-${index.toString()}`}\n              error={validationErrors[`ad-userdn-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    ADUserDNs.push(\"\");\n                    updateADUserField(ADUserDNs.length - 1, \"\");\n                  }}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  style={{ marginLeft: 16 }}\n                  onClick={() => {\n                    if (ADUserDNs.length > 1) {\n                      ADUserDNs.splice(index, 1);\n                      updateUserField(\n                        ADUserDNs.length - 1,\n                        ADUserDNs[ADUserDNs.length - 1]\n                      );\n                    }\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Identity Provider</h3>\n        <span className={classes.descriptionText}>\n          Access to the tenant can be controlled via an external Identity\n          Manager.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.protocolRadioOptions}>\n        <label>Protocol</label>\n        <RadioGroupSelector\n          currentSelection={idpSelection}\n          id=\"idp-options\"\n          name=\"idp-options\"\n          label=\" \"\n          onChange={(e) => {\n            updateField(\"idpSelection\", e.target.value);\n          }}\n          selectorOptions={[\n            { label: \"Built-in\", value: \"Built-in\" },\n            { label: \"OpenID\", value: \"OpenID\" },\n            { label: \"Active Directory\", value: \"AD\" },\n          ]}\n        />\n      </Grid>\n      {idpSelection === \"Built-in\" && (\n        <Fragment>\n          Add additional users\n          {inputs}\n        </Fragment>\n      )}\n      {idpSelection === \"OpenID\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_CONFIGURATION_URL\"\n              name=\"openID_CONFIGURATION_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDConfigurationURL\", e.target.value);\n                cleanValidation(\"openID_CONFIGURATION_URL\");\n              }}\n              label=\"Configuration URL\"\n              value={openIDConfigurationURL}\n              placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n              error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_clientID\"\n              name=\"openID_clientID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClientID\", e.target.value);\n                cleanValidation(\"openID_clientID\");\n              }}\n              label=\"Client ID\"\n              value={openIDClientID}\n              error={validationErrors[\"openID_clientID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_secretID\"\n              name=\"openID_secretID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDSecretID\", e.target.value);\n                cleanValidation(\"openID_secretID\");\n              }}\n              label=\"Secret ID\"\n              value={openIDSecretID}\n              error={validationErrors[\"openID_secretID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_callbackURL\"\n              name=\"openID_callbackURL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDCallbackURL\", e.target.value);\n                cleanValidation(\"openID_callbackURL\");\n              }}\n              label=\"Callback URL\"\n              value={openIDCallbackURL}\n              placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n              error={validationErrors[\"openID_callbackURL\"] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_claimName\"\n              name=\"openID_claimName\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClaimName\", e.target.value);\n                cleanValidation(\"openID_claimName\");\n              }}\n              label=\"Claim Name\"\n              value={openIDClaimName}\n              error={validationErrors[\"openID_claimName\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_scopes\"\n              name=\"openID_scopes\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDScopes\", e.target.value);\n                cleanValidation(\"openID_scopes\");\n              }}\n              label=\"Scopes\"\n              value={openIDScopes}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {idpSelection === \"AD\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"AD_URL\"\n              name=\"AD_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADURL\", e.target.value);\n                cleanValidation(\"AD_URL\");\n              }}\n              label=\"LDAP Server Address\"\n              value={ADURL}\n              placeholder=\"ldap-server:636\"\n              error={validationErrors[\"AD_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_skipTLS\"\n              id=\"ad_skipTLS\"\n              name=\"ad_skipTLS\"\n              checked={ADSkipTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADSkipTLS\", checked);\n              }}\n              label={\"Skip TLS Verification\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverInsecure\"\n              id=\"ad_serverInsecure\"\n              name=\"ad_serverInsecure\"\n              checked={ADServerInsecure}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerInsecure\", checked);\n              }}\n              label={\"Server Insecure\"}\n            />\n          </Grid>\n          {ADServerInsecure ? (\n            <Grid item xs={12}>\n              <Typography\n                className={classes.error}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Warning: All traffic with Active Directory will be unencrypted\n              </Typography>\n              <br />\n            </Grid>\n          ) : null}\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverStartTLS\"\n              id=\"ad_serverStartTLS\"\n              name=\"ad_serverStartTLS\"\n              checked={ADServerStartTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerStartTLS\", checked);\n              }}\n              label={\"Start TLS connection to AD/LDAP server\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindDN\"\n              name=\"ad_lookupBindDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindDN\", e.target.value);\n                cleanValidation(\"ad_lookupBindDN\");\n              }}\n              label=\"Lookup Bind DN\"\n              value={ADLookupBindDN}\n              placeholder=\"cn=admin,dc=min,dc=io\"\n              error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindPassword\"\n              name=\"ad_lookupBindPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindPassword\", e.target.value);\n              }}\n              label=\"Lookup Bind Password\"\n              value={ADLookupBindPassword}\n              placeholder=\"admin\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchBaseDN\"\n              name=\"ad_userDNSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchBaseDN\", e.target.value);\n              }}\n              label=\"User DN Search Base DN\"\n              value={ADUserDNSearchBaseDN}\n              placeholder=\"dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchFilter\"\n              name=\"ad_userDNSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchFilter\", e.target.value);\n              }}\n              label=\"User DN Search Filter\"\n              value={ADUserDNSearchFilter}\n              placeholder=\"(sAMAcountName=%s)\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchBaseDN\"\n              name=\"ad_groupSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchBaseDN\", e.target.value);\n              }}\n              label=\"Group Search Base DN\"\n              value={ADGroupSearchBaseDN}\n              placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchFilter\"\n              name=\"ad_groupSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchFilter\", e.target.value);\n              }}\n              label=\"Group Search Filter\"\n              value={ADGroupSearchFilter}\n              placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n            />\n          </Grid>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              List of user DNs (Distinguished Names) to be Tenant Administrators\n            </legend>\n            <Grid item xs={12}>\n              {inputs}\n            </Grid>\n          </fieldset>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  idpSelection: state.tenants.createTenant.fields.identityProvider.idpSelection,\n  accessKeys: state.tenants.createTenant.fields.identityProvider.accessKeys,\n  secretKeys: state.tenants.createTenant.fields.identityProvider.secretKeys,\n  openIDConfigurationURL:\n    state.tenants.createTenant.fields.identityProvider.openIDConfigurationURL,\n  openIDClientID:\n    state.tenants.createTenant.fields.identityProvider.openIDClientID,\n  openIDSecretID:\n    state.tenants.createTenant.fields.identityProvider.openIDSecretID,\n  openIDCallbackURL:\n    state.tenants.createTenant.fields.identityProvider.openIDCallbackURL,\n  openIDClaimName:\n    state.tenants.createTenant.fields.identityProvider.openIDClaimName,\n  openIDScopes: state.tenants.createTenant.fields.identityProvider.openIDScopes,\n  ADURL: state.tenants.createTenant.fields.identityProvider.ADURL,\n  ADSkipTLS: state.tenants.createTenant.fields.identityProvider.ADSkipTLS,\n  ADServerInsecure:\n    state.tenants.createTenant.fields.identityProvider.ADServerInsecure,\n  ADGroupSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchBaseDN,\n  ADGroupSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchFilter,\n  ADUserDNs: state.tenants.createTenant.fields.identityProvider.ADUserDNs,\n  ADLookupBindDN:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindDN,\n  ADLookupBindPassword:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindPassword,\n  ADUserDNSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchFilter,\n  ADServerStartTLS:\n    state.tenants.createTenant.fields.identityProvider.ADServerStartTLS,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(IdentityProvider));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Typography } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  addCaCertificate,\n  addFileToCaCertificates,\n  addFileToKeyPair,\n  addKeyPair,\n  deleteCaCertificate,\n  deleteKeyPair,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface ISecurityProps {\n  classes: any;\n  enableTLS: boolean;\n  enableAutoCert: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  caCertificates: KeyPair[];\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileToCaCertificates: typeof addFileToCaCertificates;\n  deleteCaCertificate: typeof deleteCaCertificate;\n  addCaCertificate: typeof addCaCertificate;\n  addKeyPair: typeof addKeyPair;\n  addFileToKeyPair: typeof addFileToKeyPair;\n  deleteKeyPair: typeof deleteKeyPair;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    minioCertificateRows: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    minioCertsContainer: {\n      marginBottom: 15,\n    },\n    minioCACertsRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n\n    ...createTenantCommon,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Security = ({\n  classes,\n  enableTLS,\n  enableAutoCert,\n  enableCustomCerts,\n  minioCertificates,\n  caCertificates,\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n}: ISecurityProps) => {\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"security\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n\n  useEffect(() => {\n    if (!enableTLS) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableAutoCert) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableCustomCerts) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    isPageValid(\"security\", false);\n  }, [enableTLS, enableAutoCert, enableCustomCerts, isPageValid]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Security</h3>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableTLS\"\n          id=\"enableTLS\"\n          name=\"enableTLS\"\n          checked={enableTLS}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableTLS\", checked);\n          }}\n          label={\"Enable TLS\"}\n        />\n        Enable TLS for the tenant, this is required for Encryption Configuration\n        {enableTLS && (\n          <Fragment>\n            <br />\n            <br />\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              AutoCert: MinIO Operator will generate all TLS certificates\n              automatically\n            </Typography>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              Custom certificates: Allow user to provide your own certificates\n            </Typography>\n            <br />\n          </Fragment>\n        )}\n      </Grid>\n      {enableTLS && (\n        <Fragment>\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"enableAutoCert\"\n              id=\"enableAutoCert\"\n              name=\"enableAutoCert\"\n              checked={enableAutoCert}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableAutoCert\", checked);\n              }}\n              label={\"Enable AutoCert\"}\n            />\n            <FormSwitchWrapper\n              value=\"enableCustomCerts\"\n              id=\"enableCustomCerts\"\n              name=\"enableCustomCerts\"\n              checked={enableCustomCerts}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableCustomCerts\", checked);\n              }}\n              label={\"Custom Certificates\"}\n            />\n          </Grid>\n          {enableCustomCerts && (\n            <Fragment>\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO Certificates\n                    </legend>\n                    {minioCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={`minio-certs-${keyPair.id}`}\n                        className={classes.minioCertificateRows}\n                      >\n                        <Grid item xs={10} className={classes.fileItem}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"key\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                          />\n                        </Grid>\n\n                        <Grid item xs={2} className={classes.rowActions}>\n                          <div className={classes.overlayAction}>\n                            <IconButton size={\"small\"} onClick={addKeyPair}>\n                              <AddIcon />\n                            </IconButton>\n                          </div>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                deleteKeyPair(keyPair.id);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO CA Certificates\n                    </legend>\n\n                    {caCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={`minio-CA-certs-${keyPair.id}`}\n                        className={classes.minioCACertsRow}\n                      >\n                        <Grid item xs={6}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToCaCertificates(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                        </Grid>\n                        <Grid item xs={6}>\n                          <div className={classes.rowActions}>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={addCaCertificate}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  deleteCaCertificate(keyPair.id);\n                                }}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  caCertificates: state.tenants.createTenant.certificates.caCertificates,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n});\n\nexport default withStyles(styles)(connector(Security));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Paper } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  addFileClientCert,\n  addFileGemaltoCa,\n  addFileServerCert,\n  addFileVaultCa,\n  addFileVaultCert,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IEncryptionProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileServerCert: typeof addFileServerCert;\n  addFileClientCert: typeof addFileClientCert;\n  addFileVaultCert: typeof addFileVaultCert;\n  addFileVaultCa: typeof addFileVaultCa;\n  addFileGemaltoCa: typeof addFileGemaltoCa;\n  enableEncryption: boolean;\n  encryptionType: string;\n  gemaltoEndpoint: string;\n  gemaltoToken: string;\n  gemaltoDomain: string;\n  gemaltoRetry: string;\n  awsEndpoint: string;\n  awsRegion: string;\n  awsKMSKey: string;\n  awsAccessKey: string;\n  awsSecretKey: string;\n  awsToken: string;\n  vaultEndpoint: string;\n  vaultEngine: string;\n  vaultNamespace: string;\n  vaultPrefix: string;\n  vaultAppRoleEngine: string;\n  vaultId: string;\n  vaultSecret: string;\n  vaultRetry: string;\n  vaultPing: string;\n  azureEndpoint: string;\n  azureTenantID: string;\n  azureClientID: string;\n  azureClientSecret: string;\n  gcpProjectID: string;\n  gcpEndpoint: string;\n  gcpClientEmail: string;\n  gcpClientID: string;\n  gcpPrivateKeyID: string;\n  gcpPrivateKey: string;\n  enableCustomCertsForKES: boolean;\n  enableAutoCert: boolean;\n  enableTLS: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  serverCertificate: KeyPair;\n  clientCertificate: KeyPair;\n  vaultCertificate: KeyPair;\n  vaultCA: KeyPair;\n  gemaltoCA: KeyPair;\n  kesSecurityContext: ISecurityContext;\n  replicas: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    encryptionTypeOptions: {\n      marginBottom: 15,\n    },\n    mutualTlsConfig: {\n      marginTop: 15,\n      \"& fieldset\": {\n        flex: 1,\n      },\n    },\n    rightSpacer: {\n      marginRight: 15,\n    },\n    responsiveContainer: {\n      \"@media (max-width: 900px)\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n      },\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Encryption = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n  enableEncryption,\n  enableCustomCerts,\n  encryptionType,\n  gemaltoEndpoint,\n  gemaltoToken,\n  gemaltoDomain,\n  gemaltoRetry,\n  awsEndpoint,\n  awsRegion,\n  awsKMSKey,\n  awsAccessKey,\n  awsSecretKey,\n  awsToken,\n  vaultEndpoint,\n  vaultEngine,\n  vaultNamespace,\n  vaultPrefix,\n  vaultAppRoleEngine,\n  vaultId,\n  vaultSecret,\n  vaultRetry,\n  vaultPing,\n  azureEndpoint,\n  azureTenantID,\n  azureClientID,\n  azureClientSecret,\n  gcpProjectID,\n  gcpEndpoint,\n  gcpClientEmail,\n  gcpClientID,\n  gcpPrivateKeyID,\n  gcpPrivateKey,\n  enableCustomCertsForKES,\n  enableAutoCert,\n  enableTLS,\n  minioCertificates,\n  serverCertificate,\n  clientCertificate,\n  vaultCertificate,\n  vaultCA,\n  gemaltoCA,\n  kesSecurityContext,\n  replicas,\n}: IEncryptionProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  let encryptionAvailable = false;\n  if (\n    enableTLS &&\n    (enableAutoCert ||\n      (minioCertificates &&\n        minioCertificates.filter(\n          (item) => item.encoded_key && item.encoded_cert\n        ).length > 0))\n  ) {\n    encryptionAvailable = true;\n  }\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"encryption\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (enableEncryption) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: kesSecurityContext.runAsUser,\n          customValidation:\n            kesSecurityContext.runAsUser === \"\" ||\n            parseInt(kesSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: kesSecurityContext.runAsGroup,\n          customValidation:\n            kesSecurityContext.runAsGroup === \"\" ||\n            parseInt(kesSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: kesSecurityContext.fsGroup,\n          customValidation:\n            kesSecurityContext.fsGroup === \"\" ||\n            parseInt(kesSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enableCustomCerts) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_cert,\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_cert,\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultEndpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultId,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultSecret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultPing,\n            customValidation: parseInt(vaultPing) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultRetry,\n            customValidation: parseInt(vaultRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsEndpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsRegion,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsAccessKey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsSecretKey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoEndpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoToken,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoDomain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoRetry,\n            customValidation: parseInt(gemaltoRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureEndpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureTenantID,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureClientID,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureClientSecret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    isPageValid(\"encryption\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enableEncryption,\n    encryptionType,\n    vaultEndpoint,\n    vaultEngine,\n    vaultId,\n    vaultSecret,\n    vaultPing,\n    vaultRetry,\n    awsEndpoint,\n    awsRegion,\n    awsSecretKey,\n    awsAccessKey,\n    gemaltoEndpoint,\n    gemaltoToken,\n    gemaltoDomain,\n    gemaltoRetry,\n    gcpProjectID,\n    gcpEndpoint,\n    gcpClientEmail,\n    gcpClientID,\n    gcpPrivateKeyID,\n    gcpPrivateKey,\n    azureEndpoint,\n    azureTenantID,\n    azureClientID,\n    azureClientSecret,\n    isPageValid,\n    enableAutoCert,\n    enableCustomCerts,\n    serverCertificate.encoded_key,\n    serverCertificate.encoded_cert,\n    clientCertificate.encoded_key,\n    clientCertificate.encoded_cert,\n    kesSecurityContext,\n    replicas,\n  ]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Encryption</h3>\n        <span className={classes.descriptionText}>\n          How would you like to encrypt the information at rest.\n        </span>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableEncryption\"\n          id=\"enableEncryption\"\n          name=\"enableEncryption\"\n          checked={enableEncryption}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableEncryption\", checked);\n          }}\n          label={\"Enable Server Side Encryption\"}\n          disabled={!encryptionAvailable}\n        />\n      </Grid>\n      {enableEncryption && (\n        <Fragment>\n          <Grid item xs={12} className={classes.encryptionTypeOptions}>\n            <RadioGroupSelector\n              currentSelection={encryptionType}\n              id=\"encryptionType\"\n              name=\"encryptionType\"\n              label=\"Encryption Options\"\n              onChange={(e) => {\n                updateField(\"encryptionType\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"Vault\", value: \"vault\" },\n                { label: \"AWS\", value: \"aws\" },\n                { label: \"Gemalto\", value: \"gemalto\" },\n                { label: \"GCP\", value: \"gcp\" },\n                { label: \"Azure\", value: \"azure\" },\n              ]}\n            />\n          </Grid>\n          {encryptionType === \"vault\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_endpoint\"\n                  name=\"vault_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEndpoint\", e.target.value);\n                    cleanValidation(\"vault_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={vaultEndpoint}\n                  error={validationErrors[\"vault_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_engine\"\n                  name=\"vault_engine\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEngine\", e.target.value);\n                    cleanValidation(\"vault_engine\");\n                  }}\n                  label=\"Engine\"\n                  value={vaultEngine}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_namespace\"\n                  name=\"vault_namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultNamespace\", e.target.value);\n                  }}\n                  label=\"Namespace\"\n                  value={vaultNamespace}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_prefix\"\n                  name=\"vault_prefix\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultPrefix\", e.target.value);\n                  }}\n                  label=\"Prefix\"\n                  value={vaultPrefix}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>App Role</legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_approle_engine\"\n                      name=\"vault_approle_engine\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultAppRoleEngine\", e.target.value);\n                      }}\n                      label=\"Engine\"\n                      value={vaultAppRoleEngine}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_id\"\n                      name=\"vault_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultId\", e.target.value);\n                        cleanValidation(\"vault_id\");\n                      }}\n                      label=\"AppRole ID\"\n                      value={vaultId}\n                      error={validationErrors[\"vault_id\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_secret\"\n                      name=\"vault_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultSecret\", e.target.value);\n                        cleanValidation(\"vault_secret\");\n                      }}\n                      label=\"AppRole Secret\"\n                      value={vaultSecret}\n                      error={validationErrors[\"vault_secret\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"vault_retry\"\n                      name=\"vault_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultRetry\", e.target.value);\n                        cleanValidation(\"vault_retry\");\n                      }}\n                      label=\"Retry (Seconds)\"\n                      value={vaultRetry}\n                      error={validationErrors[\"vault_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n\n              <Grid container className={classes.mutualTlsConfig}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Mutual TLS authentication (optional)\n                  </legend>\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"key\", fileName, encodedValue);\n                      cleanValidation(\"vault_key\");\n                    }}\n                    accept=\".key,.pem\"\n                    id=\"vault_key\"\n                    name=\"vault_key\"\n                    label=\"Key\"\n                    value={vaultCertificate.key}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"cert\", fileName, encodedValue);\n                      cleanValidation(\"vault_cert\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_cert\"\n                    name=\"vault_cert\"\n                    label=\"Cert\"\n                    value={vaultCertificate.cert}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCa(fileName, encodedValue);\n                      cleanValidation(\"vault_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_ca\"\n                    name=\"vault_ca\"\n                    label=\"CA\"\n                    value={vaultCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                className={classes.formFieldRow}\n                style={{ marginTop: 15 }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>Status</legend>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    min=\"0\"\n                    id=\"vault_ping\"\n                    name=\"vault_ping\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultPing\", e.target.value);\n                      cleanValidation(\"vault_ping\");\n                    }}\n                    label=\"Ping (Seconds)\"\n                    value={vaultPing}\n                    error={validationErrors[\"vault_ping\"] || \"\"}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"azure\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"azure_endpoint\"\n                  name=\"azure_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"azureEndpoint\", e.target.value);\n                    cleanValidation(\"azure_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={azureEndpoint}\n                  error={validationErrors[\"azure_endpoint\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_tenant_id\"\n                      name=\"azure_tenant_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureTenantID\", e.target.value);\n                        cleanValidation(\"azure_tenant_id\");\n                      }}\n                      label=\"Tenant ID\"\n                      value={azureTenantID}\n                      error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_id\"\n                      name=\"azure_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientID\", e.target.value);\n                        cleanValidation(\"azure_client_id\");\n                      }}\n                      label=\"Client ID\"\n                      value={azureClientID}\n                      error={validationErrors[\"azure_client_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_secret\"\n                      name=\"azure_client_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientSecret\", e.target.value);\n                        cleanValidation(\"azure_client_secret\");\n                      }}\n                      label=\"Client Secret\"\n                      value={azureClientSecret}\n                      error={validationErrors[\"azure_client_secret\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gcp\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_project_id\"\n                  name=\"gcp_project_id\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpProjectID\", e.target.value);\n                  }}\n                  label=\"Project ID\"\n                  value={gcpProjectID}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_endpoint\"\n                  name=\"gcp_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpEndpoint\", e.target.value);\n                  }}\n                  label=\"Endpoint\"\n                  value={gcpEndpoint}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_email\"\n                      name=\"gcp_client_email\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientEmail\", e.target.value);\n                      }}\n                      label=\"Client Email\"\n                      value={gcpClientEmail}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_id\"\n                      name=\"gcp_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientID\", e.target.value);\n                      }}\n                      label=\"Client ID\"\n                      value={gcpClientID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key_id\"\n                      name=\"gcp_private_key_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKeyID\", e.target.value);\n                      }}\n                      label=\"Private Key ID\"\n                      value={gcpPrivateKeyID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key\"\n                      name=\"gcp_private_key\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKey\", e.target.value);\n                      }}\n                      label=\"Private Key\"\n                      value={gcpPrivateKey}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"aws\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_endpoint\"\n                  name=\"aws_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsEndpoint\", e.target.value);\n                    cleanValidation(\"aws_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={awsEndpoint}\n                  error={validationErrors[\"aws_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_region\"\n                  name=\"aws_region\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsRegion\", e.target.value);\n                    cleanValidation(\"aws_region\");\n                  }}\n                  label=\"Region\"\n                  value={awsRegion}\n                  error={validationErrors[\"aws_region\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_kmsKey\"\n                  name=\"aws_kmsKey\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsKMSKey\", e.target.value);\n                  }}\n                  label=\"KMS Key\"\n                  value={awsKMSKey}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_accessKey\"\n                      name=\"aws_accessKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsAccessKey\", e.target.value);\n                        cleanValidation(\"aws_accessKey\");\n                      }}\n                      label=\"Access Key\"\n                      value={awsAccessKey}\n                      error={validationErrors[\"aws_accessKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_secretKey\"\n                      name=\"aws_secretKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsSecretKey\", e.target.value);\n                        cleanValidation(\"aws_secretKey\");\n                      }}\n                      label=\"Secret Key\"\n                      value={awsSecretKey}\n                      error={validationErrors[\"aws_secretKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_token\"\n                      name=\"aws_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsToken\", e.target.value);\n                      }}\n                      label=\"Token\"\n                      value={awsToken}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gemalto\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gemalto_endpoint\"\n                  name=\"gemalto_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gemaltoEndpoint\", e.target.value);\n                    cleanValidation(\"gemalto_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={gemaltoEndpoint}\n                  error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_token\"\n                      name=\"gemalto_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoToken\", e.target.value);\n                        cleanValidation(\"gemalto_token\");\n                      }}\n                      label=\"Token\"\n                      value={gemaltoToken}\n                      error={validationErrors[\"gemalto_token\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_domain\"\n                      name=\"gemalto_domain\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoDomain\", e.target.value);\n                        cleanValidation(\"gemalto_domain\");\n                      }}\n                      label=\"Domain\"\n                      value={gemaltoDomain}\n                      error={validationErrors[\"gemalto_domain\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"gemalto_retry\"\n                      name=\"gemalto_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoRetry\", e.target.value);\n                        cleanValidation(\"gemalto_retry\");\n                      }}\n                      label=\"Retry (seconds)\"\n                      value={gemaltoRetry}\n                      error={validationErrors[\"gemalto_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Custom CA Root certificate verification\n                  </legend>\n\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileGemaltoCa(fileName, encodedValue);\n                      cleanValidation(\"gemalto_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"gemalto_ca\"\n                    name=\"gemalto_ca\"\n                    label=\"CA\"\n                    value={gemaltoCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          <div className={classes.headerElement}>\n            <h4 className={classes.h3Section}>Additional Configurations</h4>\n          </div>\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"enableCustomCertsForKES\"\n              id=\"enableCustomCertsForKES\"\n              name=\"enableCustomCertsForKES\"\n              checked={enableCustomCertsForKES || !enableAutoCert}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableCustomCertsForKES\", checked);\n              }}\n              label={\"Custom Certificates\"}\n              disabled={!enableAutoCert}\n            />\n          </Grid>\n          {(enableCustomCertsForKES || !enableAutoCert) && (\n            <Fragment>\n              <Grid container>\n                <Grid item xs={12} style={{ marginBottom: 15 }}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Encryption Service Certificates\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileServerCert(\"key\", fileName, encodedValue);\n                        cleanValidation(\"serverKey\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"serverKey\"\n                      name=\"serverKey\"\n                      label=\"Key\"\n                      error={validationErrors[\"serverKey\"] || \"\"}\n                      value={serverCertificate.key}\n                      required={!enableAutoCert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileServerCert(\"cert\", fileName, encodedValue);\n                        cleanValidation(\"serverCert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"serverCert\"\n                      name=\"serverCert\"\n                      label=\"Cert\"\n                      error={validationErrors[\"serverCert\"] || \"\"}\n                      value={serverCertificate.cert}\n                      required={!enableAutoCert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Grid>\n              <Grid container style={{ marginBottom: 15 }}>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication with MinIO\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileClientCert(\"key\", fileName, encodedValue);\n                        cleanValidation(\"clientKey\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"clientKey\"\n                      name=\"clientKey\"\n                      label=\"Key\"\n                      error={validationErrors[\"clientKey\"] || \"\"}\n                      value={clientCertificate.key}\n                      required={!enableAutoCert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileClientCert(\"cert\", fileName, encodedValue);\n                        cleanValidation(\"clientCert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"clientCert\"\n                      name=\"clientCert\"\n                      label=\"Cert\"\n                      error={validationErrors[\"clientCert\"] || \"\"}\n                      value={clientCertificate.cert}\n                      required={!enableAutoCert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Grid>\n            </Fragment>\n          )}\n          <Grid item xs={12}>\n            <Grid item xs={12} classes={classes.formFieldRow}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"replicas\", e.target.value);\n                  cleanValidation(\"replicas\");\n                }}\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n\n            <fieldset className={classes.fieldGroup} style={{ marginTop: 15 }}>\n              <legend className={classes.descriptionText}>\n                SecurityContext for KES pods\n              </legend>\n              <Grid item xs={12} className={classes.kesSecurityContext}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                >\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsUser\"\n                      name=\"kes_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={kesSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsGroup\"\n                      name=\"kes_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={kesSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_fsGroup\"\n                      name=\"kes_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={kesSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"kesSecurityContextRunAsNonRoot\"\n                    id=\"kes_securityContext_runAsNonRoot\"\n                    name=\"kes_securityContext_runAsNonRoot\"\n                    checked={kesSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  replicas: state.tenants.createTenant.fields.encryption.replicas,\n  enableEncryption:\n    state.tenants.createTenant.fields.encryption.enableEncryption,\n  encryptionType: state.tenants.createTenant.fields.encryption.encryptionType,\n  gemaltoEndpoint: state.tenants.createTenant.fields.encryption.gemaltoEndpoint,\n  gemaltoToken: state.tenants.createTenant.fields.encryption.gemaltoToken,\n  gemaltoDomain: state.tenants.createTenant.fields.encryption.gemaltoDomain,\n  gemaltoRetry: state.tenants.createTenant.fields.encryption.gemaltoRetry,\n  awsEndpoint: state.tenants.createTenant.fields.encryption.awsEndpoint,\n  awsRegion: state.tenants.createTenant.fields.encryption.awsRegion,\n  awsKMSKey: state.tenants.createTenant.fields.encryption.awsKMSKey,\n  awsAccessKey: state.tenants.createTenant.fields.encryption.awsAccessKey,\n  awsSecretKey: state.tenants.createTenant.fields.encryption.awsSecretKey,\n  awsToken: state.tenants.createTenant.fields.encryption.awsToken,\n  vaultEndpoint: state.tenants.createTenant.fields.encryption.vaultEndpoint,\n  vaultEngine: state.tenants.createTenant.fields.encryption.vaultEngine,\n  vaultNamespace: state.tenants.createTenant.fields.encryption.vaultNamespace,\n  vaultPrefix: state.tenants.createTenant.fields.encryption.vaultPrefix,\n  vaultAppRoleEngine:\n    state.tenants.createTenant.fields.encryption.vaultAppRoleEngine,\n  vaultId: state.tenants.createTenant.fields.encryption.vaultId,\n  vaultSecret: state.tenants.createTenant.fields.encryption.vaultSecret,\n  vaultRetry: state.tenants.createTenant.fields.encryption.vaultRetry,\n  vaultPing: state.tenants.createTenant.fields.encryption.vaultPing,\n  azureEndpoint: state.tenants.createTenant.fields.encryption.azureEndpoint,\n  azureTenantID: state.tenants.createTenant.fields.encryption.azureTenantID,\n  azureClientID: state.tenants.createTenant.fields.encryption.azureClientID,\n  azureClientSecret:\n    state.tenants.createTenant.fields.encryption.azureClientSecret,\n  gcpProjectID: state.tenants.createTenant.fields.encryption.gcpProjectID,\n  gcpEndpoint: state.tenants.createTenant.fields.encryption.gcpEndpoint,\n  gcpClientEmail: state.tenants.createTenant.fields.encryption.gcpClientEmail,\n  gcpClientID: state.tenants.createTenant.fields.encryption.gcpClientID,\n  gcpPrivateKeyID: state.tenants.createTenant.fields.encryption.gcpPrivateKeyID,\n  gcpPrivateKey: state.tenants.createTenant.fields.encryption.gcpPrivateKey,\n  enableCustomCertsForKES:\n    state.tenants.createTenant.fields.encryption.enableCustomCertsForKES,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  serverCertificate: state.tenants.createTenant.certificates.serverCertificate,\n  clientCertificate: state.tenants.createTenant.certificates.clientCertificate,\n  vaultCertificate: state.tenants.createTenant.certificates.vaultCertificate,\n  vaultCA: state.tenants.createTenant.certificates.vaultCA,\n  gemaltoCA: state.tenants.createTenant.certificates.gemaltoCA,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  kesSecurityContext:\n    state.tenants.createTenant.fields.encryption.kesSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n});\n\nexport default withStyles(styles)(connector(Encryption));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState } from \"../../../../../store\";\nimport { isPageValid, setKeyValuePairs, updateAddField } from \"../../actions\";\nimport { setModalErrorSnackMessage } from \"../../../../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { ErrorResponseHandler } from \"../../../../../common/types\";\nimport { LabelKeyPair } from \"../../types\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../common/api\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\n\ninterface IAffinityProps {\n  classes: any;\n  podAffinity: string;\n  nodeSelectorLabels: string;\n  withPodAntiAffinity: boolean;\n  keyValuePairs: LabelKeyPair[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setKeyValuePairs: typeof setKeyValuePairs;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    fieldContainer: {\n      marginBottom: 0,\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({\n  classes,\n  podAffinity,\n  nodeSelectorLabels,\n  withPodAntiAffinity,\n  setModalErrorSnackMessage,\n  updateAddField,\n  keyValuePairs,\n  setKeyValuePairs,\n  isPageValid,\n}: IAffinityProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"affinity\", field, value);\n    },\n    [updateAddField]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          setModalErrorSnackMessage(err);\n          setKeyValueMap({});\n        });\n    }\n  }, [setModalErrorSnackMessage, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"affinity\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, podAffinity, nodeSelectorLabels]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Pod Placement</h3>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinnity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n\n                              arrCp[i].key = e.target.value as string;\n                              arrCp[i].value = keyValueMap[newKey][0];\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].key = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value as string;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = Object.assign([], keyValuePairs);\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              setKeyValuePairs(arrCp);\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                setKeyValuePairs(arrCp);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => {\n  const createTenant = state.tenants.createTenant;\n\n  return {\n    podAffinity: createTenant.fields.affinity.podAffinity,\n    nodeSelectorLabels: createTenant.fields.affinity.nodeSelectorLabels,\n    withPodAntiAffinity: createTenant.fields.affinity.withPodAntiAffinity,\n    keyValuePairs: createTenant.nodeSelectorPairs,\n  };\n};\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  isPageValid,\n  setKeyValuePairs,\n});\n\nexport default withStyles(styles)(connector(Affinity));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\n\ninterface IImagesProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  customImage: boolean;\n  imageName: string;\n  customDockerhub: boolean;\n  imageRegistry: string;\n  imageRegistryUsername: string;\n  imageRegistryPassword: string;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  prometheusCustom: boolean;\n  tenantCustom: boolean;\n  logSearchCustom: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  kesImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Images = ({\n  classes,\n  storageClasses,\n  customImage,\n  imageName,\n  customDockerhub,\n  imageRegistry,\n  imageRegistryUsername,\n  imageRegistryPassword,\n  exposeMinIO,\n  exposeConsole,\n  prometheusCustom,\n  tenantCustom,\n  logSearchCustom,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  kesImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  logSearchSelectedStorageClass,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n}: IImagesProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n    if (logSearchCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchImage\",\n          required: false,\n          value: logSearchImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/operator:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresImage\",\n          required: false,\n          value: logSearchPostgresImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/postgres:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresInitImage\",\n          required: false,\n          value: logSearchPostgresInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusImage\",\n          required: false,\n          value: prometheusImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/prometheus:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusSidecarImage\",\n          required: false,\n          value: prometheusSidecarImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'project/container:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusInitImage\",\n          required: false,\n          value: prometheusInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    logSearchImage,\n    kesImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    isPageValid,\n    prometheusCustom,\n    tenantCustom,\n    logSearchCustom,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Container Images</h3>\n        <span className={classes.descriptionText}>\n          Specify the container images used by the Tenant and it's features.\n        </span>\n      </div>\n\n      <Fragment>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"image\"\n            name=\"image\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageName\", e.target.value);\n              cleanValidation(\"image\");\n            }}\n            label=\"MinIO\"\n            value={imageName}\n            error={validationErrors[\"image\"] || \"\"}\n            placeholder=\"E.g. minio/minio:RELEASE.2022-02-26T02-54-46Z\"\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"kesImage\"\n            name=\"kesImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"kesImage\", e.target.value);\n              cleanValidation(\"kesImage\");\n            }}\n            label=\"KES\"\n            value={kesImage}\n            error={validationErrors[\"kesImage\"] || \"\"}\n            placeholder=\"E.g. minio/kes:v0.17.6\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Log Search</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchImage\"\n            name=\"logSearchImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchImage\", e.target.value);\n              cleanValidation(\"logSearchImage\");\n            }}\n            label=\"API\"\n            value={logSearchImage}\n            error={validationErrors[\"logSearchImage\"] || \"\"}\n            placeholder=\"E.g. minio/operator:v4.4.10\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresImage\"\n            name=\"logSearchPostgresImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresImage\");\n            }}\n            label=\"PostgreSQL\"\n            value={logSearchPostgresImage}\n            error={validationErrors[\"logSearchPostgresImage\"] || \"\"}\n            placeholder=\"E.g. library/postgres:13\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresInitImage\"\n            name=\"logSearchPostgresInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresInitImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresInitImage\");\n            }}\n            label=\"PostgreSQL Init\"\n            value={logSearchPostgresInitImage}\n            error={validationErrors[\"logSearchPostgresInitImage\"] || \"\"}\n            placeholder=\"E.g. library/busybox:1.33.1\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Monitoring</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusImage\"\n            name=\"prometheusImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusImage\", e.target.value);\n              cleanValidation(\"prometheusImage\");\n            }}\n            label=\"Prometheus\"\n            value={prometheusImage}\n            error={validationErrors[\"prometheusImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusSidecarImage\"\n            name=\"prometheusSidecarImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusSidecarImage\", e.target.value);\n              cleanValidation(\"prometheusSidecarImage\");\n            }}\n            label=\"Prometheus Sidecar\"\n            value={prometheusSidecarImage}\n            error={validationErrors[\"prometheusSidecarImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusInitImage\"\n            name=\"prometheusInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusInitImage\", e.target.value);\n              cleanValidation(\"prometheusInitImage\");\n            }}\n            label=\"Prometheus Init\"\n            value={prometheusInitImage}\n            error={validationErrors[\"prometheusInitImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n      </Fragment>\n\n      {customImage && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <h4>Custom Container Registry</h4>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"custom_docker_hub\"\n              id=\"custom_docker_hub\"\n              name=\"custom_docker_hub\"\n              checked={customDockerhub}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"customDockerhub\", checked);\n              }}\n              label={\"Use a private container registry\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {customDockerhub && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registry\"\n              name=\"registry\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistry\", e.target.value);\n              }}\n              label=\"Endpoint\"\n              value={imageRegistry}\n              error={validationErrors[\"registry\"] || \"\"}\n              placeholder=\"E.g. https://index.docker.io/v1/\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryUsername\"\n              name=\"registryUsername\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryUsername\", e.target.value);\n              }}\n              label=\"Username\"\n              value={imageRegistryUsername}\n              error={validationErrors[\"registryUsername\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryPassword\"\n              name=\"registryPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryPassword\", e.target.value);\n              }}\n              label=\"Password\"\n              value={imageRegistryPassword}\n              error={validationErrors[\"registryPassword\"] || \"\"}\n              required\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  customImage: state.tenants.createTenant.fields.configure.customImage,\n  imageName: state.tenants.createTenant.fields.configure.imageName,\n  customDockerhub: state.tenants.createTenant.fields.configure.customDockerhub,\n  imageRegistry: state.tenants.createTenant.fields.configure.imageRegistry,\n  imageRegistryUsername:\n    state.tenants.createTenant.fields.configure.imageRegistryUsername,\n  imageRegistryPassword:\n    state.tenants.createTenant.fields.configure.imageRegistryPassword,\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  prometheusCustom:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  logSearchCustom: state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  kesImage: state.tenants.createTenant.fields.configure.kesImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Images));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  modalBasic,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"../../../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...modalBasic,\n    ...deleteDialogStyles,\n  });\n\ninterface IAddNamespace {\n  classes: any;\n  namespace: string;\n  addNamespaceOpen: boolean;\n  closeAddNamespaceModalAndRefresh: (reloadNamespaceData: boolean) => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst AddNamespaceModal = ({\n  classes,\n  namespace,\n  addNamespaceOpen,\n  closeAddNamespaceModalAndRefresh,\n  setErrorSnackMessage,\n}: IAddNamespace) => {\n  const [addNamespaceLoading, setAddNamespaceLoading] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    if (addNamespaceLoading) {\n      api\n        .invoke(\"POST\", \"/api/v1/namespace\", {\n          name: namespace,\n        })\n        .then((res) => {\n          setAddNamespaceLoading(false);\n          closeAddNamespaceModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddNamespaceLoading(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    addNamespaceLoading,\n    closeAddNamespaceModalAndRefresh,\n    namespace,\n    setErrorSnackMessage,\n  ]);\n\n  const addNamespace = () => {\n    setAddNamespaceLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`New namespace`}\n      confirmText={\"Create\"}\n      confirmButtonProps={{\n        color: \"primary\",\n        variant: \"contained\",\n      }}\n      isOpen={addNamespaceOpen}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={addNamespaceLoading}\n      onConfirm={addNamespace}\n      onClose={() => {\n        closeAddNamespaceModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {addNamespaceLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to add a namespace called\n            <br />\n            <b className={classes.wrapText}>{namespace}</b>?\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(AddNamespaceModal));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { niceBytes } from \"../../../../../common/utils\";\nimport { Opts } from \"../../ListTenants/utils\";\nimport { IResourcesSize } from \"../../ListTenants/types\";\nimport { IErasureCodeCalc } from \"../../../../../common/types\";\n\nimport { Divider } from \"@mui/material\";\nimport { IntegrationConfiguration } from \"./TenantResources/utils\";\n\ninterface ISizePreviewProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  volumeSize: string;\n  sizeFactor: string;\n  drivesPerServer: string;\n  nodes: string;\n  memoryNode: string;\n  ecParity: string;\n  ecParityChoices: Opts[];\n  cleanECChoices: string[];\n  resourcesSize: IResourcesSize;\n  distribution: any;\n  ecParityCalc: IErasureCodeCalc;\n  limitSize: any;\n  selectedStorageClass: string;\n  cpuToUse: string;\n  integrationSelection: IntegrationConfiguration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 4,\n    },\n    table: {\n      \"& .MuiTableCell-root\": {\n        fontSize: 13,\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst SizePreview = ({\n  classes,\n  nodes,\n  memoryNode,\n  ecParity,\n  distribution,\n  ecParityCalc,\n  cpuToUse,\n  integrationSelection,\n}: ISizePreviewProps) => {\n  const usableInformation = ecParityCalc.storageFactors.find(\n    (element) => element.erasureCode === ecParity\n  );\n\n  return (\n    <div className={classes.root}>\n      <h4>Resource Allocation</h4>\n      <Divider />\n      <Table className={classes.table} aria-label=\"simple table\" size={\"small\"}>\n        <TableBody>\n          <TableRow>\n            <TableCell scope=\"row\">Number of Servers</TableCell>\n            <TableCell align=\"right\">\n              {parseInt(nodes) > 0 ? nodes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? distribution.disks : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drive Capacity</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? niceBytes(distribution.pvSize) : \"-\"}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n\n          <TableRow>\n            <TableCell scope=\"row\">Total Volumes</TableCell>\n            <TableCell align=\"right\">\n              {distribution ? distribution.persistentVolumes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory per Node</TableCell>\n                  <TableCell align=\"right\">{memoryNode} Gi</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    CPU Selection\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {cpuToUse}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n        </TableBody>\n      </Table>\n      {ecParityCalc.error === 0 && usableInformation && (\n        <Fragment>\n          <h4>Erasure Code Configuration</h4>\n          <Divider />\n          <Table\n            className={classes.table}\n            aria-label=\"simple table\"\n            size={\"small\"}\n          >\n            <TableBody>\n              <TableRow>\n                <TableCell scope=\"row\">EC Parity</TableCell>\n                <TableCell align=\"right\">\n                  {ecParity !== \"\" ? ecParity : \"-\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Raw Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(ecParityCalc.rawCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Usable Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(usableInformation.maxCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                  Server Failures Tolerated\n                </TableCell>\n                <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                  {distribution\n                    ? Math.floor(\n                        usableInformation.maxFailureTolerations /\n                          distribution.disks\n                      )\n                    : \"-\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Fragment>\n      )}\n      {integrationSelection.typeSelection !== \"\" &&\n        integrationSelection.storageClass !== \"\" && (\n          <Fragment>\n            <h4>Single Instance Configuration</h4>\n            <Divider />\n            <Table\n              className={classes.table}\n              aria-label=\"simple table\"\n              size={\"small\"}\n            >\n              <TableBody>\n                <TableRow>\n                  <TableCell scope=\"row\">CPU</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.CPU !== 0\n                      ? integrationSelection.CPU\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.memory !== 0\n                      ? `${integrationSelection.memory} Gi`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.drivesPerServer !== 0\n                      ? `${integrationSelection.drivesPerServer}`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    Drive Size\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {integrationSelection.driveSize.driveSize}\n                    {integrationSelection.driveSize.sizeUnit}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Fragment>\n        )}\n    </div>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  volumeSize: state.tenants.createTenant.fields.tenantSize.volumeSize,\n  sizeFactor: state.tenants.createTenant.fields.tenantSize.sizeFactor,\n  drivesPerServer: state.tenants.createTenant.fields.tenantSize.drivesPerServer,\n  nodes: state.tenants.createTenant.fields.tenantSize.nodes,\n  memoryNode:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequest,\n  ecParity: state.tenants.createTenant.fields.tenantSize.ecParity,\n  ecParityChoices: state.tenants.createTenant.fields.tenantSize.ecParityChoices,\n  cleanECChoices: state.tenants.createTenant.fields.tenantSize.cleanECChoices,\n  resourcesSize: state.tenants.createTenant.fields.tenantSize.resourcesSize,\n  distribution: state.tenants.createTenant.fields.tenantSize.distribution,\n  ecParityCalc: state.tenants.createTenant.fields.tenantSize.ecParityCalc,\n  limitSize: state.tenants.createTenant.fields.tenantSize.limitSize,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  cpuToUse: state.tenants.createTenant.fields.tenantSize.resourcesCPURequest,\n  integrationSelection:\n    state.tenants.createTenant.fields.tenantSize.integrationSelection,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(SizePreview));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport {\n  isPageValid,\n  setLimitSize,\n  setStorageType,\n  setStorageClassesList,\n  updateAddField,\n} from \"../../../actions\";\nimport {\n  getLimitSizes,\n  IQuotaElement,\n  IQuotas,\n  Opts,\n} from \"../../../ListTenants/utils\";\nimport { AppState } from \"../../../../../../store\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport AddIcon from \"../../../../../../icons/AddIcon\";\nimport AddNamespaceModal from \"../helpers/AddNamespaceModal\";\nimport SizePreview from \"../SizePreview\";\nimport TenantSize from \"./TenantSize\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport { IMkEnvs, mkPanelConfigurations } from \"./utils\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    sizePreview: {\n      position: \"fixed\",\n      marginLeft: 10,\n      background: \"#FFFFFF\",\n      border: \"1px solid #EAEAEA\",\n      padding: 2,\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface INameTenantMainScreen {\n  classes: any;\n  storageClasses: Opts[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setStorageClassesList: typeof setStorageClassesList;\n  setLimitSize: typeof setLimitSize;\n  tenantName: string;\n  namespace: string;\n  selectedStorageClass: string;\n  selectedStorageType: string;\n  formToRender?: IMkEnvs;\n  features?: string[];\n  setStorageType: typeof setStorageType;\n}\n\nconst NameTenantMain = ({\n  classes,\n  storageClasses,\n  tenantName,\n  namespace,\n  selectedStorageClass,\n  selectedStorageType,\n  formToRender = IMkEnvs.default,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setModalErrorSnackMessage,\n  features,\n  setStorageType,\n}: INameTenantMainScreen) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [emptyNamespace, setEmptyNamespace] = useState<boolean>(true);\n  const [loadingNamespaceInfo, setLoadingNamespaceInfo] =\n    useState<boolean>(false);\n  const [showCreateButton, setShowCreateButton] = useState<boolean>(false);\n  const [openAddNSConfirm, setOpenAddNSConfirm] = useState<boolean>(false);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: string) => {\n      updateAddField(\"nameTenant\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Storage classes retrieval\n  const getNamespaceInformation = useCallback(() => {\n    setShowCreateButton(false);\n    // Empty tenantValidation\n    api\n      .invoke(\"GET\", `/api/v1/namespaces/${namespace}/tenants`)\n      .then((res: any[]) => {\n        const tenantsList = get(res, \"tenants\", []);\n\n        if (tenantsList && tenantsList.length > 0) {\n          setEmptyNamespace(false);\n          setLoadingNamespaceInfo(false);\n          return;\n        }\n        setEmptyNamespace(true);\n\n        // Storagequotas retrieval\n        api\n          .invoke(\n            \"GET\",\n            `/api/v1/namespaces/${namespace}/resourcequotas/${namespace}-storagequota`\n          )\n          .then((res: IQuotas) => {\n            const elements: IQuotaElement[] = get(res, \"elements\", []);\n            setLimitSize(getLimitSizes(res));\n\n            const newStorage = elements.map((storageClass: any) => {\n              const name = get(storageClass, \"name\", \"\").split(\n                \".storageclass.storage.k8s.io/requests.storage\"\n              )[0];\n\n              return { label: name, value: name };\n            });\n\n            setStorageClassesList(newStorage);\n\n            const stExists = newStorage.findIndex(\n              (storageClass) => storageClass.value === selectedStorageClass\n            );\n\n            if (newStorage.length > 0 && stExists === -1) {\n              updateField(\"selectedStorageClass\", newStorage[0].value);\n            } else if (newStorage.length === 0) {\n              updateField(\"selectedStorageClass\", \"\");\n              setStorageClassesList([]);\n            }\n            setLoadingNamespaceInfo(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingNamespaceInfo(false);\n            setShowCreateButton(true);\n            updateField(\"selectedStorageClass\", \"\");\n            setStorageClassesList([]);\n            console.error(\"Namespace error: \", err);\n          });\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setModalErrorSnackMessage({\n          errorMessage: \"Error validating if namespace already has tenants\",\n          detailedError: err.detailedError,\n        });\n      });\n  }, [\n    namespace,\n    setLimitSize,\n    setModalErrorSnackMessage,\n    setStorageClassesList,\n    updateField,\n    selectedStorageClass,\n  ]);\n\n  const debounceNamespace = useMemo(\n    () => debounce(getNamespaceInformation, 500),\n    [getNamespaceInformation]\n  );\n\n  useEffect(() => {\n    if (namespace !== \"\") {\n      debounceNamespace();\n      setLoadingNamespaceInfo(true);\n\n      // Cancel previous debounce calls during useEffect cleanup.\n      return debounceNamespace.cancel;\n    }\n  }, [debounceNamespace, namespace]);\n\n  // Validation\n  useEffect(() => {\n    let customNamespaceError = false;\n    let errorMessage = \"\";\n\n    if (!emptyNamespace && !loadingNamespaceInfo) {\n      customNamespaceError = true;\n      errorMessage = \"You can only create one tenant per namespace\";\n    } else if (\n      storageClasses.length < 1 &&\n      emptyNamespace &&\n      !loadingNamespaceInfo\n    ) {\n      customNamespaceError = true;\n      errorMessage = \"Please enter a valid namespace\";\n    }\n\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"tenant-name\",\n        required: true,\n        pattern: /^[a-z0-9-]{3,63}$/,\n        customPatternMessage:\n          \"Name only can contain lowercase letters, numbers and '-'. Min. Length: 3\",\n        value: tenantName,\n      },\n      {\n        fieldKey: \"namespace\",\n        required: true,\n        value: namespace,\n        customValidation: customNamespaceError,\n        customValidationMessage: errorMessage,\n      },\n    ]);\n\n    const isValid =\n      !(\"tenant-name\" in commonValidation) &&\n      !(\"namespace\" in commonValidation) &&\n      ((formToRender === IMkEnvs.default && storageClasses.length > 0) ||\n        (formToRender !== IMkEnvs.default && selectedStorageType !== \"\"));\n\n    isPageValid(\"nameTenant\", isValid);\n\n    setValidationErrors(commonValidation);\n  }, [\n    storageClasses,\n    namespace,\n    tenantName,\n    isPageValid,\n    emptyNamespace,\n    loadingNamespaceInfo,\n    selectedStorageType,\n    formToRender,\n  ]);\n\n  const frmValidationCleanup = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const addNamespace = () => {\n    setOpenAddNSConfirm(true);\n  };\n\n  const closeAddNamespace = (refresh: boolean) => {\n    setOpenAddNSConfirm(false);\n\n    if (refresh) {\n      debounceNamespace();\n    }\n  };\n\n  return (\n    <Fragment>\n      {openAddNSConfirm && (\n        <AddNamespaceModal\n          addNamespaceOpen={openAddNSConfirm}\n          closeAddNamespaceModalAndRefresh={closeAddNamespace}\n          namespace={namespace}\n        />\n      )}\n      <Grid container>\n        <Grid item xs={8} md={9}>\n          <Paper className={classes.paperWrapper} sx={{ minHeight: 550 }}>\n            <Grid container>\n              <Grid item xs={12}>\n                <div className={classes.headerElement}>\n                  <h3 className={classes.h3Section}>Name</h3>\n                  <span className={classes.descriptionText}>\n                    How would you like to name this new tenant?\n                  </span>\n                </div>\n                <div className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"tenant-name\"\n                    name=\"tenant-name\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantName\", e.target.value);\n                      frmValidationCleanup(\"tenant-name\");\n                    }}\n                    label=\"Name\"\n                    value={tenantName}\n                    required\n                    error={validationErrors[\"tenant-name\"] || \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"namespace\"\n                  name=\"namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"namespace\", e.target.value);\n                    frmValidationCleanup(\"namespace\");\n                  }}\n                  label=\"Namespace\"\n                  value={namespace}\n                  error={validationErrors[\"namespace\"] || \"\"}\n                  overlayId={\"add-namespace\"}\n                  overlayIcon={showCreateButton ? <AddIcon /> : null}\n                  overlayAction={addNamespace}\n                  required\n                />\n              </Grid>\n              {formToRender === IMkEnvs.default ? (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_class\"\n                    name=\"storage_class\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      updateField(\n                        \"selectedStorageClass\",\n                        e.target.value as string\n                      );\n                    }}\n                    label=\"Storage Class\"\n                    value={selectedStorageClass}\n                    options={storageClasses}\n                    disabled={storageClasses.length < 1}\n                  />\n                </Grid>\n              ) : (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_type\"\n                    name=\"storage_type\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      setStorageType(e.target.value as string, features);\n                    }}\n                    label={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorLabel`,\n                      \"Storage Type\"\n                    )}\n                    value={selectedStorageType}\n                    options={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorValues`,\n                      []\n                    )}\n                  />\n                </Grid>\n              )}\n              {formToRender === IMkEnvs.default ? (\n                <TenantSize />\n              ) : (\n                get(\n                  mkPanelConfigurations,\n                  `${formToRender}.sizingComponent`,\n                  null\n                )\n              )}\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={4} md={3}>\n          <div className={classes.sizePreview}>\n            <SizePreview />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  tenantName: state.tenants.createTenant.fields.nameTenant.tenantName,\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  selectedStorageType:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageType,\n  storageClasses: state.tenants.createTenant.storageClasses,\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setStorageType,\n});\n\nexport default withStyles(styles)(connector(NameTenantMain));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport NameTenantMain from \"./NameTenantMain\";\nimport { IMkEnvs, resourcesConfigurations } from \"./utils\";\nimport { AppState } from \"../../../../../../store\";\n\ninterface ITenantResources {\n  features?: string[];\n}\n\nconst TenantResources = ({ features }: ITenantResources) => {\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  if (formRender === null) {\n    return null;\n  }\n\n  return <NameTenantMain formToRender={formRender} />;\n};\n\nconst mapState = (state: AppState) => ({\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, null);\n\nexport default connector(TenantResources);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  logSearchEnabled: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  logSearchSecurityContext: ISecurityContext;\n  logSearchPostgresSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    logSearchEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigLogSearch = ({\n  classes,\n  storageClasses,\n  logSearchEnabled,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  logSearchSelectedStorageClass,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  logSearchSecurityContext,\n  logSearchPostgresSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (logSearchEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsUser\",\n          required: true,\n          value: logSearchSecurityContext.runAsUser,\n          customValidation:\n            logSearchSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_fsGroup\",\n          required: true,\n          value: logSearchSecurityContext.fsGroup,\n          customValidation:\n            logSearchSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsUser\",\n          required: true,\n          value: logSearchPostgresSecurityContext.runAsUser,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_fsGroup\",\n          required: true,\n          value: logSearchPostgresSecurityContext.fsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    logSearchImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    isPageValid,\n    logSearchEnabled,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n    tenantSecurityContext,\n    logSearchSecurityContext,\n    logSearchPostgresSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterLogSearch = storageClasses.filter(\n        (item: any) => item.value === logSearchSelectedStorageClass\n      );\n      if (filterLogSearch.length === 0) {\n        updateField(\"logSearchSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    logSearchSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Audit Log</h3>\n        <span className={classes.descriptionText}>\n          Audit log deploys a small PostgreSQL database and store access logs of\n          all calls into the tenant.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"logSearchConfig\"\n          id=\"log-search-enabled\"\n          name=\"log_search_enabled\"\n          checked={logSearchEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"logSearchEnabled\", checked);\n          }}\n          label={\"Enabled\"}\n        />\n      </Grid>\n      {logSearchEnabled && (\n        <Grid xs={12} className={classes.logSearchEnabledFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"log_search_storage_class\"\n              name=\"log_search_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"logSearchSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Log Search Storage Class\"\n              value={logSearchSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"log_search_volume_size\"\n                name=\"log_search_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"logSearchVolumeSize\", e.target.value);\n                  cleanValidation(\"log_search_volume_size\");\n                }}\n                label=\"Storage Size\"\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n                value={logSearchVolumeSize}\n                required\n                error={validationErrors[\"log_search_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for LogSearch\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsUser\"\n                    name=\"logSearch_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsGroup\"\n                    name=\"logSearch_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"logSearch_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_fsGroup\"\n                    name=\"logSearch_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"logSearchSecurityContextRunAsNonRoot\"\n                  id=\"logSearch_securityContext_runAsNonRoot\"\n                  name=\"logSearch_securityContext_runAsNonRoot\"\n                  checked={logSearchSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchSecurityContext\", {\n                      ...logSearchSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for PostgreSQL\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsUser\"\n                    name=\"postgres_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchPostgresSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsGroup\"\n                    name=\"postgres_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchPostgresSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_fsGroup\"\n                    name=\"postgres_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchPostgresSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"postgresSecurityContextRunAsNonRoot\"\n                  id=\"postgres_securityContext_runAsNonRoot\"\n                  name=\"postgres_securityContext_runAsNonRoot\"\n                  checked={logSearchPostgresSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchPostgresSecurityContext\", {\n                      ...logSearchPostgresSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  logSearchEnabled:\n    state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  logSearchSecurityContext:\n    state.tenants.createTenant.fields.configure.logSearchSecurityContext,\n  logSearchPostgresSecurityContext:\n    state.tenants.createTenant.fields.configure\n      .logSearchPostgresSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigLogSearch));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  prometheusEnabled: boolean;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  prometheusSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    prometheusEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigPrometheus = ({\n  classes,\n  storageClasses,\n  prometheusEnabled,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  prometheusSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greater than 0`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsUser\",\n          required: true,\n          value: prometheusSecurityContext.runAsUser,\n          customValidation:\n            prometheusSecurityContext.runAsUser === \"\" ||\n            parseInt(prometheusSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsGroup\",\n          required: true,\n          value: prometheusSecurityContext.runAsGroup,\n          customValidation:\n            prometheusSecurityContext.runAsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_fsGroup\",\n          required: true,\n          value: prometheusSecurityContext.fsGroup,\n          customValidation:\n            prometheusSecurityContext.fsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    isPageValid,\n    prometheusEnabled,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    tenantSecurityContext,\n    prometheusSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterPrometheus = storageClasses.filter(\n        (item: any) => item.value === prometheusSelectedStorageClass\n      );\n      if (filterPrometheus.length === 0) {\n        updateField(\"prometheusSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    prometheusSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Monitoring</h3>\n        <span className={classes.descriptionText}>\n          A small Prometheus will be deployed to keep metrics about the tenant.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"prometheusConfig\"\n          id=\"prometheus_configuration\"\n          name=\"prometheus_configuration\"\n          checked={prometheusEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"prometheusEnabled\", checked);\n          }}\n          label={\"Enabled\"}\n        />\n      </Grid>\n      {prometheusEnabled && (\n        <Grid xs={12} className={classes.prometheusEnabledFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"prometheus_storage_class\"\n              name=\"prometheus_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"prometheusSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Prometheus Storage Class\"\n              value={prometheusSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"prometheus_volume_size\"\n                name=\"prometheus_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"prometheusVolumeSize\", e.target.value);\n                  cleanValidation(\"prometheus_volume_size\");\n                }}\n                label=\"Storage Size\"\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n                value={prometheusVolumeSize}\n                required\n                error={validationErrors[\"prometheus_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for Prometheus\n            </legend>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsUser\"\n                    name=\"prometheus_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={prometheusSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsUser\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsGroup\"\n                    name=\"prometheus_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={prometheusSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_fsGroup\"\n                    name=\"prometheus_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={prometheusSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"prometheus_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.fieldSpaceTop}`}\n              >\n                <FormSwitchWrapper\n                  value=\"prometheusSecurityContextRunAsNonRoot\"\n                  id=\"prometheus_securityContext_runAsNonRoot\"\n                  name=\"prometheus_securityContext_runAsNonRoot\"\n                  checked={prometheusSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"prometheusSecurityContext\", {\n                      ...prometheusSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  prometheusEnabled:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  prometheusSecurityContext:\n    state.tenants.createTenant.fields.configure.prometheusSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigPrometheus));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress } from \"@mui/material\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalBasic,\n  settingsCommon,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport api from \"../../../../common/api\";\nimport { generatePoolName, getBytes } from \"../../../../common/utils\";\nimport GenericWizard from \"../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../Common/GenericWizard/types\";\nimport { NewServiceAccount } from \"../../Common/CredentialsPrompt/types\";\nimport { ErrorResponseHandler, ITenantCreator } from \"../../../../common/types\";\nimport { KeyPair } from \"../ListTenants/utils\";\n\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { getDefaultAffinity, getNodeSelector } from \"../TenantDetails/utils\";\nimport CredentialsPrompt from \"../../Common/CredentialsPrompt/CredentialsPrompt\";\nimport { AppState } from \"../../../../store\";\nimport { ICertificatesItems, IFieldStore } from \"../types\";\nimport { resetAddTenantForm, updateAddField } from \"../actions\";\nimport Configure from \"./Steps/Configure\";\nimport IdentityProvider from \"./Steps/IdentityProvider\";\nimport Security from \"./Steps/Security\";\nimport Encryption from \"./Steps/Encryption\";\nimport Affinity from \"./Steps/Affinity\";\nimport PageHeader from \"../../Common/PageHeader/PageHeader\";\nimport history from \"../../../../history\";\nimport Images from \"./Steps/Images\";\nimport PageLayout from \"../../Common/Layout/PageLayout\";\nimport BackLink from \"../../../../common/BackLink\";\nimport TenantResources from \"./Steps/TenantResources/TenantResources\";\nimport ConfigLogSearch from \"./Steps/ConfigLogSearch\";\nimport ConfigPrometheus from \"./Steps/ConfigPrometheus\";\nimport {\n  IMkEnvs,\n  resourcesConfigurations,\n} from \"./Steps/TenantResources/utils\";\nimport HelpBox from \"../../../../common/HelpBox\";\nimport { StorageIcon } from \"../../../../icons\";\n\ninterface IAddTenantProps {\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  resetAddTenantForm: typeof resetAddTenantForm;\n  updateAddField: typeof updateAddField;\n  fields: IFieldStore;\n  certificates: ICertificatesItems;\n  selectedStorageClass: string;\n  namespace: string;\n  validPages: string[];\n  classes: any;\n  features?: string[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n    ...settingsCommon,\n  });\n\nconst AddTenant = ({\n  classes,\n  fields,\n  certificates,\n  selectedStorageClass,\n  namespace,\n  validPages,\n  setErrorSnackMessage,\n  resetAddTenantForm,\n  features,\n}: IAddTenantProps) => {\n  // Modals\n  const [showNewCredentials, setShowNewCredentials] = useState<boolean>(false);\n  const [createdAccount, setCreatedAccount] =\n    useState<NewServiceAccount | null>(null);\n\n  // Fields\n  const [addSending, setAddSending] = useState<boolean>(false);\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  /* Send Information to backend */\n  useEffect(() => {\n    const tenantName = fields.nameTenant.tenantName;\n    const selectedStorageClass = fields.nameTenant.selectedStorageClass;\n    const imageName = fields.configure.imageName;\n    const customDockerhub = fields.configure.customDockerhub;\n    const imageRegistry = fields.configure.imageRegistry;\n    const imageRegistryUsername = fields.configure.imageRegistryUsername;\n    const imageRegistryPassword = fields.configure.imageRegistryPassword;\n    const exposeMinIO = fields.configure.exposeMinIO;\n    const exposeConsole = fields.configure.exposeConsole;\n    const idpSelection = fields.identityProvider.idpSelection;\n    const openIDConfigurationURL =\n      fields.identityProvider.openIDConfigurationURL;\n    const openIDClientID = fields.identityProvider.openIDClientID;\n    const openIDClaimName = fields.identityProvider.openIDClaimName;\n    const openIDCallbackURL = fields.identityProvider.openIDCallbackURL;\n    const openIDScopes = fields.identityProvider.openIDScopes;\n    const openIDSecretID = fields.identityProvider.openIDSecretID;\n    const ADURL = fields.identityProvider.ADURL;\n    const ADSkipTLS = fields.identityProvider.ADSkipTLS;\n    const ADServerInsecure = fields.identityProvider.ADServerInsecure;\n    const ADGroupSearchBaseDN = fields.identityProvider.ADGroupSearchBaseDN;\n    const ADGroupSearchFilter = fields.identityProvider.ADGroupSearchFilter;\n    const ADUserDNs = fields.identityProvider.ADUserDNs;\n    const ADLookupBindDN = fields.identityProvider.ADLookupBindDN;\n    const ADLookupBindPassword = fields.identityProvider.ADLookupBindPassword;\n    const ADUserDNSearchBaseDN = fields.identityProvider.ADUserDNSearchBaseDN;\n    const ADUserDNSearchFilter = fields.identityProvider.ADUserDNSearchFilter;\n    const ADServerStartTLS = fields.identityProvider.ADServerStartTLS;\n    const accessKeys = fields.identityProvider.accessKeys;\n    const secretKeys = fields.identityProvider.secretKeys;\n    const minioCertificates = certificates.minioCertificates;\n    const caCertificates = certificates.caCertificates;\n    const consoleCaCertificates = certificates.consoleCaCertificates;\n    const consoleCertificate = certificates.consoleCertificate;\n    const serverCertificate = certificates.serverCertificate;\n    const clientCertificate = certificates.clientCertificate;\n    const vaultCertificate = certificates.vaultCertificate;\n    const vaultCA = certificates.vaultCA;\n    const gemaltoCA = certificates.gemaltoCA;\n    const enableEncryption = fields.encryption.enableEncryption;\n    const encryptionType = fields.encryption.encryptionType;\n    const gemaltoEndpoint = fields.encryption.gemaltoEndpoint;\n    const gemaltoToken = fields.encryption.gemaltoToken;\n    const gemaltoDomain = fields.encryption.gemaltoDomain;\n    const gemaltoRetry = fields.encryption.gemaltoRetry;\n    const awsEndpoint = fields.encryption.awsEndpoint;\n    const awsRegion = fields.encryption.awsRegion;\n    const awsKMSKey = fields.encryption.awsKMSKey;\n    const awsAccessKey = fields.encryption.awsAccessKey;\n    const awsSecretKey = fields.encryption.awsSecretKey;\n    const awsToken = fields.encryption.awsToken;\n    const vaultEndpoint = fields.encryption.vaultEndpoint;\n    const vaultEngine = fields.encryption.vaultEngine;\n    const vaultNamespace = fields.encryption.vaultNamespace;\n    const vaultPrefix = fields.encryption.vaultPrefix;\n    const vaultAppRoleEngine = fields.encryption.vaultAppRoleEngine;\n    const vaultId = fields.encryption.vaultId;\n    const vaultSecret = fields.encryption.vaultSecret;\n    const vaultRetry = fields.encryption.vaultRetry;\n    const vaultPing = fields.encryption.vaultPing;\n    const azureEndpoint = fields.encryption.azureEndpoint;\n    const azureTenantID = fields.encryption.azureTenantID;\n    const azureClientID = fields.encryption.azureClientID;\n    const azureClientSecret = fields.encryption.azureClientSecret;\n    const gcpProjectID = fields.encryption.gcpProjectID;\n    const gcpEndpoint = fields.encryption.gcpEndpoint;\n    const gcpClientEmail = fields.encryption.gcpClientEmail;\n    const gcpClientID = fields.encryption.gcpClientID;\n    const gcpPrivateKeyID = fields.encryption.gcpPrivateKeyID;\n    const gcpPrivateKey = fields.encryption.gcpPrivateKey;\n    const enableAutoCert = fields.security.enableAutoCert;\n    const enableTLS = fields.security.enableTLS;\n    const ecParity = fields.tenantSize.ecParity;\n    const distribution = fields.tenantSize.distribution;\n    const tenantCustom = fields.configure.tenantCustom;\n    const logSearchEnabled = fields.configure.logSearchEnabled;\n    const prometheusEnabled = fields.configure.prometheusEnabled;\n    const logSearchVolumeSize = fields.configure.logSearchVolumeSize;\n    const logSearchSelectedStorageClass =\n      fields.configure.logSearchSelectedStorageClass;\n    const logSearchImage = fields.configure.logSearchImage;\n    const kesImage = fields.configure.kesImage;\n    const logSearchPostgresImage = fields.configure.logSearchPostgresImage;\n    const logSearchPostgresInitImage =\n      fields.configure.logSearchPostgresInitImage;\n    const prometheusImage = fields.configure.prometheusImage;\n    const prometheusSidecarImage = fields.configure.prometheusSidecarImage;\n    const prometheusInitImage = fields.configure.prometheusInitImage;\n    const prometheusSelectedStorageClass =\n      fields.configure.prometheusSelectedStorageClass;\n    const prometheusVolumeSize = fields.configure.prometheusVolumeSize;\n    const affinityType = fields.affinity.podAffinity;\n    const nodeSelectorLabels = fields.affinity.nodeSelectorLabels;\n    const withPodAntiAffinity = fields.affinity.withPodAntiAffinity;\n\n    const tenantSecurityContext = fields.configure.tenantSecurityContext;\n    const logSearchSecurityContext = fields.configure.logSearchSecurityContext;\n    const logSearchPostgresSecurityContext =\n      fields.configure.logSearchPostgresSecurityContext;\n    const prometheusSecurityContext =\n      fields.configure.prometheusSecurityContext;\n    const kesSecurityContext = fields.encryption.kesSecurityContext;\n    const kesReplicas = fields.encryption.replicas;\n\n    if (addSending) {\n      const poolName = generatePoolName([]);\n\n      let affinityObject = {};\n\n      switch (affinityType) {\n        case \"default\":\n          affinityObject = {\n            affinity: getDefaultAffinity(tenantName, poolName),\n          };\n          break;\n        case \"nodeSelector\":\n          affinityObject = {\n            affinity: getNodeSelector(\n              nodeSelectorLabels,\n              withPodAntiAffinity,\n              tenantName,\n              poolName\n            ),\n          };\n          break;\n      }\n\n      const erasureCode = ecParity.split(\":\")[1];\n\n      let dataSend: ITenantCreator = {\n        name: tenantName,\n        namespace: namespace,\n        access_key: \"\",\n        secret_key: \"\",\n        access_keys: [],\n        secret_keys: [],\n        enable_tls: enableTLS && enableAutoCert,\n        enable_console: true,\n        enable_prometheus: true,\n        service_name: \"\",\n        image: imageName,\n        expose_minio: exposeMinIO,\n        expose_console: exposeConsole,\n        pools: [\n          {\n            name: poolName,\n            servers: distribution.nodes,\n            volumes_per_server: distribution.disks,\n            volume_configuration: {\n              size: distribution.pvSize,\n              storage_class_name: selectedStorageClass,\n            },\n            securityContext: tenantCustom ? tenantSecurityContext : null,\n            ...affinityObject,\n          },\n        ],\n        erasureCodingParity: parseInt(erasureCode, 10),\n      };\n\n      // Set Resources\n      if (\n        fields.tenantSize.resourcesCPURequest !== \"\" ||\n        fields.tenantSize.resourcesCPULimit !== \"\" ||\n        fields.tenantSize.resourcesMemoryRequest !== \"\" ||\n        fields.tenantSize.resourcesMemoryLimit !== \"\"\n      ) {\n        dataSend.pools[0].resources = {};\n        // requests\n        if (\n          fields.tenantSize.resourcesCPURequest !== \"\" ||\n          fields.tenantSize.resourcesMemoryRequest !== \"\"\n        ) {\n          dataSend.pools[0].resources.requests = {};\n          if (fields.tenantSize.resourcesCPURequest !== \"\") {\n            dataSend.pools[0].resources.requests.cpu = parseInt(\n              fields.tenantSize.resourcesCPURequest\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryRequest !== \"\") {\n            dataSend.pools[0].resources.requests.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryRequest, \"Gi\", true)\n            );\n          }\n        }\n        // limits\n        if (\n          fields.tenantSize.resourcesCPULimit !== \"\" ||\n          fields.tenantSize.resourcesMemoryLimit !== \"\"\n        ) {\n          dataSend.pools[0].resources.limits = {};\n          if (fields.tenantSize.resourcesCPULimit !== \"\") {\n            dataSend.pools[0].resources.limits.cpu = parseInt(\n              fields.tenantSize.resourcesCPULimit\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryLimit !== \"\") {\n            dataSend.pools[0].resources.limits.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryLimit, \"Gi\", true)\n            );\n          }\n        }\n      }\n      if (customDockerhub) {\n        dataSend = {\n          ...dataSend,\n          image_registry: {\n            registry: imageRegistry,\n            username: imageRegistryUsername,\n            password: imageRegistryPassword,\n          },\n        };\n      }\n\n      if (logSearchEnabled) {\n        dataSend = {\n          ...dataSend,\n          logSearchConfiguration: {\n            storageClass:\n              logSearchSelectedStorageClass === \"default\"\n                ? \"\"\n                : logSearchSelectedStorageClass,\n            storageSize: parseInt(logSearchVolumeSize),\n            image: logSearchImage,\n            postgres_image: logSearchPostgresImage,\n            postgres_init_image: logSearchPostgresInitImage,\n            securityContext: logSearchSecurityContext,\n            postgres_securityContext: logSearchPostgresSecurityContext,\n          },\n        };\n      }\n\n      if (prometheusEnabled) {\n        dataSend = {\n          ...dataSend,\n          prometheusConfiguration: {\n            storageClass:\n              prometheusSelectedStorageClass === \"default\"\n                ? \"\"\n                : prometheusSelectedStorageClass,\n            storageSize: parseInt(prometheusVolumeSize),\n            image: prometheusImage,\n            sidecar_image: prometheusSidecarImage,\n            init_image: prometheusInitImage,\n            securityContext: prometheusSecurityContext,\n          },\n        };\n      }\n\n      let tenantCerts: any = null;\n      let consoleCerts: any = null;\n      let caCerts: any = null;\n      let consoleCaCerts: any = null;\n\n      if (caCertificates.length > 0) {\n        caCerts = {\n          ca_certificates: caCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (consoleCaCertificates.length > 0) {\n        consoleCaCerts = {\n          console_ca_certificates: consoleCaCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (enableTLS && minioCertificates.length > 0) {\n        tenantCerts = {\n          minio: minioCertificates\n            .map((keyPair: KeyPair) => ({\n              crt: keyPair.encoded_cert,\n              key: keyPair.encoded_key,\n            }))\n            .filter((keyPair) => keyPair.crt && keyPair.key),\n        };\n      }\n\n      if (\n        enableTLS &&\n        consoleCertificate.encoded_cert !== \"\" &&\n        consoleCertificate.encoded_key !== \"\"\n      ) {\n        consoleCerts = {\n          console: {\n            crt: consoleCertificate.encoded_cert,\n            key: consoleCertificate.encoded_key,\n          },\n        };\n      }\n\n      if (tenantCerts || consoleCerts || caCerts || consoleCaCerts) {\n        dataSend = {\n          ...dataSend,\n          tls: {\n            ...tenantCerts,\n            ...consoleCerts,\n            ...caCerts,\n            ...consoleCaCerts,\n          },\n        };\n      }\n\n      if (enableEncryption) {\n        let insertEncrypt = {};\n\n        switch (encryptionType) {\n          case \"gemalto\":\n            let gemaltoCAIntroduce = {};\n\n            if (gemaltoCA.encoded_cert !== \"\") {\n              gemaltoCAIntroduce = {\n                ca: gemaltoCA.encoded_cert,\n              };\n            }\n            insertEncrypt = {\n              gemalto: {\n                keysecure: {\n                  endpoint: gemaltoEndpoint,\n                  credentials: {\n                    token: gemaltoToken,\n                    domain: gemaltoDomain,\n                    retry: parseInt(gemaltoRetry),\n                  },\n                  tls: {\n                    ...gemaltoCAIntroduce,\n                  },\n                },\n              },\n            };\n            break;\n          case \"aws\":\n            insertEncrypt = {\n              aws: {\n                secretsmanager: {\n                  endpoint: awsEndpoint,\n                  region: awsRegion,\n                  kmskey: awsKMSKey,\n                  credentials: {\n                    accesskey: awsAccessKey,\n                    secretkey: awsSecretKey,\n                    token: awsToken,\n                  },\n                },\n              },\n            };\n            break;\n          case \"azure\":\n            insertEncrypt = {\n              azure: {\n                keyvault: {\n                  endpoint: azureEndpoint,\n                  credentials: {\n                    tenant_id: azureTenantID,\n                    client_id: azureClientID,\n                    client_secret: azureClientSecret,\n                  },\n                },\n              },\n            };\n            break;\n          case \"gcp\":\n            insertEncrypt = {\n              gcp: {\n                secretmanager: {\n                  project_id: gcpProjectID,\n                  endpoint: gcpEndpoint,\n                  credentials: {\n                    client_email: gcpClientEmail,\n                    client_id: gcpClientID,\n                    private_key_id: gcpPrivateKeyID,\n                    private_key: gcpPrivateKey,\n                  },\n                },\n              },\n            };\n            break;\n          case \"vault\":\n            let vaultKeyPair = null;\n            let vaultCAInsert = null;\n            if (\n              vaultCertificate.encoded_key !== \"\" &&\n              vaultCertificate.encoded_cert !== \"\"\n            ) {\n              vaultKeyPair = {\n                key: vaultCertificate.encoded_key,\n                crt: vaultCertificate.encoded_cert,\n              };\n            }\n            if (vaultCA.encoded_cert !== \"\") {\n              vaultCAInsert = {\n                ca: vaultCA.encoded_cert,\n              };\n            }\n            let vaultTLS = null;\n            if (vaultKeyPair || vaultCAInsert) {\n              vaultTLS = {\n                tls: {\n                  ...vaultKeyPair,\n                  ...vaultCAInsert,\n                },\n              };\n            }\n            insertEncrypt = {\n              vault: {\n                endpoint: vaultEndpoint,\n                engine: vaultEngine,\n                namespace: vaultNamespace,\n                prefix: vaultPrefix,\n                approle: {\n                  engine: vaultAppRoleEngine,\n                  id: vaultId,\n                  secret: vaultSecret,\n                  retry: parseInt(vaultRetry),\n                },\n                ...vaultTLS,\n                status: {\n                  ping: parseInt(vaultPing),\n                },\n              },\n            };\n            break;\n        }\n\n        let encryptionServerKeyPair: any = {};\n        let encryptionClientKeyPair: any = {};\n\n        if (\n          clientCertificate.encoded_key !== \"\" &&\n          clientCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionClientKeyPair = {\n            client: {\n              key: clientCertificate.encoded_key,\n              crt: clientCertificate.encoded_cert,\n            },\n          };\n        }\n\n        if (\n          serverCertificate.encoded_key !== \"\" &&\n          serverCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionServerKeyPair = {\n            server: {\n              key: serverCertificate.encoded_key,\n              crt: serverCertificate.encoded_cert,\n            },\n          };\n        }\n\n        dataSend = {\n          ...dataSend,\n          encryption: {\n            replicas: kesReplicas,\n            securityContext: kesSecurityContext,\n            image: kesImage,\n            ...encryptionClientKeyPair,\n            ...encryptionServerKeyPair,\n            ...insertEncrypt,\n          },\n        };\n      }\n\n      let dataIDP: any = {};\n      switch (idpSelection) {\n        case \"Built-in\":\n          let keyarray = [];\n          for (let i = 0; i < accessKeys.length; i++) {\n            keyarray.push({\n              access_key: accessKeys[i],\n              secret_key: secretKeys[i],\n            });\n          }\n          dataIDP = {\n            keys: keyarray,\n          };\n          break;\n        case \"OpenID\":\n          dataIDP = {\n            oidc: {\n              configuration_url: openIDConfigurationURL,\n              client_id: openIDClientID,\n              secret_id: openIDSecretID,\n              claim_name: openIDClaimName,\n              callback_url: openIDCallbackURL,\n              scopes: openIDScopes,\n            },\n          };\n          break;\n        case \"AD\":\n          dataIDP = {\n            active_directory: {\n              url: ADURL,\n              skip_tls_verification: ADSkipTLS,\n              server_insecure: ADServerInsecure,\n              group_search_base_dn: ADGroupSearchBaseDN,\n              group_search_filter: ADGroupSearchFilter,\n              user_dns: ADUserDNs,\n              lookup_bind_dn: ADLookupBindDN,\n              lookup_bind_password: ADLookupBindPassword,\n              user_dn_search_base_dn: ADUserDNSearchBaseDN,\n              user_dn_search_filter: ADUserDNSearchFilter,\n              server_start_tls: ADServerStartTLS,\n            },\n          };\n          break;\n      }\n\n      dataSend = {\n        ...dataSend,\n        idp: { ...dataIDP },\n      };\n      api\n        .invoke(\"POST\", `/api/v1/tenants`, dataSend)\n        .then((res) => {\n          const consoleSAList = get(res, \"console\", []);\n\n          let newSrvAcc: NewServiceAccount = {\n            idp: get(res, \"externalIDP\", false),\n            console: [],\n          };\n\n          if (consoleSAList) {\n            if (Array.isArray(consoleSAList)) {\n              const consoleItem = consoleSAList.map((consoleKey) => {\n                return {\n                  accessKey: consoleKey.access_key,\n                  secretKey: consoleKey.secret_key,\n                  api: \"s3v4\",\n                  path: \"auto\",\n                  url: consoleKey.url,\n                };\n              });\n\n              newSrvAcc.console = consoleItem;\n            } else {\n              newSrvAcc = {\n                console: {\n                  accessKey: res.console.access_key,\n                  secretKey: res.console.secret_key,\n                  url: res.console.url,\n                },\n              };\n            }\n          }\n          setAddSending(false);\n          setShowNewCredentials(true);\n          setCreatedAccount(newSrvAcc);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          setErrorSnackMessage(err);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addSending]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      resetAddTenantForm();\n      history.push(\"/tenants\");\n    },\n  };\n  const requiredPages = [\n    \"nameTenant\",\n    \"tenantSize\",\n    \"configure\",\n    \"affinity\",\n    \"identityProvider\",\n    \"security\",\n    \"encryption\",\n  ];\n  const createButton = {\n    label: \"Create\",\n    type: \"submit\",\n    enabled:\n      !addSending &&\n      selectedStorageClass !== \"\" &&\n      requiredPages.every((v) => validPages.includes(v)),\n    action: () => {\n      setAddSending(true);\n    },\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <TenantResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configure\",\n      advancedOnly: true,\n      componentRender: <Configure />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Images\",\n      advancedOnly: true,\n      componentRender: <Images />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <Affinity />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Identity Provider\",\n      advancedOnly: true,\n      componentRender: <IdentityProvider />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Security\",\n      advancedOnly: true,\n      componentRender: <Security />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Encryption\",\n      advancedOnly: true,\n      componentRender: <Encryption />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Audit Log\",\n      advancedOnly: true,\n      componentRender: <ConfigLogSearch />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Monitoring\",\n      advancedOnly: true,\n      componentRender: <ConfigPrometheus />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  let filteredWizardSteps = wizardSteps;\n\n  const closeCredentialsModal = () => {\n    resetAddTenantForm();\n    history.push(\"/tenants\");\n  };\n\n  return (\n    <Fragment>\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={createdAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Tenant\"\n        />\n      )}\n      <PageHeader label={\"Create New Tenant\"} />\n\n      <PageLayout>\n        {addSending && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        )}\n\n        <Grid item xs={12}>\n          <BackLink\n            to={\"/tenants\"}\n            label={\"Tenant List\"}\n            executeOnClick={resetAddTenantForm}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.pageBox}>\n          <GenericWizard wizardSteps={filteredWizardSteps} />\n        </Grid>\n        {formRender === IMkEnvs.aws && (\n          <Grid item xs={12} style={{ marginTop: 16 }}>\n            <HelpBox\n              title={\"EBS Volume Configuration.\"}\n              iconComponent={<StorageIcon />}\n              help={\n                <Fragment>\n                  <b>Performance Optimized</b>: Uses the <i>gp3</i> EBS storage\n                  class class configured at 1,000Mi/s throughput and 16,000\n                  IOPS, however the minimum volume size for this type of EBS\n                  volume is <b>32Gi</b>.\n                  <br />\n                  <br />\n                  <b>Storage Optimized</b>: Uses the <i>sc1</i> EBS storage\n                  class, however the minimum volume size for this type of EBS\n                  volume is &nbsp;\n                  <b>16Ti</b> to unlock their maximum throughput speed of\n                  250Mi/s.\n                </Fragment>\n              }\n            />\n          </Grid>\n        )}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  validPages: state.tenants.createTenant.validPages,\n  fields: state.tenants.createTenant.fields,\n  certificates: state.tenants.createTenant.certificates,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  updateAddField,\n  resetAddTenantForm,\n});\n\nexport default withStyles(styles)(connector(AddTenant));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport { IAffinityModel } from \"../../../../common/types\";\n\nexport const getDefaultAffinity = (tenantName: string, poolName: string) => {\n  const defaultAffinity: IAffinityModel = {\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: [\n        {\n          labelSelector: {\n            matchExpressions: [\n              {\n                key: \"v1.min.io/tenant\",\n                operator: \"In\",\n                values: [tenantName],\n              },\n              {\n                key: \"v1.min.io/pool\",\n                operator: \"In\",\n                values: [poolName],\n              },\n            ],\n          },\n          topologyKey: \"kubernetes.io/hostname\",\n        },\n      ],\n    },\n  };\n  return defaultAffinity;\n};\n\nexport const getNodeSelector = (\n  labels: string,\n  withPodAntiAffinity: boolean,\n  tenantName: string,\n  poolName: string\n) => {\n  // Labels in the form of key1=value1&key2=value2&key3=value3...\n  const splittedLabels = labels.split(\"&\");\n  let matchExpressions: any = [];\n\n  splittedLabels.forEach((label: string) => {\n    const splitKeyValue = label.split(\"=\");\n    if (splitKeyValue.length === 2) {\n      matchExpressions.push({\n        key: splitKeyValue[0],\n        operator: \"In\",\n        values: [splitKeyValue[1]],\n      });\n    }\n  });\n\n  const nodeSelector: IAffinityModel = {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: [\n          {\n            matchExpressions: matchExpressions,\n          },\n        ],\n      },\n    },\n  };\n  if (withPodAntiAffinity) {\n    const def = getDefaultAffinity(tenantName, poolName);\n    nodeSelector.podAntiAffinity = def.podAntiAffinity;\n  }\n  console.log(nodeSelector);\n  return nodeSelector;\n};\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","link","display","textDecoration","color","palette","primary","light","iconBox","flexDirection","background","height","paddingBottom","paddingTop","paddingRight","paddingLeft","borderRadius","icon","lineHeight","marginRight","alignItems","width","label","fontSize","fontWeight","to","classes","className","executeOnClick","sx","onClick","container","flexFlow","padding","inputWithCopy","inputLabel","fieldBasic","value","OutlinedInput","readOnly","endAdornment","InputAdornment","position","text","BoxIconButton","tooltip","onMouseDown","edge","download","filename","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","warningBlock","margin","credentialTitle","buttonContainer","textAlign","marginTop","credentialsPanel","overflowY","maxHeight","promptTitle","buttonSpacer","promptIcon","newServiceAccount","open","closeModal","entity","consoleCreds","get","idp","ModalWrapper","modalOpen","onClose","title","titleIcon","Grid","item","xs","formScrollable","Array","isArray","map","credentialsPair","index","accessKey","secretKey","WarnIcon","RBIconButton","id","consoleExtras","itemMap","url","api","path","JSON","stringify","variant","length","allCredentials","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","fileInputField","fileInputStyles","textBoxContainer","border","onChange","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","placement","HelpIcon","type","e","fileName","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","fileProcess","data","IconButton","component","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","pageContentStyles","children","contentSpacer","deleteDialogStyles","isOpen","onCancel","onConfirm","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","event","reason","root","titleText","closeContainer","closeButton","content","actions","cancelButton","confirmButton","loading","loadingPosition","startIcon","autoFocus","connector","connect","state","exposeMinIO","tenants","createTenant","fields","configure","exposeConsole","tenantCustom","tenantSecurityContext","updateAddField","isPageValid","configSectionItem","tenantCustomizationFields","marginLeft","containerItem","fieldGroup","createTenantCommon","marginBottom","responsiveSectionItem","fieldSpaceTop","modalBasic","wizardCommon","validationErrors","setValidationErrors","updateField","useCallback","field","useEffect","customAccountValidation","fieldKey","runAsUser","customValidation","parseInt","customValidationMessage","runAsGroup","fsGroup","commonVal","commonFormValidation","Object","keys","cleanValidation","fieldName","clearValidationError","Paper","paperWrapper","headerElement","h3Section","descriptionText","FormSwitchWrapper","checked","multiContainer","InputBoxWrapper","min","runAsNonRoot","idpSelection","identityProvider","accessKeys","secretKeys","openIDConfigurationURL","openIDClientID","openIDSecretID","openIDCallbackURL","openIDClaimName","openIDScopes","ADURL","ADSkipTLS","ADServerInsecure","ADGroupSearchBaseDN","ADGroupSearchFilter","ADUserDNs","ADLookupBindDN","ADLookupBindPassword","ADUserDNSearchBaseDN","ADUserDNSearchFilter","ADServerStartTLS","shortened","gridTemplateColumns","gridGap","buttonTray","overlayAction","protocolRadioOptions","adUserDnRows","formFieldStyles","updateUserField","newUserField","updatePwordField","updateADUserField","newADUserDNsField","customIDPValidation","i","push","pattern","customPatternMessage","inputs","_","Fragment","placeholder","Add","splice","RemoveIcon","getRandomString","Casino","Delete","RadioGroupSelector","currentSelection","selectorOptions","formFieldRow","Typography","gutterBottom","enableTLS","security","enableAutoCert","enableCustomCerts","minioCertificates","certificates","caCertificates","addFileToCaCertificates","deleteCaCertificate","addCaCertificate","addKeyPair","addFileToKeyPair","deleteKeyPair","minioCertificateRows","justifyContent","borderBottom","flex","fileItem","minWidth","minioCertsContainer","minioCACertsRow","rowActions","keyPair","FileSelector","encodedValue","cert","key","AddIcon","replicas","encryption","enableEncryption","encryptionType","gemaltoEndpoint","gemaltoToken","gemaltoDomain","gemaltoRetry","awsEndpoint","awsRegion","awsKMSKey","awsAccessKey","awsSecretKey","awsToken","vaultEndpoint","vaultEngine","vaultNamespace","vaultPrefix","vaultAppRoleEngine","vaultId","vaultSecret","vaultRetry","vaultPing","azureEndpoint","azureTenantID","azureClientID","azureClientSecret","gcpProjectID","gcpEndpoint","gcpClientEmail","gcpClientID","gcpPrivateKeyID","gcpPrivateKey","enableCustomCertsForKES","serverCertificate","clientCertificate","vaultCertificate","vaultCA","gemaltoCA","kesSecurityContext","addFileServerCert","addFileClientCert","addFileVaultCert","addFileVaultCa","addFileGemaltoCa","encryptionTypeOptions","mutualTlsConfig","rightSpacer","responsiveContainer","encryptionAvailable","filter","encoded_key","encoded_cert","encryptionValidation","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","setModalErrorSnackMessage","setKeyValuePairs","affinityConfigField","affinityFieldLabel","radioField","affinityLabelKey","affinityLabelValue","affinityRow","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","then","res","k","catch","err","vl","kvp","kvs","a","indexOf","join","valid","splittedLabels","forEach","splitItem","affinityHelpText","SelectWrapper","newKey","arrCp","assign","options","v","storageClasses","customImage","imageName","customDockerhub","imageRegistry","imageRegistryUsername","imageRegistryPassword","prometheusCustom","prometheusEnabled","logSearchCustom","logSearchEnabled","logSearchVolumeSize","logSearchSizeFactor","prometheusVolumeSize","prometheusSizeFactor","logSearchSelectedStorageClass","logSearchImage","kesImage","logSearchPostgresImage","logSearchPostgresInitImage","prometheusSelectedStorageClass","prometheusImage","prometheusSidecarImage","prometheusInitImage","selectedStorageClass","nameTenant","mapDispatchToProps","setErrorSnackMessage","wrapText","wordWrap","namespace","addNamespaceOpen","closeAddNamespaceModalAndRefresh","addNamespaceLoading","setAddNamespaceLoading","ConfirmDialog","LinearProgress","DialogContentText","volumeSize","tenantSize","sizeFactor","drivesPerServer","nodes","memoryNode","resourcesMemoryRequest","ecParity","ecParityChoices","cleanECChoices","resourcesSize","distribution","ecParityCalc","limitSize","cpuToUse","resourcesCPURequest","integrationSelection","table","usableInformation","storageFactors","find","erasureCode","Divider","Table","TableBody","TableRow","TableCell","scope","align","typeSelection","storageClass","disks","niceBytes","pvSize","persistentVolumes","rawCapacity","maxCapacity","Math","floor","maxFailureTolerations","CPU","memory","driveSize","sizeUnit","tenantName","selectedStorageType","features","console","session","setStorageClassesList","setLimitSize","setStorageType","sizePreview","formToRender","IMkEnvs","emptyNamespace","setEmptyNamespace","loadingNamespaceInfo","setLoadingNamespaceInfo","showCreateButton","setShowCreateButton","openAddNSConfirm","setOpenAddNSConfirm","getNamespaceInformation","tenantsList","elements","getLimitSizes","newStorage","stExists","findIndex","detailedError","debounceNamespace","useMemo","debounce","cancel","customNamespaceError","commonValidation","isValid","frmValidationCleanup","refresh","md","minHeight","overlayId","overlayIcon","mkPanelConfigurations","TenantSize","formRender","setFormRender","setConfiguration","resourcesConfigurations","includes","logSearchSecurityContext","logSearchPostgresSecurityContext","logSearchEnabledFields","configureSTClasses","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","prometheusSecurityContext","prometheusEnabledFields","validPages","resetAddTenantForm","pageBox","settingsCommon","showNewCredentials","setShowNewCredentials","createdAccount","setCreatedAccount","addSending","setAddSending","consoleCaCertificates","consoleCertificate","affinityType","kesReplicas","poolName","generatePoolName","affinityObject","getDefaultAffinity","getNodeSelector","dataSend","access_key","secret_key","access_keys","secret_keys","enable_tls","enable_console","enable_prometheus","service_name","image","expose_minio","expose_console","pools","servers","volumes_per_server","volume_configuration","storage_class_name","securityContext","erasureCodingParity","resourcesCPULimit","resourcesMemoryLimit","resources","requests","cpu","getBytes","limits","image_registry","registry","username","password","logSearchConfiguration","storageSize","postgres_image","postgres_init_image","postgres_securityContext","prometheusConfiguration","sidecar_image","init_image","tenantCerts","consoleCerts","caCerts","consoleCaCerts","ca_certificates","console_ca_certificates","minio","crt","tls","insertEncrypt","gemaltoCAIntroduce","ca","gemalto","keysecure","endpoint","credentials","token","domain","retry","aws","secretsmanager","region","kmskey","accesskey","secretkey","azure","keyvault","tenant_id","client_id","client_secret","gcp","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","vaultTLS","vault","engine","prefix","approle","secret","status","ping","encryptionServerKeyPair","encryptionClientKeyPair","client","server","dataIDP","keyarray","oidc","configuration_url","secret_id","claim_name","callback_url","scopes","active_directory","skip_tls_verification","server_insecure","group_search_base_dn","group_search_filter","user_dns","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","server_start_tls","consoleSAList","newSrvAcc","consoleItem","consoleKey","enabled","action","history","createButton","every","filteredWizardSteps","componentRender","buttons","advancedOnly","CredentialsPrompt","PageHeader","PageLayout","BackLink","GenericWizard","wizardSteps","HelpBox","iconComponent","help","podAntiAffinity","requiredDuringSchedulingIgnoredDuringExecution","labelSelector","matchExpressions","operator","values","topologyKey","labels","splitKeyValue","nodeSelector","nodeAffinity","nodeSelectorTerms","def","log","errorBlock","main","withBreak"],"sourceRoot":""}