{"version":3,"file":"static/js/2661.88895459.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/AutocompleteWrapper/AutocompleteWrapper.tsx","screens/Console/Buckets/BucketDetails/AddEvent.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  FormControl,\n  InputLabel,\n  OutlinedInputProps,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { HelpIcon } from \"mds\";\n\ninterface selectorTypes {\n  label: string;\n  value: string;\n}\n\ninterface SelectProps {\n  options: selectorTypes[];\n  value: string;\n  label: string;\n  id: string;\n  name: string;\n  tooltip?: string;\n  onChange: (returnedValue: string) => void;\n  disabled?: boolean;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  }),\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst AutocompleteWrapper = ({\n  classes,\n  id,\n  name,\n  onChange,\n  options,\n  label,\n  tooltip = \"\",\n  value,\n  disabled = false,\n}: SelectProps) => {\n  const [internalValue, setInternalValue] = useState<selectorTypes>(options[0]);\n\n  const executeOnSelect = (_: any, selectedValue: any) => {\n    if (selectedValue) {\n      onChange(selectedValue.value);\n      setInternalValue(selectedValue);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} className={classes.fieldContainer}>\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>{label}</span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n        <FormControl fullWidth>\n          <Autocomplete\n            id={id}\n            options={options}\n            getOptionLabel={(option) => option.label}\n            isOptionEqualToValue={(option) => option.value === value}\n            disabled={disabled}\n            renderInput={(params) => <InputField {...params} name={name} />}\n            value={internalValue}\n            onChange={executeOnSelect}\n            autoHighlight\n          />\n        </FormControl>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(AutocompleteWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Button, DataTable, EventSubscriptionIcon, Grid, InputBox } from \"mds\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { api } from \"api\";\nimport { NotificationEventType } from \"api/consoleApi\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport AutocompleteWrapper from \"../../Common/FormComponents/AutocompleteWrapper/AutocompleteWrapper\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\n\ninterface IAddEventProps {\n  open: boolean;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst AddEvent = ({\n  open,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IAddEventProps) => {\n  const dispatch = useAppDispatch();\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [prefix, setPrefix] = useState<string>(\"\");\n  const [suffix, setSuffix] = useState<string>(\"\");\n  const [arn, setArn] = useState<string>(\"\");\n  const [selectedEvents, setSelectedEvents] = useState<NotificationEventType[]>(\n    [],\n  );\n  const [arnList, setArnList] = useState<string[] | undefined>([]);\n\n  const addRecord = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    api.buckets\n      .createBucketEvent(selectedBucket, {\n        configuration: {\n          arn: arn,\n          events: selectedEvents,\n          prefix: prefix,\n          suffix: suffix,\n        },\n        ignoreExisting: true,\n      })\n      .then(() => {\n        setAddLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchArnList = useCallback(() => {\n    setAddLoading(true);\n    api.admin\n      .arnList()\n      .then((res) => {\n        if (res.data.arns !== null) {\n          setArnList(res.data.arns);\n        }\n        setAddLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  useEffect(() => {\n    fetchArnList();\n  }, [fetchArnList]);\n\n  const events = [\n    { label: \"PUT - Object Uploaded\", value: NotificationEventType.Put },\n    { label: \"GET - Object accessed\", value: NotificationEventType.Get },\n    { label: \"DELETE - Object Deleted\", value: NotificationEventType.Delete },\n    {\n      label: \"REPLICA - Object Replicated\",\n      value: NotificationEventType.Replica,\n    },\n    { label: \"ILM - Object Transitioned\", value: NotificationEventType.Ilm },\n    {\n      label:\n        \"SCANNER - Object has too many versions / Prefixes has too many sub-folders\",\n      value: NotificationEventType.Scanner,\n    },\n  ];\n\n  const handleClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = event.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: NotificationEventType[] = [...selectedEvents];\n\n    if (checked) {\n      elements.push(value as NotificationEventType);\n    } else {\n      elements = elements.filter((element) => element !== value);\n    }\n\n    setSelectedEvents(elements);\n  };\n\n  const arnValues = arnList?.map((arnConstant) => ({\n    label: arnConstant,\n    value: arnConstant,\n  }));\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Subscribe To Bucket Events\"\n      titleIcon={<EventSubscriptionIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          addRecord(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} sx={modalBasic.formScrollable}>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                ...formFieldStyles.formFieldRow,\n                \"& div div .MuiOutlinedInput-root\": {\n                  padding: 0,\n                },\n              }}\n            >\n              <AutocompleteWrapper\n                onChange={(value: string) => {\n                  setArn(value);\n                }}\n                id=\"select-access-policy\"\n                name=\"select-access-policy\"\n                label={\"ARN\"}\n                value={arn}\n                options={arnValues || []}\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <InputBox\n                id=\"prefix-input\"\n                name=\"prefix-input\"\n                label=\"Prefix\"\n                value={prefix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPrefix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <InputBox\n                id=\"suffix-input\"\n                name=\"suffix-input\"\n                label=\"Suffix\"\n                value={suffix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setSuffix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <DataTable\n                columns={[{ label: \"Event\", elementKey: \"label\" }]}\n                idField={\"value\"}\n                records={events}\n                onSelect={handleClick}\n                selectedItems={selectedEvents}\n                noBackground\n                customPaperHeight={\"260px\"}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"cancel-add-event\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={addLoading}\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              label={\"Cancel\"}\n            />\n            <Button\n              id={\"save-event\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={addLoading || arn === \"\" || selectedEvents.length === 0}\n              label={\"Save\"}\n            />\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default AddEvent;\n"],"names":["inputStyles","makeStyles","theme","createStyles","_objectSpread","inputFieldStyles","InputField","props","classes","_jsx","TextField","InputProps","withStyles","fieldBasic","tooltipHelper","_ref","id","name","onChange","options","label","_ref$tooltip","tooltip","value","_ref$disabled","disabled","_useState","useState","_useState2","_slicedToArray","internalValue","setInternalValue","React","children","_jsxs","Grid","item","xs","className","fieldContainer","InputLabel","htmlFor","inputLabel","tooltipContainer","Tooltip","title","placement","HelpIcon","FormControl","fullWidth","Autocomplete","getOptionLabel","option","isOptionEqualToValue","renderInput","params","_","selectedValue","autoHighlight","open","selectedBucket","closeModalAndRefresh","dispatch","useAppDispatch","addLoading","setAddLoading","_useState3","_useState4","prefix","setPrefix","_useState5","_useState6","suffix","setSuffix","_useState7","_useState8","arn","setArn","_useState9","_useState10","selectedEvents","setSelectedEvents","_useState11","_useState12","arnList","setArnList","fetchArnList","useCallback","api","admin","then","res","data","arns","catch","err","setModalErrorSnackMessage","useEffect","events","NotificationEventType","Put","Get","Delete","Replica","Ilm","Scanner","arnValues","map","arnConstant","ModalWrapper","modalOpen","onClose","titleIcon","EventSubscriptionIcon","noValidate","autoComplete","onSubmit","e","preventDefault","buckets","createBucketEvent","configuration","ignoreExisting","container","sx","modalBasic","formScrollable","formFieldStyles","formFieldRow","padding","AutocompleteWrapper","InputBox","target","DataTable","columns","elementKey","idField","records","onSelect","event","targetD","checked","elements","_toConsumableArray","push","filter","element","selectedItems","noBackground","customPaperHeight","modalStyleUtils","modalButtonBar","Button","type","variant","onClick","length"],"sourceRoot":""}