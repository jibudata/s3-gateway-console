{"version":3,"file":"static/js/2185.1940263e.chunk.js","mappings":"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","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreatePathModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, CreateNewPathIcon, InputBox, Grid } from \"mds\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { connect, useSelector } from \"react-redux\";\nimport { encodeURLString } from \"../../../../../../common/utils\";\n\nimport { BucketObjectItem } from \"./types\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\ninterface ICreatePath {\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  onClose: () => any;\n  simplePath: string | null;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  }),\n);\n\nconst CreatePathModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  simplePath,\n}: ICreatePath) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const classes = useStyles();\n\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [currentPath, setCurrentPath] = useState(bucketName);\n\n  const records = useSelector((state: AppState) => state.objectBrowser.records);\n\n  useEffect(() => {\n    if (simplePath) {\n      const newPath = `${bucketName}${\n        !bucketName.endsWith(\"/\") && !simplePath.startsWith(\"/\") ? \"/\" : \"\"\n      }${simplePath}`;\n\n      setCurrentPath(newPath);\n    }\n  }, [simplePath, bucketName]);\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"/\";\n\n    if (simplePath) {\n      folderPath = simplePath.endsWith(\"/\") ? simplePath : `${simplePath}/`;\n    }\n\n    const sharesName = (record: BucketObjectItem) =>\n      record.name === folderPath + pathUrl;\n\n    if (records.findIndex(sharesName) !== -1) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"Folder cannot have the same name as an existing file\",\n          detailedError: \"\",\n        }),\n      );\n      return;\n    }\n\n    const cleanPathURL = pathUrl\n      .split(\"/\")\n      .filter((splitItem) => splitItem.trim() !== \"\")\n      .join(\"/\");\n\n    if (folderPath.slice(0, 1) === \"/\") {\n      folderPath = folderPath.slice(1); //trim '/'\n    }\n\n    const newPath = `/browser/${bucketName}/${encodeURLString(\n      `${folderPath}${cleanPathURL}/`,\n    )}`;\n\n    navigate(newPath);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPathUrl(e.target.value);\n  };\n\n  const keyPressed = (e: any) => {\n    if (e.code === \"Enter\" && pathUrl !== \"\") {\n      createProcess();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n        titleIcon={<CreateNewPathIcon />}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <strong>Current Path:</strong> <br />\n            <div\n              style={{\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n                overflow: \"hidden\",\n                fontSize: 14,\n                textAlign: \"left\",\n              }}\n              dir={\"rtl\"}\n            >\n              {currentPath}\n            </div>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBox\n              value={pathUrl}\n              label={\"New Folder Path\"}\n              id={\"folderPath\"}\n              name={\"folderPath\"}\n              placeholder={\"Enter the new Folder Path\"}\n              onChange={inputChange}\n              onKeyPress={keyPressed}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              id={\"clear\"}\n              type=\"button\"\n              color=\"primary\"\n              variant=\"regular\"\n              onClick={resetForm}\n              label={\"Clear\"}\n            />\n            <Button\n              id={\"create\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n              label={\"Create\"}\n            />\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({ objectBrowser }: AppState) => ({\n  simplePath: objectBrowser.simplePath,\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(CreatePathModal);\n"],"names":["useStyles","makeStyles","theme","createStyles","_objectSpread","modalStyleUtils","formFieldStyles","connector","connect","_ref2","simplePath","objectBrowser","_ref","modalOpen","bucketName","folderName","onClose","dispatch","useAppDispatch","navigate","useNavigate","classes","_useState","useState","_useState2","_slicedToArray","pathUrl","setPathUrl","_useState3","_useState4","isFormValid","setIsFormValid","_useState5","_useState6","currentPath","setCurrentPath","records","useSelector","state","useEffect","newPath","concat","endsWith","startsWith","createProcess","folderPath","findIndex","record","name","cleanPathURL","split","filter","splitItem","trim","join","slice","encodeURLString","setModalErrorSnackMessage","errorMessage","detailedError","valid","length","_jsx","React","children","ModalWrapper","title","titleIcon","CreateNewPathIcon","_jsxs","Grid","container","item","xs","className","formFieldRow","style","textOverflow","whiteSpace","overflow","fontSize","textAlign","dir","InputBox","value","label","id","placeholder","onChange","e","target","onKeyPress","code","required","modalButtonBar","Button","type","color","variant","onClick","disabled"],"sourceRoot":""}