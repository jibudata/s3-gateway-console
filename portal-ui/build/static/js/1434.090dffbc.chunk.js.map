{"version":3,"file":"static/js/1434.090dffbc.chunk.js","mappings":"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","sources":["common/HelpBox.tsx","screens/Console/Buckets/BucketDetails/SummaryItems/RBIconButton.tsx","screens/Console/Common/BoxIconButton/BoxIconButton.tsx","screens/Console/Common/CredentialsPrompt/CredentialItem.tsx","screens/Console/Common/CredentialsPrompt/CredentialsPrompt.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Tenants/AddTenant/Steps/Configure.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider.tsx","screens/Console/Tenants/AddTenant/Steps/Security.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption.tsx","screens/Console/Tenants/AddTenant/Steps/Affinity.tsx","screens/Console/Tenants/AddTenant/Steps/Images.tsx","screens/Console/Tenants/AddTenant/Steps/helpers/AddNamespaceModal.tsx","screens/Console/Tenants/AddTenant/Steps/SizePreview.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NameTenantMain.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantResources.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigLogSearch.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigPrometheus.tsx","screens/Console/Tenants/AddTenant/AddTenant.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 2,\n      backgroundColor: \"#FBFAFA\",\n      paddingLeft: 25,\n      paddingTop: 31,\n      paddingBottom: 21,\n      paddingRight: 30,\n    },\n    leftItems: {\n      fontSize: 16,\n      fontWeight: \"bold\",\n      marginBottom: 15,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& .min-icon\": {\n        marginRight: 15,\n        height: 28,\n        width: 38,\n      },\n    },\n    helpText: {\n      fontSize: 16,\n      paddingLeft: 5,\n    },\n  });\n\ninterface IHelpBox {\n  classes: any;\n  iconComponent: any;\n  title: string;\n  help: any;\n}\n\nconst HelpBox = ({ classes, iconComponent, title, help }: IHelpBox) => {\n  return (\n    <div className={classes.root}>\n      <Grid container>\n        <Grid item xs={12} className={classes.leftItems}>\n          {iconComponent}\n          {title}\n        </Grid>\n        <Grid item xs={12} className={classes.helpText}>\n          {help}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(HelpBox);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport BoxIconButton from \"../../../Common/BoxIconButton/BoxIconButton\";\nimport { IconButtonProps } from \"@mui/material\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { Theme } from \"@mui/material/styles\";\n\ntype DeleteButtonProps = {\n  onClick: (e: any) => void;\n  text?: string;\n  disabled?: boolean;\n  size?: string;\n  tooltip?: string;\n  classes?: any;\n  icon?: React.ReactNode;\n  [x: string]: any;\n};\n\ntype RBIconProps = Partial<IconButtonProps> & DeleteButtonProps;\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const getButtonColor = (props: RBIconProps) => {\n    const { variant, color } = props;\n\n    let tgtColor = theme.palette.primary.main;\n\n    if (color === \"primary\" && variant === \"contained\") {\n      tgtColor = theme.palette.primary.contrastText;\n    } else if (color === \"primary\" && variant === \"outlined\") {\n      tgtColor = theme.palette.primary.main;\n    } else if (color === \"secondary\") {\n      tgtColor = theme.palette.secondary.main;\n    }\n\n    return tgtColor;\n  };\n\n  return {\n    root: {\n      padding: \"7px\",\n      color: (props: RBIconProps) => getButtonColor(props),\n      borderColor: (props: RBIconProps) =>\n        props.color === \"secondary\"\n          ? theme.palette.secondary.main\n          : theme.palette.primary.main,\n      \"& svg.min-icon\": {\n        width: 12,\n        marginLeft: (props: RBIconProps) => (props.text ? \"5px\" : \"0px\"),\n        \"@media (max-width: 900px)\": {\n          width: 16,\n          marginLeft: \"0px !important\",\n        },\n      },\n    },\n  };\n});\n\nconst RBIconButton = (props: RBIconProps) => {\n  const classes = useStyles(props);\n\n  const {\n    onClick,\n    text = \"\",\n    disabled = false,\n    tooltip,\n    icon = null,\n    className = \"\",\n    ...restProps\n  } = props;\n\n  return (\n    <BoxIconButton\n      className={className}\n      classes={classes}\n      tooltip={tooltip || text}\n      variant=\"outlined\"\n      onClick={onClick}\n      disabled={disabled}\n      color=\"secondary\"\n      size=\"medium\"\n      sx={{\n        border: \"1px solid #f44336\",\n        \"& span\": {\n          fontSize: 14,\n          \"@media (max-width: 900px)\": {\n            display: \"none\",\n          },\n        },\n      }}\n      {...restProps}\n    >\n      <span>{text}</span> {icon}\n    </BoxIconButton>\n  );\n};\nexport default RBIconButton;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { IconButton, IconButtonProps, Tooltip } from \"@mui/material\";\nimport clsx from \"clsx\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 8,\n      marginLeft: 8,\n      borderWidth: 1,\n      borderColor: \"#696969\",\n      color: \"#696969\",\n      borderStyle: \"solid\",\n      borderRadius: 3,\n      \"& .min-icon\": {\n        // height: 20,\n        width: 20,\n      },\n      \"& .MuiTouchRipple-root span\": {\n        backgroundColor: theme.palette.primary.main,\n        borderRadius: 3,\n        opacity: 0.3,\n      },\n      \"&:disabled\": {\n        color: \"#EBEBEB\",\n        borderColor: \"#EBEBEB\",\n      },\n    },\n    contained: {\n      borderColor: theme.palette.primary.main,\n      background: theme.palette.primary.main,\n      color: \"white\",\n      \"& .MuiTouchRipple-root span\": {\n        backgroundColor: theme.palette.primary.dark,\n        borderRadius: 3,\n        opacity: 0.3,\n      },\n      \"&:hover\": {\n        backgroundColor: theme.palette.primary.light,\n        color: \"#FFF\",\n      },\n    },\n  });\n\ninterface IBoxIconButton extends IconButtonProps {\n  classes: any;\n  children: any;\n  variant?: \"outlined\" | \"contained\";\n  tooltip?: string;\n}\n\nconst BoxIconButton = ({\n  classes,\n  children,\n  variant = \"outlined\",\n  tooltip,\n  ...rest\n}: IBoxIconButton) => {\n  const button = (\n    <IconButton\n      {...rest}\n      className={clsx(classes.root, {\n        [classes.contained]: variant === \"contained\",\n      })}\n    >\n      {children}\n    </IconButton>\n  );\n\n  if (tooltip && tooltip !== \"\") {\n    return (\n      <Tooltip title={tooltip}>\n        <span>{button}</span>\n      </Tooltip>\n    );\n  }\n\n  return button;\n};\n\nexport default withStyles(styles)(BoxIconButton);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { InputAdornment, OutlinedInput } from \"@mui/material\";\nimport BoxIconButton from \"../BoxIconButton/BoxIconButton\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { CopyIcon } from \"../../../../icons\";\nimport { fieldBasic } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      padding: \"20px 0 8px 0\",\n    },\n    inputWithCopy: {\n      \"& .MuiInputBase-root \": {\n        width: \"100%\",\n        background: \"#FBFAFA\",\n        \"& .MuiInputBase-input\": {\n          height: \".8rem\",\n        },\n        \"& .MuiInputAdornment-positionEnd\": {\n          marginRight: \".5rem\",\n          \"& .MuiButtonBase-root\": {\n            height: \"2rem\",\n          },\n        },\n      },\n      \"& .MuiButtonBase-root .min-icon\": {\n        width: \".8rem\",\n        height: \".8rem\",\n      },\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: \".8rem\",\n    },\n  });\n\nconst CredentialItem = ({\n  label = \"\",\n  value = \"\",\n  classes = {},\n}: {\n  label: string;\n  value: string;\n  classes: any;\n}) => {\n  return (\n    <div className={classes.container}>\n      <div className={classes.inputLabel}>{label}:</div>\n      <div className={classes.inputWithCopy}>\n        <OutlinedInput\n          value={value}\n          readOnly\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <CopyToClipboard text={value}>\n                <BoxIconButton\n                  aria-label=\"copy\"\n                  tooltip={\"Copy\"}\n                  onClick={() => {}}\n                  onMouseDown={() => {}}\n                  edge=\"end\"\n                >\n                  <CopyIcon />\n                </BoxIconButton>\n              </CopyToClipboard>\n            </InputAdornment>\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(CredentialItem);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { NewServiceAccount } from \"./types\";\nimport ModalWrapper from \"../ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport CredentialItem from \"./CredentialItem\";\nimport WarnIcon from \"../../../../icons/WarnIcon\";\nimport { DownloadIcon, ServiceAccountCredentialsIcon } from \"../../../../icons\";\n\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n    credentialTitle: {\n      padding: \".8rem 0 0 0\",\n      fontWeight: 600,\n      fontSize: \".9rem\",\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \"1rem\",\n    },\n    credentialsPanel: {\n      overflowY: \"auto\",\n      maxHeight: 350,\n    },\n    promptTitle: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    buttonSpacer: {\n      marginRight: \".9rem\",\n    },\n    promptIcon: {\n      marginRight: \".1rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"2rem\",\n      width: \"2rem\",\n    },\n  });\n\ninterface ICredentialsPromptProps {\n  classes: any;\n  newServiceAccount: NewServiceAccount | null;\n  open: boolean;\n  entity: string;\n  closeModal: () => void;\n}\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n};\n\nconst CredentialsPrompt = ({\n  classes,\n  newServiceAccount,\n  open,\n  closeModal,\n  entity,\n}: ICredentialsPromptProps) => {\n  if (!newServiceAccount) {\n    return null;\n  }\n  const consoleCreds = get(newServiceAccount, \"console\", null);\n  const idp = get(newServiceAccount, \"idp\", false);\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModal();\n      }}\n      title={\n        <div className={classes.promptTitle}>\n          <div>New {entity} Created</div>\n        </div>\n      }\n      titleIcon={<ServiceAccountCredentialsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formScrollable}>\n          A new {entity} has been created with the following details:\n          {!idp && consoleCreds && (\n            <React.Fragment>\n              <Grid item xs={12} className={classes.credentialsPanel}>\n                <div className={classes.credentialTitle}>\n                  Console Credentials\n                </div>\n                {Array.isArray(consoleCreds) &&\n                  consoleCreds.map((credentialsPair, index) => {\n                    return (\n                      <>\n                        <CredentialItem\n                          label=\"Access Key\"\n                          value={credentialsPair.accessKey}\n                        />\n                        <CredentialItem\n                          label=\"Secret Key\"\n                          value={credentialsPair.secretKey}\n                        />\n                      </>\n                    );\n                  })}\n                {!Array.isArray(consoleCreds) && (\n                  <>\n                    <CredentialItem\n                      label=\"Access Key\"\n                      value={consoleCreds.accessKey}\n                    />\n                    <CredentialItem\n                      label=\"Secret Key\"\n                      value={consoleCreds.secretKey}\n                    />\n                  </>\n                )}\n              </Grid>\n            </React.Fragment>\n          )}\n          {idp ? (\n            <div className={classes.warningBlock}>\n              Please Login via the configured external identity provider.\n            </div>\n          ) : (\n            <div className={classes.warningBlock}>\n              <WarnIcon />\n              <span>\n                Write these down, as this is the only time the secret will be\n                displayed.\n              </span>\n            </div>\n          )}\n        </Grid>\n        <Grid item xs={12} className={classes.buttonContainer}>\n          {!idp && (\n            <>\n              <RBIconButton\n                id={\"download-button\"}\n                tooltip={\n                  \"Download credentials in a JSON file formatted for import using mc alias import. This will only include the default login credentials.\"\n                }\n                text={\"Download for import\"}\n                className={classes.buttonSpacer}\n                onClick={() => {\n                  let consoleExtras = {};\n\n                  if (consoleCreds) {\n                    if (!Array.isArray(consoleCreds)) {\n                      consoleExtras = {\n                        url: consoleCreds.url,\n                        accessKey: consoleCreds.accessKey,\n                        secretKey: consoleCreds.secretKey,\n                        api: \"s3v4\",\n                        path: \"auto\",\n                      };\n                    } else {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          url: itemMap.url,\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                          api: \"s3v4\",\n                          path: \"auto\",\n                        };\n                      });\n                      consoleExtras = cCreds[0];\n                    }\n                  }\n\n                  download(\n                    \"credentials.json\",\n                    JSON.stringify({\n                      ...consoleExtras,\n                    })\n                  );\n                }}\n                icon={<DownloadIcon />}\n                variant=\"contained\"\n                color=\"primary\"\n              />\n\n              {Array.isArray(consoleCreds) && consoleCreds.length > 1 && (\n                <RBIconButton\n                  id={\"download-all-button\"}\n                  tooltip={\n                    \"Download all access credentials to a JSON file. NOTE: This file is not formatted for import using mc alias import. If you plan to import this alias from the file, please use the Download for Import button. \"\n                  }\n                  text={\"Download all access credentials\"}\n                  className={classes.buttonSpacer}\n                  onClick={() => {\n                    let allCredentials = {};\n                    if (consoleCreds) {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                        };\n                      });\n                      allCredentials = cCreds;\n                    }\n                    download(\n                      \"all_credentials.json\",\n                      JSON.stringify({\n                        ...allCredentials,\n                      })\n                    );\n                  }}\n                  icon={<DownloadIcon />}\n                  variant=\"contained\"\n                  color=\"primary\"\n                />\n              )}\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(CredentialsPrompt);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n          id={\"confirm-cancel\"}\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          id={\"confirm-ok\"}\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n  titleIcon = null,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  classes: any;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  tenantCustom: boolean;\n  tenantSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Configure = ({\n  classes,\n  exposeMinIO,\n  exposeConsole,\n  tenantCustom,\n  updateAddField,\n  isPageValid,\n  tenantSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (tenantCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"tenant_securityContext_runAsUser\",\n          required: true,\n          value: tenantSecurityContext.runAsUser,\n          customValidation:\n            tenantSecurityContext.runAsUser === \"\" ||\n            parseInt(tenantSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_runAsGroup\",\n          required: true,\n          value: tenantSecurityContext.runAsGroup,\n          customValidation:\n            tenantSecurityContext.runAsGroup === \"\" ||\n            parseInt(tenantSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_fsGroup\",\n          required: true,\n          value: tenantSecurityContext.fsGroup,\n          customValidation:\n            tenantSecurityContext.fsGroup === \"\" ||\n            parseInt(tenantSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, tenantCustom, tenantSecurityContext]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Configure</h3>\n        <span className={classes.descriptionText}>\n          Basic configurations for tenant management\n        </span>\n      </div>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Services</h3>\n        <span className={classes.descriptionText}>\n          Whether the tenant's services should request an external IP via\n          LoadBalancer service type.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_minio\"\n          id=\"expose_minio\"\n          name=\"expose_minio\"\n          checked={exposeMinIO}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeMinIO\", checked);\n          }}\n          label={\"Expose MiniO Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_console\"\n          id=\"expose_console\"\n          name=\"expose_console\"\n          checked={exposeConsole}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeConsole\", checked);\n          }}\n          label={\"Expose Console Service\"}\n        />\n      </Grid>\n\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"tenant_configuration\"\n          name=\"tenant_configuration\"\n          checked={tenantCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"tenantCustom\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n      </Grid>\n      {tenantCustom && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsUser\"\n                    name=\"tenant_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={tenantSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsGroup\"\n                    name=\"tenant_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={tenantSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_fsGroup\"\n                    name=\"tenant_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={tenantSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"tenantSecurityContextRunAsNonRoot\"\n                  id=\"tenant_securityContext_runAsNonRoot\"\n                  name=\"tenant_securityContext_runAsNonRoot\"\n                  checked={tenantSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"tenantSecurityContext\", {\n                      ...tenantSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Configure));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Tooltip, Typography } from \"@mui/material\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError, getRandomString } from \"../../utils\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface IIdentityProviderProps {\n  classes: any;\n  idpSelection: string;\n  accessKeys: string[];\n  secretKeys: string[];\n  openIDConfigurationURL: string;\n  openIDClientID: string;\n  openIDSecretID: string;\n  openIDCallbackURL: string;\n  openIDClaimName: string;\n  openIDScopes: string;\n  ADURL: string;\n  ADSkipTLS: boolean;\n  ADServerInsecure: boolean;\n  ADGroupSearchBaseDN: string;\n  ADGroupSearchFilter: string;\n  ADUserDNs: string[];\n  ADLookupBindDN: string;\n  ADLookupBindPassword: string;\n  ADUserDNSearchBaseDN: string;\n  ADUserDNSearchFilter: string;\n  ADServerStartTLS: boolean;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    shortened: {\n      gridTemplateColumns: \"auto auto 50px 50px\",\n      display: \"grid\",\n      gridGap: 15,\n      marginBottom: 10,\n      \"& input\": {\n        fontWeight: 400,\n      },\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    protocolRadioOptions: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      marginBottom: 10,\n\n      \"& label\": {\n        fontSize: 14,\n      },\n      \"& div\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n      },\n    },\n    adUserDnRows: {\n      display: \"flex\",\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst IdentityProvider = ({\n  classes,\n  idpSelection,\n  accessKeys,\n  secretKeys,\n  openIDConfigurationURL,\n  openIDClientID,\n  openIDSecretID,\n  openIDCallbackURL,\n  openIDClaimName,\n  openIDScopes,\n  ADURL,\n  ADSkipTLS,\n  ADServerInsecure,\n  ADGroupSearchBaseDN,\n  ADGroupSearchFilter,\n  ADUserDNs,\n  ADLookupBindDN,\n  ADLookupBindPassword,\n  ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter,\n  ADServerStartTLS,\n  updateAddField,\n  isPageValid,\n}: IIdentityProviderProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"identityProvider\", field, value);\n    },\n    [updateAddField]\n  );\n  const updateUserField = (index: number, value: string) => {\n    const newUserField = [...accessKeys];\n    newUserField[index] = value;\n    updateField(\"accessKeys\", newUserField);\n  };\n  const updatePwordField = (index: number, value: string) => {\n    const newUserField = [...secretKeys];\n    newUserField[index] = value;\n    updateField(\"secretKeys\", newUserField);\n  };\n  const updateADUserField = (index: number, value: string) => {\n    const newADUserDNsField = [...ADUserDNs];\n    newADUserDNsField[index] = value;\n    updateField(\"ADUserDNs\", newADUserDNsField);\n  };\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"Built-in\") {\n      customIDPValidation = [...customIDPValidation];\n      for (var i = 0; i < accessKeys.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `accesskey-${i.toString()}`,\n          required: true,\n          value: accessKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n        customIDPValidation.push({\n          fieldKey: `secretkey-${i.toString()}`,\n          required: true,\n          value: secretKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n      }\n    }\n\n    if (idpSelection === \"OpenID\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n      // validate user DNs\n      for (let i = 0; i < ADUserDNs.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `ad-userdn-${i.toString()}`,\n          required: true,\n          value: ADUserDNs[i],\n        });\n      }\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    isPageValid(\"identityProvider\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    ADLookupBindDN,\n    idpSelection,\n    accessKeys,\n    secretKeys,\n    openIDClientID,\n    openIDSecretID,\n    ADURL,\n    ADGroupSearchBaseDN,\n    ADGroupSearchFilter,\n    ADUserDNs,\n    isPageValid,\n    openIDConfigurationURL,\n    openIDClaimName,\n  ]);\n  let inputs = null;\n  if (idpSelection === \"Built-in\") {\n    inputs = accessKeys.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`accesskey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Access Key\"}\n              name={`accesskey-${index.toString()}`}\n              value={accessKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateUserField(index, e.target.value);\n                cleanValidation(`accesskey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-accesskey-${index.toString()}`}\n              error={validationErrors[`accesskey-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`secretkey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Secret Key\"}\n              name={`secretkey-${index.toString()}`}\n              value={secretKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updatePwordField(index, e.target.value);\n                cleanValidation(`secretkey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-secretkey-${index.toString()}`}\n              error={validationErrors[`secretkey-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      accessKeys.push(\"\");\n                      secretKeys.push(\"\");\n                      updateUserField(accessKeys.length - 1, \"\");\n                      updatePwordField(secretKeys.length - 1, \"\");\n                    }}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      if (accessKeys.length > 1) {\n                        accessKeys.splice(index, 1);\n                        secretKeys.splice(index, 1);\n                        updateUserField(\n                          accessKeys.length - 1,\n                          accessKeys[accessKeys.length - 1]\n                        );\n                      }\n                    }}\n                  >\n                    <RemoveIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Randomize Credentials\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    onClick={() => {\n                      updateUserField(index, getRandomString(16));\n                      updatePwordField(index, getRandomString(32));\n                    }}\n                    size={\"small\"}\n                  >\n                    <CasinoIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  if (idpSelection === \"AD\") {\n    inputs = ADUserDNs.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.adUserDnRows}>\n            <InputBoxWrapper\n              id={`ad-userdn-${index.toString()}`}\n              label={\"\"}\n              placeholder=\"\"\n              name={`ad-userdn-${index.toString()}`}\n              value={ADUserDNs[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateADUserField(index, e.target.value);\n                cleanValidation(`ad-userdn-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-ad-userdn-${index.toString()}`}\n              error={validationErrors[`ad-userdn-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    ADUserDNs.push(\"\");\n                    updateADUserField(ADUserDNs.length - 1, \"\");\n                  }}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  style={{ marginLeft: 16 }}\n                  onClick={() => {\n                    if (ADUserDNs.length > 1) {\n                      ADUserDNs.splice(index, 1);\n                      updateUserField(\n                        ADUserDNs.length - 1,\n                        ADUserDNs[ADUserDNs.length - 1]\n                      );\n                    }\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Identity Provider</h3>\n        <span className={classes.descriptionText}>\n          Access to the tenant can be controlled via an external Identity\n          Manager.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.protocolRadioOptions}>\n        <label>Protocol</label>\n        <RadioGroupSelector\n          currentSelection={idpSelection}\n          id=\"idp-options\"\n          name=\"idp-options\"\n          label=\" \"\n          onChange={(e) => {\n            updateField(\"idpSelection\", e.target.value);\n          }}\n          selectorOptions={[\n            { label: \"Built-in\", value: \"Built-in\" },\n            { label: \"OpenID\", value: \"OpenID\" },\n            { label: \"Active Directory\", value: \"AD\" },\n          ]}\n        />\n      </Grid>\n      {idpSelection === \"Built-in\" && (\n        <Fragment>\n          Add additional users\n          {inputs}\n        </Fragment>\n      )}\n      {idpSelection === \"OpenID\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_CONFIGURATION_URL\"\n              name=\"openID_CONFIGURATION_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDConfigurationURL\", e.target.value);\n                cleanValidation(\"openID_CONFIGURATION_URL\");\n              }}\n              label=\"Configuration URL\"\n              value={openIDConfigurationURL}\n              placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n              error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_clientID\"\n              name=\"openID_clientID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClientID\", e.target.value);\n                cleanValidation(\"openID_clientID\");\n              }}\n              label=\"Client ID\"\n              value={openIDClientID}\n              error={validationErrors[\"openID_clientID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_secretID\"\n              name=\"openID_secretID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDSecretID\", e.target.value);\n                cleanValidation(\"openID_secretID\");\n              }}\n              label=\"Secret ID\"\n              value={openIDSecretID}\n              error={validationErrors[\"openID_secretID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_callbackURL\"\n              name=\"openID_callbackURL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDCallbackURL\", e.target.value);\n                cleanValidation(\"openID_callbackURL\");\n              }}\n              label=\"Callback URL\"\n              value={openIDCallbackURL}\n              placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n              error={validationErrors[\"openID_callbackURL\"] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_claimName\"\n              name=\"openID_claimName\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClaimName\", e.target.value);\n                cleanValidation(\"openID_claimName\");\n              }}\n              label=\"Claim Name\"\n              value={openIDClaimName}\n              error={validationErrors[\"openID_claimName\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_scopes\"\n              name=\"openID_scopes\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDScopes\", e.target.value);\n                cleanValidation(\"openID_scopes\");\n              }}\n              label=\"Scopes\"\n              value={openIDScopes}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {idpSelection === \"AD\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"AD_URL\"\n              name=\"AD_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADURL\", e.target.value);\n                cleanValidation(\"AD_URL\");\n              }}\n              label=\"LDAP Server Address\"\n              value={ADURL}\n              placeholder=\"ldap-server:636\"\n              error={validationErrors[\"AD_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_skipTLS\"\n              id=\"ad_skipTLS\"\n              name=\"ad_skipTLS\"\n              checked={ADSkipTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADSkipTLS\", checked);\n              }}\n              label={\"Skip TLS Verification\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverInsecure\"\n              id=\"ad_serverInsecure\"\n              name=\"ad_serverInsecure\"\n              checked={ADServerInsecure}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerInsecure\", checked);\n              }}\n              label={\"Server Insecure\"}\n            />\n          </Grid>\n          {ADServerInsecure ? (\n            <Grid item xs={12}>\n              <Typography\n                className={classes.error}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Warning: All traffic with Active Directory will be unencrypted\n              </Typography>\n              <br />\n            </Grid>\n          ) : null}\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverStartTLS\"\n              id=\"ad_serverStartTLS\"\n              name=\"ad_serverStartTLS\"\n              checked={ADServerStartTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerStartTLS\", checked);\n              }}\n              label={\"Start TLS connection to AD/LDAP server\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindDN\"\n              name=\"ad_lookupBindDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindDN\", e.target.value);\n                cleanValidation(\"ad_lookupBindDN\");\n              }}\n              label=\"Lookup Bind DN\"\n              value={ADLookupBindDN}\n              placeholder=\"cn=admin,dc=min,dc=io\"\n              error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindPassword\"\n              name=\"ad_lookupBindPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindPassword\", e.target.value);\n              }}\n              label=\"Lookup Bind Password\"\n              value={ADLookupBindPassword}\n              placeholder=\"admin\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchBaseDN\"\n              name=\"ad_userDNSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchBaseDN\", e.target.value);\n              }}\n              label=\"User DN Search Base DN\"\n              value={ADUserDNSearchBaseDN}\n              placeholder=\"dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchFilter\"\n              name=\"ad_userDNSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchFilter\", e.target.value);\n              }}\n              label=\"User DN Search Filter\"\n              value={ADUserDNSearchFilter}\n              placeholder=\"(sAMAcountName=%s)\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchBaseDN\"\n              name=\"ad_groupSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchBaseDN\", e.target.value);\n              }}\n              label=\"Group Search Base DN\"\n              value={ADGroupSearchBaseDN}\n              placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchFilter\"\n              name=\"ad_groupSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchFilter\", e.target.value);\n              }}\n              label=\"Group Search Filter\"\n              value={ADGroupSearchFilter}\n              placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n            />\n          </Grid>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              List of user DNs (Distinguished Names) to be Tenant Administrators\n            </legend>\n            <Grid item xs={12}>\n              {inputs}\n            </Grid>\n          </fieldset>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  idpSelection: state.tenants.createTenant.fields.identityProvider.idpSelection,\n  accessKeys: state.tenants.createTenant.fields.identityProvider.accessKeys,\n  secretKeys: state.tenants.createTenant.fields.identityProvider.secretKeys,\n  openIDConfigurationURL:\n    state.tenants.createTenant.fields.identityProvider.openIDConfigurationURL,\n  openIDClientID:\n    state.tenants.createTenant.fields.identityProvider.openIDClientID,\n  openIDSecretID:\n    state.tenants.createTenant.fields.identityProvider.openIDSecretID,\n  openIDCallbackURL:\n    state.tenants.createTenant.fields.identityProvider.openIDCallbackURL,\n  openIDClaimName:\n    state.tenants.createTenant.fields.identityProvider.openIDClaimName,\n  openIDScopes: state.tenants.createTenant.fields.identityProvider.openIDScopes,\n  ADURL: state.tenants.createTenant.fields.identityProvider.ADURL,\n  ADSkipTLS: state.tenants.createTenant.fields.identityProvider.ADSkipTLS,\n  ADServerInsecure:\n    state.tenants.createTenant.fields.identityProvider.ADServerInsecure,\n  ADGroupSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchBaseDN,\n  ADGroupSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchFilter,\n  ADUserDNs: state.tenants.createTenant.fields.identityProvider.ADUserDNs,\n  ADLookupBindDN:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindDN,\n  ADLookupBindPassword:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindPassword,\n  ADUserDNSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchFilter,\n  ADServerStartTLS:\n    state.tenants.createTenant.fields.identityProvider.ADServerStartTLS,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(IdentityProvider));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Typography } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  addCaCertificate,\n  addFileToCaCertificates,\n  addFileToKeyPair,\n  addKeyPair,\n  deleteCaCertificate,\n  deleteKeyPair,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface ISecurityProps {\n  classes: any;\n  enableTLS: boolean;\n  enableAutoCert: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  caCertificates: KeyPair[];\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileToCaCertificates: typeof addFileToCaCertificates;\n  deleteCaCertificate: typeof deleteCaCertificate;\n  addCaCertificate: typeof addCaCertificate;\n  addKeyPair: typeof addKeyPair;\n  addFileToKeyPair: typeof addFileToKeyPair;\n  deleteKeyPair: typeof deleteKeyPair;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    minioCertificateRows: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    minioCertsContainer: {\n      marginBottom: 15,\n    },\n    minioCACertsRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n\n    ...createTenantCommon,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Security = ({\n  classes,\n  enableTLS,\n  enableAutoCert,\n  enableCustomCerts,\n  minioCertificates,\n  caCertificates,\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n}: ISecurityProps) => {\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"security\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n\n  useEffect(() => {\n    if (!enableTLS) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableAutoCert) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableCustomCerts) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    isPageValid(\"security\", false);\n  }, [enableTLS, enableAutoCert, enableCustomCerts, isPageValid]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Security</h3>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableTLS\"\n          id=\"enableTLS\"\n          name=\"enableTLS\"\n          checked={enableTLS}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableTLS\", checked);\n          }}\n          label={\"Enable TLS\"}\n        />\n        Enable TLS for the tenant, this is required for Encryption Configuration\n        {enableTLS && (\n          <Fragment>\n            <br />\n            <br />\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              AutoCert: MinIO Operator will generate all TLS certificates\n              automatically\n            </Typography>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              Custom certificates: Allow user to provide your own certificates\n            </Typography>\n            <br />\n          </Fragment>\n        )}\n      </Grid>\n      {enableTLS && (\n        <Fragment>\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"enableAutoCert\"\n              id=\"enableAutoCert\"\n              name=\"enableAutoCert\"\n              checked={enableAutoCert}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableAutoCert\", checked);\n              }}\n              label={\"Enable AutoCert\"}\n            />\n            <FormSwitchWrapper\n              value=\"enableCustomCerts\"\n              id=\"enableCustomCerts\"\n              name=\"enableCustomCerts\"\n              checked={enableCustomCerts}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableCustomCerts\", checked);\n              }}\n              label={\"Custom Certificates\"}\n            />\n          </Grid>\n          {enableCustomCerts && (\n            <Fragment>\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO Certificates\n                    </legend>\n                    {minioCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={`minio-certs-${keyPair.id}`}\n                        className={classes.minioCertificateRows}\n                      >\n                        <Grid item xs={10} className={classes.fileItem}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"key\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                          />\n                        </Grid>\n\n                        <Grid item xs={2} className={classes.rowActions}>\n                          <div className={classes.overlayAction}>\n                            <IconButton size={\"small\"} onClick={addKeyPair}>\n                              <AddIcon />\n                            </IconButton>\n                          </div>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                deleteKeyPair(keyPair.id);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO CA Certificates\n                    </legend>\n\n                    {caCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={`minio-CA-certs-${keyPair.id}`}\n                        className={classes.minioCACertsRow}\n                      >\n                        <Grid item xs={6}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToCaCertificates(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                        </Grid>\n                        <Grid item xs={6}>\n                          <div className={classes.rowActions}>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={addCaCertificate}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  deleteCaCertificate(keyPair.id);\n                                }}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  caCertificates: state.tenants.createTenant.certificates.caCertificates,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n});\n\nexport default withStyles(styles)(connector(Security));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Paper } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  addFileClientCert,\n  addFileGemaltoCa,\n  addFileServerCert,\n  addFileVaultCa,\n  addFileVaultCert,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IEncryptionProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileServerCert: typeof addFileServerCert;\n  addFileClientCert: typeof addFileClientCert;\n  addFileVaultCert: typeof addFileVaultCert;\n  addFileVaultCa: typeof addFileVaultCa;\n  addFileGemaltoCa: typeof addFileGemaltoCa;\n  enableEncryption: boolean;\n  encryptionType: string;\n  gemaltoEndpoint: string;\n  gemaltoToken: string;\n  gemaltoDomain: string;\n  gemaltoRetry: string;\n  awsEndpoint: string;\n  awsRegion: string;\n  awsKMSKey: string;\n  awsAccessKey: string;\n  awsSecretKey: string;\n  awsToken: string;\n  vaultEndpoint: string;\n  vaultEngine: string;\n  vaultNamespace: string;\n  vaultPrefix: string;\n  vaultAppRoleEngine: string;\n  vaultId: string;\n  vaultSecret: string;\n  vaultRetry: string;\n  vaultPing: string;\n  azureEndpoint: string;\n  azureTenantID: string;\n  azureClientID: string;\n  azureClientSecret: string;\n  gcpProjectID: string;\n  gcpEndpoint: string;\n  gcpClientEmail: string;\n  gcpClientID: string;\n  gcpPrivateKeyID: string;\n  gcpPrivateKey: string;\n  enableCustomCertsForKES: boolean;\n  enableAutoCert: boolean;\n  enableTLS: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  serverCertificate: KeyPair;\n  clientCertificate: KeyPair;\n  vaultCertificate: KeyPair;\n  vaultCA: KeyPair;\n  gemaltoCA: KeyPair;\n  kesSecurityContext: ISecurityContext;\n  replicas: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    encryptionTypeOptions: {\n      marginBottom: 15,\n    },\n    mutualTlsConfig: {\n      marginTop: 15,\n      \"& fieldset\": {\n        flex: 1,\n      },\n    },\n    rightSpacer: {\n      marginRight: 15,\n    },\n    responsiveContainer: {\n      \"@media (max-width: 900px)\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n      },\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Encryption = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n  enableEncryption,\n  enableCustomCerts,\n  encryptionType,\n  gemaltoEndpoint,\n  gemaltoToken,\n  gemaltoDomain,\n  gemaltoRetry,\n  awsEndpoint,\n  awsRegion,\n  awsKMSKey,\n  awsAccessKey,\n  awsSecretKey,\n  awsToken,\n  vaultEndpoint,\n  vaultEngine,\n  vaultNamespace,\n  vaultPrefix,\n  vaultAppRoleEngine,\n  vaultId,\n  vaultSecret,\n  vaultRetry,\n  vaultPing,\n  azureEndpoint,\n  azureTenantID,\n  azureClientID,\n  azureClientSecret,\n  gcpProjectID,\n  gcpEndpoint,\n  gcpClientEmail,\n  gcpClientID,\n  gcpPrivateKeyID,\n  gcpPrivateKey,\n  enableCustomCertsForKES,\n  enableAutoCert,\n  enableTLS,\n  minioCertificates,\n  serverCertificate,\n  clientCertificate,\n  vaultCertificate,\n  vaultCA,\n  gemaltoCA,\n  kesSecurityContext,\n  replicas,\n}: IEncryptionProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  let encryptionAvailable = false;\n  if (\n    enableTLS &&\n    (enableAutoCert ||\n      (minioCertificates &&\n        minioCertificates.filter(\n          (item) => item.encoded_key && item.encoded_cert\n        ).length > 0))\n  ) {\n    encryptionAvailable = true;\n  }\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"encryption\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (enableEncryption) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: kesSecurityContext.runAsUser,\n          customValidation:\n            kesSecurityContext.runAsUser === \"\" ||\n            parseInt(kesSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: kesSecurityContext.runAsGroup,\n          customValidation:\n            kesSecurityContext.runAsGroup === \"\" ||\n            parseInt(kesSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: kesSecurityContext.fsGroup,\n          customValidation:\n            kesSecurityContext.fsGroup === \"\" ||\n            parseInt(kesSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enableCustomCerts) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_cert,\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_cert,\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultEndpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultId,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultSecret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultPing,\n            customValidation: parseInt(vaultPing) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultRetry,\n            customValidation: parseInt(vaultRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsEndpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsRegion,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsAccessKey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsSecretKey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoEndpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoToken,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoDomain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoRetry,\n            customValidation: parseInt(gemaltoRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureEndpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureTenantID,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureClientID,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureClientSecret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    isPageValid(\"encryption\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enableEncryption,\n    encryptionType,\n    vaultEndpoint,\n    vaultEngine,\n    vaultId,\n    vaultSecret,\n    vaultPing,\n    vaultRetry,\n    awsEndpoint,\n    awsRegion,\n    awsSecretKey,\n    awsAccessKey,\n    gemaltoEndpoint,\n    gemaltoToken,\n    gemaltoDomain,\n    gemaltoRetry,\n    gcpProjectID,\n    gcpEndpoint,\n    gcpClientEmail,\n    gcpClientID,\n    gcpPrivateKeyID,\n    gcpPrivateKey,\n    azureEndpoint,\n    azureTenantID,\n    azureClientID,\n    azureClientSecret,\n    isPageValid,\n    enableAutoCert,\n    enableCustomCerts,\n    serverCertificate.encoded_key,\n    serverCertificate.encoded_cert,\n    clientCertificate.encoded_key,\n    clientCertificate.encoded_cert,\n    kesSecurityContext,\n    replicas,\n  ]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Encryption</h3>\n        <span className={classes.descriptionText}>\n          How would you like to encrypt the information at rest.\n        </span>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableEncryption\"\n          id=\"enableEncryption\"\n          name=\"enableEncryption\"\n          checked={enableEncryption}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableEncryption\", checked);\n          }}\n          label={\"Enable Server Side Encryption\"}\n          disabled={!encryptionAvailable}\n        />\n      </Grid>\n      {enableEncryption && (\n        <Fragment>\n          <Grid item xs={12} className={classes.encryptionTypeOptions}>\n            <RadioGroupSelector\n              currentSelection={encryptionType}\n              id=\"encryptionType\"\n              name=\"encryptionType\"\n              label=\"Encryption Options\"\n              onChange={(e) => {\n                updateField(\"encryptionType\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"Vault\", value: \"vault\" },\n                { label: \"AWS\", value: \"aws\" },\n                { label: \"Gemalto\", value: \"gemalto\" },\n                { label: \"GCP\", value: \"gcp\" },\n                { label: \"Azure\", value: \"azure\" },\n              ]}\n            />\n          </Grid>\n          {encryptionType === \"vault\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_endpoint\"\n                  name=\"vault_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEndpoint\", e.target.value);\n                    cleanValidation(\"vault_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={vaultEndpoint}\n                  error={validationErrors[\"vault_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_engine\"\n                  name=\"vault_engine\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEngine\", e.target.value);\n                    cleanValidation(\"vault_engine\");\n                  }}\n                  label=\"Engine\"\n                  value={vaultEngine}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_namespace\"\n                  name=\"vault_namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultNamespace\", e.target.value);\n                  }}\n                  label=\"Namespace\"\n                  value={vaultNamespace}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_prefix\"\n                  name=\"vault_prefix\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultPrefix\", e.target.value);\n                  }}\n                  label=\"Prefix\"\n                  value={vaultPrefix}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>App Role</legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_approle_engine\"\n                      name=\"vault_approle_engine\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultAppRoleEngine\", e.target.value);\n                      }}\n                      label=\"Engine\"\n                      value={vaultAppRoleEngine}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_id\"\n                      name=\"vault_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultId\", e.target.value);\n                        cleanValidation(\"vault_id\");\n                      }}\n                      label=\"AppRole ID\"\n                      value={vaultId}\n                      error={validationErrors[\"vault_id\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_secret\"\n                      name=\"vault_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultSecret\", e.target.value);\n                        cleanValidation(\"vault_secret\");\n                      }}\n                      label=\"AppRole Secret\"\n                      value={vaultSecret}\n                      error={validationErrors[\"vault_secret\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"vault_retry\"\n                      name=\"vault_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultRetry\", e.target.value);\n                        cleanValidation(\"vault_retry\");\n                      }}\n                      label=\"Retry (Seconds)\"\n                      value={vaultRetry}\n                      error={validationErrors[\"vault_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n\n              <Grid container className={classes.mutualTlsConfig}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Mutual TLS authentication (optional)\n                  </legend>\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"key\", fileName, encodedValue);\n                      cleanValidation(\"vault_key\");\n                    }}\n                    accept=\".key,.pem\"\n                    id=\"vault_key\"\n                    name=\"vault_key\"\n                    label=\"Key\"\n                    value={vaultCertificate.key}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"cert\", fileName, encodedValue);\n                      cleanValidation(\"vault_cert\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_cert\"\n                    name=\"vault_cert\"\n                    label=\"Cert\"\n                    value={vaultCertificate.cert}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCa(fileName, encodedValue);\n                      cleanValidation(\"vault_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_ca\"\n                    name=\"vault_ca\"\n                    label=\"CA\"\n                    value={vaultCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                className={classes.formFieldRow}\n                style={{ marginTop: 15 }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>Status</legend>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    min=\"0\"\n                    id=\"vault_ping\"\n                    name=\"vault_ping\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultPing\", e.target.value);\n                      cleanValidation(\"vault_ping\");\n                    }}\n                    label=\"Ping (Seconds)\"\n                    value={vaultPing}\n                    error={validationErrors[\"vault_ping\"] || \"\"}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"azure\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"azure_endpoint\"\n                  name=\"azure_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"azureEndpoint\", e.target.value);\n                    cleanValidation(\"azure_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={azureEndpoint}\n                  error={validationErrors[\"azure_endpoint\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_tenant_id\"\n                      name=\"azure_tenant_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureTenantID\", e.target.value);\n                        cleanValidation(\"azure_tenant_id\");\n                      }}\n                      label=\"Tenant ID\"\n                      value={azureTenantID}\n                      error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_id\"\n                      name=\"azure_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientID\", e.target.value);\n                        cleanValidation(\"azure_client_id\");\n                      }}\n                      label=\"Client ID\"\n                      value={azureClientID}\n                      error={validationErrors[\"azure_client_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_secret\"\n                      name=\"azure_client_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientSecret\", e.target.value);\n                        cleanValidation(\"azure_client_secret\");\n                      }}\n                      label=\"Client Secret\"\n                      value={azureClientSecret}\n                      error={validationErrors[\"azure_client_secret\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gcp\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_project_id\"\n                  name=\"gcp_project_id\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpProjectID\", e.target.value);\n                  }}\n                  label=\"Project ID\"\n                  value={gcpProjectID}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_endpoint\"\n                  name=\"gcp_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpEndpoint\", e.target.value);\n                  }}\n                  label=\"Endpoint\"\n                  value={gcpEndpoint}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_email\"\n                      name=\"gcp_client_email\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientEmail\", e.target.value);\n                      }}\n                      label=\"Client Email\"\n                      value={gcpClientEmail}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_id\"\n                      name=\"gcp_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientID\", e.target.value);\n                      }}\n                      label=\"Client ID\"\n                      value={gcpClientID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key_id\"\n                      name=\"gcp_private_key_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKeyID\", e.target.value);\n                      }}\n                      label=\"Private Key ID\"\n                      value={gcpPrivateKeyID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key\"\n                      name=\"gcp_private_key\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKey\", e.target.value);\n                      }}\n                      label=\"Private Key\"\n                      value={gcpPrivateKey}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"aws\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_endpoint\"\n                  name=\"aws_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsEndpoint\", e.target.value);\n                    cleanValidation(\"aws_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={awsEndpoint}\n                  error={validationErrors[\"aws_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_region\"\n                  name=\"aws_region\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsRegion\", e.target.value);\n                    cleanValidation(\"aws_region\");\n                  }}\n                  label=\"Region\"\n                  value={awsRegion}\n                  error={validationErrors[\"aws_region\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_kmsKey\"\n                  name=\"aws_kmsKey\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsKMSKey\", e.target.value);\n                  }}\n                  label=\"KMS Key\"\n                  value={awsKMSKey}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_accessKey\"\n                      name=\"aws_accessKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsAccessKey\", e.target.value);\n                        cleanValidation(\"aws_accessKey\");\n                      }}\n                      label=\"Access Key\"\n                      value={awsAccessKey}\n                      error={validationErrors[\"aws_accessKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_secretKey\"\n                      name=\"aws_secretKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsSecretKey\", e.target.value);\n                        cleanValidation(\"aws_secretKey\");\n                      }}\n                      label=\"Secret Key\"\n                      value={awsSecretKey}\n                      error={validationErrors[\"aws_secretKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_token\"\n                      name=\"aws_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsToken\", e.target.value);\n                      }}\n                      label=\"Token\"\n                      value={awsToken}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gemalto\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gemalto_endpoint\"\n                  name=\"gemalto_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gemaltoEndpoint\", e.target.value);\n                    cleanValidation(\"gemalto_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={gemaltoEndpoint}\n                  error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_token\"\n                      name=\"gemalto_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoToken\", e.target.value);\n                        cleanValidation(\"gemalto_token\");\n                      }}\n                      label=\"Token\"\n                      value={gemaltoToken}\n                      error={validationErrors[\"gemalto_token\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_domain\"\n                      name=\"gemalto_domain\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoDomain\", e.target.value);\n                        cleanValidation(\"gemalto_domain\");\n                      }}\n                      label=\"Domain\"\n                      value={gemaltoDomain}\n                      error={validationErrors[\"gemalto_domain\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"gemalto_retry\"\n                      name=\"gemalto_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoRetry\", e.target.value);\n                        cleanValidation(\"gemalto_retry\");\n                      }}\n                      label=\"Retry (seconds)\"\n                      value={gemaltoRetry}\n                      error={validationErrors[\"gemalto_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Custom CA Root certificate verification\n                  </legend>\n\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileGemaltoCa(fileName, encodedValue);\n                      cleanValidation(\"gemalto_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"gemalto_ca\"\n                    name=\"gemalto_ca\"\n                    label=\"CA\"\n                    value={gemaltoCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          <div className={classes.headerElement}>\n            <h4 className={classes.h3Section}>Additional Configurations</h4>\n          </div>\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"enableCustomCertsForKES\"\n              id=\"enableCustomCertsForKES\"\n              name=\"enableCustomCertsForKES\"\n              checked={enableCustomCertsForKES || !enableAutoCert}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableCustomCertsForKES\", checked);\n              }}\n              label={\"Custom Certificates\"}\n              disabled={!enableAutoCert}\n            />\n          </Grid>\n          {(enableCustomCertsForKES || !enableAutoCert) && (\n            <Fragment>\n              <Grid container>\n                <Grid item xs={12} style={{ marginBottom: 15 }}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Encryption Service Certificates\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileServerCert(\"key\", fileName, encodedValue);\n                        cleanValidation(\"serverKey\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"serverKey\"\n                      name=\"serverKey\"\n                      label=\"Key\"\n                      error={validationErrors[\"serverKey\"] || \"\"}\n                      value={serverCertificate.key}\n                      required={!enableAutoCert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileServerCert(\"cert\", fileName, encodedValue);\n                        cleanValidation(\"serverCert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"serverCert\"\n                      name=\"serverCert\"\n                      label=\"Cert\"\n                      error={validationErrors[\"serverCert\"] || \"\"}\n                      value={serverCertificate.cert}\n                      required={!enableAutoCert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Grid>\n              <Grid container style={{ marginBottom: 15 }}>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication with MinIO\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileClientCert(\"key\", fileName, encodedValue);\n                        cleanValidation(\"clientKey\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"clientKey\"\n                      name=\"clientKey\"\n                      label=\"Key\"\n                      error={validationErrors[\"clientKey\"] || \"\"}\n                      value={clientCertificate.key}\n                      required={!enableAutoCert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        addFileClientCert(\"cert\", fileName, encodedValue);\n                        cleanValidation(\"clientCert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"clientCert\"\n                      name=\"clientCert\"\n                      label=\"Cert\"\n                      error={validationErrors[\"clientCert\"] || \"\"}\n                      value={clientCertificate.cert}\n                      required={!enableAutoCert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Grid>\n            </Fragment>\n          )}\n          <Grid item xs={12}>\n            <Grid item xs={12} classes={classes.formFieldRow}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"replicas\", e.target.value);\n                  cleanValidation(\"replicas\");\n                }}\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n\n            <fieldset className={classes.fieldGroup} style={{ marginTop: 15 }}>\n              <legend className={classes.descriptionText}>\n                SecurityContext for KES pods\n              </legend>\n              <Grid item xs={12} className={classes.kesSecurityContext}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                >\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsUser\"\n                      name=\"kes_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={kesSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsGroup\"\n                      name=\"kes_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={kesSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_fsGroup\"\n                      name=\"kes_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={kesSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"kesSecurityContextRunAsNonRoot\"\n                    id=\"kes_securityContext_runAsNonRoot\"\n                    name=\"kes_securityContext_runAsNonRoot\"\n                    checked={kesSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  replicas: state.tenants.createTenant.fields.encryption.replicas,\n  enableEncryption:\n    state.tenants.createTenant.fields.encryption.enableEncryption,\n  encryptionType: state.tenants.createTenant.fields.encryption.encryptionType,\n  gemaltoEndpoint: state.tenants.createTenant.fields.encryption.gemaltoEndpoint,\n  gemaltoToken: state.tenants.createTenant.fields.encryption.gemaltoToken,\n  gemaltoDomain: state.tenants.createTenant.fields.encryption.gemaltoDomain,\n  gemaltoRetry: state.tenants.createTenant.fields.encryption.gemaltoRetry,\n  awsEndpoint: state.tenants.createTenant.fields.encryption.awsEndpoint,\n  awsRegion: state.tenants.createTenant.fields.encryption.awsRegion,\n  awsKMSKey: state.tenants.createTenant.fields.encryption.awsKMSKey,\n  awsAccessKey: state.tenants.createTenant.fields.encryption.awsAccessKey,\n  awsSecretKey: state.tenants.createTenant.fields.encryption.awsSecretKey,\n  awsToken: state.tenants.createTenant.fields.encryption.awsToken,\n  vaultEndpoint: state.tenants.createTenant.fields.encryption.vaultEndpoint,\n  vaultEngine: state.tenants.createTenant.fields.encryption.vaultEngine,\n  vaultNamespace: state.tenants.createTenant.fields.encryption.vaultNamespace,\n  vaultPrefix: state.tenants.createTenant.fields.encryption.vaultPrefix,\n  vaultAppRoleEngine:\n    state.tenants.createTenant.fields.encryption.vaultAppRoleEngine,\n  vaultId: state.tenants.createTenant.fields.encryption.vaultId,\n  vaultSecret: state.tenants.createTenant.fields.encryption.vaultSecret,\n  vaultRetry: state.tenants.createTenant.fields.encryption.vaultRetry,\n  vaultPing: state.tenants.createTenant.fields.encryption.vaultPing,\n  azureEndpoint: state.tenants.createTenant.fields.encryption.azureEndpoint,\n  azureTenantID: state.tenants.createTenant.fields.encryption.azureTenantID,\n  azureClientID: state.tenants.createTenant.fields.encryption.azureClientID,\n  azureClientSecret:\n    state.tenants.createTenant.fields.encryption.azureClientSecret,\n  gcpProjectID: state.tenants.createTenant.fields.encryption.gcpProjectID,\n  gcpEndpoint: state.tenants.createTenant.fields.encryption.gcpEndpoint,\n  gcpClientEmail: state.tenants.createTenant.fields.encryption.gcpClientEmail,\n  gcpClientID: state.tenants.createTenant.fields.encryption.gcpClientID,\n  gcpPrivateKeyID: state.tenants.createTenant.fields.encryption.gcpPrivateKeyID,\n  gcpPrivateKey: state.tenants.createTenant.fields.encryption.gcpPrivateKey,\n  enableCustomCertsForKES:\n    state.tenants.createTenant.fields.encryption.enableCustomCertsForKES,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  serverCertificate: state.tenants.createTenant.certificates.serverCertificate,\n  clientCertificate: state.tenants.createTenant.certificates.clientCertificate,\n  vaultCertificate: state.tenants.createTenant.certificates.vaultCertificate,\n  vaultCA: state.tenants.createTenant.certificates.vaultCA,\n  gemaltoCA: state.tenants.createTenant.certificates.gemaltoCA,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  kesSecurityContext:\n    state.tenants.createTenant.fields.encryption.kesSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n});\n\nexport default withStyles(styles)(connector(Encryption));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState } from \"../../../../../store\";\nimport {\n  addNewToleration,\n  isPageValid,\n  removeToleration,\n  setKeyValuePairs,\n  setTolerationInfo,\n  updateAddField,\n} from \"../../actions\";\nimport { setModalErrorSnackMessage } from \"../../../../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport {\n  ErrorResponseHandler,\n  ITolerationModel,\n} from \"../../../../../common/types\";\nimport { LabelKeyPair } from \"../../types\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../common/api\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport TolerationSelector from \"../../../Common/TolerationSelector/TolerationSelector\";\n\ninterface IAffinityProps {\n  classes: any;\n  podAffinity: string;\n  nodeSelectorLabels: string;\n  withPodAntiAffinity: boolean;\n  keyValuePairs: LabelKeyPair[];\n  tolerations: ITolerationModel[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setKeyValuePairs: typeof setKeyValuePairs;\n  setTolerationInfo: typeof setTolerationInfo;\n  addNewToleration: typeof addNewToleration;\n  removeToleration: typeof removeToleration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    fieldContainer: {\n      marginBottom: 0,\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({\n  classes,\n  podAffinity,\n  nodeSelectorLabels,\n  withPodAntiAffinity,\n  setModalErrorSnackMessage,\n  updateAddField,\n  keyValuePairs,\n  setKeyValuePairs,\n  isPageValid,\n  tolerations,\n  setTolerationInfo,\n  addNewToleration,\n  removeToleration,\n}: IAffinityProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"affinity\", field, value);\n    },\n    [updateAddField]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          setModalErrorSnackMessage(err);\n          setKeyValueMap({});\n        });\n    }\n  }, [setModalErrorSnackMessage, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"affinity\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    setTolerationInfo(index, alterToleration);\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Pod Placement</h3>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinnity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n\n                              arrCp[i].key = e.target.value as string;\n                              arrCp[i].value = keyValueMap[newKey][0];\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].key = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value as string;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = Object.assign([], keyValuePairs);\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              setKeyValuePairs(arrCp);\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                setKeyValuePairs(arrCp);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <h3>Tolerations</h3>\n          <span className={classes.error}>\n            {validationErrors[\"tolerations\"]}\n          </span>\n          <Grid container>\n            {tolerations &&\n              tolerations.map((tol, i) => {\n                return (\n                  <Grid\n                    item\n                    xs={12}\n                    className={classes.affinityRow}\n                    key={`affinity-keyVal-${i.toString()}`}\n                  >\n                    <TolerationSelector\n                      effect={tol.effect}\n                      onEffectChange={(value) => {\n                        updateToleration(i, \"effect\", value);\n                      }}\n                      tolerationKey={tol.key}\n                      onTolerationKeyChange={(value) => {\n                        updateToleration(i, \"key\", value);\n                      }}\n                      operator={tol.operator}\n                      onOperatorChange={(value) => {\n                        updateToleration(i, \"operator\", value);\n                      }}\n                      value={tol.value}\n                      onValueChange={(value) => {\n                        updateToleration(i, \"value\", value);\n                      }}\n                      tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                      onSecondsChange={(value) => {\n                        updateToleration(i, \"tolerationSeconds\", {\n                          seconds: value,\n                        });\n                      }}\n                      index={i}\n                    />\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={addNewToleration}\n                        disabled={i !== tolerations.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </div>\n\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => removeToleration(i)}\n                        disabled={tolerations.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </div>\n                  </Grid>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => {\n  const createTenant = state.tenants.createTenant;\n\n  return {\n    podAffinity: createTenant.fields.affinity.podAffinity,\n    nodeSelectorLabels: createTenant.fields.affinity.nodeSelectorLabels,\n    withPodAntiAffinity: createTenant.fields.affinity.withPodAntiAffinity,\n    keyValuePairs: createTenant.nodeSelectorPairs,\n    tolerations: createTenant.tolerations,\n  };\n};\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  isPageValid,\n  setKeyValuePairs,\n  setTolerationInfo,\n  addNewToleration,\n  removeToleration,\n});\n\nexport default withStyles(styles)(connector(Affinity));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\n\ninterface IImagesProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  customImage: boolean;\n  imageName: string;\n  customDockerhub: boolean;\n  imageRegistry: string;\n  imageRegistryUsername: string;\n  imageRegistryPassword: string;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  prometheusCustom: boolean;\n  tenantCustom: boolean;\n  logSearchCustom: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  kesImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Images = ({\n  classes,\n  storageClasses,\n  customImage,\n  imageName,\n  customDockerhub,\n  imageRegistry,\n  imageRegistryUsername,\n  imageRegistryPassword,\n  exposeMinIO,\n  exposeConsole,\n  prometheusCustom,\n  tenantCustom,\n  logSearchCustom,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  kesImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  logSearchSelectedStorageClass,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n}: IImagesProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n    if (logSearchCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchImage\",\n          required: false,\n          value: logSearchImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/operator:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresImage\",\n          required: false,\n          value: logSearchPostgresImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/postgres:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresInitImage\",\n          required: false,\n          value: logSearchPostgresInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusImage\",\n          required: false,\n          value: prometheusImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/prometheus:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusSidecarImage\",\n          required: false,\n          value: prometheusSidecarImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'project/container:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusInitImage\",\n          required: false,\n          value: prometheusInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    logSearchImage,\n    kesImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    isPageValid,\n    prometheusCustom,\n    tenantCustom,\n    logSearchCustom,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Container Images</h3>\n        <span className={classes.descriptionText}>\n          Specify the container images used by the Tenant and it's features.\n        </span>\n      </div>\n\n      <Fragment>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"image\"\n            name=\"image\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageName\", e.target.value);\n              cleanValidation(\"image\");\n            }}\n            label=\"MinIO\"\n            value={imageName}\n            error={validationErrors[\"image\"] || \"\"}\n            placeholder=\"E.g. minio/minio:RELEASE.2022-02-26T02-54-46Z\"\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"kesImage\"\n            name=\"kesImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"kesImage\", e.target.value);\n              cleanValidation(\"kesImage\");\n            }}\n            label=\"KES\"\n            value={kesImage}\n            error={validationErrors[\"kesImage\"] || \"\"}\n            placeholder=\"E.g. minio/kes:v0.17.6\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Log Search</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchImage\"\n            name=\"logSearchImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchImage\", e.target.value);\n              cleanValidation(\"logSearchImage\");\n            }}\n            label=\"API\"\n            value={logSearchImage}\n            error={validationErrors[\"logSearchImage\"] || \"\"}\n            placeholder=\"E.g. minio/operator:v4.4.10\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresImage\"\n            name=\"logSearchPostgresImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresImage\");\n            }}\n            label=\"PostgreSQL\"\n            value={logSearchPostgresImage}\n            error={validationErrors[\"logSearchPostgresImage\"] || \"\"}\n            placeholder=\"E.g. library/postgres:13\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresInitImage\"\n            name=\"logSearchPostgresInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresInitImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresInitImage\");\n            }}\n            label=\"PostgreSQL Init\"\n            value={logSearchPostgresInitImage}\n            error={validationErrors[\"logSearchPostgresInitImage\"] || \"\"}\n            placeholder=\"E.g. library/busybox:1.33.1\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Monitoring</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusImage\"\n            name=\"prometheusImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusImage\", e.target.value);\n              cleanValidation(\"prometheusImage\");\n            }}\n            label=\"Prometheus\"\n            value={prometheusImage}\n            error={validationErrors[\"prometheusImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusSidecarImage\"\n            name=\"prometheusSidecarImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusSidecarImage\", e.target.value);\n              cleanValidation(\"prometheusSidecarImage\");\n            }}\n            label=\"Prometheus Sidecar\"\n            value={prometheusSidecarImage}\n            error={validationErrors[\"prometheusSidecarImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusInitImage\"\n            name=\"prometheusInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusInitImage\", e.target.value);\n              cleanValidation(\"prometheusInitImage\");\n            }}\n            label=\"Prometheus Init\"\n            value={prometheusInitImage}\n            error={validationErrors[\"prometheusInitImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n      </Fragment>\n\n      {customImage && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <h4>Custom Container Registry</h4>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"custom_docker_hub\"\n              id=\"custom_docker_hub\"\n              name=\"custom_docker_hub\"\n              checked={customDockerhub}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"customDockerhub\", checked);\n              }}\n              label={\"Use a private container registry\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {customDockerhub && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registry\"\n              name=\"registry\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistry\", e.target.value);\n              }}\n              label=\"Endpoint\"\n              value={imageRegistry}\n              error={validationErrors[\"registry\"] || \"\"}\n              placeholder=\"E.g. https://index.docker.io/v1/\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryUsername\"\n              name=\"registryUsername\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryUsername\", e.target.value);\n              }}\n              label=\"Username\"\n              value={imageRegistryUsername}\n              error={validationErrors[\"registryUsername\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryPassword\"\n              name=\"registryPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryPassword\", e.target.value);\n              }}\n              label=\"Password\"\n              value={imageRegistryPassword}\n              error={validationErrors[\"registryPassword\"] || \"\"}\n              required\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  customImage: state.tenants.createTenant.fields.configure.customImage,\n  imageName: state.tenants.createTenant.fields.configure.imageName,\n  customDockerhub: state.tenants.createTenant.fields.configure.customDockerhub,\n  imageRegistry: state.tenants.createTenant.fields.configure.imageRegistry,\n  imageRegistryUsername:\n    state.tenants.createTenant.fields.configure.imageRegistryUsername,\n  imageRegistryPassword:\n    state.tenants.createTenant.fields.configure.imageRegistryPassword,\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  prometheusCustom:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  logSearchCustom: state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  kesImage: state.tenants.createTenant.fields.configure.kesImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Images));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  modalBasic,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"../../../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...modalBasic,\n    ...deleteDialogStyles,\n  });\n\ninterface IAddNamespace {\n  classes: any;\n  namespace: string;\n  addNamespaceOpen: boolean;\n  closeAddNamespaceModalAndRefresh: (reloadNamespaceData: boolean) => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst AddNamespaceModal = ({\n  classes,\n  namespace,\n  addNamespaceOpen,\n  closeAddNamespaceModalAndRefresh,\n  setErrorSnackMessage,\n}: IAddNamespace) => {\n  const [addNamespaceLoading, setAddNamespaceLoading] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    if (addNamespaceLoading) {\n      api\n        .invoke(\"POST\", \"/api/v1/namespace\", {\n          name: namespace,\n        })\n        .then((res) => {\n          setAddNamespaceLoading(false);\n          closeAddNamespaceModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddNamespaceLoading(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    addNamespaceLoading,\n    closeAddNamespaceModalAndRefresh,\n    namespace,\n    setErrorSnackMessage,\n  ]);\n\n  const addNamespace = () => {\n    setAddNamespaceLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`New namespace`}\n      confirmText={\"Create\"}\n      confirmButtonProps={{\n        color: \"primary\",\n        variant: \"contained\",\n      }}\n      isOpen={addNamespaceOpen}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={addNamespaceLoading}\n      onConfirm={addNamespace}\n      onClose={() => {\n        closeAddNamespaceModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {addNamespaceLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to add a namespace called\n            <br />\n            <b className={classes.wrapText}>{namespace}</b>?\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(AddNamespaceModal));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { niceBytes } from \"../../../../../common/utils\";\nimport { Opts } from \"../../ListTenants/utils\";\nimport { IResourcesSize } from \"../../ListTenants/types\";\nimport { IErasureCodeCalc } from \"../../../../../common/types\";\n\nimport { Divider } from \"@mui/material\";\nimport { IntegrationConfiguration } from \"./TenantResources/utils\";\n\ninterface ISizePreviewProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  volumeSize: string;\n  sizeFactor: string;\n  drivesPerServer: string;\n  nodes: string;\n  memoryNode: string;\n  ecParity: string;\n  ecParityChoices: Opts[];\n  cleanECChoices: string[];\n  resourcesSize: IResourcesSize;\n  distribution: any;\n  ecParityCalc: IErasureCodeCalc;\n  limitSize: any;\n  selectedStorageClass: string;\n  cpuToUse: string;\n  integrationSelection: IntegrationConfiguration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 4,\n    },\n    table: {\n      \"& .MuiTableCell-root\": {\n        fontSize: 13,\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst SizePreview = ({\n  classes,\n  nodes,\n  memoryNode,\n  ecParity,\n  distribution,\n  ecParityCalc,\n  cpuToUse,\n  integrationSelection,\n}: ISizePreviewProps) => {\n  const usableInformation = ecParityCalc.storageFactors.find(\n    (element) => element.erasureCode === ecParity\n  );\n\n  return (\n    <div className={classes.root}>\n      <h4>Resource Allocation</h4>\n      <Divider />\n      <Table className={classes.table} aria-label=\"simple table\" size={\"small\"}>\n        <TableBody>\n          <TableRow>\n            <TableCell scope=\"row\">Number of Servers</TableCell>\n            <TableCell align=\"right\">\n              {parseInt(nodes) > 0 ? nodes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? distribution.disks : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drive Capacity</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? niceBytes(distribution.pvSize) : \"-\"}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n\n          <TableRow>\n            <TableCell scope=\"row\">Total Volumes</TableCell>\n            <TableCell align=\"right\">\n              {distribution ? distribution.persistentVolumes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory per Node</TableCell>\n                  <TableCell align=\"right\">{memoryNode} Gi</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    CPU Selection\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {cpuToUse}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n        </TableBody>\n      </Table>\n      {ecParityCalc.error === 0 && usableInformation && (\n        <Fragment>\n          <h4>Erasure Code Configuration</h4>\n          <Divider />\n          <Table\n            className={classes.table}\n            aria-label=\"simple table\"\n            size={\"small\"}\n          >\n            <TableBody>\n              <TableRow>\n                <TableCell scope=\"row\">EC Parity</TableCell>\n                <TableCell align=\"right\">\n                  {ecParity !== \"\" ? ecParity : \"-\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Raw Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(ecParityCalc.rawCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Usable Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(usableInformation.maxCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                  Server Failures Tolerated\n                </TableCell>\n                <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                  {distribution\n                    ? Math.floor(\n                        usableInformation.maxFailureTolerations /\n                          distribution.disks\n                      )\n                    : \"-\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Fragment>\n      )}\n      {integrationSelection.typeSelection !== \"\" &&\n        integrationSelection.storageClass !== \"\" && (\n          <Fragment>\n            <h4>Single Instance Configuration</h4>\n            <Divider />\n            <Table\n              className={classes.table}\n              aria-label=\"simple table\"\n              size={\"small\"}\n            >\n              <TableBody>\n                <TableRow>\n                  <TableCell scope=\"row\">CPU</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.CPU !== 0\n                      ? integrationSelection.CPU\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.memory !== 0\n                      ? `${integrationSelection.memory} Gi`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.drivesPerServer !== 0\n                      ? `${integrationSelection.drivesPerServer}`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    Drive Size\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {integrationSelection.driveSize.driveSize}\n                    {integrationSelection.driveSize.sizeUnit}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Fragment>\n        )}\n    </div>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  volumeSize: state.tenants.createTenant.fields.tenantSize.volumeSize,\n  sizeFactor: state.tenants.createTenant.fields.tenantSize.sizeFactor,\n  drivesPerServer: state.tenants.createTenant.fields.tenantSize.drivesPerServer,\n  nodes: state.tenants.createTenant.fields.tenantSize.nodes,\n  memoryNode:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequest,\n  ecParity: state.tenants.createTenant.fields.tenantSize.ecParity,\n  ecParityChoices: state.tenants.createTenant.fields.tenantSize.ecParityChoices,\n  cleanECChoices: state.tenants.createTenant.fields.tenantSize.cleanECChoices,\n  resourcesSize: state.tenants.createTenant.fields.tenantSize.resourcesSize,\n  distribution: state.tenants.createTenant.fields.tenantSize.distribution,\n  ecParityCalc: state.tenants.createTenant.fields.tenantSize.ecParityCalc,\n  limitSize: state.tenants.createTenant.fields.tenantSize.limitSize,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  cpuToUse: state.tenants.createTenant.fields.tenantSize.resourcesCPURequest,\n  integrationSelection:\n    state.tenants.createTenant.fields.tenantSize.integrationSelection,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(SizePreview));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport {\n  isPageValid,\n  setLimitSize,\n  setStorageType,\n  setStorageClassesList,\n  updateAddField,\n} from \"../../../actions\";\nimport {\n  getLimitSizes,\n  IQuotaElement,\n  IQuotas,\n  Opts,\n} from \"../../../ListTenants/utils\";\nimport { AppState } from \"../../../../../../store\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport AddIcon from \"../../../../../../icons/AddIcon\";\nimport AddNamespaceModal from \"../helpers/AddNamespaceModal\";\nimport SizePreview from \"../SizePreview\";\nimport TenantSize from \"./TenantSize\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport { IMkEnvs, mkPanelConfigurations } from \"./utils\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    sizePreview: {\n      position: \"fixed\",\n      marginLeft: 10,\n      background: \"#FFFFFF\",\n      border: \"1px solid #EAEAEA\",\n      padding: 2,\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface INameTenantMainScreen {\n  classes: any;\n  storageClasses: Opts[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setStorageClassesList: typeof setStorageClassesList;\n  setLimitSize: typeof setLimitSize;\n  tenantName: string;\n  namespace: string;\n  selectedStorageClass: string;\n  selectedStorageType: string;\n  formToRender?: IMkEnvs;\n  features?: string[];\n  setStorageType: typeof setStorageType;\n}\n\nconst NameTenantMain = ({\n  classes,\n  storageClasses,\n  tenantName,\n  namespace,\n  selectedStorageClass,\n  selectedStorageType,\n  formToRender = IMkEnvs.default,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setModalErrorSnackMessage,\n  features,\n  setStorageType,\n}: INameTenantMainScreen) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [emptyNamespace, setEmptyNamespace] = useState<boolean>(true);\n  const [loadingNamespaceInfo, setLoadingNamespaceInfo] =\n    useState<boolean>(false);\n  const [showCreateButton, setShowCreateButton] = useState<boolean>(false);\n  const [openAddNSConfirm, setOpenAddNSConfirm] = useState<boolean>(false);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: string) => {\n      updateAddField(\"nameTenant\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Storage classes retrieval\n  const getNamespaceInformation = useCallback(() => {\n    setShowCreateButton(false);\n    // Empty tenantValidation\n    api\n      .invoke(\"GET\", `/api/v1/namespaces/${namespace}/tenants`)\n      .then((res: any[]) => {\n        const tenantsList = get(res, \"tenants\", []);\n\n        if (tenantsList && tenantsList.length > 0) {\n          setEmptyNamespace(false);\n          setLoadingNamespaceInfo(false);\n          return;\n        }\n        setEmptyNamespace(true);\n\n        // Storagequotas retrieval\n        api\n          .invoke(\n            \"GET\",\n            `/api/v1/namespaces/${namespace}/resourcequotas/${namespace}-storagequota`\n          )\n          .then((res: IQuotas) => {\n            const elements: IQuotaElement[] = get(res, \"elements\", []);\n            setLimitSize(getLimitSizes(res));\n\n            const newStorage = elements.map((storageClass: any) => {\n              const name = get(storageClass, \"name\", \"\").split(\n                \".storageclass.storage.k8s.io/requests.storage\"\n              )[0];\n\n              return { label: name, value: name };\n            });\n\n            setStorageClassesList(newStorage);\n\n            const stExists = newStorage.findIndex(\n              (storageClass) => storageClass.value === selectedStorageClass\n            );\n\n            if (newStorage.length > 0 && stExists === -1) {\n              updateField(\"selectedStorageClass\", newStorage[0].value);\n            } else if (newStorage.length === 0) {\n              updateField(\"selectedStorageClass\", \"\");\n              setStorageClassesList([]);\n            }\n            setLoadingNamespaceInfo(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingNamespaceInfo(false);\n            setShowCreateButton(true);\n            updateField(\"selectedStorageClass\", \"\");\n            setStorageClassesList([]);\n            console.error(\"Namespace error: \", err);\n          });\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setModalErrorSnackMessage({\n          errorMessage: \"Error validating if namespace already has tenants\",\n          detailedError: err.detailedError,\n        });\n      });\n  }, [\n    namespace,\n    setLimitSize,\n    setModalErrorSnackMessage,\n    setStorageClassesList,\n    updateField,\n    selectedStorageClass,\n  ]);\n\n  const debounceNamespace = useMemo(\n    () => debounce(getNamespaceInformation, 500),\n    [getNamespaceInformation]\n  );\n\n  useEffect(() => {\n    if (namespace !== \"\") {\n      debounceNamespace();\n      setLoadingNamespaceInfo(true);\n\n      // Cancel previous debounce calls during useEffect cleanup.\n      return debounceNamespace.cancel;\n    }\n  }, [debounceNamespace, namespace]);\n\n  // Validation\n  useEffect(() => {\n    let customNamespaceError = false;\n    let errorMessage = \"\";\n\n    if (!emptyNamespace && !loadingNamespaceInfo) {\n      customNamespaceError = true;\n      errorMessage = \"You can only create one tenant per namespace\";\n    } else if (\n      storageClasses.length < 1 &&\n      emptyNamespace &&\n      !loadingNamespaceInfo\n    ) {\n      customNamespaceError = true;\n      errorMessage = \"Please enter a valid namespace\";\n    }\n\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"tenant-name\",\n        required: true,\n        pattern: /^[a-z0-9-]{3,63}$/,\n        customPatternMessage:\n          \"Name only can contain lowercase letters, numbers and '-'. Min. Length: 3\",\n        value: tenantName,\n      },\n      {\n        fieldKey: \"namespace\",\n        required: true,\n        value: namespace,\n        customValidation: customNamespaceError,\n        customValidationMessage: errorMessage,\n      },\n    ]);\n\n    const isValid =\n      !(\"tenant-name\" in commonValidation) &&\n      !(\"namespace\" in commonValidation) &&\n      ((formToRender === IMkEnvs.default && storageClasses.length > 0) ||\n        (formToRender !== IMkEnvs.default && selectedStorageType !== \"\"));\n\n    isPageValid(\"nameTenant\", isValid);\n\n    setValidationErrors(commonValidation);\n  }, [\n    storageClasses,\n    namespace,\n    tenantName,\n    isPageValid,\n    emptyNamespace,\n    loadingNamespaceInfo,\n    selectedStorageType,\n    formToRender,\n  ]);\n\n  const frmValidationCleanup = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const addNamespace = () => {\n    setOpenAddNSConfirm(true);\n  };\n\n  const closeAddNamespace = (refresh: boolean) => {\n    setOpenAddNSConfirm(false);\n\n    if (refresh) {\n      debounceNamespace();\n    }\n  };\n\n  return (\n    <Fragment>\n      {openAddNSConfirm && (\n        <AddNamespaceModal\n          addNamespaceOpen={openAddNSConfirm}\n          closeAddNamespaceModalAndRefresh={closeAddNamespace}\n          namespace={namespace}\n        />\n      )}\n      <Grid container>\n        <Grid item xs={8} md={9}>\n          <Paper className={classes.paperWrapper} sx={{ minHeight: 550 }}>\n            <Grid container>\n              <Grid item xs={12}>\n                <div className={classes.headerElement}>\n                  <h3 className={classes.h3Section}>Name</h3>\n                  <span className={classes.descriptionText}>\n                    How would you like to name this new tenant?\n                  </span>\n                </div>\n                <div className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"tenant-name\"\n                    name=\"tenant-name\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantName\", e.target.value);\n                      frmValidationCleanup(\"tenant-name\");\n                    }}\n                    label=\"Name\"\n                    value={tenantName}\n                    required\n                    error={validationErrors[\"tenant-name\"] || \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"namespace\"\n                  name=\"namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"namespace\", e.target.value);\n                    frmValidationCleanup(\"namespace\");\n                  }}\n                  label=\"Namespace\"\n                  value={namespace}\n                  error={validationErrors[\"namespace\"] || \"\"}\n                  overlayId={\"add-namespace\"}\n                  overlayIcon={showCreateButton ? <AddIcon /> : null}\n                  overlayAction={addNamespace}\n                  required\n                />\n              </Grid>\n              {formToRender === IMkEnvs.default ? (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_class\"\n                    name=\"storage_class\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      updateField(\n                        \"selectedStorageClass\",\n                        e.target.value as string\n                      );\n                    }}\n                    label=\"Storage Class\"\n                    value={selectedStorageClass}\n                    options={storageClasses}\n                    disabled={storageClasses.length < 1}\n                  />\n                </Grid>\n              ) : (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_type\"\n                    name=\"storage_type\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      setStorageType(e.target.value as string, features);\n                    }}\n                    label={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorLabel`,\n                      \"Storage Type\"\n                    )}\n                    value={selectedStorageType}\n                    options={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorValues`,\n                      []\n                    )}\n                  />\n                </Grid>\n              )}\n              {formToRender === IMkEnvs.default ? (\n                <TenantSize />\n              ) : (\n                get(\n                  mkPanelConfigurations,\n                  `${formToRender}.sizingComponent`,\n                  null\n                )\n              )}\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={4} md={3}>\n          <div className={classes.sizePreview}>\n            <SizePreview />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  tenantName: state.tenants.createTenant.fields.nameTenant.tenantName,\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  selectedStorageType:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageType,\n  storageClasses: state.tenants.createTenant.storageClasses,\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setStorageType,\n});\n\nexport default withStyles(styles)(connector(NameTenantMain));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport NameTenantMain from \"./NameTenantMain\";\nimport { IMkEnvs, resourcesConfigurations } from \"./utils\";\nimport { AppState } from \"../../../../../../store\";\n\ninterface ITenantResources {\n  features?: string[];\n}\n\nconst TenantResources = ({ features }: ITenantResources) => {\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  if (formRender === null) {\n    return null;\n  }\n\n  return <NameTenantMain formToRender={formRender} />;\n};\n\nconst mapState = (state: AppState) => ({\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, null);\n\nexport default connector(TenantResources);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  logSearchEnabled: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  logSearchSecurityContext: ISecurityContext;\n  logSearchPostgresSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    logSearchEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigLogSearch = ({\n  classes,\n  storageClasses,\n  logSearchEnabled,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  logSearchSelectedStorageClass,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  logSearchSecurityContext,\n  logSearchPostgresSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (logSearchEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsUser\",\n          required: true,\n          value: logSearchSecurityContext.runAsUser,\n          customValidation:\n            logSearchSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_fsGroup\",\n          required: true,\n          value: logSearchSecurityContext.fsGroup,\n          customValidation:\n            logSearchSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsUser\",\n          required: true,\n          value: logSearchPostgresSecurityContext.runAsUser,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_fsGroup\",\n          required: true,\n          value: logSearchPostgresSecurityContext.fsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    logSearchImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    isPageValid,\n    logSearchEnabled,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n    tenantSecurityContext,\n    logSearchSecurityContext,\n    logSearchPostgresSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterLogSearch = storageClasses.filter(\n        (item: any) => item.value === logSearchSelectedStorageClass\n      );\n      if (filterLogSearch.length === 0) {\n        updateField(\"logSearchSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    logSearchSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Audit Log</h3>\n        <span className={classes.descriptionText}>\n          Audit log deploys a small PostgreSQL database and store access logs of\n          all calls into the tenant.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"logSearchConfig\"\n          id=\"log-search-enabled\"\n          name=\"log_search_enabled\"\n          checked={logSearchEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"logSearchEnabled\", checked);\n          }}\n          label={\"Enabled\"}\n        />\n      </Grid>\n      {logSearchEnabled && (\n        <Grid xs={12} className={classes.logSearchEnabledFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"log_search_storage_class\"\n              name=\"log_search_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"logSearchSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Log Search Storage Class\"\n              value={logSearchSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"log_search_volume_size\"\n                name=\"log_search_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"logSearchVolumeSize\", e.target.value);\n                  cleanValidation(\"log_search_volume_size\");\n                }}\n                label=\"Storage Size\"\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n                value={logSearchVolumeSize}\n                required\n                error={validationErrors[\"log_search_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for LogSearch\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsUser\"\n                    name=\"logSearch_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsGroup\"\n                    name=\"logSearch_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"logSearch_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_fsGroup\"\n                    name=\"logSearch_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"logSearchSecurityContextRunAsNonRoot\"\n                  id=\"logSearch_securityContext_runAsNonRoot\"\n                  name=\"logSearch_securityContext_runAsNonRoot\"\n                  checked={logSearchSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchSecurityContext\", {\n                      ...logSearchSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for PostgreSQL\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsUser\"\n                    name=\"postgres_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchPostgresSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsGroup\"\n                    name=\"postgres_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchPostgresSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_fsGroup\"\n                    name=\"postgres_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchPostgresSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"postgresSecurityContextRunAsNonRoot\"\n                  id=\"postgres_securityContext_runAsNonRoot\"\n                  name=\"postgres_securityContext_runAsNonRoot\"\n                  checked={logSearchPostgresSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchPostgresSecurityContext\", {\n                      ...logSearchPostgresSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  logSearchEnabled:\n    state.tenants.createTenant.fields.configure.logSearchEnabled,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  logSearchSecurityContext:\n    state.tenants.createTenant.fields.configure.logSearchSecurityContext,\n  logSearchPostgresSecurityContext:\n    state.tenants.createTenant.fields.configure\n      .logSearchPostgresSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigLogSearch));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  prometheusEnabled: boolean;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  prometheusSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    prometheusEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigPrometheus = ({\n  classes,\n  storageClasses,\n  prometheusEnabled,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  prometheusSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greater than 0`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsUser\",\n          required: true,\n          value: prometheusSecurityContext.runAsUser,\n          customValidation:\n            prometheusSecurityContext.runAsUser === \"\" ||\n            parseInt(prometheusSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsGroup\",\n          required: true,\n          value: prometheusSecurityContext.runAsGroup,\n          customValidation:\n            prometheusSecurityContext.runAsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_fsGroup\",\n          required: true,\n          value: prometheusSecurityContext.fsGroup,\n          customValidation:\n            prometheusSecurityContext.fsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    isPageValid,\n    prometheusEnabled,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    tenantSecurityContext,\n    prometheusSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterPrometheus = storageClasses.filter(\n        (item: any) => item.value === prometheusSelectedStorageClass\n      );\n      if (filterPrometheus.length === 0) {\n        updateField(\"prometheusSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    prometheusSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Monitoring</h3>\n        <span className={classes.descriptionText}>\n          A small Prometheus will be deployed to keep metrics about the tenant.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"prometheusConfig\"\n          id=\"prometheus_configuration\"\n          name=\"prometheus_configuration\"\n          checked={prometheusEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"prometheusEnabled\", checked);\n          }}\n          label={\"Enabled\"}\n        />\n      </Grid>\n      {prometheusEnabled && (\n        <Grid xs={12} className={classes.prometheusEnabledFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"prometheus_storage_class\"\n              name=\"prometheus_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"prometheusSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Prometheus Storage Class\"\n              value={prometheusSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"prometheus_volume_size\"\n                name=\"prometheus_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"prometheusVolumeSize\", e.target.value);\n                  cleanValidation(\"prometheus_volume_size\");\n                }}\n                label=\"Storage Size\"\n                overlayObject={\n                  <InputUnitMenu\n                    id={\"size-unit\"}\n                    onUnitChange={() => {}}\n                    unitSelected={\"Gi\"}\n                    unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                    disabled={true}\n                  />\n                }\n                value={prometheusVolumeSize}\n                required\n                error={validationErrors[\"prometheus_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for Prometheus\n            </legend>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsUser\"\n                    name=\"prometheus_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={prometheusSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsUser\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsGroup\"\n                    name=\"prometheus_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={prometheusSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_fsGroup\"\n                    name=\"prometheus_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={prometheusSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"prometheus_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.fieldSpaceTop}`}\n              >\n                <FormSwitchWrapper\n                  value=\"prometheusSecurityContextRunAsNonRoot\"\n                  id=\"prometheus_securityContext_runAsNonRoot\"\n                  name=\"prometheus_securityContext_runAsNonRoot\"\n                  checked={prometheusSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"prometheusSecurityContext\", {\n                      ...prometheusSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  prometheusEnabled:\n    state.tenants.createTenant.fields.configure.prometheusEnabled,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  prometheusSecurityContext:\n    state.tenants.createTenant.fields.configure.prometheusSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(ConfigPrometheus));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress } from \"@mui/material\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalBasic,\n  settingsCommon,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport api from \"../../../../common/api\";\nimport { generatePoolName, getBytes } from \"../../../../common/utils\";\nimport GenericWizard from \"../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../Common/GenericWizard/types\";\nimport { NewServiceAccount } from \"../../Common/CredentialsPrompt/types\";\nimport {\n  ErrorResponseHandler,\n  ITenantCreator,\n  ITolerationModel,\n} from \"../../../../common/types\";\nimport { KeyPair } from \"../ListTenants/utils\";\n\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { getDefaultAffinity, getNodeSelector } from \"../TenantDetails/utils\";\nimport CredentialsPrompt from \"../../Common/CredentialsPrompt/CredentialsPrompt\";\nimport { AppState } from \"../../../../store\";\nimport { ICertificatesItems, IFieldStore } from \"../types\";\nimport { resetAddTenantForm, updateAddField } from \"../actions\";\nimport Configure from \"./Steps/Configure\";\nimport IdentityProvider from \"./Steps/IdentityProvider\";\nimport Security from \"./Steps/Security\";\nimport Encryption from \"./Steps/Encryption\";\nimport Affinity from \"./Steps/Affinity\";\nimport PageHeader from \"../../Common/PageHeader/PageHeader\";\nimport history from \"../../../../history\";\nimport Images from \"./Steps/Images\";\nimport PageLayout from \"../../Common/Layout/PageLayout\";\nimport BackLink from \"../../../../common/BackLink\";\nimport TenantResources from \"./Steps/TenantResources/TenantResources\";\nimport ConfigLogSearch from \"./Steps/ConfigLogSearch\";\nimport ConfigPrometheus from \"./Steps/ConfigPrometheus\";\nimport {\n  IMkEnvs,\n  resourcesConfigurations,\n} from \"./Steps/TenantResources/utils\";\nimport HelpBox from \"../../../../common/HelpBox\";\nimport { StorageIcon } from \"../../../../icons\";\n\ninterface IAddTenantProps {\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  resetAddTenantForm: typeof resetAddTenantForm;\n  updateAddField: typeof updateAddField;\n  fields: IFieldStore;\n  certificates: ICertificatesItems;\n  selectedStorageClass: string;\n  namespace: string;\n  validPages: string[];\n  classes: any;\n  features?: string[];\n  tolerations: ITolerationModel[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n    ...settingsCommon,\n  });\n\nconst AddTenant = ({\n  classes,\n  fields,\n  certificates,\n  selectedStorageClass,\n  namespace,\n  validPages,\n  setErrorSnackMessage,\n  resetAddTenantForm,\n  features,\n  tolerations,\n}: IAddTenantProps) => {\n  // Modals\n  const [showNewCredentials, setShowNewCredentials] = useState<boolean>(false);\n  const [createdAccount, setCreatedAccount] =\n    useState<NewServiceAccount | null>(null);\n\n  // Fields\n  const [addSending, setAddSending] = useState<boolean>(false);\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  /* Send Information to backend */\n  useEffect(() => {\n    const tenantName = fields.nameTenant.tenantName;\n    const selectedStorageClass = fields.nameTenant.selectedStorageClass;\n    const imageName = fields.configure.imageName;\n    const customDockerhub = fields.configure.customDockerhub;\n    const imageRegistry = fields.configure.imageRegistry;\n    const imageRegistryUsername = fields.configure.imageRegistryUsername;\n    const imageRegistryPassword = fields.configure.imageRegistryPassword;\n    const exposeMinIO = fields.configure.exposeMinIO;\n    const exposeConsole = fields.configure.exposeConsole;\n    const idpSelection = fields.identityProvider.idpSelection;\n    const openIDConfigurationURL =\n      fields.identityProvider.openIDConfigurationURL;\n    const openIDClientID = fields.identityProvider.openIDClientID;\n    const openIDClaimName = fields.identityProvider.openIDClaimName;\n    const openIDCallbackURL = fields.identityProvider.openIDCallbackURL;\n    const openIDScopes = fields.identityProvider.openIDScopes;\n    const openIDSecretID = fields.identityProvider.openIDSecretID;\n    const ADURL = fields.identityProvider.ADURL;\n    const ADSkipTLS = fields.identityProvider.ADSkipTLS;\n    const ADServerInsecure = fields.identityProvider.ADServerInsecure;\n    const ADGroupSearchBaseDN = fields.identityProvider.ADGroupSearchBaseDN;\n    const ADGroupSearchFilter = fields.identityProvider.ADGroupSearchFilter;\n    const ADUserDNs = fields.identityProvider.ADUserDNs;\n    const ADLookupBindDN = fields.identityProvider.ADLookupBindDN;\n    const ADLookupBindPassword = fields.identityProvider.ADLookupBindPassword;\n    const ADUserDNSearchBaseDN = fields.identityProvider.ADUserDNSearchBaseDN;\n    const ADUserDNSearchFilter = fields.identityProvider.ADUserDNSearchFilter;\n    const ADServerStartTLS = fields.identityProvider.ADServerStartTLS;\n    const accessKeys = fields.identityProvider.accessKeys;\n    const secretKeys = fields.identityProvider.secretKeys;\n    const minioCertificates = certificates.minioCertificates;\n    const caCertificates = certificates.caCertificates;\n    const consoleCaCertificates = certificates.consoleCaCertificates;\n    const consoleCertificate = certificates.consoleCertificate;\n    const serverCertificate = certificates.serverCertificate;\n    const clientCertificate = certificates.clientCertificate;\n    const vaultCertificate = certificates.vaultCertificate;\n    const vaultCA = certificates.vaultCA;\n    const gemaltoCA = certificates.gemaltoCA;\n    const enableEncryption = fields.encryption.enableEncryption;\n    const encryptionType = fields.encryption.encryptionType;\n    const gemaltoEndpoint = fields.encryption.gemaltoEndpoint;\n    const gemaltoToken = fields.encryption.gemaltoToken;\n    const gemaltoDomain = fields.encryption.gemaltoDomain;\n    const gemaltoRetry = fields.encryption.gemaltoRetry;\n    const awsEndpoint = fields.encryption.awsEndpoint;\n    const awsRegion = fields.encryption.awsRegion;\n    const awsKMSKey = fields.encryption.awsKMSKey;\n    const awsAccessKey = fields.encryption.awsAccessKey;\n    const awsSecretKey = fields.encryption.awsSecretKey;\n    const awsToken = fields.encryption.awsToken;\n    const vaultEndpoint = fields.encryption.vaultEndpoint;\n    const vaultEngine = fields.encryption.vaultEngine;\n    const vaultNamespace = fields.encryption.vaultNamespace;\n    const vaultPrefix = fields.encryption.vaultPrefix;\n    const vaultAppRoleEngine = fields.encryption.vaultAppRoleEngine;\n    const vaultId = fields.encryption.vaultId;\n    const vaultSecret = fields.encryption.vaultSecret;\n    const vaultRetry = fields.encryption.vaultRetry;\n    const vaultPing = fields.encryption.vaultPing;\n    const azureEndpoint = fields.encryption.azureEndpoint;\n    const azureTenantID = fields.encryption.azureTenantID;\n    const azureClientID = fields.encryption.azureClientID;\n    const azureClientSecret = fields.encryption.azureClientSecret;\n    const gcpProjectID = fields.encryption.gcpProjectID;\n    const gcpEndpoint = fields.encryption.gcpEndpoint;\n    const gcpClientEmail = fields.encryption.gcpClientEmail;\n    const gcpClientID = fields.encryption.gcpClientID;\n    const gcpPrivateKeyID = fields.encryption.gcpPrivateKeyID;\n    const gcpPrivateKey = fields.encryption.gcpPrivateKey;\n    const enableAutoCert = fields.security.enableAutoCert;\n    const enableTLS = fields.security.enableTLS;\n    const ecParity = fields.tenantSize.ecParity;\n    const distribution = fields.tenantSize.distribution;\n    const tenantCustom = fields.configure.tenantCustom;\n    const logSearchEnabled = fields.configure.logSearchEnabled;\n    const prometheusEnabled = fields.configure.prometheusEnabled;\n    const logSearchVolumeSize = fields.configure.logSearchVolumeSize;\n    const logSearchSelectedStorageClass =\n      fields.configure.logSearchSelectedStorageClass;\n    const logSearchImage = fields.configure.logSearchImage;\n    const kesImage = fields.configure.kesImage;\n    const logSearchPostgresImage = fields.configure.logSearchPostgresImage;\n    const logSearchPostgresInitImage =\n      fields.configure.logSearchPostgresInitImage;\n    const prometheusImage = fields.configure.prometheusImage;\n    const prometheusSidecarImage = fields.configure.prometheusSidecarImage;\n    const prometheusInitImage = fields.configure.prometheusInitImage;\n    const prometheusSelectedStorageClass =\n      fields.configure.prometheusSelectedStorageClass;\n    const prometheusVolumeSize = fields.configure.prometheusVolumeSize;\n    const affinityType = fields.affinity.podAffinity;\n    const nodeSelectorLabels = fields.affinity.nodeSelectorLabels;\n    const withPodAntiAffinity = fields.affinity.withPodAntiAffinity;\n\n    const tenantSecurityContext = fields.configure.tenantSecurityContext;\n    const logSearchSecurityContext = fields.configure.logSearchSecurityContext;\n    const logSearchPostgresSecurityContext =\n      fields.configure.logSearchPostgresSecurityContext;\n    const prometheusSecurityContext =\n      fields.configure.prometheusSecurityContext;\n    const kesSecurityContext = fields.encryption.kesSecurityContext;\n    const kesReplicas = fields.encryption.replicas;\n\n    if (addSending) {\n      const tolerationValues = tolerations.filter(\n        (toleration) => toleration.key.trim() !== \"\"\n      );\n\n      const poolName = generatePoolName([]);\n\n      let affinityObject = {};\n\n      switch (affinityType) {\n        case \"default\":\n          affinityObject = {\n            affinity: getDefaultAffinity(tenantName, poolName),\n          };\n          break;\n        case \"nodeSelector\":\n          affinityObject = {\n            affinity: getNodeSelector(\n              nodeSelectorLabels,\n              withPodAntiAffinity,\n              tenantName,\n              poolName\n            ),\n          };\n          break;\n      }\n\n      const erasureCode = ecParity.split(\":\")[1];\n\n      let dataSend: ITenantCreator = {\n        name: tenantName,\n        namespace: namespace,\n        access_key: \"\",\n        secret_key: \"\",\n        access_keys: [],\n        secret_keys: [],\n        enable_tls: enableTLS && enableAutoCert,\n        enable_console: true,\n        enable_prometheus: true,\n        service_name: \"\",\n        image: imageName,\n        expose_minio: exposeMinIO,\n        expose_console: exposeConsole,\n        pools: [\n          {\n            name: poolName,\n            servers: distribution.nodes,\n            volumes_per_server: distribution.disks,\n            volume_configuration: {\n              size: distribution.pvSize,\n              storage_class_name: selectedStorageClass,\n            },\n            securityContext: tenantCustom ? tenantSecurityContext : null,\n            ...affinityObject,\n            tolerations: tolerationValues,\n          },\n        ],\n        erasureCodingParity: parseInt(erasureCode, 10),\n      };\n\n      // Set Resources\n      if (\n        fields.tenantSize.resourcesCPURequest !== \"\" ||\n        fields.tenantSize.resourcesCPULimit !== \"\" ||\n        fields.tenantSize.resourcesMemoryRequest !== \"\" ||\n        fields.tenantSize.resourcesMemoryLimit !== \"\"\n      ) {\n        dataSend.pools[0].resources = {};\n        // requests\n        if (\n          fields.tenantSize.resourcesCPURequest !== \"\" ||\n          fields.tenantSize.resourcesMemoryRequest !== \"\"\n        ) {\n          dataSend.pools[0].resources.requests = {};\n          if (fields.tenantSize.resourcesCPURequest !== \"\") {\n            dataSend.pools[0].resources.requests.cpu = parseInt(\n              fields.tenantSize.resourcesCPURequest\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryRequest !== \"\") {\n            dataSend.pools[0].resources.requests.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryRequest, \"Gi\", true)\n            );\n          }\n        }\n        // limits\n        if (\n          fields.tenantSize.resourcesCPULimit !== \"\" ||\n          fields.tenantSize.resourcesMemoryLimit !== \"\"\n        ) {\n          dataSend.pools[0].resources.limits = {};\n          if (fields.tenantSize.resourcesCPULimit !== \"\") {\n            dataSend.pools[0].resources.limits.cpu = parseInt(\n              fields.tenantSize.resourcesCPULimit\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryLimit !== \"\") {\n            dataSend.pools[0].resources.limits.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryLimit, \"Gi\", true)\n            );\n          }\n        }\n      }\n      if (customDockerhub) {\n        dataSend = {\n          ...dataSend,\n          image_registry: {\n            registry: imageRegistry,\n            username: imageRegistryUsername,\n            password: imageRegistryPassword,\n          },\n        };\n      }\n\n      if (logSearchEnabled) {\n        dataSend = {\n          ...dataSend,\n          logSearchConfiguration: {\n            storageClass:\n              logSearchSelectedStorageClass === \"default\"\n                ? \"\"\n                : logSearchSelectedStorageClass,\n            storageSize: parseInt(logSearchVolumeSize),\n            image: logSearchImage,\n            postgres_image: logSearchPostgresImage,\n            postgres_init_image: logSearchPostgresInitImage,\n            securityContext: logSearchSecurityContext,\n            postgres_securityContext: logSearchPostgresSecurityContext,\n          },\n        };\n      }\n\n      if (prometheusEnabled) {\n        dataSend = {\n          ...dataSend,\n          prometheusConfiguration: {\n            storageClass:\n              prometheusSelectedStorageClass === \"default\"\n                ? \"\"\n                : prometheusSelectedStorageClass,\n            storageSize: parseInt(prometheusVolumeSize),\n            image: prometheusImage,\n            sidecar_image: prometheusSidecarImage,\n            init_image: prometheusInitImage,\n            securityContext: prometheusSecurityContext,\n          },\n        };\n      }\n\n      let tenantCerts: any = null;\n      let consoleCerts: any = null;\n      let caCerts: any = null;\n      let consoleCaCerts: any = null;\n\n      if (caCertificates.length > 0) {\n        caCerts = {\n          ca_certificates: caCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (consoleCaCertificates.length > 0) {\n        consoleCaCerts = {\n          console_ca_certificates: consoleCaCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (enableTLS && minioCertificates.length > 0) {\n        tenantCerts = {\n          minio: minioCertificates\n            .map((keyPair: KeyPair) => ({\n              crt: keyPair.encoded_cert,\n              key: keyPair.encoded_key,\n            }))\n            .filter((keyPair) => keyPair.crt && keyPair.key),\n        };\n      }\n\n      if (\n        enableTLS &&\n        consoleCertificate.encoded_cert !== \"\" &&\n        consoleCertificate.encoded_key !== \"\"\n      ) {\n        consoleCerts = {\n          console: {\n            crt: consoleCertificate.encoded_cert,\n            key: consoleCertificate.encoded_key,\n          },\n        };\n      }\n\n      if (tenantCerts || consoleCerts || caCerts || consoleCaCerts) {\n        dataSend = {\n          ...dataSend,\n          tls: {\n            ...tenantCerts,\n            ...consoleCerts,\n            ...caCerts,\n            ...consoleCaCerts,\n          },\n        };\n      }\n\n      if (enableEncryption) {\n        let insertEncrypt = {};\n\n        switch (encryptionType) {\n          case \"gemalto\":\n            let gemaltoCAIntroduce = {};\n\n            if (gemaltoCA.encoded_cert !== \"\") {\n              gemaltoCAIntroduce = {\n                ca: gemaltoCA.encoded_cert,\n              };\n            }\n            insertEncrypt = {\n              gemalto: {\n                keysecure: {\n                  endpoint: gemaltoEndpoint,\n                  credentials: {\n                    token: gemaltoToken,\n                    domain: gemaltoDomain,\n                    retry: parseInt(gemaltoRetry),\n                  },\n                  tls: {\n                    ...gemaltoCAIntroduce,\n                  },\n                },\n              },\n            };\n            break;\n          case \"aws\":\n            insertEncrypt = {\n              aws: {\n                secretsmanager: {\n                  endpoint: awsEndpoint,\n                  region: awsRegion,\n                  kmskey: awsKMSKey,\n                  credentials: {\n                    accesskey: awsAccessKey,\n                    secretkey: awsSecretKey,\n                    token: awsToken,\n                  },\n                },\n              },\n            };\n            break;\n          case \"azure\":\n            insertEncrypt = {\n              azure: {\n                keyvault: {\n                  endpoint: azureEndpoint,\n                  credentials: {\n                    tenant_id: azureTenantID,\n                    client_id: azureClientID,\n                    client_secret: azureClientSecret,\n                  },\n                },\n              },\n            };\n            break;\n          case \"gcp\":\n            insertEncrypt = {\n              gcp: {\n                secretmanager: {\n                  project_id: gcpProjectID,\n                  endpoint: gcpEndpoint,\n                  credentials: {\n                    client_email: gcpClientEmail,\n                    client_id: gcpClientID,\n                    private_key_id: gcpPrivateKeyID,\n                    private_key: gcpPrivateKey,\n                  },\n                },\n              },\n            };\n            break;\n          case \"vault\":\n            let vaultKeyPair = null;\n            let vaultCAInsert = null;\n            if (\n              vaultCertificate.encoded_key !== \"\" &&\n              vaultCertificate.encoded_cert !== \"\"\n            ) {\n              vaultKeyPair = {\n                key: vaultCertificate.encoded_key,\n                crt: vaultCertificate.encoded_cert,\n              };\n            }\n            if (vaultCA.encoded_cert !== \"\") {\n              vaultCAInsert = {\n                ca: vaultCA.encoded_cert,\n              };\n            }\n            let vaultTLS = null;\n            if (vaultKeyPair || vaultCAInsert) {\n              vaultTLS = {\n                tls: {\n                  ...vaultKeyPair,\n                  ...vaultCAInsert,\n                },\n              };\n            }\n            insertEncrypt = {\n              vault: {\n                endpoint: vaultEndpoint,\n                engine: vaultEngine,\n                namespace: vaultNamespace,\n                prefix: vaultPrefix,\n                approle: {\n                  engine: vaultAppRoleEngine,\n                  id: vaultId,\n                  secret: vaultSecret,\n                  retry: parseInt(vaultRetry),\n                },\n                ...vaultTLS,\n                status: {\n                  ping: parseInt(vaultPing),\n                },\n              },\n            };\n            break;\n        }\n\n        let encryptionServerKeyPair: any = {};\n        let encryptionClientKeyPair: any = {};\n\n        if (\n          clientCertificate.encoded_key !== \"\" &&\n          clientCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionClientKeyPair = {\n            client: {\n              key: clientCertificate.encoded_key,\n              crt: clientCertificate.encoded_cert,\n            },\n          };\n        }\n\n        if (\n          serverCertificate.encoded_key !== \"\" &&\n          serverCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionServerKeyPair = {\n            server: {\n              key: serverCertificate.encoded_key,\n              crt: serverCertificate.encoded_cert,\n            },\n          };\n        }\n\n        dataSend = {\n          ...dataSend,\n          encryption: {\n            replicas: kesReplicas,\n            securityContext: kesSecurityContext,\n            image: kesImage,\n            ...encryptionClientKeyPair,\n            ...encryptionServerKeyPair,\n            ...insertEncrypt,\n          },\n        };\n      }\n\n      let dataIDP: any = {};\n      switch (idpSelection) {\n        case \"Built-in\":\n          let keyarray = [];\n          for (let i = 0; i < accessKeys.length; i++) {\n            keyarray.push({\n              access_key: accessKeys[i],\n              secret_key: secretKeys[i],\n            });\n          }\n          dataIDP = {\n            keys: keyarray,\n          };\n          break;\n        case \"OpenID\":\n          dataIDP = {\n            oidc: {\n              configuration_url: openIDConfigurationURL,\n              client_id: openIDClientID,\n              secret_id: openIDSecretID,\n              claim_name: openIDClaimName,\n              callback_url: openIDCallbackURL,\n              scopes: openIDScopes,\n            },\n          };\n          break;\n        case \"AD\":\n          dataIDP = {\n            active_directory: {\n              url: ADURL,\n              skip_tls_verification: ADSkipTLS,\n              server_insecure: ADServerInsecure,\n              group_search_base_dn: ADGroupSearchBaseDN,\n              group_search_filter: ADGroupSearchFilter,\n              user_dns: ADUserDNs,\n              lookup_bind_dn: ADLookupBindDN,\n              lookup_bind_password: ADLookupBindPassword,\n              user_dn_search_base_dn: ADUserDNSearchBaseDN,\n              user_dn_search_filter: ADUserDNSearchFilter,\n              server_start_tls: ADServerStartTLS,\n            },\n          };\n          break;\n      }\n\n      dataSend = {\n        ...dataSend,\n        idp: { ...dataIDP },\n      };\n      api\n        .invoke(\"POST\", `/api/v1/tenants`, dataSend)\n        .then((res) => {\n          const consoleSAList = get(res, \"console\", []);\n\n          let newSrvAcc: NewServiceAccount = {\n            idp: get(res, \"externalIDP\", false),\n            console: [],\n          };\n\n          if (consoleSAList) {\n            if (Array.isArray(consoleSAList)) {\n              const consoleItem = consoleSAList.map((consoleKey) => {\n                return {\n                  accessKey: consoleKey.access_key,\n                  secretKey: consoleKey.secret_key,\n                  api: \"s3v4\",\n                  path: \"auto\",\n                  url: consoleKey.url,\n                };\n              });\n\n              newSrvAcc.console = consoleItem;\n            } else {\n              newSrvAcc = {\n                console: {\n                  accessKey: res.console.access_key,\n                  secretKey: res.console.secret_key,\n                  url: res.console.url,\n                },\n              };\n            }\n          }\n          setAddSending(false);\n          setShowNewCredentials(true);\n          setCreatedAccount(newSrvAcc);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          setErrorSnackMessage(err);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addSending]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      resetAddTenantForm();\n      history.push(\"/tenants\");\n    },\n  };\n  const requiredPages = [\n    \"nameTenant\",\n    \"tenantSize\",\n    \"configure\",\n    \"affinity\",\n    \"identityProvider\",\n    \"security\",\n    \"encryption\",\n  ];\n  const createButton = {\n    label: \"Create\",\n    type: \"submit\",\n    enabled:\n      !addSending &&\n      selectedStorageClass !== \"\" &&\n      requiredPages.every((v) => validPages.includes(v)),\n    action: () => {\n      setAddSending(true);\n    },\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <TenantResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configure\",\n      advancedOnly: true,\n      componentRender: <Configure />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Images\",\n      advancedOnly: true,\n      componentRender: <Images />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <Affinity />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Identity Provider\",\n      advancedOnly: true,\n      componentRender: <IdentityProvider />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Security\",\n      advancedOnly: true,\n      componentRender: <Security />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Encryption\",\n      advancedOnly: true,\n      componentRender: <Encryption />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Audit Log\",\n      advancedOnly: true,\n      componentRender: <ConfigLogSearch />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Monitoring\",\n      advancedOnly: true,\n      componentRender: <ConfigPrometheus />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  let filteredWizardSteps = wizardSteps;\n\n  const closeCredentialsModal = () => {\n    resetAddTenantForm();\n    history.push(\"/tenants\");\n  };\n\n  return (\n    <Fragment>\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={createdAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Tenant\"\n        />\n      )}\n      <PageHeader label={\"Create New Tenant\"} />\n\n      <PageLayout>\n        {addSending && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        )}\n\n        <Grid item xs={12}>\n          <BackLink\n            to={\"/tenants\"}\n            label={\"Tenant List\"}\n            executeOnClick={resetAddTenantForm}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.pageBox}>\n          <GenericWizard wizardSteps={filteredWizardSteps} />\n        </Grid>\n        {formRender === IMkEnvs.aws && (\n          <Grid item xs={12} style={{ marginTop: 16 }}>\n            <HelpBox\n              title={\"EBS Volume Configuration.\"}\n              iconComponent={<StorageIcon />}\n              help={\n                <Fragment>\n                  <b>Performance Optimized</b>: Uses the <i>gp3</i> EBS storage\n                  class class configured at 1,000Mi/s throughput and 16,000\n                  IOPS, however the minimum volume size for this type of EBS\n                  volume is <b>32Gi</b>.\n                  <br />\n                  <br />\n                  <b>Storage Optimized</b>: Uses the <i>sc1</i> EBS storage\n                  class, however the minimum volume size for this type of EBS\n                  volume is &nbsp;\n                  <b>16Ti</b> to unlock their maximum throughput speed of\n                  250Mi/s.\n                </Fragment>\n              }\n            />\n          </Grid>\n        )}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  validPages: state.tenants.createTenant.validPages,\n  fields: state.tenants.createTenant.fields,\n  certificates: state.tenants.createTenant.certificates,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  features: state.console.session.features,\n  tolerations: state.tenants.createTenant.tolerations,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  updateAddField,\n  resetAddTenantForm,\n});\n\nexport default withStyles(styles)(connector(AddTenant));\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","root","border","borderRadius","backgroundColor","paddingLeft","paddingTop","paddingBottom","paddingRight","leftItems","fontSize","fontWeight","marginBottom","display","alignItems","marginRight","height","width","helpText","classes","iconComponent","title","help","className","container","item","xs","useStyles","makeStyles","padding","color","props","variant","tgtColor","palette","primary","main","contrastText","secondary","getButtonColor","borderColor","marginLeft","text","onClick","disabled","tooltip","icon","restProps","size","sx","borderWidth","borderStyle","opacity","contained","background","dark","light","children","rest","button","clsx","flexFlow","inputWithCopy","inputLabel","fieldBasic","label","value","OutlinedInput","readOnly","endAdornment","InputAdornment","position","BoxIconButton","onMouseDown","edge","download","filename","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","warningBlock","margin","credentialTitle","buttonContainer","textAlign","marginTop","credentialsPanel","overflowY","maxHeight","promptTitle","buttonSpacer","promptIcon","newServiceAccount","open","closeModal","entity","consoleCreds","get","idp","ModalWrapper","modalOpen","onClose","titleIcon","Grid","formScrollable","Array","isArray","map","credentialsPair","index","accessKey","secretKey","WarnIcon","RBIconButton","id","consoleExtras","itemMap","url","api","path","JSON","stringify","length","allCredentials","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","fileInputField","fileInputStyles","textBoxContainer","onChange","name","required","error","accept","useState","showFileSelector","setShowSelector","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","placement","HelpIcon","type","e","fileName","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","fileProcess","data","IconButton","component","disableRipple","disableFocusRipple","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","deleteDialogStyles","isOpen","onCancel","onConfirm","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","event","reason","titleText","closeContainer","closeButton","content","actions","cancelButton","confirmButton","loading","loadingPosition","startIcon","autoFocus","connector","connect","state","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","customDialogSize","snackBarCommon","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","useEffect","message","customSize","paper","fullWidth","detailedErrorMsg","scroll","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","exposeMinIO","tenants","createTenant","fields","configure","exposeConsole","tenantCustom","tenantSecurityContext","updateAddField","isPageValid","configSectionItem","tenantCustomizationFields","containerItem","fieldGroup","createTenantCommon","responsiveSectionItem","fieldSpaceTop","modalBasic","wizardCommon","validationErrors","setValidationErrors","updateField","useCallback","field","customAccountValidation","fieldKey","runAsUser","customValidation","parseInt","customValidationMessage","runAsGroup","fsGroup","commonVal","commonFormValidation","Object","keys","cleanValidation","fieldName","clearValidationError","Paper","paperWrapper","headerElement","h3Section","descriptionText","FormSwitchWrapper","checked","multiContainer","InputBoxWrapper","min","runAsNonRoot","idpSelection","identityProvider","accessKeys","secretKeys","openIDConfigurationURL","openIDClientID","openIDSecretID","openIDCallbackURL","openIDClaimName","openIDScopes","ADURL","ADSkipTLS","ADServerInsecure","ADGroupSearchBaseDN","ADGroupSearchFilter","ADUserDNs","ADLookupBindDN","ADLookupBindPassword","ADUserDNSearchBaseDN","ADUserDNSearchFilter","ADServerStartTLS","shortened","gridTemplateColumns","gridGap","buttonTray","overlayAction","protocolRadioOptions","adUserDnRows","formFieldStyles","updateUserField","newUserField","updatePwordField","updateADUserField","newADUserDNsField","customIDPValidation","i","push","pattern","customPatternMessage","inputs","_","Fragment","placeholder","Add","splice","RemoveIcon","getRandomString","Casino","Delete","RadioGroupSelector","currentSelection","selectorOptions","formFieldRow","Typography","gutterBottom","enableTLS","security","enableAutoCert","enableCustomCerts","minioCertificates","certificates","caCertificates","addFileToCaCertificates","deleteCaCertificate","addCaCertificate","addKeyPair","addFileToKeyPair","deleteKeyPair","minioCertificateRows","justifyContent","borderBottom","flex","fileItem","minWidth","minioCertsContainer","minioCACertsRow","rowActions","keyPair","FileSelector","encodedValue","cert","key","AddIcon","replicas","encryption","enableEncryption","encryptionType","gemaltoEndpoint","gemaltoToken","gemaltoDomain","gemaltoRetry","awsEndpoint","awsRegion","awsKMSKey","awsAccessKey","awsSecretKey","awsToken","vaultEndpoint","vaultEngine","vaultNamespace","vaultPrefix","vaultAppRoleEngine","vaultId","vaultSecret","vaultRetry","vaultPing","azureEndpoint","azureTenantID","azureClientID","azureClientSecret","gcpProjectID","gcpEndpoint","gcpClientEmail","gcpClientID","gcpPrivateKeyID","gcpPrivateKey","enableCustomCertsForKES","serverCertificate","clientCertificate","vaultCertificate","vaultCA","gemaltoCA","kesSecurityContext","addFileServerCert","addFileClientCert","addFileVaultCert","addFileVaultCa","addFileGemaltoCa","encryptionTypeOptions","mutualTlsConfig","rightSpacer","responsiveContainer","encryptionAvailable","filter","encoded_key","encoded_cert","encryptionValidation","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","setModalErrorSnackMessage","setKeyValuePairs","setTolerationInfo","addNewToleration","removeToleration","affinityConfigField","affinityFieldLabel","radioField","affinityLabelKey","affinityLabelValue","affinityRow","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","then","res","k","catch","err","vl","kvp","kvs","a","indexOf","join","valid","splittedLabels","forEach","splitItem","updateToleration","alterToleration","affinityHelpText","SelectWrapper","newKey","arrCp","assign","options","v","tol","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","storageClasses","customImage","imageName","customDockerhub","imageRegistry","imageRegistryUsername","imageRegistryPassword","prometheusCustom","prometheusEnabled","logSearchCustom","logSearchEnabled","logSearchVolumeSize","logSearchSizeFactor","prometheusVolumeSize","prometheusSizeFactor","logSearchSelectedStorageClass","logSearchImage","kesImage","logSearchPostgresImage","logSearchPostgresInitImage","prometheusSelectedStorageClass","prometheusImage","prometheusSidecarImage","prometheusInitImage","selectedStorageClass","nameTenant","mapDispatchToProps","setErrorSnackMessage","wrapText","wordWrap","namespace","addNamespaceOpen","closeAddNamespaceModalAndRefresh","addNamespaceLoading","setAddNamespaceLoading","ConfirmDialog","LinearProgress","DialogContentText","volumeSize","tenantSize","sizeFactor","drivesPerServer","nodes","memoryNode","resourcesMemoryRequest","ecParity","ecParityChoices","cleanECChoices","resourcesSize","distribution","ecParityCalc","limitSize","cpuToUse","resourcesCPURequest","integrationSelection","table","usableInformation","storageFactors","find","erasureCode","Divider","Table","TableBody","TableRow","TableCell","scope","align","typeSelection","storageClass","disks","niceBytes","pvSize","persistentVolumes","rawCapacity","maxCapacity","Math","floor","maxFailureTolerations","CPU","memory","driveSize","sizeUnit","tenantName","selectedStorageType","features","console","session","setStorageClassesList","setLimitSize","setStorageType","sizePreview","formToRender","IMkEnvs","emptyNamespace","setEmptyNamespace","loadingNamespaceInfo","setLoadingNamespaceInfo","showCreateButton","setShowCreateButton","openAddNSConfirm","setOpenAddNSConfirm","getNamespaceInformation","tenantsList","elements","getLimitSizes","newStorage","stExists","findIndex","detailedError","debounceNamespace","useMemo","debounce","cancel","customNamespaceError","commonValidation","isValid","frmValidationCleanup","refresh","md","minHeight","overlayId","overlayIcon","mkPanelConfigurations","TenantSize","formRender","setFormRender","setConfiguration","resourcesConfigurations","includes","logSearchSecurityContext","logSearchPostgresSecurityContext","logSearchEnabledFields","configureSTClasses","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","prometheusSecurityContext","prometheusEnabledFields","validPages","resetAddTenantForm","pageBox","settingsCommon","showNewCredentials","setShowNewCredentials","createdAccount","setCreatedAccount","addSending","setAddSending","consoleCaCertificates","consoleCertificate","affinityType","kesReplicas","tolerationValues","toleration","trim","poolName","generatePoolName","affinityObject","getDefaultAffinity","getNodeSelector","dataSend","access_key","secret_key","access_keys","secret_keys","enable_tls","enable_console","enable_prometheus","service_name","image","expose_minio","expose_console","pools","servers","volumes_per_server","volume_configuration","storage_class_name","securityContext","erasureCodingParity","resourcesCPULimit","resourcesMemoryLimit","resources","requests","cpu","getBytes","limits","image_registry","registry","username","password","logSearchConfiguration","storageSize","postgres_image","postgres_init_image","postgres_securityContext","prometheusConfiguration","sidecar_image","init_image","tenantCerts","consoleCerts","caCerts","consoleCaCerts","ca_certificates","console_ca_certificates","minio","crt","tls","insertEncrypt","gemaltoCAIntroduce","ca","gemalto","keysecure","endpoint","credentials","token","domain","retry","aws","secretsmanager","region","kmskey","accesskey","secretkey","azure","keyvault","tenant_id","client_id","client_secret","gcp","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","vaultTLS","vault","engine","prefix","approle","secret","status","ping","encryptionServerKeyPair","encryptionClientKeyPair","client","server","dataIDP","keyarray","oidc","configuration_url","secret_id","claim_name","callback_url","scopes","active_directory","skip_tls_verification","server_insecure","group_search_base_dn","group_search_filter","user_dns","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","server_start_tls","consoleSAList","newSrvAcc","consoleItem","consoleKey","enabled","action","history","createButton","every","filteredWizardSteps","componentRender","buttons","advancedOnly","CredentialsPrompt","PageHeader","PageLayout","BackLink","to","executeOnClick","GenericWizard","wizardSteps","HelpBox","errorBlock","withBreak"],"sourceRoot":""}