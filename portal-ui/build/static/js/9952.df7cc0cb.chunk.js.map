{"version":3,"file":"static/js/9952.df7cc0cb.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddKeyModal.tsx","screens/Console/Buckets/BucketDetails/EnableBucketEncryption.tsx","screens/Console/Common/FormComponents/InputBoxWrapper/InputBoxWrapper.tsx","screens/Console/Common/FormComponents/SelectWrapper/SelectWrapper.tsx","screens/Console/KMS/KMSHelpbox.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { DialogContentText, Grid } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport KMSHelpBox from \"../../KMS/KMSHelpbox\";\n\ninterface IAddKeyModalProps {\n  closeAddModalAndRefresh: (refresh: boolean) => void;\n  addOpen: boolean;\n}\n\nconst AddKeyModal = ({\n  closeAddModalAndRefresh,\n  addOpen,\n}: IAddKeyModalProps) => {\n  const dispatch = useAppDispatch();\n  const onAddSuccess = () => closeAddModalAndRefresh(true);\n  const onAddError = (err: ErrorResponseHandler) => {\n    closeAddModalAndRefresh(false);\n    dispatch(setErrorSnackMessage(err));\n  };\n  const onClose = () => closeAddModalAndRefresh(false);\n\n  const [addLoading, invokeAddApi] = useApi(onAddSuccess, onAddError);\n  const [keyName, setKeyName] = useState<string>(\"\");\n\n  const onConfirmAdd = () => {\n    invokeAddApi(\"POST\", \"/api/v1/kms/keys/\", { key: keyName });\n  };\n\n  return (\n    <ConfirmDialog\n      title={\"\"}\n      confirmText={\"Create\"}\n      isOpen={addOpen}\n      isLoading={addLoading}\n      onConfirm={onConfirmAdd}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: keyName.indexOf(\" \") !== -1 || keyName === \"\" || addLoading,\n        variant: \"callAction\",\n      }}\n      confirmationContent={\n        <DialogContentText>\n          <KMSHelpBox\n            helpText={\"Create Key\"}\n            contents={[\n              \"Create a new cryptographic key in the Key Management Service server connected to MINIO.\",\n            ]}\n          />\n\n          <Grid item xs={12} marginTop={3}>\n            <InputBoxWrapper\n              id=\"key-name\"\n              name=\"key-name\"\n              label=\"Key Name\"\n              autoFocus={true}\n              value={keyName}\n              error={\n                keyName.indexOf(\" \") !== -1\n                  ? \"Key name cannot contain spaces\"\n                  : \"\"\n              }\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setKeyName(e.target.value);\n              }}\n            />\n          </Grid>\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nexport default AddKeyModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress, SelectChangeEvent } from \"@mui/material\";\nimport { AddIcon, BucketEncryptionIcon, Button } from \"mds\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_SCOPES,\n} from \"../../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../../common/SecureComponent\";\nimport TooltipWrapper from \"../../Common/TooltipWrapper/TooltipWrapper\";\nimport AddKeyModal from \"./AddKeyModal\";\nimport {\n  BucketEncryptionInfo,\n  BucketEncryptionType,\n  Error,\n  HttpResponse,\n  KmsKeyInfo,\n} from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\ninterface IEnableBucketEncryptionProps {\n  classes: any;\n  open: boolean;\n  encryptionEnabled: boolean;\n  encryptionCfg: BucketEncryptionInfo | null;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst EnableBucketEncryption = ({\n  classes,\n  open,\n  encryptionCfg,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IEnableBucketEncryptionProps) => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [kmsKeyID, setKmsKeyID] = useState<string>(\"\");\n  const [encryptionType, setEncryptionType] = useState<\n    BucketEncryptionType | \"disabled\"\n  >(\"disabled\");\n  const [keys, setKeys] = useState<KmsKeyInfo[] | undefined>([]);\n  const [loadingKeys, setLoadingKeys] = useState<boolean>(false);\n  const [addOpen, setAddOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (encryptionCfg) {\n      if (encryptionCfg.algorithm === \"AES256\") {\n        setEncryptionType(BucketEncryptionType.SseS3);\n      } else {\n        setEncryptionType(BucketEncryptionType.SseKms);\n        setKmsKeyID(encryptionCfg.kmsMasterKeyID || \"\");\n      }\n    }\n  }, [encryptionCfg]);\n\n  useEffect(() => {\n    if (encryptionType === \"sse-kms\") {\n      api.kms\n        .kmsListKeys()\n        .then((res) => {\n          setKeys(res.data.results);\n          setLoadingKeys(false);\n        })\n        .catch((err) => {\n          setLoadingKeys(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        });\n    }\n  }, [encryptionType, loadingKeys, dispatch]);\n\n  const enableBucketEncryption = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (loading) {\n      return;\n    }\n    if (encryptionType === \"disabled\") {\n      api.buckets\n        .disableBucketEncryption(selectedBucket)\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch(async (res: HttpResponse<void, Error>) => {\n          const err = (await res.json()) as Error;\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err)));\n        });\n    } else {\n      api.buckets\n        .enableBucketEncryption(selectedBucket, {\n          encType: encryptionType,\n          kmsKeyID: kmsKeyID,\n        })\n        .then((res) => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n\n        .catch(async (res: HttpResponse<void, Error>) => {\n          const err = (await res.json()) as Error;\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err)));\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      {addOpen && (\n        <AddKeyModal\n          addOpen={addOpen}\n          closeAddModalAndRefresh={(refresh: boolean) => {\n            setAddOpen(false);\n            setLoadingKeys(true);\n          }}\n        />\n      )}\n\n      <ModalWrapper\n        modalOpen={open}\n        onClose={() => {\n          closeModalAndRefresh();\n        }}\n        title=\"Enable Bucket Encryption\"\n        titleIcon={<BucketEncryptionIcon />}\n      >\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            enableBucketEncryption(e);\n          }}\n        >\n          <Grid container>\n            <Grid item xs={12} className={classes.modalFormScrollable}>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <SelectWrapper\n                  onChange={(e) => {\n                    setEncryptionType(\n                      e.target.value as BucketEncryptionType | \"disabled\",\n                    );\n                  }}\n                  id=\"select-encryption-type\"\n                  name=\"select-encryption-type\"\n                  label={\"Encryption Type\"}\n                  value={encryptionType}\n                  options={[\n                    {\n                      label: \"Disabled\",\n                      value: \"disabled\",\n                    },\n                    {\n                      label: \"SSE-S3\",\n                      value: BucketEncryptionType.SseS3,\n                    },\n                    {\n                      label: \"SSE-KMS\",\n                      value: BucketEncryptionType.SseKms,\n                    },\n                  ]}\n                />\n              </Grid>\n\n              {encryptionType === \"sse-kms\" && (\n                <Grid\n                  item\n                  xs={12}\n                  className={classes.formFieldRow}\n                  display={\"flex\"}\n                >\n                  {keys && (\n                    <SelectWrapper\n                      onChange={(e: SelectChangeEvent<string>) => {\n                        setKmsKeyID(e.target.value);\n                      }}\n                      id=\"select-kms-key-id\"\n                      name=\"select-kms-key-id\"\n                      label={\"KMS Key ID\"}\n                      value={kmsKeyID}\n                      options={keys.map((key: KmsKeyInfo) => {\n                        return {\n                          label: key.name || \"\",\n                          value: key.name || \"\",\n                        };\n                      })}\n                    />\n                  )}\n                  <Grid marginLeft={1}>\n                    <SecureComponent\n                      scopes={[IAM_SCOPES.KMS_IMPORT_KEY]}\n                      resource={CONSOLE_UI_RESOURCE}\n                      errorProps={{ disabled: true }}\n                    >\n                      <TooltipWrapper tooltip={\"Add key\"}>\n                        <Button\n                          id={\"import-key\"}\n                          variant={\"regular\"}\n                          icon={<AddIcon />}\n                          onClick={(e) => {\n                            setAddOpen(true);\n                            e.preventDefault();\n                          }}\n                        />\n                      </TooltipWrapper>\n                    </SecureComponent>\n                  </Grid>\n                </Grid>\n              )}\n            </Grid>\n            <Grid item xs={12} className={classes.modalButtonBar}>\n              <Button\n                id={\"cancel\"}\n                type=\"submit\"\n                variant=\"regular\"\n                onClick={() => {\n                  closeModalAndRefresh();\n                }}\n                disabled={loading}\n                label={\"Cancel\"}\n              />\n              <Button\n                id={\"save\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={loading}\n                label={\"Save\"}\n              />\n            </Grid>\n            {loading && (\n              <Grid item xs={12}>\n                <LinearProgress />\n              </Grid>\n            )}\n          </Grid>\n        </form>\n      </ModalWrapper>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(EnableBucketEncryption);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { ClipboardEvent, useState } from \"react\";\nimport {\n  Grid,\n  IconButton,\n  InputLabel,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { HelpIcon } from \"mds\";\nimport clsx from \"clsx\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: any) => void;\n  onFocus?: () => void;\n  onPaste?: (e: ClipboardEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  multiline?: boolean;\n  type?: string;\n  tooltip?: string;\n  autoComplete?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n  min?: string;\n  max?: string;\n  overlayId?: string;\n  overlayIcon?: any;\n  overlayAction?: () => void;\n  overlayObject?: any;\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n  noLabelMinWidth?: boolean;\n  pattern?: string;\n  autoFocus?: boolean;\n  className?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    overlayAction: {\n      position: \"absolute\",\n      right: 5,\n      top: 6,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"&.withLabel\": {\n        top: 5,\n      },\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  }),\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst InputBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  type = \"text\",\n  autoComplete = \"off\",\n  disabled = false,\n  multiline = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  min,\n  max,\n  overlayId,\n  overlayIcon = null,\n  overlayObject = null,\n  extraInputProps = {},\n  overlayAction,\n  noLabelMinWidth = false,\n  pattern = \"\",\n  autoFocus = false,\n  classes,\n  className = \"\",\n  onKeyPress,\n  onFocus,\n  onPaste,\n}: InputBoxProps) => {\n  let inputProps: any = { \"data-index\": index, ...extraInputProps };\n  const [toggleTextInput, setToggleTextInput] = useState<boolean>(false);\n\n  if (type === \"number\" && min) {\n    inputProps[\"min\"] = min;\n  }\n\n  if (type === \"number\" && max) {\n    inputProps[\"max\"] = max;\n  }\n\n  if (pattern !== \"\") {\n    inputProps[\"pattern\"] = pattern;\n  }\n\n  let inputBoxWrapperIcon = overlayIcon;\n  let inputBoxWrapperType = type;\n\n  if (type === \"password\" && overlayIcon === null) {\n    inputBoxWrapperIcon = toggleTextInput ? (\n      <VisibilityOffIcon />\n    ) : (\n      <RemoveRedEyeIcon />\n    );\n    inputBoxWrapperType = toggleTextInput ? \"text\" : \"password\";\n  }\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        className={clsx(\n          className !== \"\" ? className : \"\",\n          error !== \"\" ? classes.errorInField : classes.inputBoxContainer,\n        )}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={\n              noLabelMinWidth ? classes.noMinWidthLabel : classes.inputLabel\n            }\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <InputField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            autoFocus={autoFocus}\n            disabled={disabled}\n            onChange={onChange}\n            type={inputBoxWrapperType}\n            multiline={multiline}\n            autoComplete={autoComplete}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            className={classes.inputRebase}\n            onKeyPress={onKeyPress}\n            onFocus={onFocus}\n            onPaste={onPaste}\n          />\n          {inputBoxWrapperIcon && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              <IconButton\n                onClick={\n                  overlayAction\n                    ? () => {\n                        overlayAction();\n                      }\n                    : () => setToggleTextInput(!toggleTextInput)\n                }\n                id={overlayId}\n                size={\"small\"}\n                disableFocusRipple={false}\n                disableRipple={false}\n                disableTouchRipple={false}\n              >\n                {inputBoxWrapperIcon}\n              </IconButton>\n            </div>\n          )}\n          {overlayObject && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              {overlayObject}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(InputBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  FormControl,\n  InputBase,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Tooltip,\n} from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport { HelpIcon } from \"mds\";\n\nexport interface selectorTypes {\n  label: string;\n  value: string;\n}\n\ninterface SelectProps {\n  options: selectorTypes[];\n  value: string;\n  label: string;\n  id: string;\n  name: string;\n  tooltip?: string;\n  onChange: (e: SelectChangeEvent<string>) => void;\n  disabled?: boolean;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    fieldContainer: {\n      display: \"flex\",\n      \"@media (max-width: 600px)\": {\n        flexFlow: \"column\",\n      },\n    },\n  });\n\nconst SelectStyled = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: 38,\n      lineHeight: 1,\n      \"label + &\": {\n        marginTop: theme.spacing(3),\n      },\n    },\n    input: {\n      height: 38,\n      position: \"relative\",\n      color: \"#07193E\",\n      fontSize: 13,\n      fontWeight: 600,\n      padding: \"8px 20px 10px 10px\",\n      border: \"#e5e5e5 1px solid\",\n      borderRadius: 4,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"&:hover\": {\n        borderColor: \"#393939\",\n      },\n      \"&:focus\": {\n        backgroundColor: \"#fff\",\n      },\n    },\n  }),\n)(InputBase);\n\nconst SelectWrapper = ({\n  classes,\n  id,\n  name,\n  onChange,\n  options,\n  label,\n  tooltip = \"\",\n  value,\n  disabled = false,\n}: SelectProps) => {\n  return (\n    <React.Fragment>\n      <Grid item xs={12} className={classes.fieldContainer}>\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>{label}</span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n        <FormControl fullWidth>\n          <Select\n            id={id}\n            name={name}\n            value={value}\n            onChange={onChange}\n            input={<SelectStyled />}\n            disabled={disabled}\n          >\n            {options.map((option) => (\n              <MenuItem\n                value={option.value}\n                key={`select-${name}-${option.label}`}\n              >\n                {option.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(SelectWrapper);\n","import React from \"react\";\n\nimport { Box } from \"@mui/material\";\nimport { HelpIconFilled } from \"mds\";\n\ninterface IKMSHelpBoxProps {\n  helpText: string;\n  contents: string[];\n}\n\nconst KMSHelpBox = ({ helpText, contents }: IKMSHelpBoxProps) => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>{helpText}</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        {contents.map((content) => (\n          <Box sx={{ paddingBottom: \"20px\" }}>{content}</Box>\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default KMSHelpBox;\n"],"names":["_ref","closeAddModalAndRefresh","addOpen","dispatch","useAppDispatch","_useApi","useApi","err","setErrorSnackMessage","_useApi2","_slicedToArray","addLoading","invokeAddApi","_useState","useState","_useState2","keyName","setKeyName","_jsx","ConfirmDialog","title","confirmText","isOpen","isLoading","onConfirm","key","onClose","confirmButtonProps","disabled","indexOf","variant","confirmationContent","_jsxs","DialogContentText","children","KMSHelpBox","helpText","contents","Grid","item","xs","marginTop","InputBoxWrapper","id","name","label","autoFocus","value","error","onChange","e","target","withStyles","theme","createStyles","_objectSpread","modalStyleUtils","formFieldStyles","classes","open","encryptionCfg","selectedBucket","closeModalAndRefresh","loading","setLoading","_useState3","_useState4","kmsKeyID","setKmsKeyID","_useState5","_useState6","encryptionType","setEncryptionType","_useState7","_useState8","keys","setKeys","_useState9","_useState10","loadingKeys","setLoadingKeys","_useState11","_useState12","setAddOpen","useEffect","algorithm","BucketEncryptionType","SseS3","SseKms","kmsMasterKeyID","api","kms","kmsListKeys","then","res","data","results","catch","setModalErrorSnackMessage","errorToHandler","Fragment","AddKeyModal","refresh","ModalWrapper","modalOpen","titleIcon","BucketEncryptionIcon","noValidate","autoComplete","onSubmit","preventDefault","buckets","disableBucketEncryption","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","json","sent","stop","_x","apply","arguments","enableBucketEncryption","encType","_ref3","_callee2","_context2","_x2","container","className","modalFormScrollable","formFieldRow","SelectWrapper","options","display","map","marginLeft","SecureComponent","scopes","IAM_SCOPES","KMS_IMPORT_KEY","resource","CONSOLE_UI_RESOURCE","errorProps","TooltipWrapper","tooltip","Button","icon","AddIcon","onClick","modalButtonBar","type","LinearProgress","inputStyles","makeStyles","inputFieldStyles","InputField","props","TextField","InputProps","fieldBasic","tooltipHelper","textBoxContainer","flexGrow","position","overlayAction","right","top","maxWidth","maxHeight","_ref$type","_ref$autoComplete","_ref$disabled","_ref$multiline","multiline","_ref$tooltip","_ref$index","index","_ref$error","_ref$required","required","_ref$placeholder","placeholder","min","max","overlayId","_ref$overlayIcon","overlayIcon","_ref$overlayObject","overlayObject","_ref$extraInputProps","extraInputProps","_ref$noLabelMinWidth","noLabelMinWidth","_ref$pattern","pattern","_ref$autoFocus","_ref$className","onKeyPress","onFocus","onPaste","inputProps","toggleTextInput","setToggleTextInput","inputBoxWrapperIcon","inputBoxWrapperType","VisibilityOffIcon","RemoveRedEyeIcon","React","clsx","errorInField","inputBoxContainer","InputLabel","htmlFor","noMinWidthLabel","inputLabel","tooltipContainer","Tooltip","placement","HelpIcon","fullWidth","helperText","inputRebase","concat","IconButton","size","disableFocusRipple","disableRipple","disableTouchRipple","SelectStyled","root","height","lineHeight","spacing","input","color","fontSize","fontWeight","padding","border","borderRadius","alignItems","borderColor","backgroundColor","InputBase","fieldContainer","flexFlow","FormControl","Select","option","MenuItem","Box","sx","flex","marginBottom","paddingBottom","width","marginRight","HelpIconFilled","content"],"sourceRoot":""}