{"version":3,"file":"static/js/3067.b8f65da1.chunk.js","mappings":"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","sources":["screens/Console/Common/Components/withSuspense.tsx","screens/Console/Support/RegisterCluster.tsx","screens/Console/Support/CallHomeConfirmation.tsx","screens/Console/Support/CallHome.tsx","screens/Console/Tools/Tools.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { ComponentType, Suspense, SuspenseProps } from \"react\";\n\nfunction withSuspense<P extends string | number | object>(\n  WrappedComponent: ComponentType<P>,\n  fallback: SuspenseProps[\"fallback\"] = null,\n) {\n  function ComponentWithSuspense(props: P) {\n    return (\n      <Suspense fallback={fallback}>\n        <WrappedComponent {...(props as any)} />\n      </Suspense>\n    );\n  }\n\n  return ComponentWithSuspense;\n}\n\nexport default withSuspense;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Box } from \"@mui/material\";\nimport { Button, Grid, HelpBox, WarnIcon } from \"mds\";\n\ninterface IRegisterCluster {\n  compactMode?: boolean;\n}\n\nconst RegisterCluster = ({ compactMode = false }: IRegisterCluster) => {\n  const navigate = useNavigate();\n\n  const redirectButton = (\n    <Button\n      id={\"go-to-register\"}\n      type=\"submit\"\n      variant=\"callAction\"\n      color=\"primary\"\n      onClick={() => navigate(\"/support/register\")}\n    >\n      Register your Cluster\n    </Button>\n  );\n\n  const registerMessage =\n    \"Please use your MinIO Subscription Network login credentials to register this cluster and enable this feature.\";\n\n  if (compactMode) {\n    return (\n      <Fragment>\n        <Grid\n          sx={{\n            \"& div.leftItems\": {\n              marginBottom: 0,\n            },\n          }}\n        >\n          <HelpBox\n            title={\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  flexGrow: 1,\n                }}\n              >\n                <span>{registerMessage}</span> {redirectButton}\n              </div>\n            }\n            iconComponent={<WarnIcon />}\n            help={null}\n          />\n        </Grid>\n        <br />\n      </Fragment>\n    );\n  }\n\n  return (\n    <Box\n      sx={{\n        padding: \"25px\",\n        border: \"1px solid #eaeaea\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexFlow: {\n          sm: \"row\",\n          xs: \"column\",\n        },\n        marginBottom: \"15px\",\n      }}\n    >\n      <Grid container>\n        <Grid item xs={12}>\n          <Box\n            sx={{\n              marginRight: \"8px\",\n              fontSize: \"16px\",\n              fontWeight: 600,\n              display: \"flex\",\n              alignItems: \"center\",\n\n              \"& .min-icon\": {\n                width: \"83px\",\n                height: \"14px\",\n                marginLeft: \"5px\",\n                marginRight: \"5px\",\n              },\n            }}\n          >\n            Register your cluster\n          </Box>\n        </Grid>\n        <Grid item xs={12}>\n          <Box\n            sx={{\n              display: \"flex\",\n              flexFlow: {\n                xs: \"column\",\n                md: \"row\",\n              },\n            }}\n          >\n            <Box\n              sx={{\n                display: \"flex\",\n                flexFlow: \"column\",\n                flex: \"2\",\n              }}\n            >\n              <Box\n                sx={{\n                  fontSize: \"16px\",\n                  display: \"flex\",\n                  flexFlow: \"column\",\n                  marginTop: \"15px\",\n                  marginBottom: \"15px\",\n                }}\n              >\n                {registerMessage}\n              </Box>\n              <Box\n                sx={{\n                  flex: \"1\",\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  {redirectButton}\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default RegisterCluster;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { Button, CallHomeMenuIcon, CircleIcon, Grid } from \"mds\";\nimport { LinearProgress } from \"@mui/material\";\nimport api from \"../../../common/api\";\nimport { ICallHomeResponse } from \"./types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setErrorSnackMessage, setSnackBarMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ninterface ICallHomeConfirmation {\n  onClose: (refresh: boolean) => any;\n  open: boolean;\n  diagStatus: boolean;\n  logsStatus: boolean;\n  disable?: boolean;\n}\n\nconst CallHomeConfirmation = ({\n  onClose,\n  diagStatus,\n  logsStatus,\n  open,\n  disable = false,\n}: ICallHomeConfirmation) => {\n  const dispatch = useAppDispatch();\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onConfirmAction = () => {\n    setLoading(true);\n    api\n      .invoke(\"PUT\", `/api/v1/support/callhome`, {\n        diagState: disable ? false : diagStatus,\n        logsState: disable ? false : logsStatus,\n      })\n      .then((res: ICallHomeResponse) => {\n        dispatch(setSnackBarMessage(\"Configuration saved successfully\"));\n        setLoading(false);\n        onClose(true);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setErrorSnackMessage(err));\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      title={disable ? \"Disable Call Home\" : \"Edit Call Home Configurations\"}\n      onClose={() => onClose(false)}\n      titleIcon={<CallHomeMenuIcon />}\n    >\n      {disable ? (\n        <Fragment>\n          Please Acknowledge that after doing this action, we will no longer\n          receive updated cluster information automatically, losing the\n          potential benefits that Call Home provides to your MinIO cluster.\n          <Grid item xs={12} sx={{ margin: \"15px 0\" }}>\n            Are you sure you want to disable SUBNET Call Home?\n          </Grid>\n          <br />\n          {loading && (\n            <Grid\n              item\n              xs={12}\n              sx={{\n                marginBottom: 10,\n              }}\n            >\n              <LinearProgress />\n            </Grid>\n          )}\n          <Grid\n            item\n            xs={12}\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <Button\n              id={\"reset\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={loading}\n              onClick={() => onClose(false)}\n              label={\"Cancel\"}\n              sx={{\n                marginRight: 10,\n              }}\n            />\n            <Button\n              id={\"save-lifecycle\"}\n              type=\"submit\"\n              variant={\"secondary\"}\n              color=\"primary\"\n              disabled={loading}\n              label={\"Yes, Disable Call Home\"}\n              onClick={onConfirmAction}\n            />\n          </Grid>\n        </Fragment>\n      ) : (\n        <Fragment>\n          Are you sure you want to change the following configurations for\n          SUBNET Call Home:\n          <Grid\n            item\n            sx={{\n              margin: \"20px 0\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: 15,\n            }}\n          >\n            <Grid item sx={{ display: \"flex\", alignItems: \"center\", gap: 10 }}>\n              <CircleIcon\n                style={{ fill: diagStatus ? \"#4CCB92\" : \"#C83B51\", width: 20 }}\n              />\n              <span>\n                <strong>{diagStatus ? \"Enable\" : \"Disable\"}</strong> - Send\n                Diagnostics Information to SUBNET\n              </span>\n            </Grid>\n            <Grid item sx={{ display: \"flex\", alignItems: \"center\", gap: 10 }}>\n              <CircleIcon\n                style={{ fill: logsStatus ? \"#4CCB92\" : \"#C83B51\", width: 20 }}\n              />\n              <span>\n                <strong>{logsStatus ? \"Enable\" : \"Disable\"}</strong> - Send Logs\n                Information to SUBNET\n              </span>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sx={{ margin: \"15px 0\" }}>\n            Please Acknowledge that the information provided will only be\n            available in your SUBNET Account and it will not be shared to other\n            persons or entities besides MinIO team and you.\n          </Grid>\n          {loading && (\n            <Grid\n              item\n              xs={12}\n              sx={{\n                marginBottom: 10,\n              }}\n            >\n              <LinearProgress />\n            </Grid>\n          )}\n          <Grid\n            item\n            xs={12}\n            sx={{\n              display: \"flex\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <Button\n              id={\"reset\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={loading}\n              onClick={() => onClose(false)}\n              label={\"Cancel\"}\n              sx={{\n                marginRight: 10,\n              }}\n            />\n            <Button\n              id={\"save-lifecycle\"}\n              type=\"submit\"\n              variant={\"callAction\"}\n              color=\"primary\"\n              disabled={loading}\n              label={\"Yes, Save this Configuration\"}\n              onClick={onConfirmAction}\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default CallHomeConfirmation;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  CallHomeMenuIcon,\n  FormLayout,\n  HelpBox,\n  Loader,\n  PageLayout,\n  Switch,\n} from \"mds\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport api from \"../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { ICallHomeResponse } from \"./types\";\nimport { registeredCluster } from \"../../../config\";\nimport CallHomeConfirmation from \"./CallHomeConfirmation\";\nimport RegisterCluster from \"./RegisterCluster\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\n\nconst CallHome = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [loading, setLoading] = useState<boolean>(true);\n  const [showConfirmation, setShowConfirmation] = useState<boolean>(false);\n  const [diagEnabled, setDiagEnabled] = useState<boolean>(false);\n  const [oDiagEnabled, setODiagEnabled] = useState<boolean>(false);\n  const [oLogsEnabled, setOLogsEnabled] = useState<boolean>(false);\n  const [logsEnabled, setLogsEnabled] = useState<boolean>(false);\n  const [disableMode, setDisableMode] = useState<boolean>(false);\n\n  const clusterRegistered = registeredCluster();\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/support/callhome`)\n        .then((res: ICallHomeResponse) => {\n          setLoading(false);\n\n          setDiagEnabled(!!res.diagnosticsStatus);\n          setLogsEnabled(!!res.logsStatus);\n\n          setODiagEnabled(!!res.diagnosticsStatus);\n          setOLogsEnabled(!!res.logsStatus);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n  }, [loading, dispatch]);\n\n  const callHomeClose = (refresh: boolean) => {\n    if (refresh) {\n      setLoading(true);\n    }\n    setShowConfirmation(false);\n  };\n\n  const confirmCallHomeAction = () => {\n    if (!clusterRegistered) {\n      navigate(\"/support/register\");\n      return;\n    }\n    setDisableMode(false);\n    setShowConfirmation(true);\n  };\n\n  const disableCallHomeAction = () => {\n    setDisableMode(true);\n    setShowConfirmation(true);\n  };\n\n  let mainVariant: \"regular\" | \"callAction\" = \"regular\";\n\n  if (\n    clusterRegistered &&\n    (diagEnabled !== oDiagEnabled || logsEnabled !== oLogsEnabled)\n  ) {\n    mainVariant = \"callAction\";\n  }\n\n  useEffect(() => {\n    dispatch(setHelpName(\"call_home\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      {showConfirmation && (\n        <CallHomeConfirmation\n          onClose={callHomeClose}\n          open={showConfirmation}\n          logsStatus={logsEnabled}\n          diagStatus={diagEnabled}\n          disable={disableMode}\n        />\n      )}\n      <PageHeaderWrapper label=\"Call Home\" actions={<HelpMenu />} />\n      <PageLayout>\n        {!clusterRegistered && <RegisterCluster compactMode />}\n        <FormLayout\n          helpBox={\n            <HelpBox\n              title={\"Learn more about Call Home\"}\n              iconComponent={<CallHomeMenuIcon />}\n              help={\n                <Fragment>\n                  <Box\n                    sx={{\n                      display: \"flex\",\n                      flexFlow: \"column\",\n                      fontSize: \"14px\",\n                      flex: \"2\",\n                      marginTop: \"10px\",\n                    }}\n                  >\n                    <Box>\n                      Enabling Call Home sends cluster health & status to your\n                      registered MinIO Subscription Network account every 24\n                      hours.\n                      <br />\n                      <br />\n                      This helps the MinIO support team to provide quick\n                      incident responses along with suggestions for possible\n                      improvements that can be made to your MinIO instances.\n                      <br />\n                      <br />\n                      Your cluster must be{\" \"}\n                      <Link to={\"/support/register\"}>registered</Link> in the\n                      MinIO Subscription Network (SUBNET) before enabling this\n                      feature.\n                    </Box>\n                  </Box>\n                </Fragment>\n              }\n            />\n          }\n        >\n          {loading ? (\n            <span style={{ marginLeft: 5 }}>\n              <Loader style={{ width: 16, height: 16 }} />\n            </span>\n          ) : (\n            <Fragment>\n              <Switch\n                value=\"enableDiag\"\n                id=\"enableDiag\"\n                name=\"enableDiag\"\n                checked={diagEnabled}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setDiagEnabled(event.target.checked);\n                }}\n                label={\"Daily Health Report\"}\n                disabled={!clusterRegistered}\n                description={\n                  \"Daily Health Report enables you to proactively identify potential issues in your deployment before they escalate.\"\n                }\n              />\n              <Switch\n                value=\"enableLogs\"\n                id=\"enableLogs\"\n                name=\"enableLogs\"\n                checked={logsEnabled}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setLogsEnabled(event.target.checked);\n                }}\n                label={\"Live Error Logs\"}\n                disabled={!clusterRegistered}\n                description={\n                  \"Live Error Logs will enable MinIO's support team and automatic diagnostics system to catch failures early.\"\n                }\n              />\n              <Box\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"flex-end\",\n                  marginTop: \"55px\",\n                  gap: \"0px 10px\",\n                }}\n              >\n                {(oDiagEnabled || oLogsEnabled) && (\n                  <Button\n                    id={\"callhome-action\"}\n                    variant={\"secondary\"}\n                    data-test-id=\"call-home-toggle-button\"\n                    onClick={disableCallHomeAction}\n                    disabled={loading || !clusterRegistered}\n                  >\n                    Disable Call Home\n                  </Button>\n                )}\n                <Button\n                  id={\"callhome-action\"}\n                  type=\"button\"\n                  variant={mainVariant}\n                  data-test-id=\"call-home-toggle-button\"\n                  onClick={confirmCallHomeAction}\n                  disabled={loading || !clusterRegistered}\n                >\n                  Save Configuration\n                </Button>\n              </Box>\n            </Fragment>\n          )}\n        </FormLayout>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default CallHome;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\n\nimport withSuspense from \"../Common/Components/withSuspense\";\nimport NotFoundPage from \"../../NotFoundPage\";\nimport CallHome from \"../Support/CallHome\";\n\nconst Inspect = withSuspense(React.lazy(() => import(\"./Inspect\")));\nconst Register = withSuspense(React.lazy(() => import(\"../Support/Register\")));\nconst Profile = withSuspense(React.lazy(() => import(\"../Support/Profile\")));\n\nconst Tools = () => {\n  return (\n    <Routes>\n      <Route path={\"register\"} element={<Register />} />\n      <Route path={\"profile\"} element={<Profile />} />\n      <Route path={\"call-home\"} element={<CallHome />} />\n      <Route path={\"inspect\"} element={<Inspect />} />\n      <Route path={\"*\"} element={<NotFoundPage />} />\n    </Routes>\n  );\n};\n\nexport default Tools;\n"],"names":["WrappedComponent","fallback","arguments","length","undefined","props","_jsx","Suspense","children","_objectSpread","_ref","_ref$compactMode","compactMode","navigate","useNavigate","redirectButton","Button","id","type","variant","color","onClick","registerMessage","_jsxs","Fragment","Grid","sx","marginBottom","HelpBox","title","style","display","justifyContent","alignItems","flexGrow","iconComponent","WarnIcon","help","Box","padding","border","flexFlow","sm","xs","container","item","marginRight","fontSize","fontWeight","width","height","marginLeft","md","flex","marginTop","onClose","diagStatus","logsStatus","open","_ref$disable","disable","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","loading","setLoading","onConfirmAction","api","invoke","diagState","logsState","then","res","setSnackBarMessage","catch","err","setErrorSnackMessage","ModalWrapper","modalOpen","titleIcon","CallHomeMenuIcon","margin","LinearProgress","disabled","label","flexDirection","gap","CircleIcon","fill","_useState3","_useState4","showConfirmation","setShowConfirmation","_useState5","_useState6","diagEnabled","setDiagEnabled","_useState7","_useState8","oDiagEnabled","setODiagEnabled","_useState9","_useState10","oLogsEnabled","setOLogsEnabled","_useState11","_useState12","logsEnabled","setLogsEnabled","_useState13","_useState14","disableMode","setDisableMode","clusterRegistered","registeredCluster","useEffect","diagnosticsStatus","mainVariant","setHelpName","CallHomeConfirmation","refresh","PageHeaderWrapper","actions","HelpMenu","PageLayout","RegisterCluster","FormLayout","helpBox","Link","to","Loader","Switch","value","name","checked","onChange","event","target","description","Inspect","withSuspense","React","Register","Profile","Routes","Route","path","element","CallHome","NotFoundPage"],"sourceRoot":""}