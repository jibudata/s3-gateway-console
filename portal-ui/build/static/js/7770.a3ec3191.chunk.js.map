{"version":3,"file":"static/js/7770.a3ec3191.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/KeyPairEdit.tsx","screens/Console/Tenants/TenantDetails/LoggingDetails.tsx","screens/Console/Tenants/TenantDetails/LoggingDBDetails.tsx","screens/Console/Tenants/TenantDetails/TenantAuditLogsScreen.tsx","screens/Console/Tenants/securityContextSelector.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport { modalBasic } from \"../../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { IconButton, Tooltip } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { IKeyValue } from \"../ListTenants/types\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../utils\";\nimport Grid from \"@mui/material/Grid\";\n\ninterface IKeyPairEditProps {\n  classes: any;\n  paramName: string;\n  error: any;\n  setError: (e: any) => void;\n  newValues: IKeyValue[];\n  setNewValues: (vals: IKeyValue[]) => void;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      \"& div\": {\n        flexGrow: 1,\n        width: \"100%\",\n      },\n    },\n    shortened: {\n      gridTemplateColumns: \"auto auto 20px 20px\",\n      display: \"grid\",\n      gridGap: 20,\n      paddingRight: 20,\n    },\n    ...modalBasic,\n  });\n\nconst KeyPairEdit = ({\n  classes,\n  paramName,\n  newValues,\n  setNewValues,\n  error,\n  setError,\n}: IKeyPairEditProps) => {\n  const cleanValidation = (fieldName: string) => {\n    setError(clearValidationError(error, fieldName));\n  };\n\n  useEffect(() => {\n    let keyPairValidation: IValidation[] = [];\n\n    for (var i = 0; i < newValues.length; i++) {\n      keyPairValidation.push({\n        fieldKey: `key-${i.toString()}`,\n        required: false,\n        value: newValues[i].key,\n        pattern: /^[a-zA-Z0-9-_.]{1,63}$/,\n        customPatternMessage: \"Invalid key\",\n      });\n      keyPairValidation.push({\n        fieldKey: `val-${i.toString()}`,\n        required: false,\n        value: newValues[i].value,\n        pattern: /^[a-zA-Z0-9-_.]{1,63}$/,\n        customPatternMessage: \"Invalid value\",\n      });\n    }\n\n    const commonVal = commonFormValidation(keyPairValidation);\n    setError(commonVal);\n  }, [newValues, setError]);\n\n  let keyValueInputs = newValues.map((_, index) => {\n    return (\n      <Fragment key={`keyvalue-${index.toString()}`}>\n        <Grid paddingBottom={1}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`key-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Key\"}\n              name={`key-${index.toString()}`}\n              value={newValues[index].key}\n              onChange={(e) => {\n                let tempLabels = [...newValues];\n                tempLabels[index].key = e.target.value;\n                setNewValues(tempLabels);\n                cleanValidation(`key-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-key-${index.toString()}`}\n              error={error[`key-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`val-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Value\"}\n              name={`val-${index.toString()}`}\n              value={newValues[index].value}\n              onChange={(e) => {\n                let tempLabels = [...newValues];\n                tempLabels[index].value = e.target.value;\n                setNewValues(tempLabels);\n                cleanValidation(`val-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-val-${index.toString()}`}\n              error={error[`val-${index.toString()}`] || \"\"}\n            />\n            <Tooltip title={`Add ${paramName}`} aria-label=\"addlabel\">\n              <IconButton\n                size={\"small\"}\n                onClick={() => {\n                  let tempLabels = [...newValues];\n                  tempLabels.push({ key: \"\", value: \"\" });\n                  setNewValues(tempLabels);\n                }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Remove\" aria-label=\"removeLabel\">\n              <IconButton\n                size={\"small\"}\n                style={{ marginLeft: 16 }}\n                onClick={() => {\n                  if (newValues.length === 1) {\n                    setNewValues([{ key: \"\", value: \"\" }]);\n                  }\n                  if (newValues.length > 1) {\n                    let tempLabels = [...newValues];\n                    tempLabels.splice(index, 1);\n                    setNewValues(tempLabels);\n                  }\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </Grid>\n      </Fragment>\n    );\n  });\n\n  return <Fragment>{keyValueInputs}</Fragment>;\n};\n\nexport default withStyles(styles)(KeyPairEdit);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n//import {  ISecurityContext} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useParams } from \"react-router-dom\";\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Button } from \"@mui/material\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { IKeyValue, ITenantAuditLogs } from \"../ListTenants/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport SecurityContextSelector from \"../securityContextSelector\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  setImage,\n  setDiskCapacityGB,\n  setServiceAccountName,\n  setCPURequest,\n  setMemRequest,\n  setRunAsUser,\n  setFSGroup,\n  setRunAsGroup,\n  setRunAsNonRoot,\n  setRefreshLoggingInfo,\n} from \"../TenantDetails/tenantAuditLogSlice\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantAuditLogging = ({\n  classes,\n  labels,\n  annotations,\n  nodeSelector,\n}: ITenantAuditLogs) => {\n  const dispatch = useAppDispatch();\n  const { tenantName, tenantNamespace } = useParams();\n  const auditLoggingEnabled = useSelector(\n    (state: AppState) => state.editTenantLogging.auditLoggingEnabled\n  );\n  const image = useSelector((state: AppState) => state.editTenantLogging.image);\n  const diskCapacityGB = useSelector(\n    (state: AppState) => state.editTenantLogging.diskCapacityGB\n  );\n  const cpuRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.cpuRequest\n  );\n  const memRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.memRequest\n  );\n  const serviceAccountName = useSelector(\n    (state: AppState) => state.editTenantLogging.serviceAccountName\n  );\n  const runAsGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.runAsGroup\n  );\n  const runAsUser = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.runAsUser\n  );\n  const fsGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.fsGroup\n  );\n  const runAsNonRoot = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.runAsNonRoot\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [logLabels, setLabels] = useState<IKeyValue[]>(\n    labels != null && labels.length > 0 ? labels : [{ key: \"\", value: \"\" }]\n  );\n  const [logAnnotations, setAnnotations] = useState<IKeyValue[]>(\n    annotations != null && annotations.length > 0\n      ? annotations\n      : [{ key: \"\", value: \"\" }]\n  );\n  const [logNodeSelector, setNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector != null && nodeSelector.length > 0\n      ? nodeSelector\n      : [{ key: \"\", value: \"\" }]\n  );\n\n  const [labelsError, setLabelsError] = useState<any>({});\n  const [annotationsError, setAnnotationsError] = useState<any>({});\n  const [nodeSelectorError, setNodeSelectorError] = useState<any>({});\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(labelsError).length !== 0 ||\n      Object.keys(annotationsError).length !== 0 ||\n      Object.keys(nodeSelectorError).length !== 0\n    ) {\n      let err: ErrorResponseHandler = {\n        errorMessage: \"Invalid entry\",\n        detailedError: \"\",\n      };\n      dispatch(setErrorSnackMessage(err));\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const submitLoggingInfo = () => {\n    if (checkValid()) {\n      setLoading(true);\n      const securityContext = {\n        runAsGroup: runAsGroup != null ? runAsGroup : \"\",\n        runAsUser: runAsUser != null ? runAsUser : \"\",\n        fsGroup: fsGroup != null ? fsGroup : \"\",\n        runAsNonRoot: runAsNonRoot != null ? runAsNonRoot : true,\n      };\n\n      api\n        .invoke(\n          \"PUT\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`,\n          {\n            labels: trim(logLabels),\n            annotations: trim(logAnnotations),\n            nodeSelector: trim(logNodeSelector),\n            image: image,\n            diskCapacityGB: diskCapacityGB.toString(),\n            serviceAccountName: serviceAccountName,\n            logCPURequest: cpuRequest,\n            logMemRequest: memRequest,\n            securityContext: securityContext,\n          }\n        )\n        .then(() => {\n          setRefreshLoggingInfo(true);\n          dispatch(setSnackBarMessage(`Audit Log configuration updated.`));\n          setLoading(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n          setLoading(false);\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      {auditLoggingEnabled && (\n        <Fragment>\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`image`}\n              label={\"Image\"}\n              placeholder={\"minio/operator:v4.4.22\"}\n              name={`image`}\n              value={image}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setImage(event.target.value));\n                }\n                cleanValidation(`image`);\n              }}\n              key={`image`}\n              pattern={\"^[a-zA-Z0-9-./:]{1,253}$\"}\n              error={validationErrors[`image`] || \"\"}\n            />\n          </Grid>\n\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`diskCapacityGB`}\n              label={\"Disk Capacity\"}\n              placeholder={\"Disk Capacity\"}\n              name={`diskCapacityGB`}\n              value={!isNaN(diskCapacityGB) ? diskCapacityGB.toString() : \"0\"}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setDiskCapacityGB(parseInt(event.target.value)));\n                }\n                cleanValidation(`diskCapacityGB`);\n              }}\n              key={`diskCapacityGB`}\n              pattern={\"[0-9]*\"}\n              error={validationErrors[`diskCapacityGB`] || \"\"}\n              overlayObject={\n                <InputUnitMenu\n                  id={\"size-unit\"}\n                  onUnitChange={() => {}}\n                  unitSelected={\"Gi\"}\n                  unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                  disabled={true}\n                />\n              }\n            />\n          </Grid>\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`cpuRequest`}\n              label={\"CPU Request\"}\n              placeholder={\"CPU Request\"}\n              name={`cpuRequest`}\n              value={cpuRequest}\n              pattern={\"[0-9]*\"}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setCPURequest(event.target.value));\n                }\n                cleanValidation(`cpuRequest`);\n              }}\n              key={`cpuRequest`}\n              error={validationErrors[`cpuRequest`] || \"\"}\n            />\n          </Grid>\n\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`memRequest`}\n              label={\"Memory Request\"}\n              placeholder={\"Memory request\"}\n              name={`memRequest`}\n              value={memRequest}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setMemRequest(event.target.value));\n                }\n                cleanValidation(`memRequest`);\n              }}\n              pattern={\"[0-9]*\"}\n              key={`memRequest`}\n              error={validationErrors[`memRequest`] || \"\"}\n              overlayObject={\n                <InputUnitMenu\n                  id={\"size-unit\"}\n                  onUnitChange={() => {}}\n                  unitSelected={\"Gi\"}\n                  unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                  disabled={true}\n                />\n              }\n            />\n          </Grid>\n\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`serviceAccountName`}\n              label={\"Service Account\"}\n              placeholder={\"Service Account Name\"}\n              name={`serviceAccountName`}\n              value={serviceAccountName}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setServiceAccountName(event.target.value));\n                }\n                cleanValidation(`serviceAccountName`);\n              }}\n              key={`serviceAccountName`}\n              pattern={\"^[a-zA-Z0-9-.]{1,253}$\"}\n              error={validationErrors[`serviceAccountName`] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <SecurityContextSelector\n              classes={classes}\n              runAsGroup={runAsGroup}\n              runAsUser={runAsUser}\n              fsGroup={fsGroup}\n              runAsNonRoot={runAsNonRoot}\n              setFSGroup={(value: string) => dispatch(setFSGroup(value))}\n              setRunAsUser={(value: string) => dispatch(setRunAsUser(value))}\n              setRunAsGroup={(value: string) => dispatch(setRunAsGroup(value))}\n              setRunAsNonRoot={(value: boolean) =>\n                dispatch(setRunAsNonRoot(value))\n              }\n            />\n          </Grid>\n\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <span className={classes.inputLabel}>Labels</span>\n            <KeyPairEdit\n              newValues={logLabels}\n              setNewValues={setLabels}\n              paramName={\"Labels\"}\n              error={labelsError}\n              setError={setLabelsError}\n            />\n          </Grid>\n\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <span className={classes.inputLabel}>Annotations</span>\n            <KeyPairEdit\n              newValues={logAnnotations}\n              setNewValues={setAnnotations}\n              paramName={\"Annotations\"}\n              error={annotationsError}\n              setError={setAnnotationsError}\n            />\n          </Grid>\n\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <span className={classes.inputLabel}>Node Selector</span>\n            <KeyPairEdit\n              newValues={logNodeSelector}\n              setNewValues={setNodeSelector}\n              paramName={\"Node Selector\"}\n              error={nodeSelectorError}\n              setError={setNodeSelectorError}\n            />\n          </Grid>\n\n          <Grid item xs={12} textAlign={\"right\"}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={loading || !checkValid()}\n              onClick={() => submitLoggingInfo()}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantAuditLogging);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n//import {  ISecurityContext} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useParams } from \"react-router-dom\";\n\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Button } from \"@mui/material\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { IKeyValue, ITenantAuditLogs } from \"../ListTenants/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport {\n  setDBImage,\n  setDBInitImage,\n  setDBCPURequest,\n  setDBMemRequest,\n  setDBRunAsUser,\n  setDBFSGroup,\n  setDBRunAsGroup,\n  setDBRunAsNonRoot,\n  setRefreshLoggingInfo,\n} from \"../TenantDetails/tenantAuditLogSlice\";\n\nimport SecurityContextSelector from \"../securityContextSelector\";\n\nimport { clearValidationError } from \"../utils\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst LoggingDBDetails = ({\n  classes,\n  labels,\n  annotations,\n  nodeSelector,\n}: ITenantAuditLogs) => {\n  const dispatch = useAppDispatch();\n  const { tenantName, tenantNamespace } = useParams();\n  const dbImage = useSelector(\n    (state: AppState) => state.editTenantLogging.dbImage\n  );\n  const dbInitImage = useSelector(\n    (state: AppState) => state.editTenantLogging.dbInitImage\n  );\n  const dbCpuRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.dbCPURequest\n  );\n  const dbMemRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.dbMemRequest\n  );\n  const dbServiceAccountName = useSelector(\n    (state: AppState) => state.editTenantLogging.dbServiceAccountName\n  );\n\n  const dbRunAsGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.runAsGroup\n  );\n  const dbRunAsUser = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.runAsUser\n  );\n  const dbFSGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.fsGroup\n  );\n  const dbRunAsNonRoot = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.runAsNonRoot\n  );\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const [dbLabels, setDBLabels] = useState<IKeyValue[]>(\n    labels != null && labels.length > 0 ? labels : [{ key: \"\", value: \"\" }]\n  );\n  const [dbAnnotations, setDBAnnotations] = useState<IKeyValue[]>(\n    annotations != null && annotations.length > 0\n      ? annotations\n      : [{ key: \"\", value: \"\" }]\n  );\n  const [dbNodeSelector, setDBNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector != null && nodeSelector.length > 0\n      ? nodeSelector\n      : [{ key: \"\", value: \"\" }]\n  );\n\n  const [dbLabelsError, setDBLabelsError] = useState<any>({});\n  const [dbAnnotationsError, setDBAnnotationsError] = useState<any>({});\n  const [dbNodeSelectorError, setDBNodeSelectorError] = useState<any>({});\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(dbNodeSelectorError).length !== 0 ||\n      Object.keys(dbAnnotationsError).length !== 0 ||\n      Object.keys(dbLabelsError).length !== 0\n    ) {\n      let err: ErrorResponseHandler = {\n        errorMessage: \"Invalid entry\",\n        detailedError: \"\",\n      };\n      dispatch(setErrorSnackMessage(err));\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const submitLoggingInfo = () => {\n    if (checkValid()) {\n      const dbSecurityContext = {\n        runAsGroup: dbRunAsGroup != null ? dbRunAsGroup : \"\",\n        runAsUser: dbRunAsUser != null ? dbRunAsUser : \"\",\n        fsGroup: dbFSGroup != null ? dbFSGroup : \"\",\n        runAsNonRoot: dbRunAsNonRoot != null ? dbRunAsNonRoot : true,\n      };\n      api\n        .invoke(\n          \"PUT\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`,\n          {\n            dbLabels: trim(dbLabels),\n            dbAnnotations: trim(dbAnnotations),\n            dbNodeSelector: trim(dbNodeSelector),\n            dbImage: dbImage,\n            dbInitImage: dbInitImage,\n            dbServiceAccountName: dbServiceAccountName,\n            logDBCPURequest: dbCpuRequest,\n            logDBMemRequest: dbMemRequest,\n            dbSecurityContext: dbSecurityContext,\n          }\n        )\n        .then(() => {\n          setRefreshLoggingInfo(true);\n          dispatch(setSnackBarMessage(`Audit Log DB configuration updated.`));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      <Fragment>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbImage`}\n            label={\"DB Postgres Image\"}\n            placeholder={\"library/postgres:13\"}\n            name={`dbImage`}\n            value={dbImage}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBImage(event.target.value));\n              }\n              cleanValidation(`dbImage`);\n            }}\n            key={`dbImage`}\n            pattern={\"^[a-zA-Z0-9-./:]{1,253}$\"}\n            error={validationErrors[`dbImage`] || \"\"}\n          />\n        </Grid>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbInitImage`}\n            label={\"DB Init Image\"}\n            placeholder={\"library/busybox:1.33.1\"}\n            name={`dbInitImage`}\n            value={dbInitImage}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBInitImage(event.target.value));\n              }\n              cleanValidation(`dbInitImage`);\n            }}\n            key={`dbInitImage`}\n            pattern={\"^[a-zA-Z0-9-./:]{1,253}$\"}\n            error={validationErrors[`dbInitImage`] || \"\"}\n          />\n        </Grid>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbCPURequest`}\n            label={\"DB CPU Request\"}\n            placeholder={\"DB CPU Request\"}\n            name={`dbCPURequest`}\n            value={dbCpuRequest}\n            pattern={\"[0-9]*\"}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBCPURequest(event.target.value));\n              }\n              cleanValidation(`dbCPURequest`);\n            }}\n            key={`dbCPURequest`}\n            error={validationErrors[`dbCPURequest`] || \"\"}\n          />\n        </Grid>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbMemRequest`}\n            label={\"DB Memory Request\"}\n            placeholder={\"DB Memory request\"}\n            name={`dbMemRequest`}\n            value={dbMemRequest}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBMemRequest(event.target.value));\n              }\n              cleanValidation(`dbMemRequest`);\n            }}\n            pattern={\"[0-9]*\"}\n            key={`dbMemRequest`}\n            error={validationErrors[`dbMemRequest`] || \"\"}\n            overlayObject={\n              <InputUnitMenu\n                id={\"size-unit\"}\n                onUnitChange={() => {}}\n                unitSelected={\"Gi\"}\n                unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                disabled={true}\n              />\n            }\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <span className={classes.inputLabel}>DB Labels</span>\n          <KeyPairEdit\n            newValues={dbLabels}\n            setNewValues={setDBLabels}\n            paramName={\"dbLabels\"}\n            error={dbLabelsError}\n            setError={setDBLabelsError}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <span className={classes.inputLabel}>DB Annotations</span>\n          <KeyPairEdit\n            newValues={dbAnnotations}\n            setNewValues={setDBAnnotations}\n            paramName={\"dbAnnotations\"}\n            error={dbAnnotationsError}\n            setError={setDBAnnotationsError}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <span className={classes.inputLabel}>DB Node Selector</span>\n          <KeyPairEdit\n            newValues={dbNodeSelector}\n            setNewValues={setDBNodeSelector}\n            paramName={\"DB Node Selector\"}\n            error={dbNodeSelectorError}\n            setError={setDBNodeSelectorError}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <SecurityContextSelector\n            classes={classes}\n            runAsGroup={dbRunAsGroup}\n            runAsUser={dbRunAsUser}\n            fsGroup={dbFSGroup}\n            runAsNonRoot={dbRunAsNonRoot}\n            setFSGroup={(value: string) => dispatch(setDBFSGroup(value))}\n            setRunAsUser={(value: string) => dispatch(setDBRunAsUser(value))}\n            setRunAsGroup={(value: string) => dispatch(setDBRunAsGroup(value))}\n            setRunAsNonRoot={(value: boolean) =>\n              dispatch(setDBRunAsNonRoot(value))\n            }\n          />\n        </Grid>\n        <Grid item xs={12} textAlign={\"right\"}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!checkValid()}\n            onClick={() => submitLoggingInfo()}\n          >\n            Save\n          </Button>\n        </Grid>\n      </Fragment>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(LoggingDBDetails);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { useParams } from \"react-router-dom\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { containerForHeader } from \"../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport { DialogContentText } from \"@mui/material\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport api from \"../../../../common/api\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport { ITenantLogsStruct } from \"../ListTenants/types\";\nimport { IKeyValue } from \"../ListTenants/types\";\n\nimport LoggingDetails from \"./LoggingDetails\";\nimport LoggingDBDetails from \"./LoggingDBDetails\";\nimport {\n  setAuditLoggingEnabled,\n  setDBImage,\n  setDBInitImage,\n  setDBServiceAccountName,\n  setDBCPURequest,\n  setDBMemRequest,\n  setDBRunAsUser,\n  setDBFSGroup,\n  setDBRunAsGroup,\n  setDBRunAsNonRoot,\n  setImage,\n  setDiskCapacityGB,\n  setServiceAccountName,\n  setCPURequest,\n  setMemRequest,\n  setRunAsUser,\n  setFSGroup,\n  setRunAsGroup,\n  setRunAsNonRoot,\n  resetAuditLogForm,\n} from \"../TenantDetails/tenantAuditLogSlice\";\n\ninterface ILoggingScreenProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    breadcrumLink: {\n      textDecoration: \"none\",\n      color: \"black\",\n    },\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst LoggingScreen = ({ classes }: ILoggingScreenProps) => {\n  const { tenantNamespace, tenantName } = useParams();\n  const [curTab, setCurTab] = useState<number>(0);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [toggleConfirmOpen, setToggleConfirmOpen] = useState<boolean>(false);\n  const [refreshLoggingInfo, setRefreshLoggingInfo] = useState<boolean>(true);\n  const [dbLabels, setDBLabels] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [dbAnnotations, setDBAnnotations] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [dbNodeSelector, setDBNodeSelector] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [labels, setLabels] = useState<IKeyValue[]>([{ key: \"\", value: \"\" }]);\n  const [annotations, setAnnotations] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [nodeSelector, setNodeSelector] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const dispatch = useAppDispatch();\n  const auditLoggingEnabled = useSelector(\n    (state: AppState) => state.editTenantLogging.auditLoggingEnabled\n  );\n  function a11yProps(index: any) {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  }\n\n  const setLoggingInfo = (res: ITenantLogsStruct) => {\n    if (res !== null) {\n      dispatch(setAuditLoggingEnabled(res !== null && !res.disabled));\n      res.dbServiceAccountName != null &&\n        dispatch(setDBServiceAccountName(res.dbServiceAccountName));\n      res.dbImage != null && dispatch(setDBImage(res.dbImage));\n      res.dbInitImage != null && dispatch(setDBInitImage(res.dbInitImage));\n      res.logDBCPURequest != null &&\n        dispatch(setDBCPURequest(res.logDBCPURequest));\n      if (res.logDBMemRequest) {\n        dispatch(\n          setDBMemRequest(\n            Math.floor(parseInt(res.logDBMemRequest, 10)).toString()\n          )\n        );\n      } else {\n        dispatch(setDBMemRequest(\"0\"));\n      }\n      if (res.dbSecurityContext) {\n        dispatch(setDBRunAsGroup(res.dbSecurityContext.runAsGroup));\n        dispatch(setDBRunAsUser(res.dbSecurityContext.runAsUser));\n        dispatch(setDBFSGroup(res.dbSecurityContext.fsGroup));\n        dispatch(setDBRunAsNonRoot(res.dbSecurityContext.runAsNonRoot));\n      }\n      res.image != null && dispatch(setImage(res.image));\n      res.serviceAccountName != null &&\n        dispatch(setServiceAccountName(res.serviceAccountName));\n      res.logCPURequest != null && dispatch(setCPURequest(res.logCPURequest));\n      if (res.logMemRequest) {\n        dispatch(\n          setMemRequest(Math.floor(parseInt(res.logMemRequest, 10)).toString())\n        );\n      } else {\n        dispatch(setMemRequest(\"0\"));\n      }\n      if (res.securityContext) {\n        dispatch(setRunAsGroup(res.securityContext.runAsGroup));\n        dispatch(setRunAsUser(res.securityContext.runAsUser));\n        dispatch(setFSGroup(res.securityContext.fsGroup));\n        dispatch(setRunAsNonRoot(res.securityContext.runAsNonRoot));\n      }\n\n      res.diskCapacityGB != null &&\n        dispatch(setDiskCapacityGB(res.diskCapacityGB));\n      res.labels != null\n        ? setLabels(res.labels)\n        : setLabels([{ key: \"\", value: \"\" }]);\n      res.annotations != null\n        ? setAnnotations(res.annotations)\n        : setAnnotations([{ key: \"\", value: \"\" }]);\n      res.nodeSelector != null\n        ? setNodeSelector(res.nodeSelector)\n        : setNodeSelector([{ key: \"\", value: \"\" }]);\n      res.dbLabels != null\n        ? setDBLabels(res.dbLabels)\n        : setDBLabels([{ key: \"\", value: \"\" }]);\n      res.dbAnnotations != null\n        ? setDBAnnotations(res.dbAnnotations)\n        : setDBAnnotations([{ key: \"\", value: \"\" }]);\n      res.dbNodeSelector != null\n        ? setDBNodeSelector(res.dbNodeSelector)\n        : setDBNodeSelector([{ key: \"\", value: \"\" }]);\n      setRefreshLoggingInfo(false);\n    }\n  };\n\n  useEffect(() => {\n    if (refreshLoggingInfo) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`\n        )\n        .then((res: ITenantLogsStruct) => {\n          if (res !== null) {\n            dispatch(setAuditLoggingEnabled(res.auditLoggingEnabled));\n            setLoggingInfo(res);\n            setRefreshLoggingInfo(false);\n          }\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setErrorSnackMessage(err));\n          setRefreshLoggingInfo(false);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refreshLoggingInfo]);\n\n  useEffect(() => {\n    if (loading) {\n      setLoading(false);\n    }\n  }, [loading, refreshLoggingInfo]);\n\n  const toggleLogging = () => {\n    dispatch(resetAuditLogForm());\n    if (!auditLoggingEnabled) {\n      api\n        .invoke(\n          \"POST\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/enable-logging`\n        )\n        .then(() => {\n          setRefreshLoggingInfo(true);\n          setToggleConfirmOpen(false);\n          setAuditLoggingEnabled(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(\n            setErrorSnackMessage({\n              errorMessage: \"Error enabling logging\",\n              detailedError: err.detailedError,\n            })\n          );\n        });\n    } else {\n      api\n        .invoke(\n          \"POST\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/disable-logging`\n        )\n        .then(() => {\n          setAuditLoggingEnabled(false);\n          setRefreshLoggingInfo(true);\n          setToggleConfirmOpen(false);\n          dispatch(resetAuditLogForm());\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(\n            setErrorSnackMessage({\n              errorMessage: \"Error disabling logging\",\n              detailedError: err.detailedError,\n            })\n          );\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      <Grid item xs>\n        {toggleConfirmOpen && (\n          <ConfirmDialog\n            isOpen={toggleConfirmOpen}\n            title={\n              !auditLoggingEnabled\n                ? \"Enable Audit Logging for this tenant?\"\n                : \"Disable Audit Logging for this tenant?\"\n            }\n            confirmText={!auditLoggingEnabled ? \"Enable\" : \"Disable\"}\n            cancelText=\"Cancel\"\n            onClose={() => setToggleConfirmOpen(false)}\n            onConfirm={toggleLogging}\n            confirmationContent={\n              <DialogContentText>\n                {!auditLoggingEnabled\n                  ? \"A small Postgres server will be started per the configuration provided, which will collect the audit logs for your tenant.\"\n                  : \" Current configuration will be lost, and defaults reset if reenabled.\"}\n              </DialogContentText>\n            }\n          />\n        )}\n      </Grid>\n      <Grid container>\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Audit Logs</h1>\n        </Grid>\n        <Grid>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={auditLoggingEnabled}\n            value={\"tenant_logging\"}\n            id=\"tenant_logging\"\n            name=\"tenant_logging\"\n            onChange={() => {\n              setToggleConfirmOpen(true);\n            }}\n            description=\"\"\n          />\n        </Grid>\n      </Grid>\n      <Grid container>\n        {auditLoggingEnabled && (\n          <Fragment>\n            <Grid item xs={9}>\n              <Tabs\n                value={curTab}\n                onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\n                  setCurTab(newValue);\n                }}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                aria-label=\"cluster-tabs\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                <Tab label=\"Configuration\" {...a11yProps(0)} />\n                <Tab label=\"DB Configuration\" {...a11yProps(1)} />\n              </Tabs>\n            </Grid>\n            <Grid item xs={12}>\n              <hr className={classes.hrClass} />\n            </Grid>\n            {curTab === 0 && (\n              <LoggingDetails\n                classes={classes}\n                labels={labels}\n                annotations={annotations}\n                nodeSelector={nodeSelector}\n              />\n            )}\n            {curTab === 1 && (\n              <LoggingDBDetails\n                classes={classes}\n                labels={dbLabels}\n                annotations={dbAnnotations}\n                nodeSelector={dbNodeSelector}\n              />\n            )}\n          </Fragment>\n        )}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(LoggingScreen);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport { Grid } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\n\ninterface IEditSecurityContextProps {\n  classes: any;\n  runAsUser: string;\n  runAsGroup: string;\n  fsGroup: string;\n  runAsNonRoot: boolean;\n  setRunAsUser: any;\n  setRunAsGroup: any;\n  setFSGroup: any;\n  setRunAsNonRoot: any;\n}\nconst SecurityContextSelector = ({\n  classes,\n  runAsGroup,\n  runAsUser,\n  fsGroup,\n  runAsNonRoot,\n  setRunAsUser,\n  setRunAsGroup,\n  setFSGroup,\n  setRunAsNonRoot,\n}: IEditSecurityContextProps) => {\n  const dispatch = useDispatch();\n  return (\n    <Fragment>\n      <fieldset className={`${classes.fieldGroup} ${classes.fieldSpaceTop} `}>\n        <legend className={classes.descriptionText}>Security Context</legend>\n\n        <Grid item xs={12}>\n          <div className={`${classes.multiContainerStackNarrow} `}>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_runAsUser\"\n                name=\"securityContext_runAsUser\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setRunAsUser(e.target.value));\n                }}\n                label=\"Run As User\"\n                value={runAsUser}\n                required\n                min=\"0\"\n              />\n            </div>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_runAsGroup\"\n                name=\"securityContext_runAsGroup\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setRunAsGroup(e.target.value));\n                }}\n                label=\"Run As Group\"\n                value={runAsGroup}\n                required\n                min=\"0\"\n              />\n            </div>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_fsGroup\"\n                name=\"securityContext_fsGroup\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setFSGroup(e.target.value));\n                }}\n                label=\"FsGroup\"\n                value={fsGroup}\n                required\n                min=\"0\"\n              />\n            </div>\n          </div>\n        </Grid>\n        <br />\n        <Grid item xs={12}>\n          <div className={classes.multiContainer}>\n            <FormSwitchWrapper\n              value=\"prometheusSecurityContextRunAsNonRoot\"\n              id=\"prometheus_securityContext_runAsNonRoot\"\n              name=\"prometheus_securityContext_runAsNonRoot\"\n              checked={runAsNonRoot}\n              onChange={() => {\n                dispatch(setRunAsNonRoot(!runAsNonRoot));\n              }}\n              label={\"Do not run as Root\"}\n            />\n          </div>\n        </Grid>\n      </fieldset>\n    </Fragment>\n  );\n};\nexport default SecurityContextSelector;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;"],"names":["withStyles","theme","createStyles","bottomContainer","display","flexGrow","alignItems","width","shortened","gridTemplateColumns","gridGap","paddingRight","modalBasic","classes","paramName","newValues","setNewValues","error","setError","cleanValidation","fieldName","clearValidationError","useEffect","keyPairValidation","i","length","push","fieldKey","toString","required","value","key","pattern","customPatternMessage","commonVal","commonFormValidation","keyValueInputs","map","_","index","Fragment","paddingBottom","className","id","label","placeholder","name","onChange","e","tempLabels","target","title","size","onClick","style","marginLeft","splice","tenantDetailsStyles","spacingUtils","bold","fontWeight","italic","fontStyle","fileItem","marginRight","minWidth","flexFlow","containerForHeader","spacing","createTenantCommon","formFieldStyles","wizardCommon","labels","annotations","nodeSelector","dispatch","useAppDispatch","useParams","tenantName","tenantNamespace","auditLoggingEnabled","useSelector","state","editTenantLogging","image","diskCapacityGB","cpuRequest","memRequest","serviceAccountName","runAsGroup","securityContext","runAsUser","fsGroup","runAsNonRoot","useState","validationErrors","setValidationErrors","loading","setLoading","logLabels","setLabels","logAnnotations","setAnnotations","logNodeSelector","setNodeSelector","labelsError","setLabelsError","annotationsError","setAnnotationsError","nodeSelectorError","setNodeSelectorError","trim","x","retval","checkValid","Object","keys","setErrorSnackMessage","errorMessage","detailedError","Grid","item","xs","InputBoxWrapper","event","validity","valid","setImage","isNaN","setDiskCapacityGB","parseInt","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","setCPURequest","setMemRequest","setServiceAccountName","formFieldRow","setFSGroup","setRunAsUser","setRunAsGroup","setRunAsNonRoot","inputLabel","KeyPairEdit","textAlign","Button","type","variant","color","api","logCPURequest","logMemRequest","then","setRefreshLoggingInfo","setSnackBarMessage","catch","err","submitLoggingInfo","dbImage","dbInitImage","dbCpuRequest","dbCPURequest","dbMemRequest","dbServiceAccountName","dbRunAsGroup","dbSecurityContext","dbRunAsUser","dbFSGroup","dbRunAsNonRoot","dbLabels","setDBLabels","dbAnnotations","setDBAnnotations","dbNodeSelector","setDBNodeSelector","dbLabelsError","setDBLabelsError","dbAnnotationsError","setDBAnnotationsError","dbNodeSelectorError","setDBNodeSelectorError","setDBImage","setDBInitImage","setDBCPURequest","setDBMemRequest","setDBFSGroup","setDBRunAsUser","setDBRunAsGroup","setDBRunAsNonRoot","logDBCPURequest","logDBMemRequest","breadcrumLink","textDecoration","curTab","setCurTab","toggleConfirmOpen","setToggleConfirmOpen","refreshLoggingInfo","a11yProps","res","setAuditLoggingEnabled","setDBServiceAccountName","Math","floor","setLoggingInfo","ConfirmDialog","isOpen","confirmText","cancelText","onClose","onConfirm","resetAuditLogForm","confirmationContent","DialogContentText","container","sectionTitle","FormSwitchWrapper","indicatorLabels","checked","description","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","hrClass","LoggingDetails","useDispatch","fieldGroup","fieldSpaceTop","descriptionText","multiContainerStackNarrow","configSectionItem","min","multiContainer","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}