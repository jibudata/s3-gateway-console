{"version":3,"file":"static/js/6247.ecc0982e.chunk.js","mappings":"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","sources":["screens/Console/EventDestinations/CustomForms/ConfPostgres.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport {\n  Box,\n  CommentBox,\n  FormLayout,\n  Grid,\n  InputBox,\n  RadioGroup,\n  ReadBox,\n  Select,\n  Switch,\n} from \"mds\";\nimport { IElementValue } from \"../../Configurations/types\";\n\ninterface IConfPostgresProps {\n  onChange: (newValue: IElementValue[]) => void;\n}\n\nconst ConfPostgres = ({ onChange }: IConfPostgresProps) => {\n  //Local States\n  const [useConnectionString, setUseConnectionString] =\n    useState<boolean>(false);\n  const [connectionString, setConnectionString] = useState<string>(\"\");\n  const [host, setHostname] = useState<string>(\"\");\n  const [dbName, setDbName] = useState<string>(\"\");\n  const [port, setPort] = useState<string>(\"\");\n  const [user, setUser] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [sslMode, setSslMode] = useState<string>(\" \");\n\n  const [table, setTable] = useState<string>(\"\");\n  const [format, setFormat] = useState<string>(\"namespace\");\n  const [queueDir, setQueueDir] = useState<string>(\"\");\n  const [queueLimit, setQueueLimit] = useState<string>(\"\");\n  const [comment, setComment] = useState<string>(\"\");\n\n  // connection_string*  (string)             Postgres server connection-string e.g. \"host=localhost port=5432 dbname=minio_events user=postgres password=password sslmode=disable\"\n\n  //  \"host=localhost\n  // port=5432\n  //dbname=minio_events\n  //user=postgres\n  //password=password\n  //sslmode=disable\"\n\n  // table*              (string)             DB table name to store/update events, table is auto-created\n  // format*             (namespace*|access)  'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\n  // queue_dir           (path)               staging dir for undelivered messages e.g. '/home/events'\n  // queue_limit         (number)             maximum limit for undelivered messages, defaults to '10000'\n  // comment             (sentence)           optionally add a comment to this setting\n\n  const KvSeparator = \"=\";\n  const parseConnectionString = (\n    input: string,\n    keys: string[],\n  ): Map<string, string> => {\n    let valueIndexes: number[] = [];\n\n    for (const key of keys) {\n      const i = input.indexOf(key + KvSeparator);\n      if (i === -1) {\n        continue;\n      }\n      valueIndexes.push(i);\n    }\n    valueIndexes.sort((n1, n2) => n1 - n2);\n\n    let kvFields = new Map<string, string>();\n    let fields: string[] = new Array<string>(valueIndexes.length);\n    for (let i = 0; i < valueIndexes.length; i++) {\n      const j = i + 1;\n      if (j < valueIndexes.length) {\n        fields[i] = input.slice(valueIndexes[i], valueIndexes[j]);\n      } else {\n        fields[i] = input.slice(valueIndexes[i]);\n      }\n    }\n\n    for (let field of fields) {\n      if (field === undefined) {\n        continue;\n      }\n      const key = field.slice(0, field.indexOf(\"=\"));\n      const value = field.slice(field.indexOf(\"=\") + 1).trim();\n      kvFields.set(key, value);\n    }\n    return kvFields;\n  };\n\n  const configToString = useCallback((): string => {\n    let strValue = \"\";\n    if (host !== \"\") {\n      strValue = `${strValue} host=${host}`;\n    }\n    if (dbName !== \"\") {\n      strValue = `${strValue} dbname=${dbName}`;\n    }\n    if (user !== \"\") {\n      strValue = `${strValue} user=${user}`;\n    }\n    if (password !== \"\") {\n      strValue = `${strValue} password=${password}`;\n    }\n    if (port !== \"\") {\n      strValue = `${strValue} port=${port}`;\n    }\n    if (sslMode !== \" \") {\n      strValue = `${strValue} sslmode=${sslMode}`;\n    }\n\n    strValue = `${strValue} `;\n\n    return strValue.trim();\n  }, [host, dbName, user, password, port, sslMode]);\n\n  useEffect(() => {\n    if (connectionString !== \"\") {\n      const formValues = [\n        { key: \"connection_string\", value: connectionString },\n        { key: \"table\", value: table },\n        { key: \"format\", value: format },\n        { key: \"queue_dir\", value: queueDir },\n        { key: \"queue_limit\", value: queueLimit },\n        { key: \"comment\", value: comment },\n      ];\n\n      onChange(formValues);\n    }\n  }, [\n    connectionString,\n    table,\n    format,\n    queueDir,\n    queueLimit,\n    comment,\n    onChange,\n  ]);\n\n  useEffect(() => {\n    const cs = configToString();\n    setConnectionString(cs);\n  }, [\n    user,\n    dbName,\n    password,\n    port,\n    sslMode,\n    host,\n    setConnectionString,\n    configToString,\n  ]);\n\n  useEffect(() => {\n    if (useConnectionString) {\n      // build connection_string\n      const cs = configToString();\n      setConnectionString(cs);\n\n      return;\n    }\n    // parse connection_string\n    const kv = parseConnectionString(connectionString, [\n      \"host\",\n      \"port\",\n      \"dbname\",\n      \"user\",\n      \"password\",\n      \"sslmode\",\n    ]);\n    setHostname(kv.get(\"host\") ? kv.get(\"host\") + \"\" : \"\");\n    setPort(kv.get(\"port\") ? kv.get(\"port\") + \"\" : \"\");\n    setDbName(kv.get(\"dbname\") ? kv.get(\"dbname\") + \"\" : \"\");\n    setUser(kv.get(\"user\") ? kv.get(\"user\") + \"\" : \"\");\n    setPassword(kv.get(\"password\") ? kv.get(\"password\") + \"\" : \"\");\n    setSslMode(kv.get(\"sslmode\") ? kv.get(\"sslmode\") + \"\" : \" \");\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [useConnectionString]);\n\n  return (\n    <FormLayout containerPadding={false} withBorders={false}>\n      <Switch\n        label={\"Manually Configure String\"}\n        checked={useConnectionString}\n        id=\"manualString\"\n        name=\"manualString\"\n        onChange={(e) => {\n          setUseConnectionString(e.target.checked);\n        }}\n        value={\"manualString\"}\n      />\n      {useConnectionString ? (\n        <Fragment>\n          <InputBox\n            id=\"connection-string\"\n            name=\"connection_string\"\n            label=\"Connection String\"\n            value={connectionString}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setConnectionString(e.target.value);\n            }}\n          />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <Grid item xs={12}>\n            <Box\n              withBorders\n              useBackground\n              sx={{\n                overflowY: \"auto\",\n                height: 170,\n                marginBottom: 12,\n              }}\n            >\n              <InputBox\n                id=\"host\"\n                name=\"host\"\n                label=\"\"\n                placeholder=\"Enter Host\"\n                value={host}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setHostname(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"db-name\"\n                name=\"db-name\"\n                label=\"\"\n                placeholder=\"Enter DB Name\"\n                value={dbName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setDbName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"port\"\n                name=\"port\"\n                label=\"\"\n                placeholder=\"Enter Port\"\n                value={port}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPort(e.target.value);\n                }}\n              />\n              <Select\n                value={sslMode}\n                label=\"\"\n                id=\"sslmode\"\n                name=\"sslmode\"\n                onChange={(value): void => {\n                  if (value) {\n                    setSslMode(value + \"\");\n                  }\n                }}\n                options={[\n                  { label: \"Enter SSL Mode\", value: \" \" },\n                  { label: \"Require\", value: \"require\" },\n                  { label: \"Disable\", value: \"disable\" },\n                  { label: \"Verify CA\", value: \"verify-ca\" },\n                  { label: \"Verify Full\", value: \"verify-full\" },\n                ]}\n              />\n              <InputBox\n                id=\"user\"\n                name=\"user\"\n                label=\"\"\n                placeholder=\"Enter User\"\n                value={user}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setUser(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"password\"\n                name=\"password\"\n                label=\"\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                value={password}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPassword(e.target.value);\n                }}\n              />\n            </Box>\n          </Grid>\n          <ReadBox label={\"Connection String\"} multiLine>\n            {connectionString}\n          </ReadBox>\n        </Fragment>\n      )}\n      <InputBox\n        id=\"table\"\n        name=\"table\"\n        label=\"Table\"\n        placeholder={\"Enter Table Name\"}\n        value={table}\n        tooltip=\"DB table name to store/update events, table is auto-created\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setTable(e.target.value);\n        }}\n      />\n      <RadioGroup\n        currentValue={format}\n        id=\"format\"\n        name=\"format\"\n        label=\"Format\"\n        onChange={(e) => {\n          setFormat(e.target.value);\n        }}\n        tooltip=\"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\"\n        selectorOptions={[\n          { label: \"Namespace\", value: \"namespace\" },\n          { label: \"Access\", value: \"access\" },\n        ]}\n      />\n      <InputBox\n        id=\"queue-dir\"\n        name=\"queue_dir\"\n        label=\"Queue Dir\"\n        placeholder=\"Enter Queue Directory\"\n        value={queueDir}\n        tooltip=\"Staging directory for undelivered messages e.g. '/home/events'\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setQueueDir(e.target.value);\n        }}\n      />\n      <InputBox\n        id=\"queue-limit\"\n        name=\"queue_limit\"\n        label=\"Queue Limit\"\n        placeholder=\"Enter Queue Limit\"\n        type=\"number\"\n        value={queueLimit}\n        tooltip=\"Maximum limit for undelivered messages, defaults to '10000'\"\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          setQueueLimit(e.target.value);\n        }}\n      />\n      <CommentBox\n        id=\"comment\"\n        name=\"comment\"\n        label=\"Comment\"\n        placeholder=\"Enter custom notes if any\"\n        value={comment}\n        onChange={(e) => {\n          setComment(e.target.value);\n        }}\n      />\n    </FormLayout>\n  );\n};\n\nexport default ConfPostgres;\n"],"names":["_ref","onChange","_useState","useState","_useState2","_slicedToArray","useConnectionString","setUseConnectionString","_useState3","_useState4","connectionString","setConnectionString","_useState5","_useState6","host","setHostname","_useState7","_useState8","dbName","setDbName","_useState9","_useState10","port","setPort","_useState11","_useState12","user","setUser","_useState13","_useState14","password","setPassword","_useState15","_useState16","sslMode","setSslMode","_useState17","_useState18","table","setTable","_useState19","_useState20","format","setFormat","_useState21","_useState22","queueDir","setQueueDir","_useState23","_useState24","queueLimit","setQueueLimit","_useState25","_useState26","comment","setComment","configToString","useCallback","strValue","concat","trim","useEffect","key","value","cs","kv","input","keys","_step","valueIndexes","_iterator","_createForOfIteratorHelper","s","n","done","i","indexOf","push","err","e","f","sort","n1","n2","kvFields","Map","fields","Array","length","j","slice","_i","_fields","field","undefined","set","parseConnectionString","get","_jsxs","FormLayout","containerPadding","withBorders","children","_jsx","Switch","label","checked","id","name","target","Fragment","InputBox","Grid","item","xs","Box","useBackground","sx","overflowY","height","marginBottom","placeholder","Select","options","type","ReadBox","multiLine","tooltip","RadioGroup","currentValue","selectorOptions","CommentBox"],"sourceRoot":""}