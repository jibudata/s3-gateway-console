{"version":3,"file":"static/js/9033.2b39c84d.chunk.js","mappings":"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","sources":["screens/Console/Account/ChangePasswordModal.tsx","screens/Console/Account/Account.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport {\n  containerForHeader,\n  formFieldStyles,\n  modalStyleUtils,\n  spacingUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { ChangePasswordRequest } from \"../Buckets/types\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport { ChangePasswordIcon } from \"../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n    ...spacingUtils,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\ninterface IChangePasswordProps {\n  classes: any;\n  open: boolean;\n  closeModal: () => void;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst ChangePassword = ({\n  classes,\n  open,\n  closeModal,\n  setModalErrorSnackMessage,\n}: IChangePasswordProps) => {\n  const [currentPassword, setCurrentPassword] = useState<string>(\"\");\n  const [newPassword, setNewPassword] = useState<string>(\"\");\n  const [reNewPassword, setReNewPassword] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const changePassword = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (newPassword !== reNewPassword) {\n      setModalErrorSnackMessage({\n        errorMessage: \"New passwords don't match\",\n        detailedError: \"\",\n      });\n      return;\n    }\n\n    if (newPassword.length < 8) {\n      setModalErrorSnackMessage({\n        errorMessage: \"Passwords must be at least 8 characters long\",\n        detailedError: \"\",\n      });\n      return;\n    }\n\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n\n    let request: ChangePasswordRequest = {\n      current_secret_key: currentPassword,\n      new_secret_key: newPassword,\n    };\n\n    api\n      .invoke(\"POST\", \"/api/v1/account/change-password\", request)\n      .then(() => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        closeModal();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        setModalErrorSnackMessage(err);\n      });\n  };\n\n  return open ? (\n    <ModalWrapper\n      title=\"Change Password\"\n      modalOpen={open}\n      onClose={() => {\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        closeModal();\n      }}\n      titleIcon={<ChangePasswordIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          changePassword(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"current-password\"\n                name=\"current-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setCurrentPassword(event.target.value);\n                }}\n                label=\"Current Password\"\n                type=\"password\"\n                value={currentPassword}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"new-password\"\n                name=\"new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewPassword(event.target.value);\n                }}\n                label=\"New Password\"\n                type=\"password\"\n                value={newPassword}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id=\"re-new-password\"\n                name=\"re-new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setReNewPassword(event.target.value);\n                }}\n                label=\"Type New Password Again\"\n                type=\"password\"\n                value={reNewPassword}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={\n                loading ||\n                !(\n                  currentPassword.length > 0 &&\n                  newPassword.length > 0 &&\n                  reNewPassword.length > 0\n                )\n              }\n            >\n              Save\n            </Button>\n          </Grid>\n          {loading && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  ) : null;\n};\n\nconst connector = connect(null, {\n  setModalErrorSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ChangePassword));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport api from \"../../../common/api\";\nimport { Box } from \"@mui/material\";\nimport { setErrorSnackMessage, setSnackBarMessage } from \"../../../actions\";\nimport {\n  AccountIcon,\n  AddIcon,\n  PasswordKeyIcon,\n  DeleteIcon,\n} from \"../../../icons\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport { stringSort } from \"../../../utils/sortFunctions\";\nimport PageHeader from \"../Common/PageHeader/PageHeader\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ChangePasswordModal from \"./ChangePasswordModal\";\nimport HelpBox from \"../../../common/HelpBox\";\nimport PageLayout from \"../Common/Layout/PageLayout\";\nimport SearchBox from \"../Common/SearchBox\";\nimport withSuspense from \"../Common/Components/withSuspense\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_SCOPES,\n  IAM_PAGES,\n} from \"../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../common/SecureComponent\";\nimport RBIconButton from \"../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport { selectSAs } from \"../Configurations/utils\";\nimport DeleteMultipleServiceAccounts from \"../Users/DeleteMultipleServiceAccounts\";\nimport ServiceAccountPolicy from \"./ServiceAccountPolicy\";\n\nconst DeleteServiceAccount = withSuspense(\n  React.lazy(() => import(\"./DeleteServiceAccount\"))\n);\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...actionsTray,\n    ...searchField,\n    searchField: {\n      ...searchField.searchField,\n      marginRight: \"auto\",\n      maxWidth: 380,\n    },\n    ...tableStyles,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\ninterface IServiceAccountsProps {\n  classes: any;\n  history: any;\n  displayErrorMessage: typeof setErrorSnackMessage;\n}\n\nconst Account = ({\n  classes,\n  displayErrorMessage,\n  history,\n}: IServiceAccountsProps) => {\n  const [records, setRecords] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedServiceAccount, setSelectedServiceAccount] = useState<\n    string | null\n  >(null);\n  const [changePasswordModalOpen, setChangePasswordModalOpen] =\n    useState<boolean>(false);\n  const [selectedSAs, setSelectedSAs] = useState<string[]>([]);\n  const [deleteMultipleOpen, setDeleteMultipleOpen] = useState<boolean>(false);\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/service-accounts`)\n        .then((res: string[]) => {\n          const serviceAccounts = res.sort(stringSort);\n\n          setLoading(false);\n          setRecords(serviceAccounts);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          displayErrorMessage(err);\n          setLoading(false);\n        });\n    }\n  }, [loading, setLoading, setRecords, displayErrorMessage]);\n\n  const fetchRecords = () => {\n    setLoading(true);\n  };\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      fetchRecords();\n    }\n  };\n\n  const closeDeleteMultipleModalAndRefresh = (refresh: boolean) => {\n    setDeleteMultipleOpen(false);\n    if (refresh) {\n      setSnackBarMessage(`Service accounts deleted successfully.`);\n      setSelectedSAs([]);\n      setLoading(true);\n    }\n  };\n\n  const policyModalOpen = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setPolicyOpen(true);\n  };\n\n  const selectAllItems = () => {\n    if (selectedSAs.length === records.length) {\n      setSelectedSAs([]);\n      return;\n    }\n    setSelectedSAs(records);\n  };\n\n  const closePolicyModal = () => {\n    setPolicyOpen(false);\n    setLoading(true);\n  };\n\n  const confirmDeleteServiceAccount = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setDeleteOpen(true);\n  };\n\n  const tableActions = [\n    { type: \"view\", onClick: policyModalOpen },\n    { type: \"delete\", onClick: confirmDeleteServiceAccount },\n  ];\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <React.Fragment>\n      {deleteOpen && (\n        <DeleteServiceAccount\n          deleteOpen={deleteOpen}\n          selectedServiceAccount={selectedServiceAccount}\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\n            closeDeleteModalAndRefresh(refresh);\n          }}\n        />\n      )}\n      {deleteMultipleOpen && (\n        <DeleteMultipleServiceAccounts\n          deleteOpen={deleteMultipleOpen}\n          selectedSAs={selectedSAs}\n          closeDeleteModalAndRefresh={closeDeleteMultipleModalAndRefresh}\n        />\n      )}\n\n      {policyOpen && (\n        <ServiceAccountPolicy\n          open={policyOpen}\n          selectedAccessKey={selectedServiceAccount}\n          closeModalAndRefresh={closePolicyModal}\n        />\n      )}\n      <ChangePasswordModal\n        open={changePasswordModalOpen}\n        closeModal={() => setChangePasswordModalOpen(false)}\n      />\n      <PageHeader label=\"Service Accounts\" />\n      <PageLayout>\n        <Grid item={true} xs={12} className={classes.actionsTray}>\n          <SearchBox\n            placeholder={\"Search Service Accounts\"}\n            onChange={setFilter}\n            overrideClass={classes.searchField}\n            value={filter}\n          />\n\n          <Box\n            sx={{\n              display: \"flex\",\n            }}\n          >\n            {\" \"}\n            <RBIconButton\n              tooltip={\"Delete Selected\"}\n              onClick={() => {\n                setDeleteMultipleOpen(true);\n              }}\n              text={\"Delete Selected\"}\n              icon={<DeleteIcon />}\n              color=\"secondary\"\n              disabled={selectedSAs.length === 0}\n              variant={\"outlined\"}\n            />\n            <SecureComponent\n              scopes={[IAM_SCOPES.ADMIN_CREATE_USER]}\n              resource={CONSOLE_UI_RESOURCE}\n              matchAll\n              errorProps={{ disabled: true }}\n            >\n              <RBIconButton\n                onClick={() => setChangePasswordModalOpen(true)}\n                text={`Change Password`}\n                icon={<PasswordKeyIcon />}\n                color={\"primary\"}\n                variant={\"outlined\"}\n                disabled={selectedSAs.length === 0}\n              />\n            </SecureComponent>\n            <RBIconButton\n              onClick={(e) => {\n                history.push(`${IAM_PAGES.ACCOUNT_ADD}`);\n              }}\n              text={`Create service account`}\n              icon={<AddIcon />}\n              color={\"primary\"}\n              variant={\"contained\"}\n            />\n          </Box>\n        </Grid>\n\n        <Grid item xs={12} className={classes.tableBlock}>\n          <TableWrapper\n            isLoading={loading}\n            records={filteredRecords}\n            entityName={\"Service Accounts\"}\n            idField={\"\"}\n            columns={[{ label: \"Service Account\", elementKey: \"\" }]}\n            itemActions={tableActions}\n            selectedItems={selectedSAs}\n            onSelect={(e) => selectSAs(e, setSelectedSAs, selectedSAs)}\n            onSelectAll={selectAllItems}\n          />\n        </Grid>\n        <Grid item xs={12} marginTop={\"15px\"}>\n          <HelpBox\n            title={\"Learn more about SERVICE ACCOUNTS\"}\n            iconComponent={<AccountIcon />}\n            help={\n              <Fragment>\n                MinIO service accounts are child identities of an authenticated\n                MinIO user, including externally managed identities. Each\n                service account inherits its privileges based on the policies\n                attached to it’s parent user or those groups in which the parent\n                user has membership. Service accounts also support an optional\n                inline policy which further restricts access to a subset of\n                actions and resources available to the parent user.\n                <br />\n                <br />\n                You can learn more at our{\" \"}\n                <a\n                  href=\"https://docs.min.io/minio/baremetal/security/minio-identity-management/user-management.html?ref=con#service-accounts\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  documentation\n                </a>\n                .\n              </Fragment>\n            }\n          />\n        </Grid>\n      </PageLayout>\n    </React.Fragment>\n  );\n};\n\nconst connector = connect(null, {\n  displayErrorMessage: setErrorSnackMessage,\n});\n\nexport default withStyles(styles)(connector(Account));\n"],"names":["connector","connect","setModalErrorSnackMessage","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","spacingUtils","containerForHeader","spacing","classes","open","closeModal","useState","currentPassword","setCurrentPassword","newPassword","setNewPassword","reNewPassword","setReNewPassword","loading","setLoading","ModalWrapper","title","modalOpen","onClose","titleIcon","noValidate","autoComplete","onSubmit","e","event","preventDefault","length","errorMessage","detailedError","request","current_secret_key","new_secret_key","api","then","catch","err","changePassword","Grid","container","item","xs","className","modalFormScrollable","formFieldRow","InputBoxWrapper","id","name","onChange","target","value","label","type","modalButtonBar","Button","variant","color","disabled","LinearProgress","DeleteServiceAccount","withSuspense","React","displayErrorMessage","setErrorSnackMessage","actionsTray","searchField","marginRight","maxWidth","tableStyles","history","records","setRecords","filter","setFilter","deleteOpen","setDeleteOpen","selectedServiceAccount","setSelectedServiceAccount","changePasswordModalOpen","setChangePasswordModalOpen","selectedSAs","setSelectedSAs","deleteMultipleOpen","setDeleteMultipleOpen","policyOpen","setPolicyOpen","useEffect","fetchRecords","res","serviceAccounts","sort","stringSort","tableActions","onClick","filteredRecords","elementItem","toLowerCase","includes","closeDeleteModalAndRefresh","refresh","DeleteMultipleServiceAccounts","setSnackBarMessage","ServiceAccountPolicy","selectedAccessKey","closeModalAndRefresh","ChangePasswordModal","PageHeader","PageLayout","SearchBox","placeholder","overrideClass","Box","sx","display","RBIconButton","tooltip","text","icon","SecureComponent","scopes","IAM_SCOPES","resource","CONSOLE_UI_RESOURCE","matchAll","errorProps","push","IAM_PAGES","tableBlock","TableWrapper","isLoading","entityName","idField","columns","elementKey","itemActions","selectedItems","onSelect","selectSAs","onSelectAll","marginTop","HelpBox","iconComponent","help","Fragment","href","rel"],"sourceRoot":""}