{"version":3,"file":"static/js/8296.f82aeccc.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddEvent.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport {\n  Autocomplete,\n  Button,\n  DataTable,\n  EventSubscriptionIcon,\n  Grid,\n  InputBox,\n} from \"mds\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { api } from \"api\";\nimport { NotificationEventType } from \"api/consoleApi\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\n\ninterface IAddEventProps {\n  open: boolean;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst AddEvent = ({\n  open,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IAddEventProps) => {\n  const dispatch = useAppDispatch();\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [prefix, setPrefix] = useState<string>(\"\");\n  const [suffix, setSuffix] = useState<string>(\"\");\n  const [arn, setArn] = useState<string>(\"\");\n  const [selectedEvents, setSelectedEvents] = useState<NotificationEventType[]>(\n    [],\n  );\n  const [arnList, setArnList] = useState<string[] | undefined>([]);\n\n  const addRecord = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    api.buckets\n      .createBucketEvent(selectedBucket, {\n        configuration: {\n          arn: arn,\n          events: selectedEvents,\n          prefix: prefix,\n          suffix: suffix,\n        },\n        ignoreExisting: true,\n      })\n      .then(() => {\n        setAddLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchArnList = useCallback(() => {\n    setAddLoading(true);\n    api.admin\n      .arnList()\n      .then((res) => {\n        if (res.data.arns !== null) {\n          setArnList(res.data.arns);\n        }\n        setAddLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  useEffect(() => {\n    fetchArnList();\n  }, [fetchArnList]);\n\n  const events = [\n    { label: \"PUT - Object Uploaded\", value: NotificationEventType.Put },\n    { label: \"GET - Object accessed\", value: NotificationEventType.Get },\n    { label: \"DELETE - Object Deleted\", value: NotificationEventType.Delete },\n    {\n      label: \"REPLICA - Object Replicated\",\n      value: NotificationEventType.Replica,\n    },\n    { label: \"ILM - Object Transitioned\", value: NotificationEventType.Ilm },\n    {\n      label:\n        \"SCANNER - Object has too many versions / Prefixes has too many sub-folders\",\n      value: NotificationEventType.Scanner,\n    },\n  ];\n\n  const handleClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = event.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: NotificationEventType[] = [...selectedEvents];\n\n    if (checked) {\n      elements.push(value as NotificationEventType);\n    } else {\n      elements = elements.filter((element) => element !== value);\n    }\n\n    setSelectedEvents(elements);\n  };\n\n  const arnValues = arnList?.map((arnConstant) => ({\n    label: arnConstant,\n    value: arnConstant,\n  }));\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Subscribe To Bucket Events\"\n      titleIcon={<EventSubscriptionIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          addRecord(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} sx={modalBasic.formScrollable}>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                ...formFieldStyles.formFieldRow,\n                \"& div div .MuiOutlinedInput-root\": {\n                  padding: 0,\n                },\n              }}\n            >\n              <Autocomplete\n                onChange={(value: string) => {\n                  setArn(value);\n                }}\n                id=\"select-access-policy\"\n                name=\"select-access-policy\"\n                label={\"ARN\"}\n                value={arn}\n                options={arnValues || []}\n                helpTip={\n                  <Fragment>\n                    <a\n                      target=\"blank\"\n                      href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html\"\n                    >\n                      Amazon Resource Name\n                    </a>\n                  </Fragment>\n                }\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <InputBox\n                id=\"prefix-input\"\n                name=\"prefix-input\"\n                label=\"Prefix\"\n                value={prefix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPrefix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <InputBox\n                id=\"suffix-input\"\n                name=\"suffix-input\"\n                label=\"Suffix\"\n                value={suffix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setSuffix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sx={formFieldStyles.formFieldRow}>\n              <DataTable\n                columns={[{ label: \"Event\", elementKey: \"label\" }]}\n                idField={\"value\"}\n                records={events}\n                onSelect={handleClick}\n                selectedItems={selectedEvents}\n                noBackground\n                customPaperHeight={\"260px\"}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"cancel-add-event\"}\n              type=\"button\"\n              variant=\"regular\"\n              disabled={addLoading}\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              label={\"Cancel\"}\n            />\n            <Button\n              id={\"save-event\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={addLoading || arn === \"\" || selectedEvents.length === 0}\n              label={\"Save\"}\n            />\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default AddEvent;\n"],"names":["_ref","open","selectedBucket","closeModalAndRefresh","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","addLoading","setAddLoading","_useState3","_useState4","prefix","setPrefix","_useState5","_useState6","suffix","setSuffix","_useState7","_useState8","arn","setArn","_useState9","_useState10","selectedEvents","setSelectedEvents","_useState11","_useState12","arnList","setArnList","fetchArnList","useCallback","api","admin","then","res","data","arns","catch","err","setModalErrorSnackMessage","useEffect","events","label","value","NotificationEventType","Put","Get","Delete","Replica","Ilm","Scanner","arnValues","map","arnConstant","_jsx","ModalWrapper","modalOpen","onClose","title","titleIcon","EventSubscriptionIcon","children","noValidate","autoComplete","onSubmit","e","preventDefault","buckets","createBucketEvent","configuration","ignoreExisting","_jsxs","Grid","container","item","xs","sx","modalBasic","formScrollable","_objectSpread","formFieldStyles","formFieldRow","padding","Autocomplete","onChange","id","name","options","helpTip","Fragment","target","href","InputBox","DataTable","columns","elementKey","idField","records","onSelect","event","targetD","checked","elements","_toConsumableArray","push","filter","element","selectedItems","noBackground","customPaperHeight","modalStyleUtils","modalButtonBar","Button","type","variant","disabled","onClick","length"],"sourceRoot":""}