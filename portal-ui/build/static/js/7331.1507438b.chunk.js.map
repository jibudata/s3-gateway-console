{"version":3,"file":"static/js/7331.1507438b.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/DeletePod.tsx","screens/Console/Tenants/TenantDetails/PodsSummary.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { DialogContentText } from \"@mui/material\";\nimport { IPodListElement } from \"../ListTenants/types\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport Grid from \"@mui/material/Grid\";\n\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IDeletePod {\n  deleteOpen: boolean;\n  selectedPod: IPodListElement;\n  closeDeleteModalAndRefresh: (refreshList: boolean) => any;\n}\n\nconst DeletePod = ({\n  deleteOpen,\n  selectedPod,\n  closeDeleteModalAndRefresh,\n}: IDeletePod) => {\n  const dispatch = useAppDispatch();\n  const [retypePod, setRetypePod] = useState(\"\");\n\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) =>\n    dispatch(setErrorSnackMessage(err));\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  const onConfirmDelete = () => {\n    if (retypePod !== selectedPod.name) {\n      setErrorSnackMessage({\n        errorMessage: \"Tenant name is incorrect\",\n        detailedError: \"\",\n      });\n      return;\n    }\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/namespaces/${selectedPod.namespace}/tenants/${selectedPod.tenant}/pods/${selectedPod.name}`\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Pod`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: retypePod !== selectedPod.name || deleteLoading,\n      }}\n      confirmationContent={\n        <DialogContentText>\n          To continue please type <b>{selectedPod.name}</b> in the box.\n          <Grid item xs={12}>\n            <InputBoxWrapper\n              id=\"retype-pod\"\n              name=\"retype-pod\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setRetypePod(event.target.value);\n              }}\n              label=\"\"\n              value={retypePod}\n            />\n          </Grid>\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nexport default DeletePod;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  tableStyles,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { niceDays } from \"../../../../common/utils\";\nimport { IPodListElement } from \"../ListTenants/types\";\n\nimport api from \"../../../../common/api\";\nimport TableWrapper from \"../../Common/TableWrapper/TableWrapper\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport DeletePod from \"./DeletePod\";\nimport { Grid, InputAdornment, TextField } from \"@mui/material\";\nimport { SearchIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\n\ninterface IPodsSummary {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...tableStyles,\n    ...containerForHeader,\n  });\n\nconst PodsSummary = ({ classes }: IPodsSummary) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { tenantName, tenantNamespace } = useParams();\n\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n\n  const [pods, setPods] = useState<IPodListElement[]>([]);\n  const [loadingPods, setLoadingPods] = useState<boolean>(true);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedPod, setSelectedPod] = useState<any>(null);\n  const [filter, setFilter] = useState(\"\");\n\n  const podViewAction = (pod: IPodListElement) => {\n    navigate(\n      `/namespaces/${tenantNamespace || \"\"}/tenants/${tenantName || \"\"}/pods/${\n        pod.name\n      }`\n    );\n    return;\n  };\n\n  const closeDeleteModalAndRefresh = (reloadData: boolean) => {\n    setDeleteOpen(false);\n    setLoadingPods(true);\n  };\n\n  const confirmDeletePod = (pod: IPodListElement) => {\n    pod.tenant = tenantName;\n    pod.namespace = tenantNamespace;\n    setSelectedPod(pod);\n    setDeleteOpen(true);\n  };\n\n  const filteredRecords: IPodListElement[] = pods.filter((elementItem) =>\n    elementItem.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const podTableActions = [\n    { type: \"view\", onClick: podViewAction },\n    { type: \"delete\", onClick: confirmDeletePod },\n  ];\n\n  useEffect(() => {\n    if (loadingTenant) {\n      setLoadingPods(true);\n    }\n  }, [loadingTenant]);\n\n  useEffect(() => {\n    if (loadingPods) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace || \"\"}/tenants/${\n            tenantName || \"\"\n          }/pods`\n        )\n        .then((result: IPodListElement[]) => {\n          for (let i = 0; i < result.length; i++) {\n            let currentTime = (Date.now() / 1000) | 0;\n            result[i].time = niceDays(\n              (currentTime - parseInt(result[i].timeCreated)).toString()\n            );\n          }\n          setPods(result);\n          setLoadingPods(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(\n            setErrorSnackMessage({\n              errorMessage: \"Error loading pods\",\n              detailedError: err.detailedError,\n            })\n          );\n        });\n    }\n  }, [loadingPods, tenantName, tenantNamespace, dispatch]);\n\n  return (\n    <Fragment>\n      {deleteOpen && (\n        <DeletePod\n          deleteOpen={deleteOpen}\n          selectedPod={selectedPod}\n          closeDeleteModalAndRefresh={closeDeleteModalAndRefresh}\n        />\n      )}\n      <h1 className={classes.sectionTitle}>Pods</h1>\n      <Grid item xs={12} className={classes.actionsTray}>\n        <TextField\n          placeholder=\"Search Pods\"\n          className={classes.searchField}\n          id=\"search-resource\"\n          label=\"\"\n          InputProps={{\n            disableUnderline: true,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          onChange={(e) => {\n            setFilter(e.target.value);\n          }}\n          variant=\"standard\"\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.tableBlock}>\n        <TableWrapper\n          columns={[\n            { label: \"Name\", elementKey: \"name\", width: 200 },\n            { label: \"Status\", elementKey: \"status\" },\n            { label: \"Age\", elementKey: \"time\" },\n            { label: \"Pod IP\", elementKey: \"podIP\" },\n            {\n              label: \"Restarts\",\n              elementKey: \"restarts\",\n              renderFunction: (input) => {\n                return input !== null ? input : 0;\n              },\n            },\n            { label: \"Node\", elementKey: \"node\" },\n          ]}\n          isLoading={loadingPods}\n          records={filteredRecords}\n          itemActions={podTableActions}\n          entityName=\"Pods\"\n          idField=\"name\"\n        />\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PodsSummary);\n"],"names":["deleteOpen","selectedPod","closeDeleteModalAndRefresh","dispatch","useAppDispatch","useState","retypePod","setRetypePod","useApi","err","setErrorSnackMessage","deleteLoading","invokeDeleteApi","ConfirmDialog","title","confirmText","isOpen","titleIcon","isLoading","onConfirm","name","namespace","tenant","errorMessage","detailedError","onClose","confirmButtonProps","disabled","confirmationContent","DialogContentText","Grid","item","xs","InputBoxWrapper","id","onChange","event","target","value","label","withStyles","theme","createStyles","tenantDetailsStyles","tableStyles","containerForHeader","classes","navigate","useNavigate","useParams","tenantName","tenantNamespace","loadingTenant","useSelector","state","tenants","pods","setPods","loadingPods","setLoadingPods","setDeleteOpen","setSelectedPod","filter","setFilter","filteredRecords","elementItem","toLowerCase","includes","podTableActions","type","onClick","pod","useEffect","api","then","result","i","length","currentTime","Date","now","time","niceDays","parseInt","timeCreated","toString","catch","Fragment","reloadData","className","sectionTitle","actionsTray","TextField","placeholder","searchField","InputProps","disableUnderline","startAdornment","InputAdornment","position","e","variant","tableBlock","TableWrapper","columns","elementKey","width","renderFunction","input","records","itemActions","entityName","idField"],"sourceRoot":""}