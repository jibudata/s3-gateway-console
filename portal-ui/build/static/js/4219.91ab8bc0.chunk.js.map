{"version":3,"file":"static/js/4219.91ab8bc0.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolResources.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolConfiguration.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/PoolPodPlacement.tsx","screens/Console/Tenants/TenantDetails/Pools/AddPool/AddPool.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport { niceBytes } from \"../../../../../../common/utils\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport api from \"../../../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { IQuotaElement, IQuotas } from \"../../../ListTenants/utils\";\nimport { AppState } from \"../../../../../../store\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport InputUnitMenu from \"../../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport {\n  isPoolPageValid,\n  setPoolField,\n  setPoolStorageClasses,\n} from \"../../../tenantsSlice\";\n\ninterface IPoolResourcesProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      margin: \"auto\",\n      justifyContent: \"center\",\n      \"& div\": {\n        width: 150,\n        \"@media (max-width: 900px)\": {\n          flexFlow: \"column\",\n        },\n      },\n    },\n    factorElements: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n      marginLeft: 30,\n    },\n    sizeNumber: {\n      fontSize: 35,\n      fontWeight: 700,\n      textAlign: \"center\",\n    },\n    sizeDescription: {\n      fontSize: 14,\n      color: \"#777\",\n      textAlign: \"center\",\n    },\n    ...formFieldStyles,\n    ...wizardCommon,\n  });\n\nconst PoolResources = ({ classes }: IPoolResourcesProps) => {\n  const dispatch = useDispatch();\n\n  const tenant = useSelector(\n    (state: AppState) => state.tenants.tenantDetails.tenantInfo\n  );\n  const storageClasses = useSelector(\n    (state: AppState) => state.tenants.addPool.storageClasses\n  );\n  const numberOfNodes = useSelector((state: AppState) =>\n    state.tenants.addPool.fields.setup.numberOfNodes.toString()\n  );\n  const storageClass = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.setup.storageClass\n  );\n  const volumeSize = useSelector((state: AppState) =>\n    state.tenants.addPool.fields.setup.volumeSize.toString()\n  );\n  const volumesPerServer = useSelector((state: AppState) =>\n    state.tenants.addPool.fields.setup.volumesPerServer.toString()\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const instanceCapacity: number =\n    parseInt(volumeSize) * 1073741824 * parseInt(volumesPerServer);\n  const totalCapacity: number = instanceCapacity * parseInt(numberOfNodes);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [\n      {\n        fieldKey: \"number_of_nodes\",\n        required: true,\n        value: numberOfNodes.toString(),\n        customValidation:\n          parseInt(numberOfNodes) < 1 || isNaN(parseInt(numberOfNodes)),\n        customValidationMessage: \"Number of servers must be at least 1\",\n      },\n      {\n        fieldKey: \"pool_size\",\n        required: true,\n        value: volumeSize.toString(),\n        customValidation:\n          parseInt(volumeSize) < 1 || isNaN(parseInt(volumeSize)),\n        customValidationMessage: \"Pool Size cannot be 0\",\n      },\n      {\n        fieldKey: \"volumes_per_server\",\n        required: true,\n        value: volumesPerServer.toString(),\n        customValidation:\n          parseInt(volumesPerServer) < 1 || isNaN(parseInt(volumesPerServer)),\n        customValidationMessage: \"1 volume or more are required\",\n      },\n    ];\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"setup\",\n        status: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, numberOfNodes, volumeSize, volumesPerServer, storageClass]);\n\n  useEffect(() => {\n    if (storageClasses.length === 0 && tenant) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant.namespace}/resourcequotas/${tenant.namespace}-storagequota`\n        )\n        .then((res: IQuotas) => {\n          const elements: IQuotaElement[] = get(res, \"elements\", []);\n\n          const newStorage = elements.map((storageClass: any) => {\n            const name = get(storageClass, \"name\", \"\").split(\n              \".storageclass.storage.k8s.io/requests.storage\"\n            )[0];\n\n            return { label: name, value: name };\n          });\n\n          dispatch(\n            setPoolField({\n              page: \"setup\",\n              field: \"storageClass\",\n              value: newStorage[0].value,\n            })\n          );\n\n          dispatch(setPoolStorageClasses(newStorage));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n        });\n    }\n  }, [tenant, storageClasses, dispatch]);\n\n  const setFieldInfo = (fieldName: string, value: any) => {\n    dispatch(\n      setPoolField({\n        page: \"setup\",\n        field: fieldName,\n        value: value,\n      })\n    );\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>New Pool Configuration</h3>\n        <span className={classes.descriptionText}>\n          Configure a new Pool to expand MinIO storage\n        </span>\n      </div>\n\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"number_of_nodes\"\n          name=\"number_of_nodes\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"numberOfNodes\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"numberOfNodes\", 0);\n            }\n          }}\n          label=\"Number of Servers\"\n          value={numberOfNodes}\n          error={validationErrors[\"number_of_nodes\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"pool_size\"\n          name=\"pool_size\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"volumeSize\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"volumeSize\", 0);\n            }\n          }}\n          label=\"Volume Size\"\n          value={volumeSize}\n          error={validationErrors[\"pool_size\"] || \"\"}\n          pattern={\"[0-9]*\"}\n          overlayObject={\n            <InputUnitMenu\n              id={\"quota_unit\"}\n              onUnitChange={() => {}}\n              unitSelected={\"Gi\"}\n              unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n              disabled={true}\n            />\n          }\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"volumes_per_sever\"\n          name=\"volumes_per_sever\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            const intValue = parseInt(e.target.value);\n\n            if (e.target.validity.valid && !isNaN(intValue)) {\n              setFieldInfo(\"volumesPerServer\", intValue);\n            } else if (isNaN(intValue)) {\n              setFieldInfo(\"volumesPerServer\", 0);\n            }\n          }}\n          label=\"Volumes per Server\"\n          value={volumesPerServer}\n          error={validationErrors[\"volumes_per_server\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <SelectWrapper\n          id=\"storage_class\"\n          name=\"storage_class\"\n          onChange={(e: SelectChangeEvent<string>) => {\n            setFieldInfo(\"storageClasses\", e.target.value as string);\n          }}\n          label=\"Storage Class\"\n          value={storageClass}\n          options={storageClasses}\n          disabled={storageClasses.length < 1}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.bottomContainer}>\n        <div className={classes.factorElements}>\n          <div>\n            <div className={classes.sizeNumber}>\n              {niceBytes(instanceCapacity.toString(10))}\n            </div>\n            <div className={classes.sizeDescription}>Instance Capacity</div>\n          </div>\n          <div>\n            <div className={classes.sizeNumber}>\n              {niceBytes(totalCapacity.toString(10))}\n            </div>\n            <div className={classes.sizeDescription}>Total Capacity</div>\n          </div>\n        </div>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(PoolResources);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../../store\";\nimport { clearValidationError } from \"../../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { isPoolPageValid, setPoolField } from \"../../../tenantsSlice\";\n\ninterface IConfigureProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst PoolConfiguration = ({ classes }: IConfigureProps) => {\n  const dispatch = useDispatch();\n\n  const securityContextEnabled = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.configuration.securityContextEnabled\n  );\n  const securityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.configuration.securityContext\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        setPoolField({\n          page: \"configuration\",\n          field: field,\n          value: value,\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (securityContextEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"pool_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"pool_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"pool_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"configure\",\n        status: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, securityContextEnabled, securityContext]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Configure</h3>\n        <span className={classes.descriptionText}>\n          Aditional Configurations for the new Pool\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"pool_configuration\"\n          name=\"pool_configuration\"\n          checked={securityContextEnabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"securityContextEnabled\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n      </Grid>\n      {securityContextEnabled && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              Pool's Security Context\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"pool_securityContext_runAsUser\"\n                    name=\"pool_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"pool_securityContext_runAsGroup\"\n                    name=\"pool_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"pool_securityContext_fsGroup\"\n                    name=\"pool_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"securityContext\", {\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"pool_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"pool_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"securityContextRunAsNonRoot\"\n                  id=\"pool_securityContext_runAsNonRoot\"\n                  name=\"pool_securityContext_runAsNonRoot\"\n                  checked={securityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"securityContext\", {\n                      ...securityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(PoolConfiguration);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState } from \"../../../../../../store\";\n\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../../utils/validationFunctions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport { LabelKeyPair } from \"../../../types\";\nimport RadioGroupSelector from \"../../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../../icons/RemoveIcon\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport TolerationSelector from \"../../../../Common/TolerationSelector/TolerationSelector\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport {\n  addNewPoolToleration,\n  isPoolPageValid,\n  removePoolToleration,\n  setPoolField,\n  setPoolKeyValuePairs,\n  setPoolTolerationInfo,\n} from \"../../../tenantsSlice\";\n\ninterface IAffinityProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({ classes }: IAffinityProps) => {\n  const dispatch = useDispatch();\n\n  const podAffinity = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.affinity.podAffinity\n  );\n  const nodeSelectorLabels = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.affinity.nodeSelectorLabels\n  );\n  const withPodAntiAffinity = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.affinity.withPodAntiAffinity\n  );\n  const keyValuePairs = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.nodeSelectorPairs\n  );\n  const tolerations = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.tolerations\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        setPoolField({\n          page: \"affinity\",\n          field: field,\n          value: value,\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n          setKeyValueMap({});\n        });\n    }\n  }, [dispatch, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPoolPageValid({\n        page: \"affinity\",\n        status: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    dispatch(\n      setPoolTolerationInfo({\n        index: index,\n        tolerationValue: alterToleration,\n      })\n    );\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Pod Placement</h3>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const newLKP: LabelKeyPair = {\n                                key: newKey,\n                                value: keyValueMap[newKey][0],\n                              };\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = newLKP;\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = {\n                                key: arrCp[i].key,\n                                value: e.target.value as string,\n                              };\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = {\n                                key: arrCp[i].key,\n                                value: e.target.value as string,\n                              };\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = [...keyValuePairs];\n                              arrCp[i] = {\n                                key: arrCp[i].key,\n                                value: e.target.value as string,\n                              };\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = [...keyValuePairs];\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              dispatch(setPoolKeyValuePairs(arrCp));\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                dispatch(setPoolKeyValuePairs(arrCp));\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <h3>Tolerations</h3>\n          <span className={classes.error}>\n            {validationErrors[\"tolerations\"]}\n          </span>\n          <Grid container>\n            {tolerations &&\n              tolerations.map((tol, i) => {\n                return (\n                  <Grid\n                    item\n                    xs={12}\n                    className={classes.affinityRow}\n                    key={`affinity-keyVal-${i.toString()}`}\n                  >\n                    <TolerationSelector\n                      effect={tol.effect}\n                      onEffectChange={(value) => {\n                        updateToleration(i, \"effect\", value);\n                      }}\n                      tolerationKey={tol.key}\n                      onTolerationKeyChange={(value) => {\n                        updateToleration(i, \"key\", value);\n                      }}\n                      operator={tol.operator}\n                      onOperatorChange={(value) => {\n                        updateToleration(i, \"operator\", value);\n                      }}\n                      value={tol.value}\n                      onValueChange={(value) => {\n                        updateToleration(i, \"value\", value);\n                      }}\n                      tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                      onSecondsChange={(value) => {\n                        updateToleration(i, \"tolerationSeconds\", {\n                          seconds: value,\n                        });\n                      }}\n                      index={i}\n                    />\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                          dispatch(addNewPoolToleration());\n                        }}\n                        disabled={i !== tolerations.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </div>\n\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => dispatch(removePoolToleration(i))}\n                        disabled={tolerations.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </div>\n                  </Grid>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(Affinity);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { generatePoolName, niceBytes } from \"../../../../../../common/utils\";\nimport { LinearProgress } from \"@mui/material\";\nimport { IAddPoolRequest } from \"../../../ListTenants/types\";\nimport PageHeader from \"../../../../Common/PageHeader/PageHeader\";\nimport PageLayout from \"../../../../Common/Layout/PageLayout\";\nimport GenericWizard from \"../../../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../../../Common/GenericWizard/types\";\nimport history from \"../../../../../../history\";\nimport PoolResources from \"./PoolResources\";\nimport ScreenTitle from \"../../../../Common/ScreenTitle/ScreenTitle\";\nimport TenantsIcon from \"../../../../../../icons/TenantsIcon\";\n\nimport { AppState } from \"../../../../../../store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PoolConfiguration from \"./PoolConfiguration\";\nimport PoolPodPlacement from \"./PoolPodPlacement\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport { getDefaultAffinity, getNodeSelector } from \"../../utils\";\nimport api from \"../../../../../../common/api\";\nimport BackLink from \"../../../../../../common/BackLink\";\nimport { setErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport { resetPoolForm, setTenantDetailsLoad } from \"../../../tenantsSlice\";\n\ninterface IAddPoolProps {\n  classes: any;\n  open: boolean;\n  match: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      margin: \"auto\",\n      justifyContent: \"center\",\n      \"& div\": {\n        width: 150,\n        \"@media (max-width: 900px)\": {\n          flexFlow: \"column\",\n        },\n      },\n    },\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n      borderTop: 0,\n    },\n    addPoolTitle: {\n      border: \"1px solid #EAEAEA\",\n      borderBottom: 0,\n    },\n    ...formFieldStyles,\n    ...modalStyleUtils,\n  });\n\nconst requiredPages = [\"setup\", \"affinity\", \"configure\"];\n\nconst AddPool = ({ classes, open, match }: IAddPoolProps) => {\n  const dispatch = useDispatch();\n\n  const tenant = useSelector(\n    (state: AppState) => state.tenants.tenantDetails.tenantInfo\n  );\n  const selectedStorageClass = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.setup.storageClass\n  );\n  const validPages = useSelector(\n    (state: AppState) => state.tenants.addPool.validPages\n  );\n  const numberOfNodes = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.setup.numberOfNodes\n  );\n  const volumeSize = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.setup.volumeSize\n  );\n  const volumesPerServer = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.setup.volumesPerServer\n  );\n  const affinityType = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.affinity.podAffinity\n  );\n  const nodeSelectorLabels = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.affinity.nodeSelectorLabels\n  );\n  const withPodAntiAffinity = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.affinity.withPodAntiAffinity\n  );\n  const tolerations = useSelector(\n    (state: AppState) => state.tenants.addPool.fields.tolerations\n  );\n  const securityContextEnabled = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.configuration.securityContextEnabled\n  );\n  const securityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.addPool.fields.configuration.securityContext\n  );\n\n  const [addSending, setAddSending] = useState<boolean>(false);\n\n  const poolsURL = `/namespaces/${tenant?.namespace || \"\"}/tenants/${\n    tenant?.name || \"\"\n  }/pools`;\n\n  useEffect(() => {\n    if (addSending && tenant) {\n      const poolName = generatePoolName(tenant.pools);\n\n      let affinityObject = {};\n\n      switch (affinityType) {\n        case \"default\":\n          affinityObject = {\n            affinity: getDefaultAffinity(tenant.name, poolName),\n          };\n          break;\n        case \"nodeSelector\":\n          affinityObject = {\n            affinity: getNodeSelector(\n              nodeSelectorLabels,\n              withPodAntiAffinity,\n              tenant.name,\n              poolName\n            ),\n          };\n          break;\n      }\n\n      const tolerationValues = tolerations.filter(\n        (toleration) => toleration.key.trim() !== \"\"\n      );\n\n      const data: IAddPoolRequest = {\n        name: poolName,\n        servers: numberOfNodes,\n        volumes_per_server: volumesPerServer,\n        volume_configuration: {\n          size: volumeSize * 1073741824,\n          storage_class_name: selectedStorageClass,\n          labels: null,\n        },\n        tolerations: tolerationValues,\n        securityContext: securityContextEnabled ? securityContext : null,\n        ...affinityObject,\n      };\n\n      api\n        .invoke(\n          \"POST\",\n          `/api/v1/namespaces/${tenant.namespace}/tenants/${tenant.name}/pools`,\n          data\n        )\n        .then(() => {\n          setAddSending(false);\n          dispatch(resetPoolForm());\n          dispatch(setTenantDetailsLoad(true));\n          history.push(poolsURL);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n  }, [\n    addSending,\n    poolsURL,\n    affinityType,\n    nodeSelectorLabels,\n    numberOfNodes,\n    securityContext,\n    securityContextEnabled,\n    selectedStorageClass,\n    tenant,\n    tolerations,\n    volumeSize,\n    volumesPerServer,\n    withPodAntiAffinity,\n    dispatch,\n  ]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      dispatch(resetPoolForm());\n      history.push(poolsURL);\n    },\n  };\n\n  const createButton = {\n    label: \"Create\",\n    type: \"submit\",\n    enabled:\n      !addSending &&\n      selectedStorageClass !== \"\" &&\n      requiredPages.every((v) => validPages.includes(v)),\n    action: () => {\n      setAddSending(true);\n    },\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <PoolResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configuration\",\n      advancedOnly: true,\n      componentRender: <PoolConfiguration />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <PoolPodPlacement />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <PageHeader\n          label={\n            <Fragment>\n              <BackLink to={poolsURL} label={`Tenant Pools`} />\n            </Fragment>\n          }\n        />\n        <PageLayout>\n          <Grid item xs={12} className={classes.addPoolTitle}>\n            <ScreenTitle\n              icon={<TenantsIcon />}\n              title={`Add New Pool to ${tenant?.name || \"\"}`}\n              subTitle={\n                <Fragment>\n                  Namespace: {tenant?.namespace || \"\"} / Current Capacity:{\" \"}\n                  {niceBytes((tenant?.total_size || 0).toString(10))}\n                </Fragment>\n              }\n            />\n          </Grid>\n\n          {addSending && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n          <Grid item xs={12} className={classes.pageBox}>\n            <GenericWizard wizardSteps={wizardSteps} />\n          </Grid>\n        </PageLayout>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(AddPool);\n"],"names":["withStyles","theme","createStyles","bottomContainer","display","flexGrow","alignItems","margin","justifyContent","width","flexFlow","factorElements","marginLeft","sizeNumber","fontSize","fontWeight","textAlign","sizeDescription","color","formFieldStyles","wizardCommon","classes","dispatch","useDispatch","tenant","useSelector","state","tenants","tenantDetails","tenantInfo","storageClasses","addPool","numberOfNodes","fields","setup","toString","storageClass","volumeSize","volumesPerServer","useState","validationErrors","setValidationErrors","instanceCapacity","parseInt","totalCapacity","useEffect","customAccountValidation","fieldKey","required","value","customValidation","isNaN","customValidationMessage","commonVal","commonFormValidation","isPoolPageValid","page","status","Object","keys","length","api","namespace","then","res","newStorage","get","map","name","split","label","setPoolField","field","setPoolStorageClasses","catch","err","console","error","setFieldInfo","fieldName","Paper","className","paperWrapper","headerElement","h3Section","descriptionText","Grid","item","xs","formFieldRow","InputBoxWrapper","id","onChange","e","intValue","target","validity","valid","pattern","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","SelectWrapper","options","niceBytes","configSectionItem","marginRight","border","tenantCustomizationFields","containerItem","fieldGroup","createTenantCommon","paddingTop","marginBottom","responsiveSectionItem","modalBasic","securityContextEnabled","configuration","securityContext","updateField","useCallback","runAsUser","runAsGroup","fsGroup","cleanValidation","clearValidationError","FormSwitchWrapper","checked","multiContainer","type","min","runAsNonRoot","overlayAction","maxWidth","maxHeight","background","affinityConfigField","affinityFieldLabel","flex","radioField","marginTop","affinityLabelKey","affinityLabelValue","rowActions","affinityRow","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","k","push","setModalErrorSnackMessage","vl","filter","kvp","key","kvs","i","a","indexOf","join","splittedLabels","forEach","index","splitItem","updateToleration","alterToleration","setPoolTolerationInfo","tolerationValue","affinityHelpText","RadioGroupSelector","currentSelection","selectorOptions","Fragment","container","newKey","newLKP","arrCp","setPoolKeyValuePairs","placeholder","v","IconButton","size","onClick","AddIcon","RemoveIcon","tol","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","addNewPoolToleration","removePoolToleration","requiredPages","pageBox","borderTop","addPoolTitle","borderBottom","modalStyleUtils","open","match","selectedStorageClass","validPages","affinityType","addSending","setAddSending","poolsURL","poolName","generatePoolName","pools","affinityObject","getDefaultAffinity","getNodeSelector","tolerationValues","toleration","trim","data","servers","volumes_per_server","volume_configuration","storage_class_name","labels","resetPoolForm","setTenantDetailsLoad","history","setErrorSnackMessage","cancelButton","enabled","action","createButton","every","includes","wizardSteps","componentRender","buttons","advancedOnly","PoolPodPlacement","PageHeader","BackLink","to","PageLayout","ScreenTitle","icon","TenantsIcon","title","subTitle","total_size","LinearProgress","GenericWizard"],"sourceRoot":""}