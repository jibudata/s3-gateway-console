{"version":3,"file":"static/js/402.4bb1d687.chunk.js","mappings":"qOA4GA,UAxE8B,SAAH,GAKG,IAJ5BA,EAA8B,EAA9BA,+BACAC,EAAS,EAATA,UACAC,EAAc,EAAdA,eAAe,EAAD,EACdC,eAAAA,OAAc,MAAG,CAAC,EAAC,EAEbC,EAAgD,YAA1BD,EAAeE,OAErCC,GAAWC,EAAAA,EAAAA,MACjB,GAAkDC,EAAAA,EAAAA,WAAkB,GAAM,eAAnEC,EAAiB,KAAEC,EAAoB,KAsB9C,OACE,SAAC,IAAa,CACZC,MAAK,uBACLC,YAAaR,EAAsB,UAAY,SAC/CS,OAAQZ,EACRa,UAAWL,EACXM,WAAW,SAAC,MAAgB,IAC5BC,UA3BqB,WACnBP,IAGJC,GAAqB,GAErBO,EAAAA,EAAAA,OACU,MAAM,mBAAD,OAAqBf,EAAc,eAAe,CAC7DgB,YAAad,IAEde,MAAK,WACJT,GAAqB,GACrBV,GAA+B,EACjC,IACCoB,OAAM,SAACC,GACNX,GAAqB,GACrBJ,GAASgB,EAAAA,EAAAA,IAAqBD,GAChC,IACJ,EAUIE,mBAAoB,CAClBC,QAAS,cAEXC,QAAS,WACPzB,GAA+B,EACjC,EACA0B,qBACE,UAAC,IAAiB,CAACC,GAAG,2BAA0B,UAAC,2BACtB,KACzB,4BAASvB,EAAsB,UAAY,WAAmB,IAAI,8BAEjEA,IACC,UAAC,EAAAwB,SAAQ,YACP,mBACA,mBACA,4BAAQ,sDAGZ,gBACEC,MAAO,CACLC,WAAY,QACZ,SAED1B,GACC,SAAC,IAAc,CAAC2B,gBAAiB5B,IAC/B,WAMhB,C","sources":["screens/Console/Buckets/BucketDetails/EnableVersioningModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { DialogContentText } from \"@mui/material\";\nimport api from \"../../../../common/api\";\n\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"mds\";\n\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { BucketVersioningInfo } from \"../types\";\nimport VersioningInfo from \"../VersioningInfo\";\n\ninterface IVersioningEventProps {\n  closeVersioningModalAndRefresh: (refresh: boolean) => void;\n  modalOpen: boolean;\n  selectedBucket: string;\n  versioningInfo: BucketVersioningInfo | undefined;\n}\n\nconst EnableVersioningModal = ({\n  closeVersioningModalAndRefresh,\n  modalOpen,\n  selectedBucket,\n  versioningInfo = {},\n}: IVersioningEventProps) => {\n  const isVersioningEnabled = versioningInfo.Status === \"Enabled\";\n\n  const dispatch = useAppDispatch();\n  const [versioningLoading, setVersioningLoading] = useState<boolean>(false);\n\n  const enableVersioning = () => {\n    if (versioningLoading) {\n      return;\n    }\n    setVersioningLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/buckets/${selectedBucket}/versioning`, {\n        versioning: !isVersioningEnabled,\n      })\n      .then(() => {\n        setVersioningLoading(false);\n        closeVersioningModalAndRefresh(true);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setVersioningLoading(false);\n        dispatch(setErrorSnackMessage(err));\n      });\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Versioning on Bucket`}\n      confirmText={isVersioningEnabled ? \"Suspend\" : \"Enable\"}\n      isOpen={modalOpen}\n      isLoading={versioningLoading}\n      titleIcon={<ConfirmModalIcon />}\n      onConfirm={enableVersioning}\n      confirmButtonProps={{\n        variant: \"callAction\",\n      }}\n      onClose={() => {\n        closeVersioningModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to{\" \"}\n          <strong>{isVersioningEnabled ? \"suspend\" : \"enable\"}</strong>{\" \"}\n          versioning for this bucket?\n          {isVersioningEnabled && (\n            <Fragment>\n              <br />\n              <br />\n              <strong>File versions won't be automatically deleted.</strong>\n            </Fragment>\n          )}\n          <div\n            style={{\n              paddingTop: \"20px\",\n            }}\n          >\n            {isVersioningEnabled ? (\n              <VersioningInfo versioningState={versioningInfo} />\n            ) : null}\n          </div>\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nexport default EnableVersioningModal;\n"],"names":["closeVersioningModalAndRefresh","modalOpen","selectedBucket","versioningInfo","isVersioningEnabled","Status","dispatch","useAppDispatch","useState","versioningLoading","setVersioningLoading","title","confirmText","isOpen","isLoading","titleIcon","onConfirm","api","versioning","then","catch","err","setErrorSnackMessage","confirmButtonProps","variant","onClose","confirmationContent","id","Fragment","style","paddingTop","versioningState"],"sourceRoot":""}