{"version":3,"sources":["screens/Console/Common/PanelTitle/PanelTitle.tsx","screens/Console/Buckets/BucketDetails/BucketSummaryPanel.tsx"],"names":["withStyles","theme","createStyles","root","padding","margin","fontSize","classes","children","className","AddBucketTagModal","withSuspense","React","lazy","DeleteBucketTagModal","SetAccessPolicy","SetRetentionConfig","EnableBucketEncryption","EnableVersioningModal","EnableQuota","connector","connect","state","session","console","distributedSetup","system","loadingBucket","buckets","bucketDetails","bucketInfo","setErrorSnackMessage","setBucketDetailsLoad","paperContainer","paddingLeft","display","elementTitle","fontWeight","color","marginTop","consumptionValue","reportedUsage","dualCardLeft","paddingRight","dualCardRight","capitalizeFirst","textTransform","width","height","titleCol","tag","marginRight","hrClass","buttonsStyles","match","useState","encryptionCfg","setEncryptionCfg","bucketSize","setBucketSize","hasObjectLocking","setHasObjectLocking","accessPolicyScreenOpen","setAccessPolicyScreenOpen","replicationRules","setReplicationRules","loadingObjectLocking","setLoadingLocking","loadingSize","setLoadingSize","loadingTags","setLoadingTags","bucketLoading","setBucketLoading","loadingEncryption","setLoadingEncryption","loadingVersioning","setLoadingVersioning","loadingQuota","setLoadingQuota","loadingReplication","setLoadingReplication","loadingRetention","setLoadingRetention","isVersioned","setIsVersioned","quotaEnabled","setQuotaEnabled","quota","setQuota","encryptionEnabled","setEncryptionEnabled","retentionEnabled","setRetentionEnabled","retentionConfig","setRetentionConfig","retentionConfigOpen","setRetentionConfigOpen","enableEncryptionScreenOpen","setEnableEncryptionScreenOpen","enableQuotaScreenOpen","setEnableQuotaScreenOpen","enableVersioningOpen","setEnableVersioningOpen","tags","setTags","tagModalOpen","setTagModalOpen","tagKeys","setTagKeys","selectedTag","setSelectedTag","deleteTagModalOpen","setDeleteTagModalOpen","bucketName","params","accessPolicy","access","displayGetBucketObjectLockConfiguration","hasPermission","IAM_SCOPES","S3_GET_BUCKET_OBJECT_LOCK_CONFIGURATION","displayGetBucketEncryptionConfiguration","S3_GET_BUCKET_ENCRYPTION_CONFIGURATION","displayGetBucketQuota","ADMIN_GET_BUCKET_QUOTA","useEffect","api","invoke","then","res","algorithm","catch","err","errorMessage","is_versioned","object_locking_enabled","get","find","bucket","name","size","details","Object","keys","r","rules","length","str","loadAllBucketData","open","selectedBucket","closeModalAndRefresh","enabled","cfg","actualPolicy","closeVersioningModalAndRefresh","refresh","modalOpen","versioningCurrentState","currentTags","onCloseAndUpdate","deleteOpen","container","item","xs","actionsTray","scopes","S3_GET_BUCKET_POLICY","resource","S3_PUT_BUCKET_POLICY","errorProps","disabled","anchorButton","onClick","variant","toLowerCase","S3_GET_REPLICATION_CONFIGURATION","doubleElement","S3_PUT_BUCKET_ENCRYPTION_CONFIGURATION","S3_GET_BUCKET_TAGGING","map","tagKey","index","S3_PUT_BUCKET_TAGGING","matchAll","deleteIcon","onDelete","label","tagLabel","deleteTag","icon","clickable","direction","alignItems","niceBytes","S3_GET_BUCKET_VERSIONING","elevation","S3_PUT_BUCKET_VERSIONING","ADMIN_SET_BUCKET_QUOTA","type","toUpperCase","slice","S3_GET_OBJECT_RETENTION","gridContainer","S3_PUT_OBJECT_RETENTION","colSpan","mode","validity","unit"],"mappings":"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","file":"static/js/132.d779112d.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { IconButtonProps } from \"@mui/material\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 0,\n      margin: 0,\n      fontSize: \".9rem\",\n    },\n  });\n\ninterface IPanelTitle extends IconButtonProps {\n  classes: any;\n  children: any;\n}\n\nconst PanelTitle = ({ classes, children }: IPanelTitle) => {\n  return <h1 className={classes.root}>{children}</h1>;\n};\n\nexport default withStyles(styles)(PanelTitle);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, CircularProgress } from \"@mui/material\";\nimport get from \"lodash/get\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { AppState } from \"../../../../store\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport {\n  BucketEncryptionInfo,\n  BucketInfo,\n  BucketObjectLocking,\n  BucketQuota,\n  BucketReplication,\n  BucketVersioning,\n} from \"../types\";\nimport { niceBytes } from \"../../../../common/utils\";\nimport { Bucket, BucketList } from \"../../Watch/types\";\nimport {\n  buttonsStyles,\n  hrClass,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  ErrorResponseHandler,\n  IRetentionConfig,\n} from \"../../../../common/types\";\nimport api from \"../../../../common/api\";\nimport GavelIcon from \"@mui/icons-material/Gavel\";\nimport { setBucketDetailsLoad } from \"../actions\";\nimport ReportedUsageIcon from \"../../../../icons/ReportedUsageIcon\";\nimport { IAM_SCOPES } from \"../../../../common/SecureComponent/permissions\";\nimport PanelTitle from \"../../Common/PanelTitle/PanelTitle\";\nimport Chip from \"@mui/material/Chip\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nimport SecureComponent, {\n  hasPermission,\n} from \"../../../../common/SecureComponent/SecureComponent\";\n\nimport withSuspense from \"../../Common/Components/withSuspense\";\nconst AddBucketTagModal = withSuspense(\n  React.lazy(() => import(\"./AddBucketTagModal\"))\n);\nconst DeleteBucketTagModal = withSuspense(\n  React.lazy(() => import(\"./DeleteBucketTagModal\"))\n);\nconst SetAccessPolicy = withSuspense(\n  React.lazy(() => import(\"./SetAccessPolicy\"))\n);\nconst SetRetentionConfig = withSuspense(\n  React.lazy(() => import(\"./SetRetentionConfig\"))\n);\nconst EnableBucketEncryption = withSuspense(\n  React.lazy(() => import(\"./EnableBucketEncryption\"))\n);\nconst EnableVersioningModal = withSuspense(\n  React.lazy(() => import(\"./EnableVersioningModal\"))\n);\nconst EnableQuota = withSuspense(React.lazy(() => import(\"./EnableQuota\")));\n\ninterface IBucketSummaryProps {\n  classes: any;\n  match: any;\n  distributedSetup: boolean;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  loadingBucket: boolean;\n  bucketInfo: BucketInfo | null;\n  setBucketDetailsLoad: typeof setBucketDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paperContainer: {\n      padding: 15,\n      paddingLeft: 50,\n      display: \"flex\",\n    },\n    elementTitle: {\n      fontWeight: 500,\n      color: \"#777777\",\n      fontSize: 14,\n      marginTop: -9,\n    },\n    consumptionValue: {\n      color: \"#000000\",\n      fontSize: \"48px\",\n      fontWeight: \"bold\",\n    },\n    reportedUsage: {\n      padding: \"15px\",\n    },\n    dualCardLeft: {\n      paddingRight: \"5px\",\n    },\n    dualCardRight: {\n      paddingLeft: \"5px\",\n    },\n    capitalizeFirst: {\n      textTransform: \"capitalize\",\n      \"& .min-icon\": {\n        width: 16,\n        height: 16,\n      },\n    },\n    titleCol: {\n      width: \"25%\",\n    },\n    tag: {\n      textTransform: \"none\",\n      marginRight: \"5px\",\n    },\n    ...hrClass,\n    ...buttonsStyles,\n  });\n\nconst BucketSummary = ({\n  classes,\n  match,\n  distributedSetup,\n  setErrorSnackMessage,\n  loadingBucket,\n  bucketInfo,\n  setBucketDetailsLoad,\n}: IBucketSummaryProps) => {\n  const [encryptionCfg, setEncryptionCfg] =\n    useState<BucketEncryptionInfo | null>(null);\n  const [bucketSize, setBucketSize] = useState<string>(\"0\");\n  const [hasObjectLocking, setHasObjectLocking] = useState<boolean>(false);\n  const [accessPolicyScreenOpen, setAccessPolicyScreenOpen] =\n    useState<boolean>(false);\n  const [replicationRules, setReplicationRules] = useState<boolean>(false);\n  const [loadingObjectLocking, setLoadingLocking] = useState<boolean>(true);\n  const [loadingSize, setLoadingSize] = useState<boolean>(true);\n  const [loadingTags, setLoadingTags] = useState<boolean>(true);\n  const [bucketLoading, setBucketLoading] = useState<boolean>(true);\n  const [loadingEncryption, setLoadingEncryption] = useState<boolean>(true);\n  const [loadingVersioning, setLoadingVersioning] = useState<boolean>(true);\n  const [loadingQuota, setLoadingQuota] = useState<boolean>(true);\n  const [loadingReplication, setLoadingReplication] = useState<boolean>(true);\n  const [loadingRetention, setLoadingRetention] = useState<boolean>(true);\n  const [isVersioned, setIsVersioned] = useState<boolean>(false);\n  const [quotaEnabled, setQuotaEnabled] = useState<boolean>(false);\n  const [quota, setQuota] = useState<BucketQuota | null>(null);\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [retentionEnabled, setRetentionEnabled] = useState<boolean>(false);\n  const [retentionConfig, setRetentionConfig] =\n    useState<IRetentionConfig | null>(null);\n  const [retentionConfigOpen, setRetentionConfigOpen] =\n    useState<boolean>(false);\n  const [enableEncryptionScreenOpen, setEnableEncryptionScreenOpen] =\n    useState<boolean>(false);\n  const [enableQuotaScreenOpen, setEnableQuotaScreenOpen] =\n    useState<boolean>(false);\n  const [enableVersioningOpen, setEnableVersioningOpen] =\n    useState<boolean>(false);\n  const [tags, setTags] = useState<any>(null);\n  const [tagModalOpen, setTagModalOpen] = useState<boolean>(false);\n  const [tagKeys, setTagKeys] = useState<string[]>([]);\n  const [selectedTag, setSelectedTag] = useState<string[]>([\"\", \"\"]);\n  const [deleteTagModalOpen, setDeleteTagModalOpen] = useState<boolean>(false);\n\n  const bucketName = match.params[\"bucketName\"];\n\n  let accessPolicy = \"n/a\";\n\n  if (bucketInfo !== null) {\n    accessPolicy = bucketInfo.access;\n  }\n\n  const displayGetBucketObjectLockConfiguration = hasPermission(bucketName, [\n    IAM_SCOPES.S3_GET_BUCKET_OBJECT_LOCK_CONFIGURATION,\n  ]);\n\n  const displayGetBucketEncryptionConfiguration = hasPermission(bucketName, [\n    IAM_SCOPES.S3_GET_BUCKET_ENCRYPTION_CONFIGURATION,\n  ]);\n\n  const displayGetBucketQuota = hasPermission(bucketName, [\n    IAM_SCOPES.ADMIN_GET_BUCKET_QUOTA,\n  ]);\n\n  useEffect(() => {\n    if (loadingBucket) {\n      setBucketLoading(true);\n    } else {\n      setBucketLoading(false);\n    }\n  }, [loadingBucket, setBucketLoading]);\n\n  useEffect(() => {\n    if (loadingEncryption) {\n      if (displayGetBucketEncryptionConfiguration) {\n        api\n          .invoke(\"GET\", `/api/v1/buckets/${bucketName}/encryption/info`)\n          .then((res: BucketEncryptionInfo) => {\n            if (res.algorithm) {\n              setEncryptionEnabled(true);\n              setEncryptionCfg(res);\n            }\n            setLoadingEncryption(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            if (\n              err.errorMessage ===\n              \"The server side encryption configuration was not found\"\n            ) {\n              setEncryptionEnabled(false);\n              setEncryptionCfg(null);\n            }\n            setLoadingEncryption(false);\n          });\n      } else {\n        setEncryptionEnabled(false);\n        setEncryptionCfg(null);\n        setLoadingEncryption(false);\n      }\n    }\n  }, [loadingEncryption, bucketName, displayGetBucketEncryptionConfiguration]);\n\n  useEffect(() => {\n    if (loadingVersioning && distributedSetup) {\n      api\n        .invoke(\"GET\", `/api/v1/buckets/${bucketName}/versioning`)\n        .then((res: BucketVersioning) => {\n          setIsVersioned(res.is_versioned);\n          setLoadingVersioning(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n          setLoadingVersioning(false);\n        });\n    }\n  }, [loadingVersioning, setErrorSnackMessage, bucketName, distributedSetup]);\n\n  useEffect(() => {\n    if (loadingQuota && distributedSetup) {\n      if (displayGetBucketQuota) {\n        api\n          .invoke(\"GET\", `/api/v1/buckets/${bucketName}/quota`)\n          .then((res: BucketQuota) => {\n            setQuota(res);\n            if (res.quota) {\n              setQuotaEnabled(true);\n            } else {\n              setQuotaEnabled(false);\n            }\n            setLoadingQuota(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setErrorSnackMessage(err);\n            setQuotaEnabled(false);\n            setLoadingQuota(false);\n          });\n      } else {\n        setQuotaEnabled(false);\n        setLoadingQuota(false);\n      }\n    }\n  }, [\n    loadingQuota,\n    setLoadingVersioning,\n    setErrorSnackMessage,\n    bucketName,\n    distributedSetup,\n    displayGetBucketQuota,\n  ]);\n\n  useEffect(() => {\n    if (loadingVersioning && distributedSetup) {\n      if (displayGetBucketObjectLockConfiguration) {\n        api\n          .invoke(\"GET\", `/api/v1/buckets/${bucketName}/object-locking`)\n          .then((res: BucketObjectLocking) => {\n            setHasObjectLocking(res.object_locking_enabled);\n            setLoadingLocking(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setErrorSnackMessage(err);\n            setLoadingLocking(false);\n          });\n      } else {\n        setLoadingLocking(false);\n      }\n    }\n  }, [\n    loadingObjectLocking,\n    setErrorSnackMessage,\n    bucketName,\n    loadingVersioning,\n    distributedSetup,\n    displayGetBucketObjectLockConfiguration,\n  ]);\n\n  useEffect(() => {\n    if (loadingSize) {\n      api\n        .invoke(\"GET\", `/api/v1/buckets`)\n        .then((res: BucketList) => {\n          const resBuckets = get(res, \"buckets\", []);\n\n          const bucketInfo = resBuckets.find(\n            (bucket) => bucket.name === bucketName\n          );\n\n          const size = get(bucketInfo, \"size\", \"0\");\n\n          setLoadingSize(false);\n          setBucketSize(size);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoadingSize(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [loadingSize, setErrorSnackMessage, bucketName]);\n\n  useEffect(() => {\n    if (loadingTags) {\n      api\n        .invoke(\"GET\", `/api/v1/buckets/${bucketName}`)\n        .then((res: Bucket) => {\n          if (res != null && res?.details != null) {\n            setTags(res?.details?.tags);\n            setTagKeys(Object.keys(res?.details?.tags));\n          }\n          setLoadingTags(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoadingTags(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    loadingTags,\n    setErrorSnackMessage,\n    bucketName,\n    setTags,\n    tags,\n    setTagKeys,\n    tagKeys,\n  ]);\n\n  useEffect(() => {\n    if (loadingReplication && distributedSetup) {\n      api\n        .invoke(\"GET\", `/api/v1/buckets/${bucketName}/replication`)\n        .then((res: BucketReplication) => {\n          const r = res.rules ? res.rules : [];\n          setReplicationRules(r.length > 0);\n          setLoadingReplication(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n          setLoadingReplication(false);\n        });\n    }\n  }, [loadingReplication, setErrorSnackMessage, bucketName, distributedSetup]);\n\n  useEffect(() => {\n    if (loadingRetention && hasObjectLocking) {\n      api\n        .invoke(\"GET\", `/api/v1/buckets/${bucketName}/retention`)\n        .then((res: IRetentionConfig) => {\n          setLoadingRetention(false);\n          setRetentionEnabled(true);\n          setRetentionConfig(res);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setRetentionEnabled(false);\n          setLoadingRetention(false);\n          setRetentionConfig(null);\n        });\n    }\n  }, [loadingRetention, hasObjectLocking, bucketName]);\n\n  const loadAllBucketData = () => {\n    setBucketDetailsLoad(true);\n    setBucketLoading(true);\n    setLoadingSize(true);\n    setLoadingTags(true);\n    setLoadingVersioning(true);\n    setLoadingEncryption(true);\n    setLoadingRetention(true);\n  };\n\n  const setBucketVersioning = () => {\n    setEnableVersioningOpen(true);\n  };\n  const setBucketQuota = () => {\n    setEnableQuotaScreenOpen(true);\n  };\n\n  const closeEnableBucketEncryption = () => {\n    setEnableEncryptionScreenOpen(false);\n    setLoadingEncryption(true);\n  };\n  const closeEnableBucketQuota = () => {\n    setEnableQuotaScreenOpen(false);\n    setLoadingQuota(true);\n  };\n\n  const closeSetAccessPolicy = () => {\n    setAccessPolicyScreenOpen(false);\n    loadAllBucketData();\n  };\n\n  const closeRetentionConfig = () => {\n    setRetentionConfigOpen(false);\n    loadAllBucketData();\n  };\n\n  const closeEnableVersioning = (refresh: boolean) => {\n    setEnableVersioningOpen(false);\n    if (refresh) {\n      loadAllBucketData();\n    }\n  };\n\n  const closeAddTagModal = (refresh: boolean) => {\n    setTagModalOpen(false);\n    if (refresh) {\n      loadAllBucketData();\n    }\n  };\n\n  const cap = (str: string) => {\n    if (!str) {\n      return null;\n    }\n    return str[0].toUpperCase() + str.slice(1);\n  };\n\n  const deleteTag = (tagKey: string, tagLabel: string) => {\n    setSelectedTag([tagKey, tagLabel]);\n    setDeleteTagModalOpen(true);\n  };\n\n  const closeDeleteTagModal = (refresh: boolean) => {\n    setDeleteTagModalOpen(false);\n\n    if (refresh) {\n      loadAllBucketData();\n    }\n  };\n\n  // @ts-ignore\n  return (\n    <Fragment>\n      {enableEncryptionScreenOpen && (\n        <EnableBucketEncryption\n          open={enableEncryptionScreenOpen}\n          selectedBucket={bucketName}\n          encryptionEnabled={encryptionEnabled}\n          encryptionCfg={encryptionCfg}\n          closeModalAndRefresh={closeEnableBucketEncryption}\n        />\n      )}\n      {enableQuotaScreenOpen && (\n        <EnableQuota\n          open={enableQuotaScreenOpen}\n          selectedBucket={bucketName}\n          enabled={quotaEnabled}\n          cfg={quota}\n          closeModalAndRefresh={closeEnableBucketQuota}\n        />\n      )}\n      {accessPolicyScreenOpen && (\n        <SetAccessPolicy\n          bucketName={bucketName}\n          open={accessPolicyScreenOpen}\n          actualPolicy={accessPolicy}\n          closeModalAndRefresh={closeSetAccessPolicy}\n        />\n      )}\n      {retentionConfigOpen && (\n        <SetRetentionConfig\n          bucketName={bucketName}\n          open={retentionConfigOpen}\n          closeModalAndRefresh={closeRetentionConfig}\n        />\n      )}\n      {enableVersioningOpen && (\n        <EnableVersioningModal\n          closeVersioningModalAndRefresh={closeEnableVersioning}\n          modalOpen={enableVersioningOpen}\n          selectedBucket={bucketName}\n          versioningCurrentState={isVersioned}\n        />\n      )}\n      {tagModalOpen && (\n        <AddBucketTagModal\n          modalOpen={tagModalOpen}\n          currentTags={tags}\n          bucketName={bucketName}\n          onCloseAndUpdate={closeAddTagModal}\n        />\n      )}\n      {deleteTagModalOpen && (\n        <DeleteBucketTagModal\n          deleteOpen={deleteTagModalOpen}\n          currentTags={tags}\n          bucketName={bucketName}\n          onCloseAndUpdate={closeDeleteTagModal}\n          selectedTag={selectedTag}\n        />\n      )}\n      <Grid container>\n        <Grid item xs={12} className={classes.actionsTray}>\n          <PanelTitle>Summary</PanelTitle>\n        </Grid>\n      </Grid>\n      <Paper className={classes.paperContainer}>\n        <Grid container>\n          <Grid item xs={8}>\n            <table width={\"100%\"}>\n              <tbody>\n                <SecureComponent\n                  scopes={[IAM_SCOPES.S3_GET_BUCKET_POLICY]}\n                  resource={bucketName}\n                >\n                  <tr>\n                    <td className={classes.titleCol}>Access Policy:</td>\n                    <td className={classes.capitalizeFirst}>\n                      <SecureComponent\n                        scopes={[IAM_SCOPES.S3_PUT_BUCKET_POLICY]}\n                        resource={bucketName}\n                        errorProps={{ disabled: true }}\n                      >\n                        <Button\n                          color=\"primary\"\n                          className={classes.anchorButton}\n                          onClick={() => {\n                            setAccessPolicyScreenOpen(true);\n                          }}\n                        >\n                          {bucketLoading ? (\n                            <CircularProgress\n                              color=\"primary\"\n                              size={16}\n                              variant=\"indeterminate\"\n                            />\n                          ) : (\n                            accessPolicy.toLowerCase()\n                          )}\n                        </Button>\n                      </SecureComponent>\n                    </td>\n                  </tr>\n                </SecureComponent>\n                {distributedSetup && (\n                  <Fragment>\n                    <SecureComponent\n                      scopes={[IAM_SCOPES.S3_GET_REPLICATION_CONFIGURATION]}\n                      resource={bucketName}\n                    >\n                      <tr>\n                        <td className={classes.titleCol}>Replication:</td>\n                        <td className={classes.doubleElement}>\n                          <span>\n                            {replicationRules ? \"Enabled\" : \"Disabled\"}\n                          </span>\n                        </td>\n                      </tr>\n                    </SecureComponent>\n                    <SecureComponent\n                      scopes={[\n                        IAM_SCOPES.S3_GET_BUCKET_OBJECT_LOCK_CONFIGURATION,\n                      ]}\n                      resource={bucketName}\n                    >\n                      <tr>\n                        <td className={classes.titleCol}>Object Locking:</td>\n                        <td>{!hasObjectLocking ? \"Disabled\" : \"Enabled\"}</td>\n                      </tr>\n                    </SecureComponent>\n                  </Fragment>\n                )}\n                <SecureComponent\n                  scopes={[IAM_SCOPES.S3_GET_BUCKET_ENCRYPTION_CONFIGURATION]}\n                  resource={bucketName}\n                >\n                  <tr>\n                    <td className={classes.titleCol}>Encryption:</td>\n                    <td>\n                      {loadingEncryption ? (\n                        <CircularProgress\n                          color=\"primary\"\n                          size={16}\n                          variant=\"indeterminate\"\n                        />\n                      ) : (\n                        <SecureComponent\n                          scopes={[\n                            IAM_SCOPES.S3_PUT_BUCKET_ENCRYPTION_CONFIGURATION,\n                          ]}\n                          resource={bucketName}\n                          errorProps={{ disabled: true }}\n                        >\n                          <Button\n                            color=\"primary\"\n                            className={classes.anchorButton}\n                            onClick={() => {\n                              setEnableEncryptionScreenOpen(true);\n                            }}\n                          >\n                            {encryptionEnabled ? \"Enabled\" : \"Disabled\"}\n                          </Button>\n                        </SecureComponent>\n                      )}\n                    </td>\n                  </tr>\n                </SecureComponent>\n                <SecureComponent\n                  scopes={[IAM_SCOPES.S3_GET_BUCKET_TAGGING]}\n                  resource={bucketName}\n                >\n                  <tr>\n                    <td className={classes.titleCol}>Tags:</td>\n                    <td>\n                      {tagKeys &&\n                        tagKeys.map((tagKey: any, index: any) => {\n                          const tag = get(tags, `${tagKey}`, \"\");\n                          if (tag !== \"\") {\n                            return (\n                              <SecureComponent\n                                key={`chip-${index}`}\n                                scopes={[IAM_SCOPES.S3_PUT_BUCKET_TAGGING]}\n                                resource={bucketName}\n                                matchAll\n                                errorProps={{\n                                  deleteIcon: null,\n                                  onDelete: null,\n                                }}\n                              >\n                                <Chip\n                                  className={classes.tag}\n                                  size=\"small\"\n                                  label={`${tagKey} : ${tag}`}\n                                  color=\"primary\"\n                                  deleteIcon={<CloseIcon />}\n                                  onDelete={() => {\n                                    deleteTag(tagKey, tag);\n                                  }}\n                                />\n                              </SecureComponent>\n                            );\n                          }\n                          return null;\n                        })}\n                      <SecureComponent\n                        scopes={[IAM_SCOPES.S3_PUT_BUCKET_TAGGING]}\n                        resource={bucketName}\n                      >\n                        <Chip\n                          className={classes.tag}\n                          icon={<AddIcon />}\n                          clickable\n                          size=\"small\"\n                          label=\"Add tag\"\n                          color=\"primary\"\n                          variant=\"outlined\"\n                          onClick={() => {\n                            setTagModalOpen(true);\n                          }}\n                        />\n                      </SecureComponent>\n                    </td>\n                  </tr>\n                </SecureComponent>\n              </tbody>\n            </table>\n          </Grid>\n          <Grid item xs={4} className={classes.reportedUsage}>\n            <Grid container direction=\"row\" alignItems=\"center\">\n              <Grid item className={classes.icon} xs={2}>\n                <ReportedUsageIcon />\n              </Grid>\n              <Grid item xs={10}>\n                <Typography className={classes.elementTitle}>\n                  Reported Usage\n                </Typography>\n              </Grid>\n            </Grid>\n            <Typography className={classes.consumptionValue}>\n              {niceBytes(bucketSize)}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n      <br />\n      <br />\n      {distributedSetup && (\n        <SecureComponent\n          scopes={[IAM_SCOPES.S3_GET_BUCKET_VERSIONING]}\n          resource={bucketName}\n        >\n          <Fragment>\n            <Paper className={classes.paperContainer} elevation={1}>\n              <Grid container>\n                <Grid item xs={quotaEnabled ? 9 : 12}>\n                  <h2>Versioning</h2>\n                  <hr className={classes.hrClass} />\n                  <table width={\"100%\"}>\n                    <tbody>\n                      <tr>\n                        <td className={classes.titleCol}>Versioning:</td>\n                        <td>\n                          {loadingVersioning ? (\n                            <CircularProgress\n                              color=\"primary\"\n                              size={16}\n                              variant=\"indeterminate\"\n                            />\n                          ) : (\n                            <SecureComponent\n                              scopes={[IAM_SCOPES.S3_PUT_BUCKET_VERSIONING]}\n                              resource={bucketName}\n                              errorProps={{ disabled: true }}\n                            >\n                              <Button\n                                color=\"primary\"\n                                className={classes.anchorButton}\n                                onClick={setBucketVersioning}\n                              >\n                                {isVersioned ? \"Enabled\" : \"Disabled\"}\n                              </Button>\n                            </SecureComponent>\n                          )}\n                        </td>\n                        <SecureComponent\n                          scopes={[IAM_SCOPES.ADMIN_GET_BUCKET_QUOTA]}\n                          resource={bucketName}\n                        >\n                          <td className={classes.titleCol}>Quota:</td>\n                          <td>\n                            {loadingQuota ? (\n                              <CircularProgress\n                                color=\"primary\"\n                                size={16}\n                                variant=\"indeterminate\"\n                              />\n                            ) : (\n                              <SecureComponent\n                                scopes={[IAM_SCOPES.ADMIN_SET_BUCKET_QUOTA]}\n                                resource={bucketName}\n                                errorProps={{ disabled: true }}\n                              >\n                                <Button\n                                  color=\"primary\"\n                                  className={classes.anchorButton}\n                                  onClick={setBucketQuota}\n                                >\n                                  {quotaEnabled ? \"Enabled\" : \"Disabled\"}\n                                </Button>\n                              </SecureComponent>\n                            )}\n                          </td>\n                        </SecureComponent>\n                      </tr>\n                    </tbody>\n                  </table>\n                </Grid>\n                {quotaEnabled && quota && (\n                  <Grid item xs={3} className={classes.reportedUsage}>\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                      <Grid item className={classes.icon} xs={2}>\n                        <GavelIcon />\n                      </Grid>\n                      <Grid item xs={10}>\n                        <Typography className={classes.elementTitle}>\n                          {cap(quota?.type)} Quota\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    <Typography className={classes.consumptionValue}>\n                      {niceBytes(`${quota?.quota}`)}\n                    </Typography>\n                  </Grid>\n                )}\n              </Grid>\n            </Paper>\n            <br />\n            <br />\n          </Fragment>\n        </SecureComponent>\n      )}\n\n      {hasObjectLocking && (\n        <SecureComponent\n          scopes={[IAM_SCOPES.S3_GET_OBJECT_RETENTION]}\n          resource={bucketName}\n        >\n          <Paper className={classes.paperContainer}>\n            <Grid container>\n              <Grid item xs={12}>\n                <h2>Retention</h2>\n                <hr className={classes.hrClass} />\n                <table width={\"100%\"}>\n                  <tbody>\n                    <tr className={classes.gridContainer}>\n                      <td className={classes.titleCol}>Status:</td>\n                      <td>\n                        {loadingRetention ? (\n                          <CircularProgress\n                            color=\"primary\"\n                            size={16}\n                            variant=\"indeterminate\"\n                          />\n                        ) : (\n                          <SecureComponent\n                            scopes={[IAM_SCOPES.S3_PUT_OBJECT_RETENTION]}\n                            resource={bucketName}\n                            errorProps={{ disabled: true }}\n                          >\n                            <Button\n                              color=\"primary\"\n                              className={classes.anchorButton}\n                              onClick={() => {\n                                setRetentionConfigOpen(true);\n                              }}\n                            >\n                              {!retentionEnabled ? \"Disabled\" : \"Enabled\"}\n                            </Button>\n                          </SecureComponent>\n                        )}\n                      </td>\n                      {retentionConfig === null ? (\n                        <td colSpan={2}>&nbsp;</td>\n                      ) : (\n                        <Fragment>\n                          <td className={classes.titleCol}>Mode:</td>\n                          <td className={classes.capitalizeFirst}>\n                            {retentionConfig && retentionConfig.mode}\n                          </td>\n                        </Fragment>\n                      )}\n                    </tr>\n                    <tr className={classes.gridContainer}>\n                      {retentionConfig === null ? (\n                        <td colSpan={2}></td>\n                      ) : (\n                        <Fragment>\n                          <td className={classes.titleCol}>Valitidy:</td>\n                          <td className={classes.capitalizeFirst}>\n                            {retentionConfig && retentionConfig.validity}{\" \"}\n                            {retentionConfig &&\n                              (retentionConfig.validity === 1\n                                ? retentionConfig.unit.slice(0, -1)\n                                : retentionConfig.unit)}\n                          </td>\n                        </Fragment>\n                      )}\n                    </tr>\n                  </tbody>\n                </table>\n              </Grid>\n            </Grid>\n          </Paper>\n        </SecureComponent>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  session: state.console.session,\n  distributedSetup: state.system.distributedSetup,\n  loadingBucket: state.buckets.bucketDetails.loadingBucket,\n  bucketInfo: state.buckets.bucketDetails.bucketInfo,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  setBucketDetailsLoad,\n});\n\nexport default withStyles(styles)(connector(BucketSummary));\n"],"sourceRoot":""}