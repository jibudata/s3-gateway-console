{"version":3,"file":"static/js/4619.282dc42d.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddAccessRule.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { connect } from \"react-redux\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { AppState } from \"../../../../store\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { AddAccessRuleIcon } from \"../../../../icons\";\n\nconst mapState = (state: AppState) => ({\n  session: state.console.session,\n});\n\nconst connector = connect(mapState, { setErrorSnackMessage });\n\ninterface IAddAccessRule {\n  classes: any;\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalStyleUtils,\n  });\n\nconst AddAccessRule = ({\n  modalOpen,\n  onClose,\n  classes,\n  bucket,\n}: IAddAccessRule) => {\n  const [prefix, setPrefix] = useState(\"\");\n  const [selectedAccess, setSelectedAccess] = useState<any>(\"readonly\");\n\n  const accessOptions = [\n    { label: \"readonly\", value: \"readonly\" },\n    { label: \"writeonly\", value: \"writeonly\" },\n    { label: \"readwrite\", value: \"readwrite\" },\n  ];\n\n  const resetForm = () => {\n    setPrefix(\"\");\n    setSelectedAccess(\"readonly\");\n  };\n\n  const createProcess = () => {\n    api\n      .invoke(\"PUT\", `/api/v1/bucket/${bucket}/access-rules`, {\n        prefix: prefix,\n        access: selectedAccess,\n      })\n      .then((res: any) => {\n        onClose();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setErrorSnackMessage(err);\n        onClose();\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={modalOpen}\n      title=\"Add Access Rule\"\n      onClose={onClose}\n      titleIcon={<AddAccessRuleIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            value={prefix}\n            label={\"Prefix\"}\n            id={\"prefix\"}\n            name={\"prefix\"}\n            placeholder={\"Enter Prefix\"}\n            onChange={(e) => {\n              setPrefix(e.target.value);\n            }}\n            tooltip={\"Leave this field blank to apply the rule to all prefixes and objects at the bucket root. Do not include the wildcard asterisk ``*`` as part of the prefix *unless* it is an explicit part of the prefix name. The Console automatically appends an asterisk to the appropriate sections of the resulting IAM policy.\"}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <SelectWrapper\n            id=\"access\"\n            name=\"Access\"\n            onChange={(e) => {\n              setSelectedAccess(e.target.value);\n            }}\n            label=\"Access\"\n            value={selectedAccess}\n            options={accessOptions}\n            disabled={false}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.modalButtonBar}>\n          <Button\n            type=\"button\"\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={resetForm}\n          >\n            Clear\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={prefix.trim() === \"\"}\n            onClick={createProcess}\n          >\n            Save\n          </Button>\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(connector(AddAccessRule));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n  titleIcon = null,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n"],"names":["connector","connect","state","session","console","setErrorSnackMessage","withStyles","theme","createStyles","formFieldStyles","modalStyleUtils","modalOpen","onClose","classes","bucket","useState","prefix","setPrefix","selectedAccess","setSelectedAccess","title","titleIcon","container","item","xs","className","formFieldRow","value","label","id","name","placeholder","onChange","e","target","tooltip","options","disabled","modalButtonBar","type","color","variant","onClick","trim","api","access","then","res","catch","err","modalSnackMessage","system","modalSnackBar","setModalSnackMessage","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","useEffect","message","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}