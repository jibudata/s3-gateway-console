{"version":3,"file":"static/js/8822.6030f20d.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/SummaryItems/RBIconButton.tsx","screens/Console/Common/UsageBarWrapper/LabelValuePair.tsx","screens/Console/Tenants/TenantDetails/Pools/Details/PoolsListing.tsx","screens/Console/Tenants/TenantDetails/Pools/Details/PoolDetails.tsx","screens/Console/Tenants/TenantDetails/PoolsSummary.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport BoxIconButton from \"../../../Common/BoxIconButton/BoxIconButton\";\nimport { IconButtonProps } from \"@mui/material\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { Theme } from \"@mui/material/styles\";\n\ntype DeleteButtonProps = {\n  onClick: (e: any) => void;\n  text?: string;\n  disabled?: boolean;\n  size?: string;\n  tooltip?: string;\n  classes?: any;\n  icon?: React.ReactNode;\n  [x: string]: any;\n};\n\ntype RBIconProps = Partial<IconButtonProps> & DeleteButtonProps;\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const getButtonColor = (props: RBIconProps) => {\n    const { variant, color } = props;\n\n    let tgtColor = theme.palette.primary.main;\n\n    if (color === \"primary\" && variant === \"contained\") {\n      tgtColor = theme.palette.primary.contrastText;\n    } else if (color === \"primary\" && variant === \"outlined\") {\n      tgtColor = theme.palette.primary.main;\n    } else if (color === \"secondary\") {\n      tgtColor = theme.palette.secondary.main;\n    }\n\n    return tgtColor;\n  };\n\n  return {\n    root: {\n      padding: \"7px\",\n      color: (props: RBIconProps) => getButtonColor(props),\n      borderColor: (props: RBIconProps) =>\n        props.color === \"secondary\"\n          ? theme.palette.secondary.main\n          : theme.palette.primary.main,\n      \"& svg.min-icon\": {\n        width: 12,\n        marginLeft: (props: RBIconProps) => (props.text ? \"5px\" : \"0px\"),\n        \"@media (max-width: 900px)\": {\n          width: 16,\n          marginLeft: \"0px !important\",\n        },\n      },\n    },\n  };\n});\n\nconst RBIconButton = (props: RBIconProps) => {\n  const classes = useStyles(props);\n\n  const {\n    onClick,\n    text = \"\",\n    disabled = false,\n    tooltip,\n    icon = null,\n    className = \"\",\n    ...restProps\n  } = props;\n\n  return (\n    <BoxIconButton\n      className={className}\n      classes={classes}\n      tooltip={tooltip || text}\n      variant=\"outlined\"\n      onClick={onClick}\n      disabled={disabled}\n      color=\"secondary\"\n      size=\"medium\"\n      sx={{\n        border: \"1px solid #f44336\",\n        \"& span\": {\n          fontSize: 14,\n          \"@media (max-width: 900px)\": {\n            display: \"none\",\n          },\n        },\n      }}\n      {...restProps}\n    >\n      <span>{text}</span> {icon}\n    </BoxIconButton>\n  );\n};\nexport default RBIconButton;\n","import React from \"react\";\nimport { Stack } from \"@mui/material\";\n\ntype LabelValuePairProps = {\n  label?: any;\n  value?: any;\n  orientation?: any;\n  stkProps?: any;\n  lblProps?: any;\n  valProps?: any;\n};\n\nconst LabelValuePair = ({\n  label = null,\n  value = \"-\",\n  orientation = \"column\",\n  stkProps = {},\n  lblProps = {},\n  valProps = {},\n}: LabelValuePairProps) => {\n  return (\n    <Stack direction={{ xs: \"column\", sm: orientation }} {...stkProps}>\n      <label style={{ marginRight: 5, fontWeight: 600 }} {...lblProps}>\n        {label}\n      </label>\n      <label style={{ marginRight: 5, fontWeight: 500 }} {...valProps}>\n        {value}\n      </label>\n    </Stack>\n  );\n};\n\nexport default LabelValuePair;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../../store\";\nimport { connect } from \"react-redux\";\nimport { setErrorSnackMessage } from \"../../../../../../actions\";\nimport { setSelectedPool } from \"../../../actions\";\nimport { IPool, ITenant } from \"../../../ListTenants/types\";\nimport Grid from \"@mui/material/Grid\";\nimport { TextField } from \"@mui/material\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport SearchIcon from \"../../../../../../icons/SearchIcon\";\nimport RBIconButton from \"../../../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport { AddIcon } from \"../../../../../../icons\";\nimport TableWrapper from \"../../../../Common/TableWrapper/TableWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport {\n  actionsTray,\n  containerForHeader,\n  tableStyles,\n  tenantDetailsStyles,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\n\ninterface IPoolsSummary {\n  classes: any;\n  tenant: ITenant | null;\n  loadingTenant: boolean;\n  history: any;\n  setPoolDetailsView: () => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  setSelectedPool: typeof setSelectedPool;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...actionsTray,\n    ...tableStyles,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst PoolsListing = ({\n  classes,\n  tenant,\n  loadingTenant,\n  setSelectedPool,\n  history,\n  setPoolDetailsView,\n}: IPoolsSummary) => {\n  const [pools, setPools] = useState<IPool[]>([]);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (tenant) {\n      const resPools = !tenant.pools ? [] : tenant.pools;\n      setPools(resPools);\n    }\n  }, [tenant]);\n\n  const filteredPools = pools.filter((pool) => {\n    if (pool.name.toLowerCase().includes(filter.toLowerCase())) {\n      return true;\n    }\n\n    return false;\n  });\n\n  const listActions = [\n    {\n      type: \"view\",\n      onClick: (selectedValue: IPool) => {\n        setSelectedPool(selectedValue.name);\n        setPoolDetailsView();\n      },\n    },\n  ];\n\n  return (\n    <Fragment>\n      <Grid item xs={12} className={classes.actionsTray}>\n        <TextField\n          placeholder=\"Filter\"\n          className={classes.searchField}\n          id=\"search-resource\"\n          label=\"\"\n          onChange={(event) => {\n            setFilter(event.target.value);\n          }}\n          InputProps={{\n            disableUnderline: true,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          variant=\"standard\"\n        />\n\n        <RBIconButton\n          tooltip={\"Expand Tenant\"}\n          text={\"Expand Tenant\"}\n          onClick={() => {\n            history.push(\n              `/namespaces/${tenant?.namespace || \"\"}/tenants/${\n                tenant?.name || \"\"\n              }/add-pool`\n            );\n          }}\n          icon={<AddIcon />}\n          color=\"primary\"\n          variant={\"contained\"}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <br />\n      </Grid>\n\n      <Grid item xs={12} className={classes.tableBlock}>\n        <TableWrapper\n          itemActions={listActions}\n          columns={[\n            { label: \"Name\", elementKey: \"name\" },\n            { label: \"Capacity\", elementKey: \"capacity\" },\n            { label: \"# of Instances\", elementKey: \"servers\" },\n            { label: \"# of Drives\", elementKey: \"volumes\" },\n          ]}\n          isLoading={loadingTenant}\n          records={filteredPools}\n          entityName=\"Servers\"\n          idField=\"name\"\n          customEmptyMessage=\"No Pools found\"\n        />\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  setSelectedPool,\n});\n\nexport default withStyles(styles)(connector(PoolsListing));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  spacingUtils,\n  tableStyles,\n  tenantDetailsStyles,\n  textStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../../../actions\";\nimport { AppState } from \"../../../../../../store\";\nimport { setTenantDetailsLoad } from \"../../../actions\";\nimport { Box } from \"@mui/material\";\nimport { ITenant } from \"../../../ListTenants/types\";\nimport Grid from \"@mui/material/Grid\";\nimport LabelValuePair from \"../../../../Common/UsageBarWrapper/LabelValuePair\";\nimport { niceBytesInt } from \"../../../../../../common/utils\";\n\ninterface IPoolDetails {\n  classes: any;\n  loadingTenant: boolean;\n  tenant: ITenant | null;\n  selectedPool: string | null;\n  closeDetailsView: () => void;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...spacingUtils,\n    ...textStyleUtils,\n    ...tenantDetailsStyles,\n    ...tableStyles,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst twoColCssGridLayoutConfig = {\n  display: \"grid\",\n  gridTemplateColumns: { xs: \"1fr\", sm: \"2fr 1fr\" },\n  gridAutoFlow: { xs: \"dense\", sm: \"row\" },\n  gap: 2,\n};\n\nconst PoolDetails = ({\n  closeDetailsView,\n  tenant,\n  selectedPool,\n}: IPoolDetails) => {\n  const poolInformation =\n    tenant?.pools.find((pool) => pool.name === selectedPool) || null;\n\n  if (poolInformation === null) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <Grid container>\n          <Grid item xs={8}>\n            <h4>Pool Configuration</h4>\n          </Grid>\n          <Grid item xs={4} />\n        </Grid>\n        <Box sx={{ ...twoColCssGridLayoutConfig }}>\n          <LabelValuePair label={\"Pool Name\"} value={poolInformation.label} />\n          <LabelValuePair\n            label={\"Total Volumes\"}\n            value={poolInformation.volumes}\n          />\n          <LabelValuePair\n            label={\"Volumes per server\"}\n            value={poolInformation.volumes_per_server}\n          />\n          <LabelValuePair label={\"Capacity\"} value={poolInformation.capacity} />\n        </Box>\n        <Grid container>\n          <Grid item xs={8}>\n            <h4>Resources</h4>\n          </Grid>\n          <Grid item xs={4} />\n        </Grid>\n        <Box sx={{ ...twoColCssGridLayoutConfig }}>\n          {poolInformation.resources && (\n            <Fragment>\n              <LabelValuePair\n                label={\"CPU\"}\n                value={poolInformation.resources.requests.cpu}\n              />\n              <LabelValuePair\n                label={\"Memory\"}\n                value={niceBytesInt(poolInformation.resources.requests.memory)}\n              />\n            </Fragment>\n          )}\n          <LabelValuePair\n            label={\"Volume Size\"}\n            value={niceBytesInt(poolInformation.volume_configuration.size)}\n          />\n          <LabelValuePair\n            label={\"Storage Class Name\"}\n            value={poolInformation.volume_configuration.storage_class_name}\n          />\n        </Box>\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n  selectedPool: state.tenants.tenantDetails.selectedPool,\n});\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n});\n\nexport default withStyles(styles)(connector(PoolDetails));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  actionsTray,\n  containerForHeader,\n  tableStyles,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { AppState } from \"../../../../store\";\nimport { setSelectedPool, setTenantDetailsLoad } from \"../actions\";\nimport PoolsListing from \"./Pools/Details/PoolsListing\";\nimport PoolDetails from \"./Pools/Details/PoolDetails\";\nimport BackLink from \"../../../../common/BackLink\";\n\ninterface IPoolsSummary {\n  classes: any;\n  loadingTenant: boolean;\n  history: any;\n  match: any;\n  selectedPool: string | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n  setSelectedPool: typeof setSelectedPool;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...actionsTray,\n    ...tableStyles,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst PoolsSummary = ({\n  classes,\n  history,\n  selectedPool,\n  match,\n}: IPoolsSummary) => {\n  const [poolDetailsOpen, setPoolDetailsOpen] = useState<boolean>(false);\n  return (\n    <Fragment>\n      {poolDetailsOpen && (\n        <Grid item xs={12}>\n          <BackLink\n            executeOnClick={() => {\n              setPoolDetailsOpen(false);\n            }}\n            label={\"Back to Pools list\"}\n            to={match.url}\n          />\n        </Grid>\n      )}\n      <h1 className={classes.sectionTitle}>\n        {poolDetailsOpen ? `Pool Details - ${selectedPool || \"\"}` : \"Pools\"}\n      </h1>\n      <Grid container>\n        {poolDetailsOpen ? (\n          <PoolDetails\n            closeDetailsView={() => {\n              setPoolDetailsOpen(false);\n            }}\n          />\n        ) : (\n          <PoolsListing\n            setPoolDetailsView={() => {\n              setPoolDetailsOpen(true);\n            }}\n            history={history}\n          />\n        )}\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  selectedPool: state.tenants.tenantDetails.selectedPool,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n  setSelectedPool,\n});\n\nexport default withStyles(styles)(connector(PoolsSummary));\n"],"names":["useStyles","makeStyles","theme","root","padding","color","props","variant","tgtColor","palette","primary","main","contrastText","secondary","getButtonColor","borderColor","width","marginLeft","text","classes","onClick","disabled","tooltip","icon","className","restProps","size","sx","border","fontSize","display","label","value","orientation","stkProps","lblProps","valProps","direction","xs","sm","style","marginRight","fontWeight","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","setErrorSnackMessage","setSelectedPool","withStyles","createStyles","tenantDetailsStyles","actionsTray","tableStyles","containerForHeader","spacing","history","setPoolDetailsView","useState","pools","setPools","filter","setFilter","useEffect","resPools","filteredPools","pool","name","toLowerCase","includes","listActions","type","selectedValue","Fragment","Grid","item","TextField","placeholder","searchField","id","onChange","event","target","InputProps","disableUnderline","startAdornment","InputAdornment","position","SearchIcon","RBIconButton","push","namespace","tableBlock","TableWrapper","itemActions","columns","elementKey","isLoading","records","entityName","idField","customEmptyMessage","twoColCssGridLayoutConfig","gridTemplateColumns","gridAutoFlow","gap","selectedPool","setTenantDetailsLoad","spacingUtils","textStyleUtils","closeDetailsView","poolInformation","find","container","Box","LabelValuePair","volumes","volumes_per_server","capacity","resources","requests","cpu","niceBytesInt","memory","volume_configuration","storage_class_name","match","poolDetailsOpen","setPoolDetailsOpen","BackLink","executeOnClick","to","url","sectionTitle"],"sourceRoot":""}