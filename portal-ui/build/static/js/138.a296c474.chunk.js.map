{"version":3,"sources":["screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Buckets/BucketDetails/EnableVersioningModal.tsx"],"names":["withStyles","theme","createStyles","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","classes","title","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","open","event","reason","className","root","sx","padding","titleText","closeContainer","closeButton","onClick","disableRipple","size","content","actions","cancelButton","disabled","type","variant","color","confirmButton","loading","loadingPosition","startIcon","Fragment","autoFocus","connector","connect","setErrorSnackMessage","closeVersioningModalAndRefresh","modalOpen","selectedBucket","versioningCurrentState","useState","versioningLoading","setVersioningLoading","api","invoke","versioning","then","catch","err","id"],"mappings":"8PAqHeA,iBApGA,SAACC,GAAD,OACbC,YAAa,eACRC,QAkGQH,EAhFO,SAAC,GAaI,IAAD,IAZxBI,cAYwB,SAXxBC,EAWwB,EAXxBA,QACAC,EAUwB,EAVxBA,SACAC,EASwB,EATxBA,UASwB,IARxBC,eAQwB,MARd,GAQc,MAPxBC,aAOwB,MAPhB,GAOgB,EANxBC,EAMwB,EANxBA,UACAC,EAKwB,EALxBA,oBAKwB,IAJxBC,kBAIwB,MAJX,SAIW,MAHxBC,mBAGwB,MAHV,UAGU,MAFxBC,0BAEwB,MAFH,GAEG,MADxBC,yBACwB,MADJ,GACI,EACxB,OACE,eAAC,IAAD,CACEC,KAAMZ,EACNC,QAAS,SAACY,EAAOC,GACA,kBAAXA,GACFb,KAGJc,UAAWX,EAAQY,KACnBC,GAAI,CACF,mBAAoB,CAClBC,QAAS,wBAVf,UAcE,eAAC,IAAD,CAAaH,UAAWX,EAAQC,MAAhC,UACE,qBAAKU,UAAWX,EAAQe,UAAxB,SAAoCd,IACpC,qBAAKU,UAAWX,EAAQgB,eAAxB,SACE,cAAC,IAAD,CACE,aAAW,QACXL,UAAWX,EAAQiB,YACnBC,QAASrB,EACTsB,eAAa,EACbC,KAAK,QALP,SAOE,cAAC,IAAD,WAKN,cAAC,IAAD,CAAeT,UAAWX,EAAQqB,QAAlC,SACGlB,IAEH,eAAC,IAAD,CAAeQ,UAAWX,EAAQsB,QAAlC,UACE,cAAC,IAAD,yBACEX,UAAWX,EAAQuB,aACnBL,QAASpB,GAAYD,EACrB2B,SAAUtB,EACVuB,KAAK,UACDlB,GALN,IAMEmB,QAAQ,WACRC,MAAM,UAPR,SASGvB,KAGH,cAAC,IAAD,yBACEO,UAAWX,EAAQ4B,cACnBH,KAAK,SACLP,QAASnB,EACT8B,QAAS3B,EACTsB,SAAUtB,EACVwB,QAAQ,WACRC,MAAM,YACNG,gBAAgB,QAChBC,UAAW,cAAC,IAAMC,SAAP,IACXC,WAAS,GACL3B,GAXN,aAaGD,e,4GCjBL6B,EAAYC,YAAQ,KAAM,CAC9BC,2BAGaF,aAjEe,SAAC,GAMD,IAL5BG,EAK2B,EAL3BA,+BACAC,EAI2B,EAJ3BA,UACAC,EAG2B,EAH3BA,eACAC,EAE2B,EAF3BA,uBACAJ,EAC2B,EAD3BA,qBAEA,EAAkDK,oBAAkB,GAApE,mBAAOC,EAAP,KAA0BC,EAA1B,KAsBA,OACE,cAAC,IAAD,CACE1C,MAAK,uBACLI,YAAamC,EAAyB,UAAY,SAClD5C,OAAQ0C,EACRpC,UAAWwC,EACX3C,UA1BqB,WACnB2C,IAGJC,GAAqB,GAErBC,IACGC,OAAO,MADV,0BACoCN,EADpC,eACiE,CAC7DO,YAAaN,IAEdO,MAAK,WACJJ,GAAqB,GACrBN,GAA+B,MAEhCW,OAAM,SAACC,GACNN,GAAqB,GACrBP,EAAqBa,QAWvB3C,mBAAoB,CAClBqB,MAAO,UACPD,QAAS,aAEX7B,QAAS,WACPwC,GAA+B,IAEjClC,oBACE,eAAC,IAAD,CAAmB+C,GAAG,2BAAtB,qCAC2B,IACzB,iCAASV,EAAyB,UAAY,WAAmB,IAFnE,8BAIGA,GACC,eAAC,WAAD,WACE,uBACA,uBACA","file":"static/js/138.a296c474.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>{title}</div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText } from \"@mui/material\";\nimport api from \"../../../../common/api\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\ninterface IVersioningEventProps {\n  closeVersioningModalAndRefresh: (refresh: boolean) => void;\n  modalOpen: boolean;\n  selectedBucket: string;\n  versioningCurrentState: boolean;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst EnableVersioningModal = ({\n  closeVersioningModalAndRefresh,\n  modalOpen,\n  selectedBucket,\n  versioningCurrentState,\n  setErrorSnackMessage,\n}: IVersioningEventProps) => {\n  const [versioningLoading, setVersioningLoading] = useState<boolean>(false);\n\n  const enableVersioning = () => {\n    if (versioningLoading) {\n      return;\n    }\n    setVersioningLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/buckets/${selectedBucket}/versioning`, {\n        versioning: !versioningCurrentState,\n      })\n      .then(() => {\n        setVersioningLoading(false);\n        closeVersioningModalAndRefresh(true);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setVersioningLoading(false);\n        setErrorSnackMessage(err);\n      });\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Versioning on Bucket`}\n      confirmText={versioningCurrentState ? \"Disable\" : \"Enable\"}\n      isOpen={modalOpen}\n      isLoading={versioningLoading}\n      onConfirm={enableVersioning}\n      confirmButtonProps={{\n        color: \"primary\",\n        variant: \"contained\",\n      }}\n      onClose={() => {\n        closeVersioningModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to{\" \"}\n          <strong>{versioningCurrentState ? \"disable\" : \"enable\"}</strong>{\" \"}\n          versioning for this bucket?\n          {versioningCurrentState && (\n            <Fragment>\n              <br />\n              <br />\n              <strong>File versions won't be automatically deleted.</strong>\n            </Fragment>\n          )}\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst connector = connect(null, {\n  setErrorSnackMessage,\n});\n\nexport default connector(EnableVersioningModal);\n"],"sourceRoot":""}