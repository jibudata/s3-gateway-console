{"version":3,"file":"static/js/9221.ef026a1e.chunk.js","mappings":"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","sources":["screens/Console/Users/BulkAddToGroup.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { AddMembersToGroupIcon, Button, FormLayout, Grid, ReadBox } from \"mds\";\nimport { LinearProgress } from \"@mui/material\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport GroupsSelectors from \"./GroupsSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\n\ninterface IAddToGroup {\n  open: boolean;\n  checkedUsers: any;\n  closeModalAndRefresh: any;\n}\n\nconst BulkAddToGroup = ({\n  open,\n  checkedUsers,\n  closeModalAndRefresh,\n}: IAddToGroup) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [saving, isSaving] = useState<boolean>(false);\n  const [accepted, setAccepted] = useState<boolean>(false);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n\n  //Effects\n  useEffect(() => {\n    if (saving) {\n      if (selectedGroups.length > 0) {\n        api\n          .invoke(\"PUT\", \"/api/v1/users-groups-bulk\", {\n            groups: selectedGroups,\n            users: checkedUsers,\n          })\n          .then(() => {\n            isSaving(false);\n            setAccepted(true);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            isSaving(false);\n            dispatch(setModalErrorSnackMessage(err));\n          });\n      } else {\n        isSaving(false);\n        dispatch(\n          setModalErrorSnackMessage({\n            errorMessage: \"You need to select at least one group to assign\",\n            detailedError: \"\",\n          })\n        );\n      }\n    }\n  }, [\n    saving,\n    isSaving,\n    closeModalAndRefresh,\n    selectedGroups,\n    checkedUsers,\n    dispatch,\n  ]);\n\n  //Fetch Actions\n  const setSaving = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    isSaving(true);\n  };\n\n  const resetForm = () => {\n    setSelectedGroups([]);\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh(accepted);\n      }}\n      title={\n        accepted\n          ? \"The selected users were added to the following groups.\"\n          : \"Add Users to Group\"\n      }\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      {accepted ? (\n        <React.Fragment>\n          <FormLayout\n            withBorders={false}\n            containerPadding={false}\n            sx={{ margin: \"30px 0\" }}\n          >\n            <ReadBox label={\"Groups\"} sx={{ width: \"100%\" }}>\n              {selectedGroups.join(\", \")}\n            </ReadBox>\n            <ReadBox label={\"Users\"} sx={{ width: \"100%\" }}>\n              {\" \"}\n              {checkedUsers.join(\", \")}{\" \"}\n            </ReadBox>\n          </FormLayout>\n        </React.Fragment>\n      ) : (\n        <form noValidate autoComplete=\"off\" onSubmit={setSaving}>\n          <FormLayout withBorders={false} containerPadding={false}>\n            <ReadBox label={\"Selected Users\"} sx={{ width: \"100%\" }}>\n              {checkedUsers.join(\", \")}\n            </ReadBox>\n            <GroupsSelectors\n              selectedGroups={selectedGroups}\n              setSelectedGroups={setSelectedGroups}\n            />\n          </FormLayout>\n          <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n            <Button\n              id={\"clear-bulk-add-group\"}\n              type=\"button\"\n              variant=\"regular\"\n              color=\"primary\"\n              onClick={resetForm}\n              label={\"Clear\"}\n            />\n            <Button\n              id={\"save-add-group\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={saving || selectedGroups.length < 1}\n              label={\"Save\"}\n            />\n          </Grid>\n          {saving && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </form>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default BulkAddToGroup;\n"],"names":["_ref","open","checkedUsers","closeModalAndRefresh","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","saving","isSaving","_useState3","_useState4","accepted","setAccepted","_useState5","_useState6","selectedGroups","setSelectedGroups","useEffect","length","api","invoke","groups","users","then","catch","err","setModalErrorSnackMessage","errorMessage","detailedError","_jsx","ModalWrapper","modalOpen","onClose","title","titleIcon","AddMembersToGroupIcon","children","React","_jsxs","FormLayout","withBorders","containerPadding","sx","margin","ReadBox","label","width","join","noValidate","autoComplete","onSubmit","event","preventDefault","GroupsSelectors","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","id","type","variant","color","onClick","disabled","LinearProgress"],"sourceRoot":""}