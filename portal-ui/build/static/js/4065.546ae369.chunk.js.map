{"version":3,"file":"static/js/4065.546ae369.chunk.js","mappings":"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","sources":["screens/Console/Account/ChangePasswordModal.tsx","screens/Console/Account/Account.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport {\n  Button,\n  ChangePasswordIcon,\n  InputBox,\n  Grid,\n  FormLayout,\n  ProgressBar,\n} from \"mds\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport {\n  setErrorSnackMessage,\n  setModalErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { AccountChangePasswordRequest, ApiError } from \"api/consoleApi\";\nimport { errorToHandler } from \"api/errors\";\nimport WarningMessage from \"../Common/WarningMessage/WarningMessage\";\n\ninterface IChangePasswordProps {\n  open: boolean;\n  closeModal: () => void;\n}\n\nconst ChangePassword = ({ open, closeModal }: IChangePasswordProps) => {\n  const dispatch = useAppDispatch();\n  const [currentPassword, setCurrentPassword] = useState<string>(\"\");\n  const [newPassword, setNewPassword] = useState<string>(\"\");\n  const [reNewPassword, setReNewPassword] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const userLoggedIn = localStorage.getItem(\"userLoggedIn\") || \"\";\n\n  const changePassword = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (newPassword !== reNewPassword) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"New passwords don't match\",\n          detailedError: \"\",\n        }),\n      );\n      return;\n    }\n\n    if (newPassword.length < 8) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"Passwords must be at least 8 characters long\",\n          detailedError: \"\",\n        }),\n      );\n      return;\n    }\n\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n\n    let request: AccountChangePasswordRequest = {\n      current_secret_key: currentPassword,\n      new_secret_key: newPassword,\n    };\n\n    api.account\n      .accountChangePassword(request)\n      .then(() => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        dispatch(setSnackBarMessage(\"Successfully updated the password.\"));\n        closeModal();\n      })\n      .catch(async (res) => {\n        setLoading(false);\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        const err = (await res.json()) as ApiError;\n        dispatch(setErrorSnackMessage(errorToHandler(err)));\n      });\n  };\n\n  return open ? (\n    <ModalWrapper\n      title={`Change Password for ${userLoggedIn}`}\n      modalOpen={open}\n      onClose={() => {\n        setNewPassword(\"\");\n        setReNewPassword(\"\");\n        setCurrentPassword(\"\");\n        closeModal();\n      }}\n      titleIcon={<ChangePasswordIcon />}\n    >\n      <div>\n        This will change your Console password. Please note your new password\n        down, as it will be required to log into Console after this session.\n      </div>\n      <WarningMessage\n        title={\"\"}\n        label={\n          <div>\n            <div>\n              If you are looking to change MINIO_ROOT_USER credentials, Please\n              refer to{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noopener\"\n                href=\"https://min.io/docs/minio/linux/administration/identity-access-management/minio-user-management.html#id4?ref=con\"\n              >\n                rotating\n              </a>{\" \"}\n              credentials .\n            </div>\n          </div>\n        }\n      />\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          changePassword(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} sx={{ ...modalStyleUtils.modalFormScrollable }}>\n            <FormLayout withBorders={false} containerPadding={false}>\n              <InputBox\n                id=\"current-password\"\n                name=\"current-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setCurrentPassword(event.target.value);\n                }}\n                label=\"Current Password\"\n                type={\"password\"}\n                value={currentPassword}\n              />\n              <InputBox\n                id=\"new-password\"\n                name=\"new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setNewPassword(event.target.value);\n                }}\n                label=\"New Password\"\n                type={\"password\"}\n                value={newPassword}\n              />\n              <InputBox\n                id=\"re-new-password\"\n                name=\"re-new-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setReNewPassword(event.target.value);\n                }}\n                label=\"Type New Password Again\"\n                type={\"password\"}\n                value={reNewPassword}\n              />\n            </FormLayout>\n          </Grid>\n          <Grid item xs={12} sx={{ ...modalStyleUtils.modalButtonBar }}>\n            <Button\n              id={\"save-password-modal\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              color=\"primary\"\n              disabled={\n                loading ||\n                !(\n                  currentPassword.length > 0 &&\n                  newPassword.length > 0 &&\n                  reNewPassword.length > 0\n                )\n              }\n              label=\"Save\"\n            />\n          </Grid>\n          {loading && (\n            <Grid item xs={12}>\n              <ProgressBar />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  ) : null;\n};\n\nexport default ChangePassword;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport {\n  AccountIcon,\n  AddIcon,\n  Box,\n  Button,\n  DataTable,\n  DeleteIcon,\n  Grid,\n  HelpBox,\n  PageLayout,\n  PasswordKeyIcon,\n} from \"mds\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { actionsTray } from \"../Common/FormComponents/common/styleLibrary\";\n\nimport ChangePasswordModal from \"./ChangePasswordModal\";\nimport SearchBox from \"../Common/SearchBox\";\nimport withSuspense from \"../Common/Components/withSuspense\";\n\nimport { selectSAs } from \"../Configurations/utils\";\nimport DeleteMultipleServiceAccounts from \"../Users/DeleteMultipleServiceAccounts\";\nimport ServiceAccountPolicy from \"./ServiceAccountPolicy\";\n\nimport { selFeatures } from \"../consoleSlice\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport HelpMenu from \"../HelpMenu\";\nimport { ACCOUNT_TABLE_COLUMNS } from \"./AccountUtils\";\nimport { useAppDispatch } from \"store\";\nimport { ServiceAccounts } from \"api/consoleApi\";\nimport {\n  setErrorSnackMessage,\n  setHelpName,\n  setSnackBarMessage,\n} from \"systemSlice\";\nimport { usersSort } from \"utils/sortFunctions\";\nimport { SecureComponent } from \"common/SecureComponent\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_PAGES,\n  IAM_SCOPES,\n} from \"common/SecureComponent/permissions\";\n\nconst DeleteServiceAccount = withSuspense(\n  React.lazy(() => import(\"./DeleteServiceAccount\")),\n);\n\nconst Account = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const features = useSelector(selFeatures);\n\n  const [records, setRecords] = useState<ServiceAccounts>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [selectedServiceAccount, setSelectedServiceAccount] = useState<\n    string | null\n  >(null);\n  const [changePasswordModalOpen, setChangePasswordModalOpen] =\n    useState<boolean>(false);\n  const [selectedSAs, setSelectedSAs] = useState<string[]>([]);\n  const [deleteMultipleOpen, setDeleteMultipleOpen] = useState<boolean>(false);\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n\n  const userIDP = (features && features.includes(\"external-idp\")) || false;\n\n  useEffect(() => {\n    fetchRecords();\n  }, []);\n\n  useEffect(() => {\n    dispatch(setHelpName(\"accessKeys\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      api.serviceAccounts\n        .listUserServiceAccounts()\n        .then((res) => {\n          setLoading(false);\n          const sortedRows = res.data.sort(usersSort);\n          setRecords(sortedRows);\n        })\n        .catch((res) => {\n          dispatch(\n            setErrorSnackMessage(\n              errorToHandler(res?.error || \"Error retrieving access keys\"),\n            ),\n          );\n          setLoading(false);\n        });\n    }\n  }, [loading, setLoading, setRecords, dispatch]);\n\n  const fetchRecords = () => {\n    setLoading(true);\n  };\n\n  const closeDeleteModalAndRefresh = (refresh: boolean) => {\n    setDeleteOpen(false);\n\n    if (refresh) {\n      setSelectedSAs([]);\n      fetchRecords();\n    }\n  };\n\n  const closeDeleteMultipleModalAndRefresh = (refresh: boolean) => {\n    setDeleteMultipleOpen(false);\n    if (refresh) {\n      dispatch(setSnackBarMessage(`Access keys deleted successfully.`));\n      setSelectedSAs([]);\n      setLoading(true);\n    }\n  };\n\n  const policyModalOpen = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setPolicyOpen(true);\n  };\n\n  const closePolicyModal = () => {\n    setPolicyOpen(false);\n    setLoading(true);\n  };\n\n  const confirmDeleteServiceAccount = (selectedServiceAccount: string) => {\n    setSelectedServiceAccount(selectedServiceAccount);\n    setDeleteOpen(true);\n  };\n\n  const tableActions = [\n    {\n      type: \"view\",\n      onClick: (value: any) => {\n        if (value) {\n          policyModalOpen(value.accessKey);\n        }\n      },\n    },\n    {\n      type: \"delete\",\n      onClick: (value: any) => {\n        if (value) {\n          confirmDeleteServiceAccount(value.accessKey);\n        }\n      },\n    },\n  ];\n\n  const filteredRecords = records.filter(\n    (elementItem) =>\n      elementItem?.accessKey?.toLowerCase().includes(filter.toLowerCase()),\n  );\n\n  return (\n    <React.Fragment>\n      {deleteOpen && (\n        <DeleteServiceAccount\n          deleteOpen={deleteOpen}\n          selectedServiceAccount={selectedServiceAccount}\n          closeDeleteModalAndRefresh={(refresh: boolean) => {\n            closeDeleteModalAndRefresh(refresh);\n          }}\n        />\n      )}\n      {deleteMultipleOpen && (\n        <DeleteMultipleServiceAccounts\n          deleteOpen={deleteMultipleOpen}\n          selectedSAs={selectedSAs}\n          closeDeleteModalAndRefresh={closeDeleteMultipleModalAndRefresh}\n        />\n      )}\n\n      {policyOpen && (\n        <ServiceAccountPolicy\n          open={policyOpen}\n          selectedAccessKey={selectedServiceAccount}\n          closeModalAndRefresh={closePolicyModal}\n        />\n      )}\n      <ChangePasswordModal\n        open={changePasswordModalOpen}\n        closeModal={() => setChangePasswordModalOpen(false)}\n      />\n      <PageHeaderWrapper label=\"Access Keys\" actions={<HelpMenu />} />\n\n      <PageLayout>\n        <Grid container>\n          <Grid item xs={12} sx={{ ...actionsTray.actionsTray }}>\n            <SearchBox\n              placeholder={\"Search Access Keys\"}\n              onChange={setFilter}\n              sx={{ marginRight: \"auto\", maxWidth: 380 }}\n              value={filter}\n            />\n            <Box\n              sx={{\n                display: \"flex\",\n                flexWrap: \"nowrap\",\n                gap: 5,\n              }}\n            >\n              <TooltipWrapper tooltip={\"Delete Selected\"}>\n                <Button\n                  id={\"delete-selected-accounts\"}\n                  onClick={() => {\n                    setDeleteMultipleOpen(true);\n                  }}\n                  label={\"Delete Selected\"}\n                  icon={<DeleteIcon />}\n                  disabled={selectedSAs.length === 0}\n                  variant={\"secondary\"}\n                />\n              </TooltipWrapper>\n              <SecureComponent\n                scopes={[IAM_SCOPES.ADMIN_CREATE_USER]}\n                resource={CONSOLE_UI_RESOURCE}\n                matchAll\n                errorProps={{ disabled: true }}\n              >\n                <Button\n                  id={\"change-password\"}\n                  onClick={() => setChangePasswordModalOpen(true)}\n                  label={`Change Password`}\n                  icon={<PasswordKeyIcon />}\n                  variant={\"regular\"}\n                  disabled={userIDP}\n                />\n              </SecureComponent>\n              <SecureComponent\n                scopes={[IAM_SCOPES.ADMIN_CREATE_SERVICEACCOUNT]}\n                resource={CONSOLE_UI_RESOURCE}\n                matchAll\n                errorProps={{ disabled: true }}\n              >\n                <Button\n                  id={\"create-service-account\"}\n                  onClick={() => {\n                    navigate(`${IAM_PAGES.ACCOUNT_ADD}`);\n                  }}\n                  label={`Create access key`}\n                  icon={<AddIcon />}\n                  variant={\"callAction\"}\n                />\n              </SecureComponent>\n            </Box>\n          </Grid>\n\n          <Grid item xs={12}>\n            <DataTable\n              itemActions={tableActions}\n              entityName={\"Access Keys\"}\n              columns={ACCOUNT_TABLE_COLUMNS}\n              onSelect={(e) => selectSAs(e, setSelectedSAs, selectedSAs)}\n              selectedItems={selectedSAs}\n              isLoading={loading}\n              records={filteredRecords}\n              idField=\"accessKey\"\n            />\n          </Grid>\n          <Grid item xs={12} sx={{ marginTop: 15 }}>\n            <HelpBox\n              title={\"Learn more about ACCESS KEYS\"}\n              iconComponent={<AccountIcon />}\n              help={\n                <Fragment>\n                  MinIO access keys are child identities of an authenticated\n                  MinIO user, including externally managed identities. Each\n                  access key inherits its privileges based on the policies\n                  attached to it’s parent user or those groups in which the\n                  parent user has membership. Access Keys also support an\n                  optional inline policy which further restricts access to a\n                  subset of actions and resources available to the parent user.\n                  <br />\n                  <br />\n                  You can learn more at our{\" \"}\n                  <a\n                    href=\"https://min.io/docs/minio/linux/administration/identity-access-management/minio-user-management.html?ref=con#id3\"\n                    target=\"_blank\"\n                    rel=\"noopener\"\n                  >\n                    documentation\n                  </a>\n                  .\n                </Fragment>\n              }\n            />\n          </Grid>\n        </Grid>\n      </PageLayout>\n    </React.Fragment>\n  );\n};\n\nexport default Account;\n"],"names":["_ref","open","closeModal","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","currentPassword","setCurrentPassword","_useState3","_useState4","newPassword","setNewPassword","_useState5","_useState6","reNewPassword","setReNewPassword","_useState7","_useState8","loading","setLoading","userLoggedIn","localStorage","getItem","_jsxs","ModalWrapper","title","concat","modalOpen","onClose","titleIcon","_jsx","ChangePasswordIcon","children","WarningMessage","label","target","rel","href","noValidate","autoComplete","onSubmit","e","event","preventDefault","length","setModalErrorSnackMessage","errorMessage","detailedError","request","current_secret_key","new_secret_key","api","account","accountChangePassword","then","setSnackBarMessage","catch","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","err","wrap","_context","prev","next","json","sent","setErrorSnackMessage","errorToHandler","stop","_x","apply","arguments","changePassword","Grid","container","item","xs","sx","_objectSpread","modalStyleUtils","modalFormScrollable","FormLayout","withBorders","containerPadding","InputBox","id","name","onChange","value","type","modalButtonBar","Button","variant","color","disabled","ProgressBar","DeleteServiceAccount","withSuspense","React","navigate","useNavigate","features","useSelector","selFeatures","records","setRecords","filter","setFilter","deleteOpen","setDeleteOpen","_useState9","_useState10","selectedServiceAccount","setSelectedServiceAccount","_useState11","_useState12","changePasswordModalOpen","setChangePasswordModalOpen","_useState13","_useState14","selectedSAs","setSelectedSAs","_useState15","_useState16","deleteMultipleOpen","setDeleteMultipleOpen","_useState17","_useState18","policyOpen","setPolicyOpen","userIDP","includes","useEffect","fetchRecords","setHelpName","serviceAccounts","listUserServiceAccounts","sortedRows","data","sort","usersSort","error","tableActions","onClick","policyModalOpen","accessKey","confirmDeleteServiceAccount","filteredRecords","elementItem","_elementItem$accessKe","toLowerCase","closeDeleteModalAndRefresh","refresh","DeleteMultipleServiceAccounts","ServiceAccountPolicy","selectedAccessKey","closeModalAndRefresh","ChangePasswordModal","PageHeaderWrapper","actions","HelpMenu","PageLayout","actionsTray","SearchBox","placeholder","marginRight","maxWidth","Box","display","flexWrap","gap","TooltipWrapper","tooltip","icon","DeleteIcon","SecureComponent","scopes","IAM_SCOPES","ADMIN_CREATE_USER","resource","CONSOLE_UI_RESOURCE","matchAll","errorProps","PasswordKeyIcon","ADMIN_CREATE_SERVICEACCOUNT","IAM_PAGES","ACCOUNT_ADD","AddIcon","DataTable","itemActions","entityName","columns","ACCOUNT_TABLE_COLUMNS","onSelect","selectSAs","selectedItems","isLoading","idField","marginTop","HelpBox","iconComponent","AccountIcon","help","Fragment"],"sourceRoot":""}