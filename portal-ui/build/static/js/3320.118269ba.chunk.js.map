{"version":3,"file":"static/js/3320.118269ba.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/SummaryItems/RBIconButton.tsx","screens/Console/Tenants/TenantDetails/KeyPairEdit.tsx","screens/Console/Tenants/TenantDetails/KeyPairView.tsx","screens/Console/Tenants/TenantDetails/EditTenantLogsModal.tsx","screens/Console/Tenants/TenantDetails/TenantLogging.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport BoxIconButton from \"../../../Common/BoxIconButton/BoxIconButton\";\nimport { IconButtonProps } from \"@mui/material\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { Theme } from \"@mui/material/styles\";\n\ntype DeleteButtonProps = {\n  onClick: (e: any) => void;\n  text?: string;\n  disabled?: boolean;\n  size?: string;\n  tooltip?: string;\n  classes?: any;\n  icon?: React.ReactNode;\n  [x: string]: any;\n};\n\ntype RBIconProps = Partial<IconButtonProps> & DeleteButtonProps;\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const getButtonColor = (props: RBIconProps) => {\n    const { variant, color } = props;\n\n    let tgtColor = theme.palette.primary.main;\n\n    if (color === \"primary\" && variant === \"contained\") {\n      tgtColor = theme.palette.primary.contrastText;\n    } else if (color === \"primary\" && variant === \"outlined\") {\n      tgtColor = theme.palette.primary.main;\n    } else if (color === \"secondary\") {\n      tgtColor = theme.palette.secondary.main;\n    }\n\n    return tgtColor;\n  };\n\n  return {\n    root: {\n      padding: \"7px\",\n      color: (props: RBIconProps) => getButtonColor(props),\n      borderColor: (props: RBIconProps) =>\n        props.color === \"secondary\"\n          ? theme.palette.secondary.main\n          : theme.palette.primary.main,\n      \"& svg.min-icon\": {\n        width: 12,\n        marginLeft: (props: RBIconProps) => (props.text ? \"5px\" : \"0px\"),\n        \"@media (max-width: 900px)\": {\n          width: 16,\n          marginLeft: \"0px !important\",\n        },\n      },\n    },\n  };\n});\n\nconst RBIconButton = (props: RBIconProps) => {\n  const classes = useStyles(props);\n\n  const {\n    onClick,\n    text = \"\",\n    disabled = false,\n    tooltip,\n    icon = null,\n    ...restProps\n  } = props;\n\n  return (\n    <BoxIconButton\n      classes={classes}\n      tooltip={tooltip || text}\n      variant=\"outlined\"\n      onClick={onClick}\n      disabled={disabled}\n      color=\"secondary\"\n      size=\"medium\"\n      sx={{\n        border: \"1px solid #f44336\",\n        \"& span\": {\n          fontSize: 14,\n          \"@media (max-width: 900px)\": {\n            display: \"none\",\n          },\n        },\n      }}\n      {...restProps}\n    >\n      <span>{text}</span> {icon}\n    </BoxIconButton>\n  );\n};\nexport default RBIconButton;\n","import React, { Fragment, useEffect } from \"react\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport { modalBasic } from \"../../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { IconButton, Tooltip } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { IKeyValue } from \"../ListTenants/types\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../utils\";\n\ninterface IKeyPairEditProps {\n  classes: any;\n  paramName: string;\n  error: any;\n  setError: (e: any) => void;\n  newValues: IKeyValue[];\n  setNewValues: (vals: IKeyValue[]) => void;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    multiContainer: {\n      display: \"flex\",\n      alignItems: \"center\" as const,\n      justifyContent: \"flex-start\" as const,\n    },\n    sizeFactorContainer: {\n      marginLeft: 8,\n    },\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      \"& div\": {\n        flexGrow: 1,\n        width: \"100%\",\n      },\n    },\n    factorElements: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n    },\n    sizeNumber: {\n      fontSize: 35,\n      fontWeight: 700,\n      textAlign: \"center\",\n    },\n    sizeDescription: {\n      fontSize: 14,\n      color: \"#777\",\n      textAlign: \"center\",\n    },\n    shortened: {\n      gridTemplateColumns: \"auto auto 20px 20px\",\n      display: \"grid\",\n      gridGap: 20,\n      paddingRight: 20,\n    },\n    ...modalBasic,\n  });\n\nconst KeyPairEdit = ({\n  classes,\n  paramName,\n  newValues,\n  setNewValues,\n  error,\n  setError,\n}: IKeyPairEditProps) => {\n  const cleanValidation = (fieldName: string) => {\n    setError(clearValidationError(error, fieldName));\n  };\n\n  useEffect(() => {\n    let keyPairValidation: IValidation[] = [];\n\n    for (var i = 0; i < newValues.length; i++) {\n      keyPairValidation.push({\n        fieldKey: `key-${i.toString()}`,\n        required: false,\n        value: newValues[i].key,\n        pattern: /^[a-zA-Z0-9-_.]{1,63}$/,\n        customPatternMessage: \"Invalid key\",\n      });\n      keyPairValidation.push({\n        fieldKey: `val-${i.toString()}`,\n        required: false,\n        value: newValues[i].value,\n        pattern: /^[a-zA-Z0-9-_.]{1,63}$/,\n        customPatternMessage: \"Invalid value\",\n      });\n    }\n\n    const commonVal = commonFormValidation(keyPairValidation);\n    setError(commonVal);\n  }, [newValues, setError]);\n\n  let keyValueInputs = newValues.map((_, index) => {\n    return (\n      <Fragment key={`keyvalue-${index.toString()}`}>\n        <div className={classes.shortened}>\n          <InputBoxWrapper\n            id={`key-${index.toString()}`}\n            label={\"\"}\n            placeholder={\"Key\"}\n            name={`key-${index.toString()}`}\n            value={newValues[index].key}\n            onChange={(e) => {\n              let tempLabels = [...newValues];\n              tempLabels[index].key = e.target.value;\n              setNewValues(tempLabels);\n              cleanValidation(`key-${index.toString()}`);\n            }}\n            index={index}\n            key={`csv-key-${index.toString()}`}\n            error={error[`key-${index.toString()}`] || \"\"}\n          />\n          <InputBoxWrapper\n            id={`val-${index.toString()}`}\n            label={\"\"}\n            placeholder={\"Value\"}\n            name={`val-${index.toString()}`}\n            value={newValues[index].value}\n            onChange={(e) => {\n              let tempLabels = [...newValues];\n              tempLabels[index].value = e.target.value;\n              setNewValues(tempLabels);\n              cleanValidation(`val-${index.toString()}`);\n            }}\n            index={index}\n            key={`csv-val-${index.toString()}`}\n            error={error[`val-${index.toString()}`] || \"\"}\n          />\n          <Tooltip title={`Add ${paramName}`} aria-label=\"addlabel\">\n            <IconButton\n              size={\"small\"}\n              onClick={() => {\n                let tempLabels = [...newValues];\n                tempLabels.push({ key: \"\", value: \"\" });\n                setNewValues(tempLabels);\n              }}\n            >\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Remove\" aria-label=\"removeLabel\">\n            <IconButton\n              size={\"small\"}\n              style={{ marginLeft: 16 }}\n              onClick={() => {\n                if (newValues.length === 1) {\n                  setNewValues([{ key: \"\", value: \"\" }]);\n                }\n                if (newValues.length > 1) {\n                  let tempLabels = [...newValues];\n                  tempLabels.splice(index, 1);\n                  setNewValues(tempLabels);\n                }\n              }}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n      </Fragment>\n    );\n  });\n\n  return <Fragment>{keyValueInputs}</Fragment>;\n};\n\nexport default withStyles(styles)(KeyPairEdit);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  containerForHeader,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport TableWrapper from \"../../Common/TableWrapper/TableWrapper\";\nimport { IKeyValue } from \"../ListTenants/types\";\n\ninterface IKeyPairView {\n  classes: any;\n  records: IKeyValue[];\n  recordName: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    centerAlign: {\n      textAlign: \"center\",\n    },\n    listHeight: {\n      height: \"50\",\n    },\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst KeyPairView = ({ classes, records, recordName }: IKeyPairView) => {\n  return (\n    <Fragment>\n      <TableWrapper\n        columns={[\n          { label: \"Key\", elementKey: \"key\" },\n          { label: \"Value\", elementKey: \"value\" },\n        ]}\n        isLoading={false}\n        records={records}\n        itemActions={[]}\n        entityName={recordName}\n        idField=\"name\"\n        customPaperHeight={classes.listHeight}\n      />\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n  logEnabled: get(state.tenants.tenantDetails.tenantInfo, \"logEnabled\", false),\n  monitoringEnabled: get(\n    state.tenants.tenantDetails.tenantInfo,\n    \"monitoringEnabled\",\n    false\n  ),\n  encryptionEnabled: get(\n    state.tenants.tenantDetails.tenantInfo,\n    \"encryptionEnabled\",\n    false\n  ),\n  minioTLS: get(state.tenants.tenantDetails.tenantInfo, \"minioTLS\", false),\n  consoleTLS: get(state.tenants.tenantDetails.tenantInfo, \"consoleTLS\", false),\n  consoleEnabled: get(\n    state.tenants.tenantDetails.tenantInfo,\n    \"consoleEnabled\",\n    false\n  ),\n  adEnabled: get(state.tenants.tenantDetails.tenantInfo, \"idpAdEnabled\", false),\n  oidcEnabled: get(\n    state.tenants.tenantDetails.tenantInfo,\n    \"idpOidcEnabled\",\n    false\n  ),\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(KeyPairView));\n","import React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { Button, Grid } from \"@mui/material\";\nimport api from \"../../../../common/api\";\nimport { ITenant } from \"../ListTenants/types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { IKeyValue } from \"../ListTenants/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../utils\";\nimport { setModalErrorSnackMessage } from \"../../../../actions\";\n\ninterface IEditTenantLogsProps {\n  tenant: ITenant;\n  classes: any;\n  open: boolean;\n  onClose: (shouldReload: boolean) => void;\n  image: string;\n  labels: IKeyValue[];\n  annotations: IKeyValue[];\n  nodeSelector: IKeyValue[];\n  diskCapacityGB: number;\n  serviceAccountName: string;\n  dbImage: string;\n  dbLabels: IKeyValue[];\n  dbAnnotations: IKeyValue[];\n  dbNodeSelector: IKeyValue[];\n  dbServiceAccountName: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    multiContainer: {\n      display: \"flex\",\n      alignItems: \"center\" as const,\n      justifyContent: \"flex-start\" as const,\n    },\n    sizeFactorContainer: {\n      marginLeft: 8,\n    },\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      \"& div\": {\n        flexGrow: 1,\n        width: \"100%\",\n      },\n    },\n    factorElements: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n    },\n    sizeNumber: {\n      fontSize: 35,\n      fontWeight: 700,\n      textAlign: \"center\",\n    },\n    sizeDescription: {\n      fontSize: 14,\n      color: \"#777\",\n      textAlign: \"center\",\n    },\n    shortened: {\n      gridTemplateColumns: \"auto auto 20px 20px\",\n      display: \"grid\",\n      gridGap: 20,\n    },\n    ...modalBasic,\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst EditTenantLogsModal = ({\n  tenant,\n  classes,\n  open,\n  onClose,\n  image,\n  labels,\n  annotations,\n  nodeSelector,\n  diskCapacityGB,\n  serviceAccountName,\n  dbLabels,\n  dbAnnotations,\n  dbNodeSelector,\n  dbImage,\n  dbServiceAccountName,\n}: IEditTenantLogsProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [newLabels, setNewLabels] = useState<IKeyValue[]>(\n    labels.length > 0 ? [...labels] : [{ key: \"\", value: \"\" }]\n  );\n  const [newAnnotations, setNewAnnotations] = useState<IKeyValue[]>(\n    annotations.length > 0 ? [...annotations] : [{ key: \"\", value: \"\" }]\n  );\n  const [newNodeSelector, setNewNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector.length > 0 ? [...nodeSelector] : [{ key: \"\", value: \"\" }]\n  );\n  const [newImage, setNewImage] = useState<string>(image);\n  const [newDiskCapacityGB, setNewDiskCapacityGB] =\n    useState<number>(diskCapacityGB);\n  const [newServiceAccountName, setNewServiceAccountName] = useState<string>(\n    serviceAccountName != null ? serviceAccountName : \"\"\n  );\n  const [newDbLabels, setNewDbLabels] = useState<IKeyValue[]>(\n    dbLabels.length > 0 ? [...dbLabels] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbAnnotations, setNewDbAnnotations] = useState<IKeyValue[]>(\n    dbAnnotations.length > 0 ? [...dbAnnotations] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbNodeSelector, setNewDbNodeSelector] = useState<IKeyValue[]>(\n    dbNodeSelector.length > 0 ? [...dbNodeSelector] : [{ key: \"\", value: \"\" }]\n  );\n  const [newDbImage, setNewDbImage] = useState<string>(dbImage);\n  const [newDbServiceAccountName, setNewDbServiceAccountName] =\n    useState<string>(dbServiceAccountName != null ? dbServiceAccountName : \"\");\n  const [labelsError, setLabelsError] = useState<any>({});\n  const [annotationsError, setAnnotationsError] = useState<any>({});\n  const [nodeSelectorError, setNodeSelectorError] = useState<any>({});\n  const [dbLabelsError, setDbLabelsError] = useState<any>({});\n  const [dbAnnotationsError, setDbAnnotationsError] = useState<any>({});\n  const [dbNodeSelectorError, setDbNodeSelectorError] = useState<any>({});\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  useEffect(() => {\n    let tenantLogValidation: IValidation[] = [];\n\n    tenantLogValidation.push({\n      fieldKey: `image`,\n      required: false,\n      value: newImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbImage`,\n      required: false,\n      value: newDbImage,\n      pattern:\n        /^([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9]?)+(\\/(([a-zA-Z0-9])([a-zA-Z0-9-._])*([a-zA-Z0-9])?)+)*:([a-zA-Z0-9])[a-zA-Z0-9-.]{0,127}$/,\n      customPatternMessage: \"Invalid image\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `diskCapacityGB`,\n      required: true,\n      value: newDiskCapacityGB as any as string,\n      pattern: /^[0-9]*$/,\n      customPatternMessage: \"Must be an integer between 0 and 10\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `serviceAccountName`,\n      required: false,\n      value: newServiceAccountName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid service account name\",\n    });\n    tenantLogValidation.push({\n      fieldKey: `dbServiceAccountName`,\n      required: false,\n      value: newDbServiceAccountName,\n      pattern: /^[a-zA-Z0-9-.]{1,253}$/,\n      customPatternMessage: \"Invalid service account name\",\n    });\n\n    const commonVal = commonFormValidation(tenantLogValidation);\n    setValidationErrors(commonVal);\n  }, [\n    newImage,\n    newDbImage,\n    newDiskCapacityGB,\n    newServiceAccountName,\n    newDbServiceAccountName,\n    setValidationErrors,\n  ]);\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(labelsError).length !== 0 ||\n      Object.keys(annotationsError).length !== 0 ||\n      Object.keys(nodeSelectorError).length !== 0 ||\n      Object.keys(dbLabelsError).length !== 0 ||\n      Object.keys(dbAnnotationsError).length !== 0 ||\n      Object.keys(dbNodeSelectorError).length !== 0\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return (\n    <ModalWrapper\n      onClose={() => onClose(true)}\n      modalOpen={open}\n      title=\"Edit Logging\"\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          if (!checkValid()) {\n            setModalErrorSnackMessage({\n              errorMessage: \"Some fields have invalid values\",\n              detailedError: \"\",\n            });\n          } else {\n            api\n              .invoke(\n                \"PUT\",\n                `/api/v1/namespaces/${tenant.namespace}/tenants/${tenant.name}/log`,\n                {\n                  labels: trim(newLabels),\n                  annotations: trim(newAnnotations),\n                  nodeSelector: trim(newNodeSelector),\n                  image: newImage,\n                  diskCapacityGB: newDiskCapacityGB,\n                  serviceAccountName: newServiceAccountName,\n                  dbLabels: trim(newDbLabels),\n                  dbAnnotations: trim(newDbAnnotations),\n                  dbNodeSelector: trim(newDbNodeSelector),\n                  dbImage: newDbImage,\n                  dbServiceAccountName: newDbServiceAccountName,\n                }\n              )\n              .then(() => {\n                onClose(true);\n              })\n              .catch((err: ErrorResponseHandler) => {});\n          }\n        }}\n      >\n        <Grid container>\n          <Grid xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <h4>Logging API </h4>\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`image`}\n                label={\"Image\"}\n                placeholder={\"Image\"}\n                name={`image`}\n                value={newImage}\n                onChange={(e) => {\n                  setNewImage(e.target.value);\n                  cleanValidation(`image`);\n                }}\n                key={`image`}\n                error={validationErrors[`image`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`diskCapacityGB`}\n                label={\"Disk Capacity (GB)\"}\n                placeholder={\"Disk Capacity (GB)\"}\n                name={`diskCapacityGB`}\n                value={newDiskCapacityGB as any as string}\n                onChange={(e) => {\n                  setNewDiskCapacityGB(e.target.value as any as number);\n                  cleanValidation(`diskCapacityGB`);\n                }}\n                key={`diskCapacityGB`}\n                error={validationErrors[`diskCapacityGB`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`serviceAccountName`}\n                label={\"Service Account\"}\n                placeholder={\"Service Account Name\"}\n                name={`serviceAccountName`}\n                value={newServiceAccountName}\n                onChange={(e) => {\n                  setNewServiceAccountName(e.target.value);\n                  cleanValidation(`serviceAccountName`);\n                }}\n                key={`serviceAccountName`}\n                error={validationErrors[`serviceAccountName`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Labels</span>\n              <KeyPairEdit\n                newValues={newLabels}\n                setNewValues={setNewLabels}\n                paramName={\"Labels\"}\n                error={labelsError}\n                setError={setLabelsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Annotations</span>\n              <KeyPairEdit\n                newValues={newAnnotations}\n                setNewValues={setNewAnnotations}\n                paramName={\"Annotations\"}\n                error={annotationsError}\n                setError={setAnnotationsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Node Selector</span>\n              <KeyPairEdit\n                newValues={newNodeSelector}\n                setNewValues={setNewNodeSelector}\n                paramName={\"Node Selector\"}\n                error={nodeSelectorError}\n                setError={setNodeSelectorError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <h4>Database Configuration </h4>\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbImage`}\n                label={\"Postgres Image\"}\n                placeholder={\"Db Image\"}\n                name={`dbImage`}\n                value={newDbImage}\n                onChange={(e) => {\n                  setNewDbImage(e.target.value);\n                  cleanValidation(`dbImage`);\n                }}\n                key={`dbImage`}\n                error={validationErrors[`dbImage`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <InputBoxWrapper\n                id={`dbServiceAccountName`}\n                label={\"Service Account\"}\n                placeholder={\"Db Service Account Name\"}\n                name={`dbServiceAccountName`}\n                value={newDbServiceAccountName}\n                onChange={(e) => {\n                  setNewDbServiceAccountName(e.target.value);\n                  cleanValidation(`dbServiceAccountName`);\n                }}\n                key={`dbServiceAccountName`}\n                error={validationErrors[`dbServiceAccountName`] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Labels</span>\n              <KeyPairEdit\n                newValues={newDbLabels}\n                setNewValues={setNewDbLabels}\n                paramName={\"Db Labels\"}\n                error={dbLabelsError}\n                setError={setDbLabelsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Annotations</span>\n              <KeyPairEdit\n                newValues={newDbAnnotations}\n                setNewValues={setNewDbAnnotations}\n                paramName={\"Db Annotations\"}\n                error={dbAnnotationsError}\n                setError={setDbAnnotationsError}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <span className={classes.inputLabel}>Node Selector</span>\n              <KeyPairEdit\n                newValues={newDbNodeSelector}\n                setNewValues={setNewDbNodeSelector}\n                paramName={\"DbNode Selector\"}\n                error={dbNodeSelectorError}\n                setError={setDbNodeSelectorError}\n              />\n            </Grid>\n          </Grid>\n          <Grid xs={12} className={classes.buttonContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!checkValid()}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(EditTenantLogsModal);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { CircularProgress, DialogContentText } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport api from \"../../../../common/api\";\nimport { ITenant } from \"../ListTenants/types\";\nimport { AppState } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { EditIcon } from \"../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport EditTenantLogsModal from \"./EditTenantLogsModal\";\nimport KeyPairView from \"./KeyPairView\";\nimport { ITenantLogsStruct } from \"../ListTenants/types\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\n\ninterface ITenantLogs {\n  classes: any;\n  match: any;\n  tenant: ITenant | null;\n  loadingTenant: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    headerLabel: {\n      fontSize: 22,\n      fontWeight: 600,\n      color: \"#000\",\n      marginTop: 4,\n    },\n    breadcrumLink: {\n      textDecoration: \"none\",\n      color: \"black\",\n    },\n    tableWrapper: {\n      height: \"calc(100vh - 267px)\",\n    },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    ...actionsTray,\n    ...searchField,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst TenantLogging = ({\n  classes,\n  match,\n  tenant,\n  loadingTenant,\n}: ITenantLogs) => {\n  const [loadingTenantLogs, setLoadingTenantLogs] = useState<boolean>(true);\n  const [logInfo, setLogInfo] = useState<ITenantLogsStruct>();\n  const [edit, setEdit] = useState<boolean>(false);\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [preDisabled, setPreDisabled] = useState<boolean>(false);\n  const [disableDialogOpen, setDisableDialogOpen] = useState<boolean>(false);\n  const [enableDialogOpen, setEnableDialogOpen] = useState<boolean>(false);\n\n  const tenantName = match.params[\"tenantName\"];\n  const tenantNamespace = match.params[\"tenantNamespace\"];\n\n  useEffect(() => {\n    if (loadingTenantLogs) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`\n        )\n        .then((result: ITenantLogsStruct) => {\n          setLogInfo(result);\n          setPreDisabled(result.disabled);\n          setDisabled(result.disabled);\n          setLoadingTenantLogs(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage({\n            errorMessage: \"Error getting tenant logs\",\n            detailedError: err.detailedError,\n          });\n        });\n    }\n  }, [tenantName, tenantNamespace, loadingTenantLogs, setDisabled, disabled]);\n\n  const onCloseEditAndRefresh = () => {\n    setDisableDialogOpen(false);\n    setEdit(false);\n    setLoadingTenantLogs(true);\n  };\n\n  const onCloseEnableAndRefresh = () => {\n    setEnableDialogOpen(false);\n    setDisabled(false);\n    setLoadingTenantLogs(true);\n  };\n\n  return (\n    <Fragment>\n      <ConfirmDialog\n        title=\"Disable Logging?\"\n        confirmText=\"Disable\"\n        isOpen={disableDialogOpen}\n        onConfirm={() => {\n          api\n            .invoke(\n              \"POST\",\n              `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/disable-logging`\n            )\n            .then(() => {\n              setPreDisabled(true);\n              setDisabled(true);\n            })\n            .catch((err: ErrorResponseHandler) => {\n              setErrorSnackMessage({\n                errorMessage: \"Error disabling logging\",\n                detailedError: err.detailedError,\n              });\n            });\n          onCloseEditAndRefresh();\n        }}\n        onClose={() => setDisableDialogOpen(false)}\n        confirmationContent={\n          <DialogContentText>\n            Disabling logging will erase any custom values you have used to\n            configure logging\n          </DialogContentText>\n        }\n      />\n      <ConfirmDialog\n        title=\"Enable Logging?\"\n        confirmText=\"Enable\"\n        isOpen={enableDialogOpen}\n        onConfirm={() => {\n          api\n            .invoke(\n              \"POST\",\n              `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/enable-logging`\n            )\n            .then(() => {\n              setPreDisabled(false);\n            })\n            .catch((err: ErrorResponseHandler) => {\n              setErrorSnackMessage({\n                errorMessage: \"Error enabling logging\",\n                detailedError: err.detailedError,\n              });\n            });\n          onCloseEnableAndRefresh();\n        }}\n        onClose={() => setEnableDialogOpen(false)}\n        confirmationContent={\n          <DialogContentText>\n            Logging will be enabled with default values\n          </DialogContentText>\n        }\n      />\n      {edit && tenant !== null && logInfo != null && !disabled && (\n        <EditTenantLogsModal\n          open={edit}\n          onClose={onCloseEditAndRefresh}\n          tenant={tenant}\n          image={logInfo.image}\n          labels={logInfo.labels}\n          annotations={logInfo.annotations}\n          nodeSelector={logInfo.nodeSelector}\n          diskCapacityGB={logInfo.diskCapacityGB}\n          serviceAccountName={logInfo.serviceAccountName}\n          dbImage={logInfo.dbImage}\n          dbLabels={logInfo.dbLabels}\n          dbAnnotations={logInfo.dbAnnotations}\n          dbNodeSelector={logInfo.dbNodeSelector}\n          dbServiceAccountName={logInfo.dbServiceAccountName}\n        />\n      )}\n      <h1 className={classes.sectionTitle}>Logging</h1>\n      <div className={classes.actionsTray}>\n        <FormSwitchWrapper\n          value=\"enableLogging\"\n          id=\"enableLogging\"\n          name=\"enableLogging\"\n          checked={!preDisabled}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n            if (checked) {\n              setEnableDialogOpen(true);\n            } else {\n              setDisableDialogOpen(true);\n            }\n          }}\n          label={\"Logging\"}\n          indicatorLabels={[\"Enabled\", \"Disabled\"]}\n        />\n        {!disabled && !loadingTenantLogs && (\n          <RBIconButton\n            tooltip={\"Edit Logging configuration\"}\n            text={\"Edit\"}\n            onClick={() => {\n              setEdit(true);\n            }}\n            icon={<EditIcon />}\n            color=\"primary\"\n            variant={\"contained\"}\n          />\n        )}\n      </div>\n      {!disabled && !loadingTenantLogs && (\n        <Paper className={classes.paperContainer}>\n          <Grid container>\n            <Grid item xs={12}>\n              <h2>Logging API Service Details</h2>\n              <hr className={classes.hrClass} />\n              <table width={\"100%\"}>\n                <tbody>\n                  {loadingTenant ? (\n                    <tr>\n                      <td className={classes.centerAlign} colSpan={4}>\n                        <CircularProgress />\n                      </td>\n                    </tr>\n                  ) : (\n                    <Fragment>\n                      <tr>\n                        <td className={classes.titleCol}>Image:</td>\n                        <td>{logInfo?.image}</td>\n                      </tr>\n                      <tr>\n                        <td className={classes.titleCol}>\n                          Disk Capacity (GB):\n                        </td>\n                        <td>{logInfo?.diskCapacityGB}</td>\n                      </tr>\n                      <tr>\n                        <td className={classes.titleCol}>Service Account:</td>\n                        <td>{logInfo?.serviceAccountName}</td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>Labels</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <KeyPairView\n                            records={\n                              logInfo != null && logInfo.labels.length > 0\n                                ? logInfo.labels\n                                : []\n                            }\n                            recordName=\"Labels\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>Annotations</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <KeyPairView\n                            records={\n                              logInfo != null && logInfo.annotations.length > 0\n                                ? logInfo.annotations\n                                : []\n                            }\n                            recordName=\"Annotations\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>Node Selector</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <KeyPairView\n                            records={\n                              logInfo != null && logInfo.nodeSelector.length > 0\n                                ? logInfo.nodeSelector\n                                : []\n                            }\n                            recordName=\"Node Selector\"\n                          />\n                        </td>\n                      </tr>\n                    </Fragment>\n                  )}\n                </tbody>\n              </table>\n\n              <h2>Database Details</h2>\n              <hr className={classes.hrClass} />\n              <table width={\"100%\"}>\n                <tbody>\n                  {loadingTenant ? (\n                    <tr>\n                      <td className={classes.centerAlign} colSpan={4}>\n                        <CircularProgress />\n                      </td>\n                    </tr>\n                  ) : (\n                    <Fragment>\n                      <tr>\n                        <td className={classes.titleCol}>Postgres Image:</td>\n                        <td>{logInfo?.dbImage}</td>\n                      </tr>\n                      <tr>\n                        <td className={classes.titleCol}>Service Account:</td>\n                        <td>{logInfo?.dbServiceAccountName}</td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>Labels</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <KeyPairView\n                            records={\n                              logInfo != null && logInfo.dbLabels?.length > 0\n                                ? logInfo.dbLabels\n                                : []\n                            }\n                            recordName=\"labels\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>Annotations</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <KeyPairView\n                            records={\n                              logInfo != null &&\n                              logInfo.dbAnnotations?.length > 0\n                                ? logInfo.dbAnnotations\n                                : []\n                            }\n                            recordName=\"annotations\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>Node Selector</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <KeyPairView\n                            records={\n                              logInfo != null &&\n                              logInfo.dbNodeSelector?.length > 0\n                                ? logInfo.dbNodeSelector\n                                : []\n                            }\n                            recordName=\"node selectors\"\n                          />\n                        </td>\n                      </tr>\n                    </Fragment>\n                  )}\n                </tbody>\n              </table>\n            </Grid>\n          </Grid>\n        </Paper>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantLogging));\n"],"names":["useStyles","makeStyles","theme","root","padding","color","props","variant","tgtColor","palette","primary","main","contrastText","secondary","getButtonColor","borderColor","width","marginLeft","text","classes","onClick","disabled","tooltip","icon","restProps","size","sx","border","fontSize","display","withStyles","createStyles","buttonContainer","textAlign","multiContainer","alignItems","justifyContent","sizeFactorContainer","bottomContainer","flexGrow","factorElements","sizeNumber","fontWeight","sizeDescription","shortened","gridTemplateColumns","gridGap","paddingRight","modalBasic","paramName","newValues","setNewValues","error","setError","cleanValidation","fieldName","clearValidationError","useEffect","keyPairValidation","i","length","push","fieldKey","toString","required","value","key","pattern","customPatternMessage","commonVal","commonFormValidation","keyValueInputs","map","_","index","Fragment","className","id","label","placeholder","name","onChange","e","tempLabels","target","title","style","splice","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","logEnabled","get","monitoringEnabled","encryptionEnabled","minioTLS","consoleTLS","consoleEnabled","adEnabled","oidcEnabled","tenantDetailsStyles","centerAlign","listHeight","height","containerForHeader","spacing","records","recordName","columns","elementKey","isLoading","itemActions","entityName","idField","customPaperHeight","modalStyleUtils","formFieldStyles","open","onClose","image","labels","annotations","nodeSelector","diskCapacityGB","serviceAccountName","dbLabels","dbAnnotations","dbNodeSelector","dbImage","dbServiceAccountName","useState","validationErrors","setValidationErrors","newLabels","setNewLabels","newAnnotations","setNewAnnotations","newNodeSelector","setNewNodeSelector","newImage","setNewImage","newDiskCapacityGB","setNewDiskCapacityGB","newServiceAccountName","setNewServiceAccountName","newDbLabels","setNewDbLabels","newDbAnnotations","setNewDbAnnotations","newDbNodeSelector","setNewDbNodeSelector","newDbImage","setNewDbImage","newDbServiceAccountName","setNewDbServiceAccountName","labelsError","setLabelsError","annotationsError","setAnnotationsError","nodeSelectorError","setNodeSelectorError","dbLabelsError","setDbLabelsError","dbAnnotationsError","setDbAnnotationsError","dbNodeSelectorError","setDbNodeSelectorError","trim","x","retval","tenantLogValidation","checkValid","Object","keys","ModalWrapper","modalOpen","noValidate","autoComplete","onSubmit","preventDefault","api","namespace","then","catch","err","setModalErrorSnackMessage","errorMessage","detailedError","Grid","container","xs","modalFormScrollable","item","formFieldRow","InputBoxWrapper","inputLabel","KeyPairEdit","Button","type","headerLabel","marginTop","breadcrumLink","textDecoration","tableWrapper","paperContainer","actionsTray","searchField","match","loadingTenantLogs","setLoadingTenantLogs","logInfo","setLogInfo","edit","setEdit","setDisabled","preDisabled","setPreDisabled","disableDialogOpen","setDisableDialogOpen","enableDialogOpen","setEnableDialogOpen","tenantName","params","tenantNamespace","result","setErrorSnackMessage","onCloseEditAndRefresh","ConfirmDialog","confirmText","isOpen","onConfirm","confirmationContent","DialogContentText","sectionTitle","FormSwitchWrapper","checked","indicatorLabels","RBIconButton","Paper","hrClass","colSpan","CircularProgress","titleCol","KeyPairView"],"sourceRoot":""}