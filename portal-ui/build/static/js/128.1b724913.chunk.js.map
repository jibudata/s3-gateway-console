{"version":3,"sources":["screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Common/Hooks/useApi.tsx","screens/Console/Buckets/BucketDetails/DeleteReplicationRule.tsx"],"names":["withStyles","theme","createStyles","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","classes","title","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","titleIcon","open","event","reason","className","root","sx","padding","titleText","closeContainer","closeButton","onClick","disableRipple","size","content","actions","cancelButton","disabled","type","variant","color","confirmButton","loading","loadingPosition","startIcon","Fragment","autoFocus","useApi","onSuccess","onError","useState","setIsLoading","method","url","data","api","invoke","then","res","catch","err","mapDispatchToProps","setErrorSnackMessage","connector","connect","closeDeleteModalAndRefresh","deleteOpen","selectedBucket","ruleToDelete","deleteLoading","invokeDeleteApi"],"mappings":"8PAyHeA,iBAxGA,SAACC,GAAD,OACbC,YAAa,eACRC,QAsGQH,EAnFO,SAAC,GAcI,IAAD,IAbxBI,cAawB,SAZxBC,EAYwB,EAZxBA,QACAC,EAWwB,EAXxBA,SACAC,EAUwB,EAVxBA,UAUwB,IATxBC,eASwB,MATd,GASc,MARxBC,aAQwB,MARhB,GAQgB,EAPxBC,EAOwB,EAPxBA,UACAC,EAMwB,EANxBA,oBAMwB,IALxBC,kBAKwB,MALX,SAKW,MAJxBC,mBAIwB,MAJV,UAIU,MAHxBC,0BAGwB,MAHH,GAGG,MAFxBC,yBAEwB,MAFJ,GAEI,MADxBC,iBACwB,MADZ,KACY,EACxB,OACE,eAAC,IAAD,CACEC,KAAMb,EACNC,QAAS,SAACa,EAAOC,GACA,kBAAXA,GACFd,KAGJe,UAAWZ,EAAQa,KACnBC,GAAI,CACF,mBAAoB,CAClBC,QAAS,wBAVf,UAcE,eAAC,IAAD,CAAaH,UAAWZ,EAAQC,MAAhC,UACE,sBAAKW,UAAWZ,EAAQgB,UAAxB,UACGR,EADH,IACeP,KAEf,qBAAKW,UAAWZ,EAAQiB,eAAxB,SACE,cAAC,IAAD,CACE,aAAW,QACXL,UAAWZ,EAAQkB,YACnBC,QAAStB,EACTuB,eAAa,EACbC,KAAK,QALP,SAOE,cAAC,IAAD,WAKN,cAAC,IAAD,CAAeT,UAAWZ,EAAQsB,QAAlC,SACGnB,IAEH,eAAC,IAAD,CAAeS,UAAWZ,EAAQuB,QAAlC,UACE,cAAC,IAAD,yBACEX,UAAWZ,EAAQwB,aACnBL,QAASrB,GAAYD,EACrB4B,SAAUvB,EACVwB,KAAK,UACDnB,GALN,IAMEoB,QAAQ,WACRC,MAAM,UAPR,SASGxB,KAGH,cAAC,IAAD,yBACEQ,UAAWZ,EAAQ6B,cACnBH,KAAK,SACLP,QAASpB,EACT+B,QAAS5B,EACTuB,SAAUvB,EACVyB,QAAQ,WACRC,MAAM,YACNG,gBAAgB,QAChBC,UAAW,cAAC,IAAMC,SAAP,IACXC,WAAS,GACL5B,GAXN,aAaGD,e,4DCnFI8B,IAvBA,SACbC,EACAC,GAEA,MAAkCC,oBAAkB,GAApD,mBAAOpC,EAAP,KAAkBqC,EAAlB,KAgBA,MAAO,CAACrC,EAdQ,SAACsC,EAAgBC,EAAaC,GAC5CH,GAAa,GACbI,IACGC,OAAOJ,EAAQC,EAAKC,GACpBG,MAAK,SAACC,GACLP,GAAa,GACbH,EAAUU,MAEXC,OAAM,SAACC,GACNT,GAAa,GACbF,EAAQW,U,qHCsDVC,EAAqB,CACzBC,0BAGIC,EAAYC,YAAQ,KAAMH,GAEjBE,aAnDe,SAAC,GAMC,IAL9BE,EAK6B,EAL7BA,2BACAC,EAI6B,EAJ7BA,WACAC,EAG6B,EAH7BA,eACAC,EAE6B,EAF7BA,aACAN,EAC6B,EAD7BA,qBAMA,EAAyCf,aAJpB,kBAAMkB,GAA2B,MACnC,SAACL,GAAD,OAA+BE,EAAqBF,MAGvE,mBAAOS,EAAP,KAAsBC,EAAtB,KAEA,IAAKH,EACH,OAAO,KAUT,OACE,cAAC,IAAD,CACEtD,MAAK,0BACLI,YAAa,SACbT,OAAQ0D,EACR9C,UAAW,cAAC,IAAD,IACXN,UAAWuD,EACX1D,UAdoB,WACtB2D,EACE,SADa,0BAEMH,EAFN,wBAEoCC,KAYjD3D,QAvBY,kBAAMwD,GAA2B,IAwB7ClD,oBACE,eAAC,IAAD,+DACmD,4BAAIqD,IADvD,KAEI,uBAFJ","file":"static/js/128.1b724913.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText } from \"@mui/material\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\n\ninterface IDeleteReplicationProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedBucket: string;\n  ruleToDelete: string;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst DeleteReplicationRule = ({\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedBucket,\n  ruleToDelete,\n  setErrorSnackMessage,\n}: IDeleteReplicationProps) => {\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedBucket) {\n    return null;\n  }\n\n  const onConfirmDelete = () => {\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/buckets/${selectedBucket}/replication/${ruleToDelete}`\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Replication Rule`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmationContent={\n        <DialogContentText>\n          Are you sure you want to delete replication rule <b>{ruleToDelete}</b>\n          ? <br />\n          Remember, at lease one rule must be present once replication has been\n          enabled\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(DeleteReplicationRule);\n"],"sourceRoot":""}