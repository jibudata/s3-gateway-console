{"version":3,"sources":["screens/LoginPage/types.ts","screens/LoginPage/LoginPage.tsx"],"names":["loginStrategyType","inputStyles","makeStyles","theme","createStyles","disabled","borderColor","borderBottomStyle","LoginField","props","classes","TextField","InputProps","variant","connector","connect","state","loggedIn","userLoggedIn","setErrorSnackMessage","withStyles","form","width","submit","margin","height","boxShadow","padding","loginPage","display","flexFlow","alignItems","position","shadowBox","loginContainer","flex","justifyContent","maxWidth","fontWeight","fontSize","lineHeight","color","textAlign","background","marginTop","inputField","loadingLoginStrategy","headerTitle","marginRight","marginBottom","submitContainer","jwtInput","linearPredef","loaderAlignment","flexDirection","retryButton","alignSelf","useState","accessKey","setAccessKey","jwt","setJwt","secretKey","setSecretKey","loginStrategy","unknown","redirect","setLoginStrategy","loginSending","setLoginSending","loadingFetchConfiguration","setLoadingFetchConfiguration","loginStrategyEndpoints","loginStrategyPayload","formSubmit","e","preventDefault","api","invoke","then","localStorage","setItem","encodeFileName","targetPath","getItem","history","push","catch","err","useEffect","loginDetails","loginComponent","Fragment","Typography","component","className","noValidate","onSubmit","Grid","container","spacing","item","xs","fullWidth","id","value","onChange","target","placeholder","name","autoComplete","startAdornment","InputAdornment","type","Button","LinearProgress","href","serviceAccount","required","CircularProgress","onClick","endIcon","RefreshIcon","consoleText","Paper","MainError"],"mappings":"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","file":"static/js/151.89df5703.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport interface ILoginDetails {\n  loginStrategy: loginStrategyType;\n  redirect: string;\n}\n\nexport enum loginStrategyType {\n  unknown = \"unknown\",\n  form = \"form\",\n  redirect = \"redirect\",\n  serviceAccount = \"service-account\",\n}\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport {\n  CircularProgress,\n  InputAdornment,\n  LinearProgress,\n  Paper,\n  TextFieldProps,\n} from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { ILoginDetails, loginStrategyType } from \"./types\";\nimport { SystemState } from \"../../types\";\nimport { setErrorSnackMessage, userLoggedIn } from \"../../actions\";\nimport { ErrorResponseHandler } from \"../../common/types\";\nimport api from \"../../common/api\";\nimport history from \"../../history\";\nimport RefreshIcon from \"../../icons/RefreshIcon\";\nimport MainError from \"../Console/Common/MainError/MainError\";\nimport { encodeFileName } from \"../../common/utils\";\nimport { LockIcon, UsersIcon, VersionIcon } from \"../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    form: {\n      width: \"100%\", // Fix IE 11 issue.\n    },\n    submit: {\n      margin: \"30px 0px 16px\",\n      height: 40,\n      boxShadow: \"none\",\n      padding: \"16px 30px\",\n    },\n    loginPage: {\n      height: \"100%\",\n      display: \"flex\",\n      flexFlow: \"column\",\n      alignItems: \"stretch\",\n      position: \"relative\",\n      padding: 84,\n\n      \"@media (max-width: 900px)\": {\n        padding: 0,\n      },\n    },\n    shadowBox: {\n      boxShadow: \"0px 3px 10px #00000014\",\n      height: \"100%\",\n    },\n    loginContainer: {\n      flex: 1,\n      height: \"100%\",\n\n      \"& .right-items\": {\n        padding: 50,\n        flex: 1,\n        height: \"100%\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        maxWidth: \"33%\",\n\n        \"@media (max-width: 900px)\": {\n          maxWidth: \"100%\",\n          margin: \"auto\",\n        },\n      },\n      \"& .consoleTextBanner\": {\n        fontWeight: 300,\n        fontSize: \"calc(3vw + 3vh + 1.5vmin)\",\n        lineHeight: 1.15,\n        color: \"#ffffff\",\n        flex: 1,\n        textAlign: \"center\",\n        height: \"100%\",\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        margin: \"auto\",\n        flexFlow: \"column\",\n        background: \"linear-gradient(120deg,#081c42,#073052)\",\n\n        \"& .logoLine\": {\n          display: \"flex\",\n          alignItems: \"center\",\n          fontSize: 18,\n          marginTop: 40,\n        },\n        \"& .left-items\": {\n          margin: \"auto\",\n          textAlign: \"left\",\n        },\n      },\n    },\n    \"@media (max-width: 900px)\": {\n      loginContainer: {\n        display: \"flex\",\n        flexFlow: \"column\",\n\n        \"& .consoleTextBanner\": {\n          margin: 0,\n          flex: 2,\n\n          \"& .left-items\": {\n            alignItems: \"center\",\n            textAlign: \"center\",\n          },\n\n          \"& .logoLine\": {\n            justifyContent: \"center\",\n          },\n        },\n      },\n    },\n    inputField: {\n      \"& input\": {\n        padding: 5,\n        \"&::placeholder\": {\n          fontSize: 12,\n        },\n        \"@media (max-width: 900px)\": {\n          padding: 10,\n        },\n      },\n      \"& svg\": { height: 16 },\n    },\n\n    loadingLoginStrategy: {\n      textAlign: \"center\",\n    },\n    headerTitle: {\n      marginRight: \"auto\",\n      marginBottom: 15,\n    },\n    submitContainer: {\n      textAlign: \"right\",\n    },\n    jwtInput: {\n      marginTop: 45,\n    },\n    linearPredef: {\n      height: 10,\n    },\n\n    loaderAlignment: {\n      display: \"flex\",\n      width: \"100%\",\n      height: \"100%\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n    },\n    retryButton: {\n      alignSelf: \"flex-end\",\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    disabled: {\n      \"&.MuiInput-underline::before\": {\n        borderColor: \"#eaeaea\",\n        borderBottomStyle: \"solid\",\n      },\n    },\n  })\n);\n\nfunction LoginField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      variant=\"standard\"\n      {...props}\n    />\n  );\n}\n\nconst mapState = (state: SystemState) => ({\n  loggedIn: state.loggedIn,\n});\n\nconst connector = connect(mapState, { userLoggedIn, setErrorSnackMessage });\n\n// The inferred type will look like:\n// {isOn: boolean, toggleOn: () => void}\n\ninterface ILoginProps {\n  userLoggedIn: typeof userLoggedIn;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  classes: any;\n}\n\ninterface LoginStrategyRoutes {\n  [key: string]: string;\n}\n\ninterface LoginStrategyPayload {\n  [key: string]: any;\n}\n\nconst Login = ({\n  classes,\n  userLoggedIn,\n  setErrorSnackMessage,\n}: ILoginProps) => {\n  const [accessKey, setAccessKey] = useState<string>(\"\");\n  const [jwt, setJwt] = useState<string>(\"\");\n  const [secretKey, setSecretKey] = useState<string>(\"\");\n  const [loginStrategy, setLoginStrategy] = useState<ILoginDetails>({\n    loginStrategy: loginStrategyType.unknown,\n    redirect: \"\",\n  });\n  const [loginSending, setLoginSending] = useState<boolean>(false);\n  const [loadingFetchConfiguration, setLoadingFetchConfiguration] =\n    useState<boolean>(true);\n\n  const loginStrategyEndpoints: LoginStrategyRoutes = {\n    form: \"/api/v1/login\",\n    \"service-account\": \"/api/v1/login/operator\",\n  };\n  const loginStrategyPayload: LoginStrategyPayload = {\n    form: { accessKey, secretKey },\n    \"service-account\": { jwt },\n  };\n\n  const fetchConfiguration = () => {\n    setLoadingFetchConfiguration(true);\n  };\n\n  const formSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setLoginSending(true);\n    api\n      .invoke(\n        \"POST\",\n        loginStrategyEndpoints[loginStrategy.loginStrategy] || \"/api/v1/login\",\n        loginStrategyPayload[loginStrategy.loginStrategy]\n      )\n      .then(() => {\n        // We set the state in redux\n        userLoggedIn(true);\n        if (loginStrategy.loginStrategy === loginStrategyType.form) {\n          localStorage.setItem(\"userLoggedIn\", encodeFileName(accessKey));\n        }\n        let targetPath = \"/\";\n        if (\n          localStorage.getItem(\"redirect-path\") &&\n          localStorage.getItem(\"redirect-path\") !== \"\"\n        ) {\n          targetPath = `${localStorage.getItem(\"redirect-path\")}`;\n          localStorage.setItem(\"redirect-path\", \"\");\n        }\n        history.push(targetPath);\n      })\n      .catch((err) => {\n        setLoginSending(false);\n        setErrorSnackMessage(err);\n      });\n  };\n\n  useEffect(() => {\n    if (loadingFetchConfiguration) {\n      api\n        .invoke(\"GET\", \"/api/v1/login\")\n        .then((loginDetails: ILoginDetails) => {\n          setLoginStrategy(loginDetails);\n          setLoadingFetchConfiguration(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n          setLoadingFetchConfiguration(false);\n        });\n    }\n  }, [loadingFetchConfiguration, setErrorSnackMessage]);\n\n  let loginComponent = null;\n\n  switch (loginStrategy.loginStrategy) {\n    case loginStrategyType.form: {\n      loginComponent = (\n        <React.Fragment>\n          <Typography\n            component=\"h1\"\n            variant=\"h6\"\n            className={classes.headerTitle}\n          >\n            Console Login\n          </Typography>\n          <form className={classes.form} noValidate onSubmit={formSubmit}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <LoginField\n                  fullWidth\n                  id=\"accessKey\"\n                  className={classes.inputField}\n                  value={accessKey}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setAccessKey(e.target.value)\n                  }\n                  placeholder={\"Enter Username\"}\n                  name=\"accessKey\"\n                  autoComplete=\"username\"\n                  disabled={loginSending}\n                  variant={\"outlined\"}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <UsersIcon />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <LoginField\n                  fullWidth\n                  className={classes.inputField}\n                  value={secretKey}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setSecretKey(e.target.value)\n                  }\n                  name=\"secretKey\"\n                  type=\"password\"\n                  id=\"secretKey\"\n                  autoComplete=\"current-password\"\n                  disabled={loginSending}\n                  placeholder={\"Enter Password\"}\n                  variant={\"outlined\"}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <LockIcon />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.submitContainer}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                disabled={secretKey === \"\" || accessKey === \"\" || loginSending}\n              >\n                Login\n              </Button>\n            </Grid>\n            <Grid item xs={12} className={classes.linearPredef}>\n              {loginSending && <LinearProgress />}\n            </Grid>\n          </form>\n        </React.Fragment>\n      );\n      break;\n    }\n    case loginStrategyType.redirect: {\n      loginComponent = (\n        <React.Fragment>\n          <Button\n            component={\"a\"}\n            href={loginStrategy.redirect}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Login with SSO\n          </Button>\n        </React.Fragment>\n      );\n      break;\n    }\n    case loginStrategyType.serviceAccount: {\n      loginComponent = (\n        <React.Fragment>\n          <Typography\n            component=\"h1\"\n            variant=\"h6\"\n            className={classes.headerTitle}\n          >\n            Operator Login\n          </Typography>\n          <form className={classes.form} noValidate onSubmit={formSubmit}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} className={classes.jwtInput}>\n                <LoginField\n                  required\n                  className={classes.inputField}\n                  fullWidth\n                  id=\"jwt\"\n                  value={jwt}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setJwt(e.target.value)\n                  }\n                  name=\"jwt\"\n                  autoComplete=\"off\"\n                  disabled={loginSending}\n                  placeholder={\"Enter JWT\"}\n                  variant={\"outlined\"}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <LockIcon />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.submitContainer}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                disabled={jwt === \"\" || loginSending}\n              >\n                Login\n              </Button>\n            </Grid>\n            <Grid item xs={12} className={classes.linearPredef}>\n              {loginSending && <LinearProgress />}\n            </Grid>\n          </form>\n        </React.Fragment>\n      );\n      break;\n    }\n    default:\n      loginComponent = (\n        <div className={classes.loaderAlignment}>\n          {loadingFetchConfiguration ? (\n            <CircularProgress className={classes.loadingLoginStrategy} />\n          ) : (\n            <React.Fragment>\n              <div>\n                <p>An error has occurred, the backend cannot be reached.</p>\n              </div>\n              <div>\n                <Button\n                  onClick={() => {\n                    fetchConfiguration();\n                  }}\n                  endIcon={<RefreshIcon />}\n                  color={\"primary\"}\n                  variant=\"outlined\"\n                  className={classes.retryButton}\n                >\n                  Retry\n                </Button>\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      );\n  }\n\n  const consoleText =\n    loginStrategy.loginStrategy === loginStrategyType.serviceAccount\n      ? \"Operator\"\n      : \"Console\";\n\n  return (\n    <React.Fragment>\n      <Paper className={classes.loginPage}>\n        <MainError />\n        <div className={classes.shadowBox}>\n          <Grid container className={classes.loginContainer}>\n            <Grid item className=\"consoleTextBanner\">\n              <div className=\"left-items\">\n                <div className=\"text-line1\">Welcome to</div>\n                <div className=\"text-line2\">{consoleText}</div>\n                <div className=\"logoLine\">\n                  <VersionIcon /> MinIO {consoleText}\n                </div>\n              </div>\n            </Grid>\n            <Grid item className=\"right-items\">\n              {loginComponent}\n            </Grid>\n          </Grid>\n        </div>\n      </Paper>\n    </React.Fragment>\n  );\n};\n\nexport default connector(withStyles(styles)(Login));\n"],"sourceRoot":""}