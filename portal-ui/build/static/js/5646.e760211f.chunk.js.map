{"version":3,"file":"static/js/5646.e760211f.chunk.js","mappings":"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","sources":["common/HelpBox.tsx","screens/Console/Common/CredentialsPrompt/CredentialItem.tsx","screens/Console/Common/CredentialsPrompt/CredentialsPrompt.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Tenants/AddTenant/Steps/Configure.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider.tsx","screens/Console/Tenants/AddTenant/Steps/Security.tsx","screens/Console/Common/SectionH1.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption.tsx","screens/Console/Tenants/AddTenant/Steps/Affinity.tsx","screens/Console/Tenants/AddTenant/Steps/Images.tsx","screens/Console/Tenants/AddTenant/Steps/helpers/AddNamespaceModal.tsx","screens/Console/Tenants/AddTenant/Steps/SizePreview.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NameTenantMain.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantResources.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigLogSearch.tsx","screens/Console/Tenants/AddTenant/Steps/ConfigPrometheus.tsx","screens/Console/Tenants/AddTenant/AddTenant.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 2,\n      backgroundColor: \"#FBFAFA\",\n      paddingLeft: 25,\n      paddingTop: 31,\n      paddingBottom: 21,\n      paddingRight: 30,\n    },\n    leftItems: {\n      fontSize: 16,\n      fontWeight: \"bold\",\n      marginBottom: 15,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& .min-icon\": {\n        marginRight: 15,\n        height: 28,\n        width: 38,\n      },\n    },\n    helpText: {\n      fontSize: 16,\n      paddingLeft: 5,\n    },\n  });\n\ninterface IHelpBox {\n  classes: any;\n  iconComponent: any;\n  title: string;\n  help: any;\n}\n\nconst HelpBox = ({ classes, iconComponent, title, help }: IHelpBox) => {\n  return (\n    <div className={classes.root}>\n      <Grid container>\n        <Grid item xs={12} className={classes.leftItems}>\n          {iconComponent}\n          {title}\n        </Grid>\n        <Grid item xs={12} className={classes.helpText}>\n          {help}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(HelpBox);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { InputAdornment, OutlinedInput } from \"@mui/material\";\nimport BoxIconButton from \"../BoxIconButton/BoxIconButton\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { CopyIcon } from \"../../../../icons\";\nimport { fieldBasic } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      padding: \"20px 0 8px 0\",\n    },\n    inputWithCopy: {\n      \"& .MuiInputBase-root \": {\n        width: \"100%\",\n        background: \"#FBFAFA\",\n        \"& .MuiInputBase-input\": {\n          height: \".8rem\",\n        },\n        \"& .MuiInputAdornment-positionEnd\": {\n          marginRight: \".5rem\",\n          \"& .MuiButtonBase-root\": {\n            height: \"2rem\",\n          },\n        },\n      },\n      \"& .MuiButtonBase-root .min-icon\": {\n        width: \".8rem\",\n        height: \".8rem\",\n      },\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: \".8rem\",\n    },\n  });\n\nconst CredentialItem = ({\n  label = \"\",\n  value = \"\",\n  classes = {},\n}: {\n  label: string;\n  value: string;\n  classes: any;\n}) => {\n  return (\n    <div className={classes.container}>\n      <div className={classes.inputLabel}>{label}:</div>\n      <div className={classes.inputWithCopy}>\n        <OutlinedInput\n          value={value}\n          readOnly\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <CopyToClipboard text={value}>\n                <BoxIconButton\n                  aria-label=\"copy\"\n                  tooltip={\"Copy\"}\n                  onClick={() => {}}\n                  onMouseDown={() => {}}\n                  edge=\"end\"\n                >\n                  <CopyIcon />\n                </BoxIconButton>\n              </CopyToClipboard>\n            </InputAdornment>\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(CredentialItem);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { NewServiceAccount } from \"./types\";\nimport ModalWrapper from \"../ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport CredentialItem from \"./CredentialItem\";\nimport WarnIcon from \"../../../../icons/WarnIcon\";\nimport { DownloadIcon, ServiceAccountCredentialsIcon } from \"../../../../icons\";\n\nimport RBIconButton from \"../../Buckets/BucketDetails/SummaryItems/RBIconButton\";\nimport { encodeURLString } from \"../../../../common/utils\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n    credentialTitle: {\n      padding: \".8rem 0 0 0\",\n      fontWeight: 600,\n      fontSize: \".9rem\",\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \"1rem\",\n    },\n    credentialsPanel: {\n      overflowY: \"auto\",\n      maxHeight: 350,\n    },\n    promptTitle: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    buttonSpacer: {\n      marginRight: \".9rem\",\n    },\n  });\n\ninterface ICredentialsPromptProps {\n  classes: any;\n  newServiceAccount: NewServiceAccount | null;\n  open: boolean;\n  entity: string;\n  closeModal: () => void;\n}\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURLString(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n};\n\nconst CredentialsPrompt = ({\n  classes,\n  newServiceAccount,\n  open,\n  closeModal,\n  entity,\n}: ICredentialsPromptProps) => {\n  if (!newServiceAccount) {\n    return null;\n  }\n  const consoleCreds = get(newServiceAccount, \"console\", null);\n  const idp = get(newServiceAccount, \"idp\", false);\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModal();\n      }}\n      title={\n        <div className={classes.promptTitle}>\n          <div>New {entity} Created</div>\n        </div>\n      }\n      titleIcon={<ServiceAccountCredentialsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formScrollable}>\n          A new {entity} has been created with the following details:\n          {!idp && consoleCreds && (\n            <React.Fragment>\n              <Grid item xs={12} className={classes.credentialsPanel}>\n                <div className={classes.credentialTitle}>\n                  Console Credentials\n                </div>\n                {Array.isArray(consoleCreds) &&\n                  consoleCreds.map((credentialsPair, index) => {\n                    return (\n                      <>\n                        <CredentialItem\n                          label=\"Access Key\"\n                          value={credentialsPair.accessKey}\n                        />\n                        <CredentialItem\n                          label=\"Secret Key\"\n                          value={credentialsPair.secretKey}\n                        />\n                      </>\n                    );\n                  })}\n                {!Array.isArray(consoleCreds) && (\n                  <>\n                    <CredentialItem\n                      label=\"Access Key\"\n                      value={consoleCreds.accessKey}\n                    />\n                    <CredentialItem\n                      label=\"Secret Key\"\n                      value={consoleCreds.secretKey}\n                    />\n                  </>\n                )}\n              </Grid>\n            </React.Fragment>\n          )}\n          {(consoleCreds === null || consoleCreds === undefined) && (\n            <>\n              <CredentialItem\n                label=\"Access Key\"\n                value={newServiceAccount.accessKey || \"\"}\n              />\n              <CredentialItem\n                label=\"Secret Key\"\n                value={newServiceAccount.secretKey || \"\"}\n              />\n            </>\n          )}\n          {idp ? (\n            <div className={classes.warningBlock}>\n              Please Login via the configured external identity provider.\n            </div>\n          ) : (\n            <div className={classes.warningBlock}>\n              <WarnIcon />\n              <span>\n                Write these down, as this is the only time the secret will be\n                displayed.\n              </span>\n            </div>\n          )}\n        </Grid>\n        <Grid item xs={12} className={classes.buttonContainer}>\n          {!idp && (\n            <>\n              <RBIconButton\n                id={\"download-button\"}\n                tooltip={\n                  \"Download credentials in a JSON file formatted for import using mc alias import. This will only include the default login credentials.\"\n                }\n                text={\"Download for import\"}\n                className={classes.buttonSpacer}\n                onClick={() => {\n                  let consoleExtras = {};\n\n                  if (consoleCreds) {\n                    if (!Array.isArray(consoleCreds)) {\n                      consoleExtras = {\n                        url: consoleCreds.url,\n                        accessKey: consoleCreds.accessKey,\n                        secretKey: consoleCreds.secretKey,\n                        api: \"s3v4\",\n                        path: \"auto\",\n                      };\n                    } else {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          url: itemMap.url,\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                          api: \"s3v4\",\n                          path: \"auto\",\n                        };\n                      });\n                      consoleExtras = cCreds[0];\n                    }\n                  } else {\n                    consoleExtras = {\n                      url: newServiceAccount.url,\n                      accessKey: newServiceAccount.accessKey,\n                      secretKey: newServiceAccount.secretKey,\n                      api: \"s3v4\",\n                      path: \"auto\",\n                    };\n                  }\n\n                  download(\n                    \"credentials.json\",\n                    JSON.stringify({\n                      ...consoleExtras,\n                    })\n                  );\n                }}\n                icon={<DownloadIcon />}\n                variant=\"contained\"\n                color=\"primary\"\n              />\n\n              {Array.isArray(consoleCreds) && consoleCreds.length > 1 && (\n                <RBIconButton\n                  id={\"download-all-button\"}\n                  tooltip={\n                    \"Download all access credentials to a JSON file. NOTE: This file is not formatted for import using mc alias import. If you plan to import this alias from the file, please use the Download for Import button. \"\n                  }\n                  text={\"Download all access credentials\"}\n                  className={classes.buttonSpacer}\n                  onClick={() => {\n                    let allCredentials = {};\n                    if (consoleCreds) {\n                      const cCreds = consoleCreds.map((itemMap) => {\n                        return {\n                          accessKey: itemMap.accessKey,\n                          secretKey: itemMap.secretKey,\n                        };\n                      });\n                      allCredentials = cCreds;\n                    }\n                    download(\n                      \"all_credentials.json\",\n                      JSON.stringify({\n                        ...allCredentials,\n                      })\n                    );\n                  }}\n                  icon={<DownloadIcon />}\n                  variant=\"contained\"\n                  color=\"primary\"\n                />\n              )}\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(CredentialsPrompt);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\n\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport {\n  addNewMinIODomain,\n  isPageValid,\n  removeMinIODomain,\n  updateAddField,\n} from \"../../tenantsSlice\";\n\ninterface IConfigureProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n      marginBottom: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n    wrapperContainer: {\n      display: \"flex\",\n      marginBottom: 15,\n    },\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        width: 15,\n        height: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Configure = ({ classes }: IConfigureProps) => {\n  const dispatch = useDispatch();\n\n  const exposeMinIO = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.configure.exposeMinIO\n  );\n  const exposeConsole = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.exposeConsole\n  );\n  const setDomains = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.configure.setDomains\n  );\n  const consoleDomain = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.consoleDomain\n  );\n  const minioDomains = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.minioDomains\n  );\n  const tenantCustom = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.tenantCustom\n  );\n  const tenantSecurityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.tenantSecurityContext\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"configure\", field: field, value: value })\n      );\n    },\n    [dispatch]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (tenantCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"tenant_securityContext_runAsUser\",\n          required: true,\n          value: tenantSecurityContext.runAsUser,\n          customValidation:\n            tenantSecurityContext.runAsUser === \"\" ||\n            parseInt(tenantSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_runAsGroup\",\n          required: true,\n          value: tenantSecurityContext.runAsGroup,\n          customValidation:\n            tenantSecurityContext.runAsGroup === \"\" ||\n            parseInt(tenantSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_fsGroup\",\n          required: true,\n          value: tenantSecurityContext.fsGroup,\n          customValidation:\n            tenantSecurityContext.fsGroup === \"\" ||\n            parseInt(tenantSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    if (setDomains) {\n      const minioExtraValidations = minioDomains.map((validation, index) => {\n        return {\n          fieldKey: `minio-domain-${index.toString()}`,\n          required: false,\n          value: validation,\n          pattern:\n            /((http|https):\\/\\/)+[a-zA-Z0-9\\-.]{3,}\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2,})?$/,\n          customPatternMessage:\n            \"MinIO domain is not in the form of http|https://subdomain.domain\",\n        };\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        ...minioExtraValidations,\n        {\n          fieldKey: \"console_domain\",\n          required: false,\n          value: consoleDomain,\n          pattern:\n            /((http|https):\\/\\/)+[a-zA-Z0-9\\-.]{3,}\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2,})?(:[1-9]{1}([0-9]{1,4})?)?(\\/[a-zA-Z0-9]{1,})*?$/,\n          customPatternMessage:\n            \"Console domain is not in the form of http|https://subdomain.domain:port/subpath1/subpath2\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"configure\",\n        valid: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    dispatch,\n    tenantCustom,\n    tenantSecurityContext,\n    setDomains,\n    consoleDomain,\n    minioDomains,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const updateMinIODomain = (value: string, index: number) => {\n    const copyDomains = [...minioDomains];\n    copyDomains[index] = value;\n\n    updateField(\"minioDomains\", copyDomains);\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Configure</h3>\n        <span className={classes.descriptionText}>\n          Basic configurations for tenant management\n        </span>\n      </div>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Services</h3>\n        <span className={classes.descriptionText}>\n          Whether the tenant's services should request an external IP via\n          LoadBalancer service type.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_minio\"\n          id=\"expose_minio\"\n          name=\"expose_minio\"\n          checked={exposeMinIO}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeMinIO\", checked);\n          }}\n          label={\"Expose MiniO Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_console\"\n          id=\"expose_console\"\n          name=\"expose_console\"\n          checked={exposeConsole}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeConsole\", checked);\n          }}\n          label={\"Expose Console Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"custom_domains\"\n          id=\"custom_domains\"\n          name=\"custom_domains\"\n          checked={setDomains}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"setDomains\", checked);\n          }}\n          label={\"Set Custom Domains\"}\n        />\n      </Grid>\n      {setDomains && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              Custom Domains for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div className={classes.containerItem}>\n                <InputBoxWrapper\n                  id=\"console_domain\"\n                  name=\"console_domain\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"consoleDomain\", e.target.value);\n                    cleanValidation(\"tenant_securityContext_runAsUser\");\n                  }}\n                  label=\"Console Domain\"\n                  value={consoleDomain}\n                  placeholder={\n                    \"Eg. http://subdomain.domain:port/subpath1/subpath2\"\n                  }\n                  error={validationErrors[\"console_domain\"] || \"\"}\n                />\n              </div>\n              <div>\n                <h4>MinIO Domains</h4>\n                <div className={`${classes.responsiveSectionItem}`}>\n                  {minioDomains.map((domain, index) => {\n                    return (\n                      <div\n                        className={`${classes.containerItem} ${classes.wrapperContainer}`}\n                        key={`minio-domain-key-${index.toString()}`}\n                      >\n                        <InputBoxWrapper\n                          id={`minio-domain-${index.toString()}`}\n                          name={`minio-domain-${index.toString()}`}\n                          onChange={(\n                            e: React.ChangeEvent<HTMLInputElement>\n                          ) => {\n                            updateMinIODomain(e.target.value, index);\n                          }}\n                          label={`MinIO Domain ${index + 1}`}\n                          value={domain}\n                          placeholder={\"Eg. http://subdomain.domain\"}\n                          error={\n                            validationErrors[\n                              `minio-domain-${index.toString()}`\n                            ] || \"\"\n                          }\n                        />\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => dispatch(addNewMinIODomain())}\n                            disabled={index !== minioDomains.length - 1}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => dispatch(removeMinIODomain(index))}\n                            disabled={minioDomains.length <= 1}\n                          >\n                            <RemoveIcon />\n                          </IconButton>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"tenant_configuration\"\n          name=\"tenant_configuration\"\n          checked={tenantCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"tenantCustom\", checked);\n          }}\n          label={\"Security Context\"}\n        />\n      </Grid>\n      {tenantCustom && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsUser\"\n                    name=\"tenant_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={tenantSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsGroup\"\n                    name=\"tenant_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={tenantSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_fsGroup\"\n                    name=\"tenant_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={tenantSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"tenantSecurityContextRunAsNonRoot\"\n                  id=\"tenant_securityContext_runAsNonRoot\"\n                  name=\"tenant_securityContext_runAsNonRoot\"\n                  checked={tenantSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"tenantSecurityContext\", {\n                      ...tenantSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(Configure);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Tooltip, Typography } from \"@mui/material\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\n\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError, getRandomString } from \"../../utils\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport { isPageValid, updateAddField } from \"../../tenantsSlice\";\n\ninterface IIdentityProviderProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    shortened: {\n      gridTemplateColumns: \"auto auto 50px 50px\",\n      display: \"grid\",\n      gridGap: 15,\n      marginBottom: 10,\n      \"& input\": {\n        fontWeight: 400,\n      },\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    protocolRadioOptions: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      marginBottom: 10,\n\n      \"& label\": {\n        fontSize: 14,\n      },\n      \"& div\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n      },\n    },\n    adUserDnRows: {\n      display: \"flex\",\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst IdentityProvider = ({ classes }: IIdentityProviderProps) => {\n  const dispatch = useDispatch();\n\n  const idpSelection = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.idpSelection\n  );\n  const accessKeys = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.accessKeys\n  );\n  const secretKeys = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.secretKeys\n  );\n  const openIDConfigurationURL = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.openIDConfigurationURL\n  );\n  const openIDClientID = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.openIDClientID\n  );\n  const openIDSecretID = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.openIDSecretID\n  );\n  const openIDCallbackURL = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.openIDCallbackURL\n  );\n  const openIDClaimName = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.openIDClaimName\n  );\n  const openIDScopes = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.openIDScopes\n  );\n  const ADURL = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADURL\n  );\n  const ADSkipTLS = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADSkipTLS\n  );\n  const ADServerInsecure = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADServerInsecure\n  );\n  const ADGroupSearchBaseDN = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADGroupSearchBaseDN\n  );\n  const ADGroupSearchFilter = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADGroupSearchFilter\n  );\n  const ADUserDNs = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADUserDNs\n  );\n  const ADLookupBindDN = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADLookupBindDN\n  );\n  const ADLookupBindPassword = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADLookupBindPassword\n  );\n  const ADUserDNSearchBaseDN = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADUserDNSearchBaseDN\n  );\n  const ADUserDNSearchFilter = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADUserDNSearchFilter\n  );\n  const ADServerStartTLS = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.identityProvider.ADServerStartTLS\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({\n          pageName: \"identityProvider\",\n          field: field,\n          value: value,\n        })\n      );\n    },\n    [dispatch]\n  );\n  const updateUserField = (index: number, value: string) => {\n    const newUserField = [...accessKeys];\n    newUserField[index] = value;\n    updateField(\"accessKeys\", newUserField);\n  };\n  const updatePwordField = (index: number, value: string) => {\n    const newUserField = [...secretKeys];\n    newUserField[index] = value;\n    updateField(\"secretKeys\", newUserField);\n  };\n  const updateADUserField = (index: number, value: string) => {\n    const newADUserDNsField = [...ADUserDNs];\n    newADUserDNsField[index] = value;\n    updateField(\"ADUserDNs\", newADUserDNsField);\n  };\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"Built-in\") {\n      customIDPValidation = [...customIDPValidation];\n      for (var i = 0; i < accessKeys.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `accesskey-${i.toString()}`,\n          required: true,\n          value: accessKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n        customIDPValidation.push({\n          fieldKey: `secretkey-${i.toString()}`,\n          required: true,\n          value: secretKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n      }\n    }\n\n    if (idpSelection === \"OpenID\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n      // validate user DNs\n      for (let i = 0; i < ADUserDNs.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `ad-userdn-${i.toString()}`,\n          required: true,\n          value: ADUserDNs[i],\n        });\n      }\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"identityProvider\",\n        valid: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    ADLookupBindDN,\n    idpSelection,\n    accessKeys,\n    secretKeys,\n    openIDClientID,\n    openIDSecretID,\n    ADURL,\n    ADGroupSearchBaseDN,\n    ADGroupSearchFilter,\n    ADUserDNs,\n    dispatch,\n    openIDConfigurationURL,\n    openIDClaimName,\n  ]);\n  let inputs = null;\n  if (idpSelection === \"Built-in\") {\n    inputs = accessKeys.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`accesskey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Access Key\"}\n              name={`accesskey-${index.toString()}`}\n              value={accessKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateUserField(index, e.target.value);\n                cleanValidation(`accesskey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-accesskey-${index.toString()}`}\n              error={validationErrors[`accesskey-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`secretkey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Secret Key\"}\n              name={`secretkey-${index.toString()}`}\n              value={secretKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updatePwordField(index, e.target.value);\n                cleanValidation(`secretkey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-secretkey-${index.toString()}`}\n              error={validationErrors[`secretkey-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      accessKeys.push(\"\");\n                      secretKeys.push(\"\");\n                      updateUserField(accessKeys.length - 1, \"\");\n                      updatePwordField(secretKeys.length - 1, \"\");\n                    }}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      if (accessKeys.length > 1) {\n                        accessKeys.splice(index, 1);\n                        secretKeys.splice(index, 1);\n                        updateUserField(\n                          accessKeys.length - 1,\n                          accessKeys[accessKeys.length - 1]\n                        );\n                      }\n                    }}\n                  >\n                    <RemoveIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Randomize Credentials\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    onClick={() => {\n                      updateUserField(index, getRandomString(16));\n                      updatePwordField(index, getRandomString(32));\n                    }}\n                    size={\"small\"}\n                  >\n                    <CasinoIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  if (idpSelection === \"AD\") {\n    inputs = ADUserDNs.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.adUserDnRows}>\n            <InputBoxWrapper\n              id={`ad-userdn-${index.toString()}`}\n              label={\"\"}\n              placeholder=\"\"\n              name={`ad-userdn-${index.toString()}`}\n              value={ADUserDNs[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateADUserField(index, e.target.value);\n                cleanValidation(`ad-userdn-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-ad-userdn-${index.toString()}`}\n              error={validationErrors[`ad-userdn-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    ADUserDNs.push(\"\");\n                    updateADUserField(ADUserDNs.length - 1, \"\");\n                  }}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  style={{ marginLeft: 16 }}\n                  onClick={() => {\n                    if (ADUserDNs.length > 1) {\n                      ADUserDNs.splice(index, 1);\n                      updateUserField(\n                        ADUserDNs.length - 1,\n                        ADUserDNs[ADUserDNs.length - 1]\n                      );\n                    }\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Identity Provider</h3>\n        <span className={classes.descriptionText}>\n          Access to the tenant can be controlled via an external Identity\n          Manager.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.protocolRadioOptions}>\n        <label>Protocol</label>\n        <RadioGroupSelector\n          currentSelection={idpSelection}\n          id=\"idp-options\"\n          name=\"idp-options\"\n          label=\" \"\n          onChange={(e) => {\n            updateField(\"idpSelection\", e.target.value);\n          }}\n          selectorOptions={[\n            { label: \"Built-in\", value: \"Built-in\" },\n            { label: \"OpenID\", value: \"OpenID\" },\n            { label: \"Active Directory\", value: \"AD\" },\n          ]}\n        />\n      </Grid>\n      {idpSelection === \"Built-in\" && (\n        <Fragment>\n          Add additional users\n          {inputs}\n        </Fragment>\n      )}\n      {idpSelection === \"OpenID\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_CONFIGURATION_URL\"\n              name=\"openID_CONFIGURATION_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDConfigurationURL\", e.target.value);\n                cleanValidation(\"openID_CONFIGURATION_URL\");\n              }}\n              label=\"Configuration URL\"\n              value={openIDConfigurationURL}\n              placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n              error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_clientID\"\n              name=\"openID_clientID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClientID\", e.target.value);\n                cleanValidation(\"openID_clientID\");\n              }}\n              label=\"Client ID\"\n              value={openIDClientID}\n              error={validationErrors[\"openID_clientID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_secretID\"\n              name=\"openID_secretID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDSecretID\", e.target.value);\n                cleanValidation(\"openID_secretID\");\n              }}\n              label=\"Secret ID\"\n              value={openIDSecretID}\n              error={validationErrors[\"openID_secretID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_callbackURL\"\n              name=\"openID_callbackURL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDCallbackURL\", e.target.value);\n                cleanValidation(\"openID_callbackURL\");\n              }}\n              label=\"Callback URL\"\n              value={openIDCallbackURL}\n              placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n              error={validationErrors[\"openID_callbackURL\"] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_claimName\"\n              name=\"openID_claimName\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClaimName\", e.target.value);\n                cleanValidation(\"openID_claimName\");\n              }}\n              label=\"Claim Name\"\n              value={openIDClaimName}\n              error={validationErrors[\"openID_claimName\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_scopes\"\n              name=\"openID_scopes\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDScopes\", e.target.value);\n                cleanValidation(\"openID_scopes\");\n              }}\n              label=\"Scopes\"\n              value={openIDScopes}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {idpSelection === \"AD\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"AD_URL\"\n              name=\"AD_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADURL\", e.target.value);\n                cleanValidation(\"AD_URL\");\n              }}\n              label=\"LDAP Server Address\"\n              value={ADURL}\n              placeholder=\"ldap-server:636\"\n              error={validationErrors[\"AD_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_skipTLS\"\n              id=\"ad_skipTLS\"\n              name=\"ad_skipTLS\"\n              checked={ADSkipTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADSkipTLS\", checked);\n              }}\n              label={\"Skip TLS Verification\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverInsecure\"\n              id=\"ad_serverInsecure\"\n              name=\"ad_serverInsecure\"\n              checked={ADServerInsecure}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerInsecure\", checked);\n              }}\n              label={\"Server Insecure\"}\n            />\n          </Grid>\n          {ADServerInsecure ? (\n            <Grid item xs={12}>\n              <Typography\n                className={classes.error}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Warning: All traffic with Active Directory will be unencrypted\n              </Typography>\n              <br />\n            </Grid>\n          ) : null}\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverStartTLS\"\n              id=\"ad_serverStartTLS\"\n              name=\"ad_serverStartTLS\"\n              checked={ADServerStartTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerStartTLS\", checked);\n              }}\n              label={\"Start TLS connection to AD/LDAP server\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindDN\"\n              name=\"ad_lookupBindDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindDN\", e.target.value);\n                cleanValidation(\"ad_lookupBindDN\");\n              }}\n              label=\"Lookup Bind DN\"\n              value={ADLookupBindDN}\n              placeholder=\"cn=admin,dc=min,dc=io\"\n              error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindPassword\"\n              name=\"ad_lookupBindPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindPassword\", e.target.value);\n              }}\n              label=\"Lookup Bind Password\"\n              value={ADLookupBindPassword}\n              placeholder=\"admin\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchBaseDN\"\n              name=\"ad_userDNSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchBaseDN\", e.target.value);\n              }}\n              label=\"User DN Search Base DN\"\n              value={ADUserDNSearchBaseDN}\n              placeholder=\"dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchFilter\"\n              name=\"ad_userDNSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchFilter\", e.target.value);\n              }}\n              label=\"User DN Search Filter\"\n              value={ADUserDNSearchFilter}\n              placeholder=\"(sAMAcountName=%s)\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchBaseDN\"\n              name=\"ad_groupSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchBaseDN\", e.target.value);\n              }}\n              label=\"Group Search Base DN\"\n              value={ADGroupSearchBaseDN}\n              placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchFilter\"\n              name=\"ad_groupSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchFilter\", e.target.value);\n              }}\n              label=\"Group Search Filter\"\n              value={ADGroupSearchFilter}\n              placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n            />\n          </Grid>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              List of user DNs (Distinguished Names) to be Tenant Administrators\n            </legend>\n            <Grid item xs={12}>\n              {inputs}\n            </Grid>\n          </fieldset>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(IdentityProvider);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\n\nimport { AppState } from \"../../../../../store\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SectionTitle from \"../../../Common/SectionTitle\";\nimport {\n  addCaCertificate,\n  addFileToCaCertificates,\n  addFileToKeyPair,\n  addKeyPair,\n  deleteCaCertificate,\n  deleteKeyPair,\n  isPageValid,\n  updateAddField,\n} from \"../../tenantsSlice\";\n\ninterface ISecurityProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    minioCertificateRows: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    minioCertsContainer: {\n      marginBottom: 15,\n    },\n    minioCACertsRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n\n    ...createTenantCommon,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Security = ({ classes }: ISecurityProps) => {\n  const dispatch = useDispatch();\n\n  const enableTLS = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.security.enableTLS\n  );\n  const enableAutoCert = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.security.enableAutoCert\n  );\n  const enableCustomCerts = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.security.enableCustomCerts\n  );\n  const minioCertificates = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.certificates.minioCertificates\n  );\n  const caCertificates = useSelector(\n    (state: AppState) => state.tenants.createTenant.certificates.caCertificates\n  );\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"security\", field: field, value: value })\n      );\n    },\n    [dispatch]\n  );\n\n  // Validation\n\n  useEffect(() => {\n    if (!enableTLS) {\n      dispatch(isPageValid({ pageName: \"security\", valid: true }));\n      return;\n    }\n    if (enableAutoCert) {\n      dispatch(isPageValid({ pageName: \"security\", valid: true }));\n      return;\n    }\n    if (enableCustomCerts) {\n      dispatch(isPageValid({ pageName: \"security\", valid: true }));\n      return;\n    }\n    dispatch(isPageValid({ pageName: \"security\", valid: false }));\n  }, [enableTLS, enableAutoCert, enableCustomCerts, dispatch]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Security</h3>\n      </div>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <FormSwitchWrapper\n            value=\"enableTLS\"\n            id=\"enableTLS\"\n            name=\"enableTLS\"\n            checked={enableTLS}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"enableTLS\", checked);\n            }}\n            label={\"TLS\"}\n            description={\n              \"Securing all the traffic using TLS. This is required for Encryption Configuration\"\n            }\n          />\n        </Grid>\n        {enableTLS && (\n          <Fragment>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableAutoCert\"\n                id=\"enableAutoCert\"\n                name=\"enableAutoCert\"\n                checked={enableAutoCert}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  updateField(\"enableAutoCert\", checked);\n                }}\n                label={\"AutoCert\"}\n                description={\n                  \"The internode certificates will be generated and managed by MinIO Operator\"\n                }\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCerts\"\n                id=\"enableCustomCerts\"\n                name=\"enableCustomCerts\"\n                checked={enableCustomCerts}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  updateField(\"enableCustomCerts\", checked);\n                }}\n                label={\"Custom Certificates\"}\n                description={\"Certificates used to terminated TLS at MinIO\"}\n              />\n            </Grid>\n            {enableCustomCerts && (\n              <Fragment>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <SectionTitle>MinIO Certificates</SectionTitle>\n                  {minioCertificates.map((keyPair: KeyPair) => (\n                    <Grid\n                      item\n                      xs={12}\n                      key={`minio-certs-${keyPair.id}`}\n                      className={classes.minioCertificateRows}\n                    >\n                      <Grid item xs={10} className={classes.fileItem}>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            dispatch(\n                              addFileToKeyPair({\n                                id: keyPair.id,\n                                key: \"cert\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              })\n                            );\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"tlsCert\"\n                          name=\"tlsCert\"\n                          label=\"Cert\"\n                          value={keyPair.cert}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            dispatch(\n                              addFileToKeyPair({\n                                id: keyPair.id,\n                                key: \"key\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              })\n                            );\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"tlsKey\"\n                          name=\"tlsKey\"\n                          label=\"Key\"\n                          value={keyPair.key}\n                        />\n                      </Grid>\n\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              dispatch(addKeyPair());\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              dispatch(deleteKeyPair(keyPair.id));\n                            }}\n                          >\n                            <RemoveIcon />\n                          </IconButton>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  ))}\n                </Grid>\n\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <SectionTitle>MinIO CA Certificates</SectionTitle>\n\n                  {caCertificates.map((keyPair: KeyPair) => (\n                    <Grid\n                      item\n                      xs={12}\n                      key={`minio-CA-certs-${keyPair.id}`}\n                      className={classes.minioCACertsRow}\n                    >\n                      <Grid item xs={6}>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            dispatch(\n                              addFileToCaCertificates({\n                                id: keyPair.id,\n                                key: \"cert\",\n                                fileName: fileName,\n                                value: encodedValue,\n                              })\n                            );\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"tlsCert\"\n                          name=\"tlsCert\"\n                          label=\"Cert\"\n                          value={keyPair.cert}\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <div className={classes.rowActions}>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                dispatch(addCaCertificate());\n                              }}\n                            >\n                              <AddIcon />\n                            </IconButton>\n                          </div>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                dispatch(deleteCaCertificate(keyPair.id));\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  ))}\n                </Grid>\n              </Fragment>\n            )}\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(Security);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\n\ntype Props = {};\n\nconst SectionH1: React.FC<Props> = ({ children }) => {\n  return (\n    <h1 style={{ margin: 0, marginBottom: \".8rem\", fontSize: \"1.3rem\" }}>\n      {children}\n    </h1>\n  );\n};\n\nexport default SectionH1;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Paper } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\n\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport SectionH1 from \"../../../Common/SectionH1\";\nimport {\n  addFileClientCert,\n  addFileGemaltoCa,\n  addFileServerCert,\n  addFileVaultCa,\n  addFileVaultCert,\n  isPageValid,\n  updateAddField,\n} from \"../../tenantsSlice\";\n\ninterface IEncryptionProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    encryptionTypeOptions: {\n      marginBottom: 15,\n    },\n    mutualTlsConfig: {\n      marginTop: 15,\n      \"& fieldset\": {\n        flex: 1,\n      },\n    },\n    rightSpacer: {\n      marginRight: 15,\n    },\n    responsiveContainer: {\n      \"@media (max-width: 900px)\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n      },\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Encryption = ({ classes }: IEncryptionProps) => {\n  const dispatch = useDispatch();\n\n  const replicas = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.encryption.replicas\n  );\n  const enableEncryption = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.enableEncryption\n  );\n  const encryptionType = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.encryptionType\n  );\n  const gemaltoEndpoint = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gemaltoEndpoint\n  );\n  const gemaltoToken = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gemaltoToken\n  );\n  const gemaltoDomain = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gemaltoDomain\n  );\n  const gemaltoRetry = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gemaltoRetry\n  );\n  const awsEndpoint = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.awsEndpoint\n  );\n  const awsRegion = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.encryption.awsRegion\n  );\n  const awsKMSKey = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.encryption.awsKMSKey\n  );\n  const awsAccessKey = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.awsAccessKey\n  );\n  const awsSecretKey = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.awsSecretKey\n  );\n  const awsToken = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.encryption.awsToken\n  );\n  const vaultEndpoint = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.vaultEndpoint\n  );\n  const vaultEngine = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.vaultEngine\n  );\n  const vaultNamespace = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.vaultNamespace\n  );\n  const vaultPrefix = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.vaultPrefix\n  );\n  const vaultAppRoleEngine = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.vaultAppRoleEngine\n  );\n  const vaultId = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.encryption.vaultId\n  );\n  const vaultSecret = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.vaultSecret\n  );\n  const vaultRetry = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.encryption.vaultRetry\n  );\n  const vaultPing = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.encryption.vaultPing\n  );\n  const azureEndpoint = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.azureEndpoint\n  );\n  const azureTenantID = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.azureTenantID\n  );\n  const azureClientID = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.azureClientID\n  );\n  const azureClientSecret = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.azureClientSecret\n  );\n  const gcpProjectID = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gcpProjectID\n  );\n  const gcpEndpoint = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gcpEndpoint\n  );\n  const gcpClientEmail = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gcpClientEmail\n  );\n  const gcpClientID = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gcpClientID\n  );\n  const gcpPrivateKeyID = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gcpPrivateKeyID\n  );\n  const gcpPrivateKey = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.gcpPrivateKey\n  );\n  const enableCustomCertsForKES = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.enableCustomCertsForKES\n  );\n  const enableAutoCert = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.security.enableAutoCert\n  );\n  const enableTLS = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.security.enableTLS\n  );\n  const minioCertificates = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.certificates.minioCertificates\n  );\n  const serverCertificate = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.certificates.serverCertificate\n  );\n  const clientCertificate = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.certificates.clientCertificate\n  );\n  const vaultCertificate = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.certificates.vaultCertificate\n  );\n  const vaultCA = useSelector(\n    (state: AppState) => state.tenants.createTenant.certificates.vaultCA\n  );\n  const gemaltoCA = useSelector(\n    (state: AppState) => state.tenants.createTenant.certificates.gemaltoCA\n  );\n  const enableCustomCerts = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.security.enableCustomCerts\n  );\n  const kesSecurityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.encryption.kesSecurityContext\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  let encryptionAvailable = false;\n  if (\n    enableTLS &&\n    (enableAutoCert ||\n      (minioCertificates &&\n        minioCertificates.filter(\n          (item) => item.encoded_key && item.encoded_cert\n        ).length > 0))\n  ) {\n    encryptionAvailable = true;\n  }\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"encryption\", field: field, value: value })\n      );\n    },\n    [dispatch]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (enableEncryption) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: kesSecurityContext.runAsUser,\n          customValidation:\n            kesSecurityContext.runAsUser === \"\" ||\n            parseInt(kesSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: kesSecurityContext.runAsGroup,\n          customValidation:\n            kesSecurityContext.runAsGroup === \"\" ||\n            parseInt(kesSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: kesSecurityContext.fsGroup,\n          customValidation:\n            kesSecurityContext.fsGroup === \"\" ||\n            parseInt(kesSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enableCustomCerts) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_cert,\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_cert,\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultEndpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultId,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultSecret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultPing,\n            customValidation: parseInt(vaultPing) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultRetry,\n            customValidation: parseInt(vaultRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsEndpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsRegion,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsAccessKey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsSecretKey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoEndpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoToken,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoDomain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoRetry,\n            customValidation: parseInt(gemaltoRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureEndpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureTenantID,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureClientID,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureClientSecret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"encryption\",\n        valid: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    enableEncryption,\n    encryptionType,\n    vaultEndpoint,\n    vaultEngine,\n    vaultId,\n    vaultSecret,\n    vaultPing,\n    vaultRetry,\n    awsEndpoint,\n    awsRegion,\n    awsSecretKey,\n    awsAccessKey,\n    gemaltoEndpoint,\n    gemaltoToken,\n    gemaltoDomain,\n    gemaltoRetry,\n    gcpProjectID,\n    gcpEndpoint,\n    gcpClientEmail,\n    gcpClientID,\n    gcpPrivateKeyID,\n    gcpPrivateKey,\n    azureEndpoint,\n    azureTenantID,\n    azureClientID,\n    azureClientSecret,\n    dispatch,\n    enableAutoCert,\n    enableCustomCerts,\n    serverCertificate.encoded_key,\n    serverCertificate.encoded_cert,\n    clientCertificate.encoded_key,\n    clientCertificate.encoded_cert,\n    kesSecurityContext,\n    replicas,\n  ]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <SectionH1>Encryption</SectionH1>\n        </Grid>\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={enableEncryption}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"enableEncryption\", checked);\n            }}\n            description=\"\"\n            disabled={!encryptionAvailable}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <span className={classes.descriptionText}>\n            MinIO Server-Side Encryption (SSE) protects objects as part of write\n            operations, allowing clients to take advantage of server processing\n            power to secure objects at the storage layer (encryption-at-rest).\n            SSE also provides key functionality to regulatory and compliance\n            requirements around secure locking and erasure.\n          </span>\n        </Grid>\n        <Grid xs={12}>\n          <hr className={classes.hrClass} />\n        </Grid>\n\n        {enableEncryption && (\n          <Fragment>\n            <Grid item xs={12} className={classes.encryptionTypeOptions}>\n              <RadioGroupSelector\n                currentSelection={encryptionType}\n                id=\"encryptionType\"\n                name=\"encryptionType\"\n                label=\"Encryption Options\"\n                onChange={(e) => {\n                  updateField(\"encryptionType\", e.target.value);\n                }}\n                selectorOptions={[\n                  { label: \"Vault\", value: \"vault\" },\n                  { label: \"AWS\", value: \"aws\" },\n                  { label: \"Gemalto\", value: \"gemalto\" },\n                  { label: \"GCP\", value: \"gcp\" },\n                  { label: \"Azure\", value: \"azure\" },\n                ]}\n              />\n            </Grid>\n            {encryptionType === \"vault\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_endpoint\"\n                    name=\"vault_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultEndpoint\", e.target.value);\n                      cleanValidation(\"vault_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={vaultEndpoint}\n                    error={validationErrors[\"vault_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_engine\"\n                    name=\"vault_engine\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultEngine\", e.target.value);\n                      cleanValidation(\"vault_engine\");\n                    }}\n                    label=\"Engine\"\n                    value={vaultEngine}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_namespace\"\n                    name=\"vault_namespace\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultNamespace\", e.target.value);\n                    }}\n                    label=\"Namespace\"\n                    value={vaultNamespace}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"vault_prefix\"\n                    name=\"vault_prefix\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultPrefix\", e.target.value);\n                    }}\n                    label=\"Prefix\"\n                    value={vaultPrefix}\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      App Role\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"vault_approle_engine\"\n                        name=\"vault_approle_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultAppRoleEngine\", e.target.value);\n                        }}\n                        label=\"Engine\"\n                        value={vaultAppRoleEngine}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"vault_id\"\n                        name=\"vault_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultId\", e.target.value);\n                          cleanValidation(\"vault_id\");\n                        }}\n                        label=\"AppRole ID\"\n                        value={vaultId}\n                        error={validationErrors[\"vault_id\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"vault_secret\"\n                        name=\"vault_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultSecret\", e.target.value);\n                          cleanValidation(\"vault_secret\");\n                        }}\n                        label=\"AppRole Secret\"\n                        value={vaultSecret}\n                        error={validationErrors[\"vault_secret\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"vault_retry\"\n                        name=\"vault_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"vaultRetry\", e.target.value);\n                          cleanValidation(\"vault_retry\");\n                        }}\n                        label=\"Retry (Seconds)\"\n                        value={vaultRetry}\n                        error={validationErrors[\"vault_retry\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n\n                <Grid container className={classes.mutualTlsConfig}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Mutual TLS authentication (optional)\n                    </legend>\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        dispatch(\n                          addFileVaultCert({\n                            key: \"key\",\n                            fileName: fileName,\n                            value: encodedValue,\n                          })\n                        );\n                        cleanValidation(\"vault_key\");\n                      }}\n                      accept=\".key,.pem\"\n                      id=\"vault_key\"\n                      name=\"vault_key\"\n                      label=\"Key\"\n                      value={vaultCertificate.key}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        dispatch(\n                          addFileVaultCert({\n                            key: \"cert\",\n                            fileName: fileName,\n                            value: encodedValue,\n                          })\n                        );\n                        cleanValidation(\"vault_cert\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"vault_cert\"\n                      name=\"vault_cert\"\n                      label=\"Cert\"\n                      value={vaultCertificate.cert}\n                    />\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        dispatch(\n                          addFileVaultCa({\n                            fileName: fileName,\n                            value: encodedValue,\n                          })\n                        );\n                        cleanValidation(\"vault_ca\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"vault_ca\"\n                      name=\"vault_ca\"\n                      label=\"CA\"\n                      value={vaultCA.cert}\n                    />\n                  </fieldset>\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  className={classes.formFieldRow}\n                  style={{ marginTop: 15 }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>Status</legend>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"vault_ping\"\n                      name=\"vault_ping\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultPing\", e.target.value);\n                        cleanValidation(\"vault_ping\");\n                      }}\n                      label=\"Ping (Seconds)\"\n                      value={vaultPing}\n                      error={validationErrors[\"vault_ping\"] || \"\"}\n                    />\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"azure\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"azure_endpoint\"\n                    name=\"azure_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"azureEndpoint\", e.target.value);\n                      cleanValidation(\"azure_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={azureEndpoint}\n                    error={validationErrors[\"azure_endpoint\"] || \"\"}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"azure_tenant_id\"\n                        name=\"azure_tenant_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"azureTenantID\", e.target.value);\n                          cleanValidation(\"azure_tenant_id\");\n                        }}\n                        label=\"Tenant ID\"\n                        value={azureTenantID}\n                        error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"azure_client_id\"\n                        name=\"azure_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"azureClientID\", e.target.value);\n                          cleanValidation(\"azure_client_id\");\n                        }}\n                        label=\"Client ID\"\n                        value={azureClientID}\n                        error={validationErrors[\"azure_client_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"azure_client_secret\"\n                        name=\"azure_client_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"azureClientSecret\", e.target.value);\n                          cleanValidation(\"azure_client_secret\");\n                        }}\n                        label=\"Client Secret\"\n                        value={azureClientSecret}\n                        error={validationErrors[\"azure_client_secret\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gcp\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"gcp_project_id\"\n                    name=\"gcp_project_id\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"gcpProjectID\", e.target.value);\n                    }}\n                    label=\"Project ID\"\n                    value={gcpProjectID}\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"gcp_endpoint\"\n                    name=\"gcp_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"gcpEndpoint\", e.target.value);\n                    }}\n                    label=\"Endpoint\"\n                    value={gcpEndpoint}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_email\"\n                        name=\"gcp_client_email\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpClientEmail\", e.target.value);\n                        }}\n                        label=\"Client Email\"\n                        value={gcpClientEmail}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_id\"\n                        name=\"gcp_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpClientID\", e.target.value);\n                        }}\n                        label=\"Client ID\"\n                        value={gcpClientID}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key_id\"\n                        name=\"gcp_private_key_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpPrivateKeyID\", e.target.value);\n                        }}\n                        label=\"Private Key ID\"\n                        value={gcpPrivateKeyID}\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key\"\n                        name=\"gcp_private_key\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gcpPrivateKey\", e.target.value);\n                        }}\n                        label=\"Private Key\"\n                        value={gcpPrivateKey}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"aws\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"aws_endpoint\"\n                    name=\"aws_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"awsEndpoint\", e.target.value);\n                      cleanValidation(\"aws_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={awsEndpoint}\n                    error={validationErrors[\"aws_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"aws_region\"\n                    name=\"aws_region\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"awsRegion\", e.target.value);\n                      cleanValidation(\"aws_region\");\n                    }}\n                    label=\"Region\"\n                    value={awsRegion}\n                    error={validationErrors[\"aws_region\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"aws_kmsKey\"\n                    name=\"aws_kmsKey\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"awsKMSKey\", e.target.value);\n                    }}\n                    label=\"KMS Key\"\n                    value={awsKMSKey}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"aws_accessKey\"\n                        name=\"aws_accessKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"awsAccessKey\", e.target.value);\n                          cleanValidation(\"aws_accessKey\");\n                        }}\n                        label=\"Access Key\"\n                        value={awsAccessKey}\n                        error={validationErrors[\"aws_accessKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"aws_secretKey\"\n                        name=\"aws_secretKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"awsSecretKey\", e.target.value);\n                          cleanValidation(\"aws_secretKey\");\n                        }}\n                        label=\"Secret Key\"\n                        value={awsSecretKey}\n                        error={validationErrors[\"aws_secretKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"aws_token\"\n                        name=\"aws_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"awsToken\", e.target.value);\n                        }}\n                        label=\"Token\"\n                        value={awsToken}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            {encryptionType === \"gemalto\" && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"gemalto_endpoint\"\n                    name=\"gemalto_endpoint\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"gemaltoEndpoint\", e.target.value);\n                      cleanValidation(\"gemalto_endpoint\");\n                    }}\n                    label=\"Endpoint\"\n                    value={gemaltoEndpoint}\n                    error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                    required\n                  />\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Credentials\n                    </legend>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gemalto_token\"\n                        name=\"gemalto_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gemaltoToken\", e.target.value);\n                          cleanValidation(\"gemalto_token\");\n                        }}\n                        label=\"Token\"\n                        value={gemaltoToken}\n                        error={validationErrors[\"gemalto_token\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        id=\"gemalto_domain\"\n                        name=\"gemalto_domain\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gemaltoDomain\", e.target.value);\n                          cleanValidation(\"gemalto_domain\");\n                        }}\n                        label=\"Domain\"\n                        value={gemaltoDomain}\n                        error={validationErrors[\"gemalto_domain\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"gemalto_retry\"\n                        name=\"gemalto_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"gemaltoRetry\", e.target.value);\n                          cleanValidation(\"gemalto_retry\");\n                        }}\n                        label=\"Retry (seconds)\"\n                        value={gemaltoRetry}\n                        error={validationErrors[\"gemalto_retry\"] || \"\"}\n                      />\n                    </Grid>\n                  </fieldset>\n                </Grid>\n                <Grid\n                  item\n                  xs={12}\n                  style={{\n                    marginBottom: 15,\n                  }}\n                >\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Custom CA Root certificate verification\n                    </legend>\n\n                    <FileSelector\n                      onChange={(encodedValue, fileName) => {\n                        dispatch(\n                          addFileGemaltoCa({\n                            fileName: fileName,\n                            value: encodedValue,\n                          })\n                        );\n                        cleanValidation(\"gemalto_ca\");\n                      }}\n                      accept=\".cer,.crt,.cert,.pem\"\n                      id=\"gemalto_ca\"\n                      name=\"gemalto_ca\"\n                      label=\"CA\"\n                      value={gemaltoCA.cert}\n                    />\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <div className={classes.headerElement}>\n              <h4 className={classes.h3Section}>Additional Configurations</h4>\n            </div>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCertsForKES\"\n                id=\"enableCustomCertsForKES\"\n                name=\"enableCustomCertsForKES\"\n                checked={enableCustomCertsForKES || !enableAutoCert}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n\n                  updateField(\"enableCustomCertsForKES\", checked);\n                }}\n                label={\"Custom Certificates\"}\n                disabled={!enableAutoCert}\n              />\n            </Grid>\n            {(enableCustomCertsForKES || !enableAutoCert) && (\n              <Fragment>\n                <Grid container>\n                  <Grid item xs={12} style={{ marginBottom: 15 }}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Encryption Service Certificates\n                      </legend>\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          dispatch(\n                            addFileServerCert({\n                              key: \"key\",\n                              fileName: fileName,\n                              value: encodedValue,\n                            })\n                          );\n                          cleanValidation(\"serverKey\");\n                        }}\n                        accept=\".key,.pem\"\n                        id=\"serverKey\"\n                        name=\"serverKey\"\n                        label=\"Key\"\n                        error={validationErrors[\"serverKey\"] || \"\"}\n                        value={serverCertificate.key}\n                        required={!enableAutoCert}\n                      />\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          dispatch(\n                            addFileServerCert({\n                              key: \"cert\",\n                              fileName: fileName,\n                              value: encodedValue,\n                            })\n                          );\n                          cleanValidation(\"serverCert\");\n                        }}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"serverCert\"\n                        name=\"serverCert\"\n                        label=\"Cert\"\n                        error={validationErrors[\"serverCert\"] || \"\"}\n                        value={serverCertificate.cert}\n                        required={!enableAutoCert}\n                      />\n                    </fieldset>\n                  </Grid>\n                </Grid>\n                <Grid container style={{ marginBottom: 15 }}>\n                  <Grid item xs={12}>\n                    <fieldset className={classes.fieldGroup}>\n                      <legend className={classes.descriptionText}>\n                        Mutual TLS authentication with MinIO\n                      </legend>\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          dispatch(\n                            addFileClientCert({\n                              key: \"key\",\n                              fileName: fileName,\n                              value: encodedValue,\n                            })\n                          );\n                          cleanValidation(\"clientKey\");\n                        }}\n                        accept=\".key,.pem\"\n                        id=\"clientKey\"\n                        name=\"clientKey\"\n                        label=\"Key\"\n                        error={validationErrors[\"clientKey\"] || \"\"}\n                        value={clientCertificate.key}\n                        required={!enableAutoCert}\n                      />\n                      <FileSelector\n                        onChange={(encodedValue, fileName) => {\n                          dispatch(\n                            addFileClientCert({\n                              key: \"cert\",\n                              fileName: fileName,\n                              value: encodedValue,\n                            })\n                          );\n                          cleanValidation(\"clientCert\");\n                        }}\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"clientCert\"\n                        name=\"clientCert\"\n                        label=\"Cert\"\n                        error={validationErrors[\"clientCert\"] || \"\"}\n                        value={clientCertificate.cert}\n                        required={!enableAutoCert}\n                      />\n                    </fieldset>\n                  </Grid>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <Grid item xs={12} classes={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type=\"number\"\n                  min=\"1\"\n                  id=\"replicas\"\n                  name=\"replicas\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"replicas\", e.target.value);\n                    cleanValidation(\"replicas\");\n                  }}\n                  label=\"Replicas\"\n                  value={replicas}\n                  required\n                  error={validationErrors[\"replicas\"] || \"\"}\n                />\n              </Grid>\n\n              <fieldset\n                className={classes.fieldGroup}\n                style={{ marginTop: 15 }}\n              >\n                <legend className={classes.descriptionText}>\n                  SecurityContext for KES pods\n                </legend>\n                <Grid item xs={12} className={classes.kesSecurityContext}>\n                  <div\n                    className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                  >\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_runAsUser\"\n                        name=\"kes_securityContext_runAsUser\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"kesSecurityContext\", {\n                            ...kesSecurityContext,\n                            runAsUser: e.target.value,\n                          });\n                          cleanValidation(\"kes_securityContext_runAsUser\");\n                        }}\n                        label=\"Run As User\"\n                        value={kesSecurityContext.runAsUser}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_runAsUser\"] ||\n                          \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_runAsGroup\"\n                        name=\"kes_securityContext_runAsGroup\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"kesSecurityContext\", {\n                            ...kesSecurityContext,\n                            runAsGroup: e.target.value,\n                          });\n                          cleanValidation(\"kes_securityContext_runAsGroup\");\n                        }}\n                        label=\"Run As Group\"\n                        value={kesSecurityContext.runAsGroup}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_runAsGroup\"] ||\n                          \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                    <div\n                      className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                    >\n                      <InputBoxWrapper\n                        type=\"number\"\n                        id=\"kes_securityContext_fsGroup\"\n                        name=\"kes_securityContext_fsGroup\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                          updateField(\"kesSecurityContext\", {\n                            ...kesSecurityContext,\n                            fsGroup: e.target.value,\n                          });\n                          cleanValidation(\"kes_securityContext_fsGroup\");\n                        }}\n                        label=\"FsGroup\"\n                        value={kesSecurityContext.fsGroup}\n                        required\n                        error={\n                          validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                        }\n                        min=\"0\"\n                      />\n                    </div>\n                  </div>\n                </Grid>\n                <br />\n                <Grid item xs={12}>\n                  <div className={classes.multiContainer}>\n                    <FormSwitchWrapper\n                      value=\"kesSecurityContextRunAsNonRoot\"\n                      id=\"kes_securityContext_runAsNonRoot\"\n                      name=\"kes_securityContext_runAsNonRoot\"\n                      checked={kesSecurityContext.runAsNonRoot}\n                      onChange={(e) => {\n                        const targetD = e.target;\n                        const checked = targetD.checked;\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsNonRoot: checked,\n                        });\n                      }}\n                      label={\"Do not run as Root\"}\n                    />\n                  </div>\n                </Grid>\n              </fieldset>\n            </Grid>\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(Encryption);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState } from \"../../../../../store\";\n\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { ErrorResponseHandler } from \"../../../../../common/types\";\nimport { LabelKeyPair } from \"../../types\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../common/api\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport TolerationSelector from \"../../../Common/TolerationSelector/TolerationSelector\";\nimport { setModalErrorSnackMessage } from \"../../../../../systemSlice\";\nimport {\n  addNewToleration,\n  isPageValid,\n  removeToleration,\n  setKeyValuePairs,\n  setTolerationInfo,\n  updateAddField,\n} from \"../../tenantsSlice\";\n\ninterface IAffinityProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({ classes }: IAffinityProps) => {\n  const dispatch = useDispatch();\n\n  const podAffinity = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.affinity.podAffinity\n  );\n  const nodeSelectorLabels = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.affinity.nodeSelectorLabels\n  );\n  const withPodAntiAffinity = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.affinity.withPodAntiAffinity\n  );\n  const keyValuePairs = useSelector(\n    (state: AppState) => state.tenants.createTenant.nodeSelectorPairs\n  );\n  const tolerations = useSelector(\n    (state: AppState) => state.tenants.createTenant.tolerations\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({\n          pageName: \"affinity\",\n          field: field,\n          value: value,\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n          setKeyValueMap({});\n        });\n    }\n  }, [dispatch, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"affinity\",\n        valid: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [dispatch, podAffinity, nodeSelectorLabels]);\n\n  const updateToleration = (index: number, field: string, value: any) => {\n    const alterToleration = { ...tolerations[index], [field]: value };\n\n    dispatch(\n      setTolerationInfo({\n        index: index,\n        tolerationValue: alterToleration,\n      })\n    );\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Pod Placement</h3>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n\n                              arrCp[i].key = e.target.value as string;\n                              arrCp[i].value = keyValueMap[newKey][0];\n                              dispatch(setKeyValuePairs(arrCp));\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].key = e.target.value;\n                              dispatch(setKeyValuePairs(arrCp));\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value as string;\n                              dispatch(setKeyValuePairs(arrCp));\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value;\n                              dispatch(setKeyValuePairs(arrCp));\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = Object.assign([], keyValuePairs);\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              dispatch(setKeyValuePairs(arrCp));\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                dispatch(setKeyValuePairs(arrCp));\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <h3>Tolerations</h3>\n          <span className={classes.error}>\n            {validationErrors[\"tolerations\"]}\n          </span>\n          <Grid container>\n            {tolerations &&\n              tolerations.map((tol, i) => {\n                return (\n                  <Grid\n                    item\n                    xs={12}\n                    className={classes.affinityRow}\n                    key={`affinity-keyVal-${i.toString()}`}\n                  >\n                    <TolerationSelector\n                      effect={tol.effect}\n                      onEffectChange={(value) => {\n                        updateToleration(i, \"effect\", value);\n                      }}\n                      tolerationKey={tol.key}\n                      onTolerationKeyChange={(value) => {\n                        updateToleration(i, \"key\", value);\n                      }}\n                      operator={tol.operator}\n                      onOperatorChange={(value) => {\n                        updateToleration(i, \"operator\", value);\n                      }}\n                      value={tol.value}\n                      onValueChange={(value) => {\n                        updateToleration(i, \"value\", value);\n                      }}\n                      tolerationSeconds={tol.tolerationSeconds?.seconds || 0}\n                      onSecondsChange={(value) => {\n                        updateToleration(i, \"tolerationSeconds\", {\n                          seconds: value,\n                        });\n                      }}\n                      index={i}\n                    />\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                          dispatch(addNewToleration());\n                        }}\n                        disabled={i !== tolerations.length - 1}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </div>\n\n                    <div className={classes.overlayAction}>\n                      <IconButton\n                        size={\"small\"}\n                        onClick={() => dispatch(removeToleration(i))}\n                        disabled={tolerations.length <= 1}\n                      >\n                        <RemoveIcon />\n                      </IconButton>\n                    </div>\n                  </Grid>\n                );\n              })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(Affinity);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { isPageValid, updateAddField } from \"../../tenantsSlice\";\n\ninterface IImagesProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Images = ({ classes }: IImagesProps) => {\n  const dispatch = useDispatch();\n\n  const customImage = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.configure.customImage\n  );\n  const imageName = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.configure.imageName\n  );\n  const customDockerhub = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.customDockerhub\n  );\n  const imageRegistry = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.imageRegistry\n  );\n  const imageRegistryUsername = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.imageRegistryUsername\n  );\n  const imageRegistryPassword = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.imageRegistryPassword\n  );\n\n  const prometheusCustom = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusEnabled\n  );\n  const tenantCustom = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.tenantCustom\n  );\n  const logSearchCustom = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchEnabled\n  );\n  const logSearchVolumeSize = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchVolumeSize\n  );\n\n  const prometheusVolumeSize = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusVolumeSize\n  );\n\n  const logSearchSelectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass\n  );\n  const logSearchImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchImage\n  );\n  const kesImage = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.configure.kesImage\n  );\n  const logSearchPostgresImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchPostgresImage\n  );\n  const logSearchPostgresInitImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchPostgresInitImage\n  );\n  const prometheusSelectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass\n  );\n  const prometheusImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusImage\n  );\n  const prometheusSidecarImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusSidecarImage\n  );\n  const prometheusInitImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusInitImage\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"configure\", field: field, value: value })\n      );\n    },\n    [dispatch]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n    if (logSearchCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchImage\",\n          required: false,\n          value: logSearchImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/operator:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresImage\",\n          required: false,\n          value: logSearchPostgresImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/postgres:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresInitImage\",\n          required: false,\n          value: logSearchPostgresInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusImage\",\n          required: false,\n          value: prometheusImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/prometheus:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusSidecarImage\",\n          required: false,\n          value: prometheusSidecarImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'project/container:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusInitImage\",\n          required: false,\n          value: prometheusInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"configure\",\n        valid: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    logSearchImage,\n    kesImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    dispatch,\n    prometheusCustom,\n    tenantCustom,\n    logSearchCustom,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Container Images</h3>\n        <span className={classes.descriptionText}>\n          Specify the container images used by the Tenant and it's features.\n        </span>\n      </div>\n\n      <Fragment>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"image\"\n            name=\"image\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageName\", e.target.value);\n              cleanValidation(\"image\");\n            }}\n            label=\"MinIO\"\n            value={imageName}\n            error={validationErrors[\"image\"] || \"\"}\n            placeholder=\"E.g. minio/minio:RELEASE.2022-02-26T02-54-46Z\"\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"kesImage\"\n            name=\"kesImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"kesImage\", e.target.value);\n              cleanValidation(\"kesImage\");\n            }}\n            label=\"KES\"\n            value={kesImage}\n            error={validationErrors[\"kesImage\"] || \"\"}\n            placeholder=\"E.g. minio/kes:v0.17.6\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Log Search</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchImage\"\n            name=\"logSearchImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchImage\", e.target.value);\n              cleanValidation(\"logSearchImage\");\n            }}\n            label=\"API\"\n            value={logSearchImage}\n            error={validationErrors[\"logSearchImage\"] || \"\"}\n            placeholder=\"E.g. minio/operator:v4.4.10\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresImage\"\n            name=\"logSearchPostgresImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresImage\");\n            }}\n            label=\"PostgreSQL\"\n            value={logSearchPostgresImage}\n            error={validationErrors[\"logSearchPostgresImage\"] || \"\"}\n            placeholder=\"E.g. library/postgres:13\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresInitImage\"\n            name=\"logSearchPostgresInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresInitImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresInitImage\");\n            }}\n            label=\"PostgreSQL Init\"\n            value={logSearchPostgresInitImage}\n            error={validationErrors[\"logSearchPostgresInitImage\"] || \"\"}\n            placeholder=\"E.g. library/busybox:1.33.1\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <h4>Monitoring</h4>\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusImage\"\n            name=\"prometheusImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusImage\", e.target.value);\n              cleanValidation(\"prometheusImage\");\n            }}\n            label=\"Prometheus\"\n            value={prometheusImage}\n            error={validationErrors[\"prometheusImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusSidecarImage\"\n            name=\"prometheusSidecarImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusSidecarImage\", e.target.value);\n              cleanValidation(\"prometheusSidecarImage\");\n            }}\n            label=\"Prometheus Sidecar\"\n            value={prometheusSidecarImage}\n            error={validationErrors[\"prometheusSidecarImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusInitImage\"\n            name=\"prometheusInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusInitImage\", e.target.value);\n              cleanValidation(\"prometheusInitImage\");\n            }}\n            label=\"Prometheus Init\"\n            value={prometheusInitImage}\n            error={validationErrors[\"prometheusInitImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n      </Fragment>\n\n      {customImage && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <h4>Custom Container Registry</h4>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"custom_docker_hub\"\n              id=\"custom_docker_hub\"\n              name=\"custom_docker_hub\"\n              checked={customDockerhub}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"customDockerhub\", checked);\n              }}\n              label={\"Use a private container registry\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {customDockerhub && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registry\"\n              name=\"registry\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistry\", e.target.value);\n              }}\n              label=\"Endpoint\"\n              value={imageRegistry}\n              error={validationErrors[\"registry\"] || \"\"}\n              placeholder=\"E.g. https://index.docker.io/v1/\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryUsername\"\n              name=\"registryUsername\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryUsername\", e.target.value);\n              }}\n              label=\"Username\"\n              value={imageRegistryUsername}\n              error={validationErrors[\"registryUsername\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryPassword\"\n              name=\"registryPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryPassword\", e.target.value);\n              }}\n              label=\"Password\"\n              value={imageRegistryPassword}\n              error={validationErrors[\"registryPassword\"] || \"\"}\n              required\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(Images);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  modalBasic,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\n\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"../../../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../../../systemSlice\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...modalBasic,\n    ...deleteDialogStyles,\n  });\n\ninterface IAddNamespace {\n  classes: any;\n  namespace: string;\n  addNamespaceOpen: boolean;\n  closeAddNamespaceModalAndRefresh: (reloadNamespaceData: boolean) => void;\n}\n\nconst AddNamespaceModal = ({\n  classes,\n  namespace,\n  addNamespaceOpen,\n  closeAddNamespaceModalAndRefresh,\n}: IAddNamespace) => {\n  const dispatch = useDispatch();\n  const [addNamespaceLoading, setAddNamespaceLoading] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    if (addNamespaceLoading) {\n      api\n        .invoke(\"POST\", \"/api/v1/namespace\", {\n          name: namespace,\n        })\n        .then((res) => {\n          setAddNamespaceLoading(false);\n          closeAddNamespaceModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddNamespaceLoading(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n  }, [\n    addNamespaceLoading,\n    closeAddNamespaceModalAndRefresh,\n    namespace,\n    dispatch,\n  ]);\n\n  const addNamespace = () => {\n    setAddNamespaceLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`New namespace`}\n      confirmText={\"Create\"}\n      confirmButtonProps={{\n        color: \"primary\",\n        variant: \"contained\",\n      }}\n      isOpen={addNamespaceOpen}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={addNamespaceLoading}\n      onConfirm={addNamespace}\n      onClose={() => {\n        closeAddNamespaceModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {addNamespaceLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to add a namespace called\n            <br />\n            <b className={classes.wrapText}>{namespace}</b>?\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nexport default withStyles(styles)(AddNamespaceModal);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../store\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { niceBytes } from \"../../../../../common/utils\";\n\nimport { Divider } from \"@mui/material\";\n\ninterface ISizePreviewProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 4,\n    },\n    table: {\n      \"& .MuiTableCell-root\": {\n        fontSize: 13,\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst SizePreview = ({ classes }: ISizePreviewProps) => {\n  const nodes = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.tenantSize.nodes\n  );\n  const memoryNode = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequest\n  );\n  const ecParity = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.tenantSize.ecParity\n  );\n\n  const distribution = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.tenantSize.distribution\n  );\n  const ecParityCalc = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.tenantSize.ecParityCalc\n  );\n\n  const cpuToUse = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.tenantSize.resourcesCPURequest\n  );\n  const integrationSelection = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.tenantSize.integrationSelection\n  );\n\n  const usableInformation = ecParityCalc.storageFactors.find(\n    (element) => element.erasureCode === ecParity\n  );\n\n  return (\n    <div className={classes.root}>\n      <h4>Resource Allocation</h4>\n      <Divider />\n      <Table className={classes.table} aria-label=\"simple table\" size={\"small\"}>\n        <TableBody>\n          <TableRow>\n            <TableCell scope=\"row\">Number of Servers</TableCell>\n            <TableCell align=\"right\">\n              {parseInt(nodes) > 0 ? nodes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? distribution.disks : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drive Capacity</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? niceBytes(distribution.pvSize) : \"-\"}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n\n          <TableRow>\n            <TableCell scope=\"row\">Total Volumes</TableCell>\n            <TableCell align=\"right\">\n              {distribution ? distribution.persistentVolumes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory per Node</TableCell>\n                  <TableCell align=\"right\">{memoryNode} Gi</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    CPU Selection\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {cpuToUse}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n        </TableBody>\n      </Table>\n      {ecParityCalc.error === 0 && usableInformation && (\n        <Fragment>\n          <h4>Erasure Code Configuration</h4>\n          <Divider />\n          <Table\n            className={classes.table}\n            aria-label=\"simple table\"\n            size={\"small\"}\n          >\n            <TableBody>\n              <TableRow>\n                <TableCell scope=\"row\">EC Parity</TableCell>\n                <TableCell align=\"right\">\n                  {ecParity !== \"\" ? ecParity : \"-\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Raw Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(ecParityCalc.rawCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Usable Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(usableInformation.maxCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                  Server Failures Tolerated\n                </TableCell>\n                <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                  {distribution\n                    ? Math.floor(\n                        usableInformation.maxFailureTolerations /\n                          distribution.disks\n                      )\n                    : \"-\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Fragment>\n      )}\n      {integrationSelection.typeSelection !== \"\" &&\n        integrationSelection.storageClass !== \"\" && (\n          <Fragment>\n            <h4>Single Instance Configuration</h4>\n            <Divider />\n            <Table\n              className={classes.table}\n              aria-label=\"simple table\"\n              size={\"small\"}\n            >\n              <TableBody>\n                <TableRow>\n                  <TableCell scope=\"row\">CPU</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.CPU !== 0\n                      ? integrationSelection.CPU\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.memory !== 0\n                      ? `${integrationSelection.memory} Gi`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.drivesPerServer !== 0\n                      ? `${integrationSelection.drivesPerServer}`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    Drive Size\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {integrationSelection.driveSize.driveSize}\n                    {integrationSelection.driveSize.sizeUnit}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Fragment>\n        )}\n    </div>\n  );\n};\n\nexport default withStyles(styles)(SizePreview);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\n\nimport {\n  getLimitSizes,\n  IQuotaElement,\n  IQuotas,\n} from \"../../../ListTenants/utils\";\nimport { AppState } from \"../../../../../../store\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport AddIcon from \"../../../../../../icons/AddIcon\";\nimport AddNamespaceModal from \"../helpers/AddNamespaceModal\";\nimport SizePreview from \"../SizePreview\";\nimport TenantSize from \"./TenantSize\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport { IMkEnvs, mkPanelConfigurations } from \"./utils\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport {\n  isPageValid,\n  setLimitSize,\n  setStorageClassesList,\n  setStorageType,\n  updateAddField,\n} from \"../../../tenantsSlice\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    sizePreview: {\n      position: \"fixed\",\n      marginLeft: 10,\n      background: \"#FFFFFF\",\n      border: \"1px solid #EAEAEA\",\n      padding: 2,\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface INameTenantMainScreen {\n  classes: any;\n  formToRender?: IMkEnvs;\n}\n\nconst NameTenantMain = ({ classes, formToRender }: INameTenantMainScreen) => {\n  const dispatch = useDispatch();\n\n  const tenantName = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.nameTenant.tenantName\n  );\n  const namespace = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.nameTenant.namespace\n  );\n  const selectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.nameTenant.selectedStorageClass\n  );\n  const selectedStorageType = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.nameTenant.selectedStorageType\n  );\n  const storageClasses = useSelector(\n    (state: AppState) => state.tenants.createTenant.storageClasses\n  );\n  const features = useSelector(\n    (state: AppState) => state.console.session.features\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [emptyNamespace, setEmptyNamespace] = useState<boolean>(true);\n  const [loadingNamespaceInfo, setLoadingNamespaceInfo] =\n    useState<boolean>(false);\n  const [showCreateButton, setShowCreateButton] = useState<boolean>(false);\n  const [openAddNSConfirm, setOpenAddNSConfirm] = useState<boolean>(false);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: string) => {\n      dispatch(\n        updateAddField({ pageName: \"nameTenant\", field: field, value: value })\n      );\n    },\n    [dispatch]\n  );\n\n  // Storage classes retrieval\n  const getNamespaceInformation = useCallback(() => {\n    setShowCreateButton(false);\n    // Empty tenantValidation\n    api\n      .invoke(\"GET\", `/api/v1/namespaces/${namespace}/tenants`)\n      .then((res: any[]) => {\n        const tenantsList = get(res, \"tenants\", []);\n\n        if (tenantsList && tenantsList.length > 0) {\n          setEmptyNamespace(false);\n          setLoadingNamespaceInfo(false);\n          return;\n        }\n        setEmptyNamespace(true);\n\n        // Storagequotas retrieval\n        api\n          .invoke(\n            \"GET\",\n            `/api/v1/namespaces/${namespace}/resourcequotas/${namespace}-storagequota`\n          )\n          .then((res: IQuotas) => {\n            const elements: IQuotaElement[] = get(res, \"elements\", []);\n            dispatch(setLimitSize(getLimitSizes(res)));\n\n            const newStorage = elements.map((storageClass: any) => {\n              const name = get(storageClass, \"name\", \"\").split(\n                \".storageclass.storage.k8s.io/requests.storage\"\n              )[0];\n\n              return { label: name, value: name };\n            });\n\n            dispatch(setStorageClassesList(newStorage));\n\n            const stExists = newStorage.findIndex(\n              (storageClass) => storageClass.value === selectedStorageClass\n            );\n\n            if (newStorage.length > 0 && stExists === -1) {\n              updateField(\"selectedStorageClass\", newStorage[0].value);\n            } else if (newStorage.length === 0) {\n              updateField(\"selectedStorageClass\", \"\");\n              dispatch(setStorageClassesList([]));\n            }\n            setLoadingNamespaceInfo(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingNamespaceInfo(false);\n            setShowCreateButton(true);\n            updateField(\"selectedStorageClass\", \"\");\n            dispatch(setStorageClassesList([]));\n            console.error(\"Namespace error: \", err);\n          });\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(\n          setModalErrorSnackMessage({\n            errorMessage: \"Error validating if namespace already has tenants\",\n            detailedError: err.detailedError,\n          })\n        );\n      });\n  }, [namespace, dispatch, updateField, selectedStorageClass]);\n\n  const debounceNamespace = useMemo(\n    () => debounce(getNamespaceInformation, 500),\n    [getNamespaceInformation]\n  );\n\n  useEffect(() => {\n    if (namespace !== \"\") {\n      debounceNamespace();\n      setLoadingNamespaceInfo(true);\n\n      // Cancel previous debounce calls during useEffect cleanup.\n      return debounceNamespace.cancel;\n    }\n  }, [debounceNamespace, namespace]);\n\n  // Validation\n  useEffect(() => {\n    let customNamespaceError = false;\n    let errorMessage = \"\";\n\n    if (!emptyNamespace && !loadingNamespaceInfo) {\n      customNamespaceError = true;\n      errorMessage = \"You can only create one tenant per namespace\";\n    } else if (\n      storageClasses.length < 1 &&\n      emptyNamespace &&\n      !loadingNamespaceInfo\n    ) {\n      customNamespaceError = true;\n      errorMessage = \"Please enter a valid namespace\";\n    }\n\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"tenant-name\",\n        required: true,\n        pattern: /^[a-z0-9-]{3,63}$/,\n        customPatternMessage:\n          \"Name only can contain lowercase letters, numbers and '-'. Min. Length: 3\",\n        value: tenantName,\n      },\n      {\n        fieldKey: \"namespace\",\n        required: true,\n        value: namespace,\n        customValidation: customNamespaceError,\n        customValidationMessage: errorMessage,\n      },\n    ]);\n\n    const isValid =\n      !(\"tenant-name\" in commonValidation) &&\n      !(\"namespace\" in commonValidation) &&\n      ((formToRender === IMkEnvs.default && storageClasses.length > 0) ||\n        (formToRender !== IMkEnvs.default && selectedStorageType !== \"\"));\n\n    dispatch(isPageValid({ pageName: \"nameTenant\", valid: isValid }));\n\n    setValidationErrors(commonValidation);\n  }, [\n    storageClasses,\n    namespace,\n    tenantName,\n    dispatch,\n    emptyNamespace,\n    loadingNamespaceInfo,\n    selectedStorageType,\n    formToRender,\n  ]);\n\n  const frmValidationCleanup = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const addNamespace = () => {\n    setOpenAddNSConfirm(true);\n  };\n\n  const closeAddNamespace = (refresh: boolean) => {\n    setOpenAddNSConfirm(false);\n\n    if (refresh) {\n      debounceNamespace();\n    }\n  };\n\n  return (\n    <Fragment>\n      {openAddNSConfirm && (\n        <AddNamespaceModal\n          addNamespaceOpen={openAddNSConfirm}\n          closeAddNamespaceModalAndRefresh={closeAddNamespace}\n          namespace={namespace}\n        />\n      )}\n      <Grid container>\n        <Grid item xs={8} md={9}>\n          <Paper className={classes.paperWrapper} sx={{ minHeight: 550 }}>\n            <Grid container>\n              <Grid item xs={12}>\n                <div className={classes.headerElement}>\n                  <h3 className={classes.h3Section}>Name</h3>\n                  <span className={classes.descriptionText}>\n                    How would you like to name this new tenant?\n                  </span>\n                </div>\n                <div className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"tenant-name\"\n                    name=\"tenant-name\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantName\", e.target.value);\n                      frmValidationCleanup(\"tenant-name\");\n                    }}\n                    label=\"Name\"\n                    value={tenantName}\n                    required\n                    error={validationErrors[\"tenant-name\"] || \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"namespace\"\n                  name=\"namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"namespace\", e.target.value);\n                    frmValidationCleanup(\"namespace\");\n                  }}\n                  label=\"Namespace\"\n                  value={namespace}\n                  error={validationErrors[\"namespace\"] || \"\"}\n                  overlayId={\"add-namespace\"}\n                  overlayIcon={showCreateButton ? <AddIcon /> : null}\n                  overlayAction={addNamespace}\n                  required\n                />\n              </Grid>\n              {formToRender === IMkEnvs.default ? (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_class\"\n                    name=\"storage_class\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      updateField(\n                        \"selectedStorageClass\",\n                        e.target.value as string\n                      );\n                    }}\n                    label=\"Storage Class\"\n                    value={selectedStorageClass}\n                    options={storageClasses}\n                    disabled={storageClasses.length < 1}\n                  />\n                </Grid>\n              ) : (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_type\"\n                    name=\"storage_type\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      setStorageType({\n                        storageType: e.target.value as string,\n                        features: features,\n                      });\n                    }}\n                    label={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorLabel`,\n                      \"Storage Type\"\n                    )}\n                    value={selectedStorageType}\n                    options={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorValues`,\n                      []\n                    )}\n                  />\n                </Grid>\n              )}\n              {formToRender === IMkEnvs.default ? (\n                <TenantSize />\n              ) : (\n                get(\n                  mkPanelConfigurations,\n                  `${formToRender}.sizingComponent`,\n                  null\n                )\n              )}\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={4} md={3}>\n          <div className={classes.sizePreview}>\n            <SizePreview />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(NameTenantMain);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport NameTenantMain from \"./NameTenantMain\";\nimport { IMkEnvs, resourcesConfigurations } from \"./utils\";\nimport { AppState } from \"../../../../../../store\";\n\ninterface ITenantResources {\n  features?: string[];\n}\n\nconst TenantResources = ({ features }: ITenantResources) => {\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  if (formRender === null) {\n    return null;\n  }\n\n  return <NameTenantMain formToRender={formRender} />;\n};\n\nconst mapState = (state: AppState) => ({\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, null);\n\nexport default connector(TenantResources);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport SectionH1 from \"../../../Common/SectionH1\";\nimport { isPageValid, updateAddField } from \"../../tenantsSlice\";\n\ninterface IConfigureProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    logSearchEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigLogSearch = ({ classes }: IConfigureProps) => {\n  const dispatch = useDispatch();\n\n  const storageClasses = useSelector(\n    (state: AppState) => state.tenants.createTenant.storageClasses\n  );\n  const logSearchEnabled = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchEnabled\n  );\n  const logSearchVolumeSize = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchVolumeSize\n  );\n  const logSearchSelectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass\n  );\n  const logSearchImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchImage\n  );\n  const logSearchPostgresImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchPostgresImage\n  );\n  const logSearchPostgresInitImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchPostgresInitImage\n  );\n  const selectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.nameTenant.selectedStorageClass\n  );\n  const tenantSecurityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.tenantSecurityContext\n  );\n  const logSearchSecurityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.logSearchSecurityContext\n  );\n  const logSearchPostgresSecurityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure\n        .logSearchPostgresSecurityContext\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"configure\", field: field, value: value })\n      );\n    },\n    [dispatch]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (logSearchEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsUser\",\n          required: true,\n          value: logSearchSecurityContext.runAsUser,\n          customValidation:\n            logSearchSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_fsGroup\",\n          required: true,\n          value: logSearchSecurityContext.fsGroup,\n          customValidation:\n            logSearchSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsUser\",\n          required: true,\n          value: logSearchPostgresSecurityContext.runAsUser,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_fsGroup\",\n          required: true,\n          value: logSearchPostgresSecurityContext.fsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"configure\",\n        valid: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    logSearchImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    dispatch,\n    logSearchEnabled,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n    tenantSecurityContext,\n    logSearchSecurityContext,\n    logSearchPostgresSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterLogSearch = storageClasses.filter(\n        (item: any) => item.value === logSearchSelectedStorageClass\n      );\n      if (filterLogSearch.length === 0) {\n        updateField(\"logSearchSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    logSearchSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <SectionH1>Audit Log</SectionH1>\n        </Grid>\n        <Grid item xs={4}>\n          <FormSwitchWrapper\n            value=\"enableLogging\"\n            id=\"enableLogging\"\n            name=\"enableLogging\"\n            checked={logSearchEnabled}\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"logSearchEnabled\", checked);\n            }}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <span className={classes.descriptionText}>\n            Deploys a small PostgreSQL database and stores access logs of all\n            calls into the tenant.\n          </span>\n        </Grid>\n        <Grid xs={12}>\n          <hr className={classes.hrClass} />\n        </Grid>\n        {logSearchEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <SelectWrapper\n                id=\"log_search_storage_class\"\n                name=\"log_search_storage_class\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  updateField(\n                    \"logSearchSelectedStorageClass\",\n                    e.target.value as string\n                  );\n                }}\n                label=\"Log Search Storage Class\"\n                value={logSearchSelectedStorageClass}\n                options={configureSTClasses}\n                disabled={configureSTClasses.length < 1}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <InputBoxWrapper\n                  type=\"number\"\n                  id=\"log_search_volume_size\"\n                  name=\"log_search_volume_size\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"logSearchVolumeSize\", e.target.value);\n                    cleanValidation(\"log_search_volume_size\");\n                  }}\n                  label=\"Storage Size\"\n                  overlayObject={\n                    <InputUnitMenu\n                      id={\"size-unit\"}\n                      onUnitChange={() => {}}\n                      unitSelected={\"Gi\"}\n                      unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                      disabled={true}\n                    />\n                  }\n                  value={logSearchVolumeSize}\n                  required\n                  error={validationErrors[\"log_search_volume_size\"] || \"\"}\n                  min=\"0\"\n                />\n              </div>\n            </Grid>\n\n            <fieldset\n              className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n            >\n              <legend className={classes.descriptionText}>\n                SecurityContext for LogSearch\n              </legend>\n\n              <Grid item xs={12}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n                >\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"logSearch_securityContext_runAsUser\"\n                      name=\"logSearch_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchSecurityContext\", {\n                          ...logSearchSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"logSearch_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={logSearchSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\n                          \"logSearch_securityContext_runAsUser\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"logSearch_securityContext_runAsGroup\"\n                      name=\"logSearch_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchSecurityContext\", {\n                          ...logSearchSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"logSearch_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={logSearchSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"logSearch_securityContext_runAsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"logSearch_securityContext_fsGroup\"\n                      name=\"logSearch_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchSecurityContext\", {\n                          ...logSearchSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"logSearch_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={logSearchSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"logSearch_securityContext_fsGroup\"] ||\n                        \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"logSearchSecurityContextRunAsNonRoot\"\n                    id=\"logSearch_securityContext_runAsNonRoot\"\n                    name=\"logSearch_securityContext_runAsNonRoot\"\n                    checked={logSearchSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n            <fieldset className={classes.fieldGroup}>\n              <legend className={classes.descriptionText}>\n                SecurityContext for PostgreSQL\n              </legend>\n\n              <Grid item xs={12}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n                >\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"postgres_securityContext_runAsUser\"\n                      name=\"postgres_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchPostgresSecurityContext\", {\n                          ...logSearchPostgresSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"postgres_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={logSearchPostgresSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\n                          \"postgres_securityContext_runAsUser\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"postgres_securityContext_runAsGroup\"\n                      name=\"postgres_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchPostgresSecurityContext\", {\n                          ...logSearchPostgresSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"postgres_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={logSearchPostgresSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"postgres_securityContext_runAsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"postgres_securityContext_fsGroup\"\n                      name=\"postgres_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"logSearchPostgresSecurityContext\", {\n                          ...logSearchPostgresSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"postgres_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={logSearchPostgresSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"postgres_securityContext_fsGroup\"] ||\n                        \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"postgresSecurityContextRunAsNonRoot\"\n                    id=\"postgres_securityContext_runAsNonRoot\"\n                    name=\"postgres_securityContext_runAsNonRoot\"\n                    checked={logSearchPostgresSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(ConfigLogSearch);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\n\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport InputUnitMenu from \"../../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport SectionH1 from \"../../../Common/SectionH1\";\nimport { isPageValid, updateAddField } from \"../../tenantsSlice\";\n\ninterface IConfigureProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    prometheusEnabledFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst ConfigPrometheus = ({ classes }: IConfigureProps) => {\n  const dispatch = useDispatch();\n\n  const storageClasses = useSelector(\n    (state: AppState) => state.tenants.createTenant.storageClasses\n  );\n  const prometheusEnabled = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusEnabled\n  );\n  const prometheusVolumeSize = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusVolumeSize\n  );\n  const prometheusSelectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass\n  );\n  const prometheusImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusImage\n  );\n  const prometheusSidecarImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusSidecarImage\n  );\n  const prometheusInitImage = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusInitImage\n  );\n  const selectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.nameTenant.selectedStorageClass\n  );\n  const tenantSecurityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.tenantSecurityContext\n  );\n  const prometheusSecurityContext = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.configure.prometheusSecurityContext\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      dispatch(\n        updateAddField({ pageName: \"configure\", field: field, value: value })\n      );\n    },\n    [dispatch]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusEnabled) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greater than 0`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsUser\",\n          required: true,\n          value: prometheusSecurityContext.runAsUser,\n          customValidation:\n            prometheusSecurityContext.runAsUser === \"\" ||\n            parseInt(prometheusSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsGroup\",\n          required: true,\n          value: prometheusSecurityContext.runAsGroup,\n          customValidation:\n            prometheusSecurityContext.runAsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_fsGroup\",\n          required: true,\n          value: prometheusSecurityContext.fsGroup,\n          customValidation:\n            prometheusSecurityContext.fsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    dispatch(\n      isPageValid({\n        pageName: \"configure\",\n        valid: Object.keys(commonVal).length === 0,\n      })\n    );\n\n    setValidationErrors(commonVal);\n  }, [\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    dispatch,\n    prometheusEnabled,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    tenantSecurityContext,\n    prometheusSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterPrometheus = storageClasses.filter(\n        (item: any) => item.value === prometheusSelectedStorageClass\n      );\n      if (filterPrometheus.length === 0) {\n        updateField(\"prometheusSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    prometheusSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <SectionH1>Monitoring</SectionH1>\n        </Grid>\n        <Grid item xs={4}>\n          <FormSwitchWrapper\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={prometheusEnabled}\n            value={\"monitoring_status\"}\n            id=\"monitoring-status\"\n            name=\"monitoring-status\"\n            onChange={(e) => {\n              const targetD = e.target;\n              const checked = targetD.checked;\n\n              updateField(\"prometheusEnabled\", checked);\n            }}\n            description=\"\"\n          />\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <span className={classes.descriptionText}>\n          A small Prometheus will be deployed to keep metrics about the tenant.\n        </span>\n      </Grid>\n      <Grid xs={12}>\n        <hr className={classes.hrClass} />\n      </Grid>\n      <Grid container spacing={1}>\n        {prometheusEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <SelectWrapper\n                id=\"prometheus_storage_class\"\n                name=\"prometheus_storage_class\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  updateField(\n                    \"prometheusSelectedStorageClass\",\n                    e.target.value as string\n                  );\n                }}\n                label=\"Storage Class\"\n                value={prometheusSelectedStorageClass}\n                options={configureSTClasses}\n                disabled={configureSTClasses.length < 1}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <InputBoxWrapper\n                  type=\"number\"\n                  id=\"prometheus_volume_size\"\n                  name=\"prometheus_volume_size\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"prometheusVolumeSize\", e.target.value);\n                    cleanValidation(\"prometheus_volume_size\");\n                  }}\n                  label=\"Storage Size\"\n                  overlayObject={\n                    <InputUnitMenu\n                      id={\"size-unit\"}\n                      onUnitChange={() => {}}\n                      unitSelected={\"Gi\"}\n                      unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                      disabled={true}\n                    />\n                  }\n                  value={prometheusVolumeSize}\n                  required\n                  error={validationErrors[\"prometheus_volume_size\"] || \"\"}\n                  min=\"0\"\n                />\n              </div>\n            </Grid>\n            <fieldset\n              className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n            >\n              <legend className={classes.descriptionText}>\n                SecurityContext\n              </legend>\n              <Grid item xs={12} className={classes.configSectionItem}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n                >\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"prometheus_securityContext_runAsUser\"\n                      name=\"prometheus_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"prometheusSecurityContext\", {\n                          ...prometheusSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"prometheus_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={prometheusSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\n                          \"prometheus_securityContext_runAsUser\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"prometheus_securityContext_runAsGroup\"\n                      name=\"prometheus_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"prometheusSecurityContext\", {\n                          ...prometheusSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\n                          \"prometheus_securityContext_runAsGroup\"\n                        );\n                      }}\n                      label=\"Run As Group\"\n                      value={prometheusSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"prometheus_securityContext_runAsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div className={classes.configSectionItem}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"prometheus_securityContext_fsGroup\"\n                      name=\"prometheus_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"prometheusSecurityContext\", {\n                          ...prometheusSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"prometheus_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={prometheusSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\n                          \"prometheus_securityContext_fsGroup\"\n                        ] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.configSectionItem}>\n                <div\n                  className={`${classes.multiContainer} ${classes.fieldSpaceTop}`}\n                >\n                  <FormSwitchWrapper\n                    value=\"prometheusSecurityContextRunAsNonRoot\"\n                    id=\"prometheus_securityContext_runAsNonRoot\"\n                    name=\"prometheus_securityContext_runAsNonRoot\"\n                    checked={prometheusSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Fragment>\n        )}\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default withStyles(styles)(ConfigPrometheus);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress } from \"@mui/material\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalBasic,\n  settingsCommon,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport api from \"../../../../common/api\";\nimport { generatePoolName, getBytes } from \"../../../../common/utils\";\nimport GenericWizard from \"../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../Common/GenericWizard/types\";\nimport { NewServiceAccount } from \"../../Common/CredentialsPrompt/types\";\nimport { ErrorResponseHandler, ITenantCreator } from \"../../../../common/types\";\nimport { KeyPair } from \"../ListTenants/utils\";\n\nimport { getDefaultAffinity, getNodeSelector } from \"../TenantDetails/utils\";\nimport CredentialsPrompt from \"../../Common/CredentialsPrompt/CredentialsPrompt\";\nimport { AppState } from \"../../../../store\";\nimport Configure from \"./Steps/Configure\";\nimport IdentityProvider from \"./Steps/IdentityProvider\";\nimport Security from \"./Steps/Security\";\nimport Encryption from \"./Steps/Encryption\";\nimport Affinity from \"./Steps/Affinity\";\nimport PageHeader from \"../../Common/PageHeader/PageHeader\";\nimport history from \"../../../../history\";\nimport Images from \"./Steps/Images\";\nimport PageLayout from \"../../Common/Layout/PageLayout\";\nimport BackLink from \"../../../../common/BackLink\";\nimport TenantResources from \"./Steps/TenantResources/TenantResources\";\nimport ConfigLogSearch from \"./Steps/ConfigLogSearch\";\nimport ConfigPrometheus from \"./Steps/ConfigPrometheus\";\nimport {\n  IMkEnvs,\n  resourcesConfigurations,\n} from \"./Steps/TenantResources/utils\";\nimport HelpBox from \"../../../../common/HelpBox\";\nimport { StorageIcon } from \"../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { resetAddTenantForm } from \"../tenantsSlice\";\n\ninterface IAddTenantProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n    ...settingsCommon,\n  });\n\nconst AddTenant = ({ classes }: IAddTenantProps) => {\n  const dispatch = useDispatch();\n\n  const namespace = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields.nameTenant.namespace\n  );\n  const validPages = useSelector(\n    (state: AppState) => state.tenants.createTenant.validPages\n  );\n  const fields = useSelector(\n    (state: AppState) => state.tenants.createTenant.fields\n  );\n  const certificates = useSelector(\n    (state: AppState) => state.tenants.createTenant.certificates\n  );\n  const selectedStorageClass = useSelector(\n    (state: AppState) =>\n      state.tenants.createTenant.fields.nameTenant.selectedStorageClass\n  );\n  const features = useSelector(\n    (state: AppState) => state.console.session.features\n  );\n  const tolerations = useSelector(\n    (state: AppState) => state.tenants.createTenant.tolerations\n  );\n\n  // Modals\n  const [showNewCredentials, setShowNewCredentials] = useState<boolean>(false);\n  const [createdAccount, setCreatedAccount] =\n    useState<NewServiceAccount | null>(null);\n\n  // Fields\n  const [addSending, setAddSending] = useState<boolean>(false);\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  /* Send Information to backend */\n  useEffect(() => {\n    const tenantName = fields.nameTenant.tenantName;\n    const selectedStorageClass = fields.nameTenant.selectedStorageClass;\n    const imageName = fields.configure.imageName;\n    const customDockerhub = fields.configure.customDockerhub;\n    const imageRegistry = fields.configure.imageRegistry;\n    const imageRegistryUsername = fields.configure.imageRegistryUsername;\n    const imageRegistryPassword = fields.configure.imageRegistryPassword;\n    const exposeMinIO = fields.configure.exposeMinIO;\n    const exposeConsole = fields.configure.exposeConsole;\n    const idpSelection = fields.identityProvider.idpSelection;\n    const openIDConfigurationURL =\n      fields.identityProvider.openIDConfigurationURL;\n    const openIDClientID = fields.identityProvider.openIDClientID;\n    const openIDClaimName = fields.identityProvider.openIDClaimName;\n    const openIDCallbackURL = fields.identityProvider.openIDCallbackURL;\n    const openIDScopes = fields.identityProvider.openIDScopes;\n    const openIDSecretID = fields.identityProvider.openIDSecretID;\n    const ADURL = fields.identityProvider.ADURL;\n    const ADSkipTLS = fields.identityProvider.ADSkipTLS;\n    const ADServerInsecure = fields.identityProvider.ADServerInsecure;\n    const ADGroupSearchBaseDN = fields.identityProvider.ADGroupSearchBaseDN;\n    const ADGroupSearchFilter = fields.identityProvider.ADGroupSearchFilter;\n    const ADUserDNs = fields.identityProvider.ADUserDNs;\n    const ADLookupBindDN = fields.identityProvider.ADLookupBindDN;\n    const ADLookupBindPassword = fields.identityProvider.ADLookupBindPassword;\n    const ADUserDNSearchBaseDN = fields.identityProvider.ADUserDNSearchBaseDN;\n    const ADUserDNSearchFilter = fields.identityProvider.ADUserDNSearchFilter;\n    const ADServerStartTLS = fields.identityProvider.ADServerStartTLS;\n    const accessKeys = fields.identityProvider.accessKeys;\n    const secretKeys = fields.identityProvider.secretKeys;\n    const minioCertificates = certificates.minioCertificates;\n    const caCertificates = certificates.caCertificates;\n    const consoleCaCertificates = certificates.consoleCaCertificates;\n    const consoleCertificate = certificates.consoleCertificate;\n    const serverCertificate = certificates.serverCertificate;\n    const clientCertificate = certificates.clientCertificate;\n    const vaultCertificate = certificates.vaultCertificate;\n    const vaultCA = certificates.vaultCA;\n    const gemaltoCA = certificates.gemaltoCA;\n    const enableEncryption = fields.encryption.enableEncryption;\n    const encryptionType = fields.encryption.encryptionType;\n    const gemaltoEndpoint = fields.encryption.gemaltoEndpoint;\n    const gemaltoToken = fields.encryption.gemaltoToken;\n    const gemaltoDomain = fields.encryption.gemaltoDomain;\n    const gemaltoRetry = fields.encryption.gemaltoRetry;\n    const awsEndpoint = fields.encryption.awsEndpoint;\n    const awsRegion = fields.encryption.awsRegion;\n    const awsKMSKey = fields.encryption.awsKMSKey;\n    const awsAccessKey = fields.encryption.awsAccessKey;\n    const awsSecretKey = fields.encryption.awsSecretKey;\n    const awsToken = fields.encryption.awsToken;\n    const vaultEndpoint = fields.encryption.vaultEndpoint;\n    const vaultEngine = fields.encryption.vaultEngine;\n    const vaultNamespace = fields.encryption.vaultNamespace;\n    const vaultPrefix = fields.encryption.vaultPrefix;\n    const vaultAppRoleEngine = fields.encryption.vaultAppRoleEngine;\n    const vaultId = fields.encryption.vaultId;\n    const vaultSecret = fields.encryption.vaultSecret;\n    const vaultRetry = fields.encryption.vaultRetry;\n    const vaultPing = fields.encryption.vaultPing;\n    const azureEndpoint = fields.encryption.azureEndpoint;\n    const azureTenantID = fields.encryption.azureTenantID;\n    const azureClientID = fields.encryption.azureClientID;\n    const azureClientSecret = fields.encryption.azureClientSecret;\n    const gcpProjectID = fields.encryption.gcpProjectID;\n    const gcpEndpoint = fields.encryption.gcpEndpoint;\n    const gcpClientEmail = fields.encryption.gcpClientEmail;\n    const gcpClientID = fields.encryption.gcpClientID;\n    const gcpPrivateKeyID = fields.encryption.gcpPrivateKeyID;\n    const gcpPrivateKey = fields.encryption.gcpPrivateKey;\n    const enableAutoCert = fields.security.enableAutoCert;\n    const enableTLS = fields.security.enableTLS;\n    const ecParity = fields.tenantSize.ecParity;\n    const distribution = fields.tenantSize.distribution;\n    const tenantCustom = fields.configure.tenantCustom;\n    const logSearchEnabled = fields.configure.logSearchEnabled;\n    const prometheusEnabled = fields.configure.prometheusEnabled;\n    const logSearchVolumeSize = fields.configure.logSearchVolumeSize;\n    const logSearchSelectedStorageClass =\n      fields.configure.logSearchSelectedStorageClass;\n    const logSearchImage = fields.configure.logSearchImage;\n    const kesImage = fields.configure.kesImage;\n    const logSearchPostgresImage = fields.configure.logSearchPostgresImage;\n    const logSearchPostgresInitImage =\n      fields.configure.logSearchPostgresInitImage;\n    const prometheusImage = fields.configure.prometheusImage;\n    const prometheusSidecarImage = fields.configure.prometheusSidecarImage;\n    const prometheusInitImage = fields.configure.prometheusInitImage;\n    const prometheusSelectedStorageClass =\n      fields.configure.prometheusSelectedStorageClass;\n    const prometheusVolumeSize = fields.configure.prometheusVolumeSize;\n    const affinityType = fields.affinity.podAffinity;\n    const nodeSelectorLabels = fields.affinity.nodeSelectorLabels;\n    const withPodAntiAffinity = fields.affinity.withPodAntiAffinity;\n\n    const tenantSecurityContext = fields.configure.tenantSecurityContext;\n    const logSearchSecurityContext = fields.configure.logSearchSecurityContext;\n    const logSearchPostgresSecurityContext =\n      fields.configure.logSearchPostgresSecurityContext;\n    const prometheusSecurityContext =\n      fields.configure.prometheusSecurityContext;\n    const kesSecurityContext = fields.encryption.kesSecurityContext;\n    const kesReplicas = fields.encryption.replicas;\n    const setDomains = fields.configure.setDomains;\n    const minioDomains = fields.configure.minioDomains;\n    const consoleDomain = fields.configure.consoleDomain;\n\n    if (addSending) {\n      const tolerationValues = tolerations.filter(\n        (toleration) => toleration.key.trim() !== \"\"\n      );\n\n      const poolName = generatePoolName([]);\n\n      let affinityObject = {};\n\n      switch (affinityType) {\n        case \"default\":\n          affinityObject = {\n            affinity: getDefaultAffinity(tenantName, poolName),\n          };\n          break;\n        case \"nodeSelector\":\n          affinityObject = {\n            affinity: getNodeSelector(\n              nodeSelectorLabels,\n              withPodAntiAffinity,\n              tenantName,\n              poolName\n            ),\n          };\n          break;\n      }\n\n      const erasureCode = ecParity.split(\":\")[1];\n\n      let dataSend: ITenantCreator = {\n        name: tenantName,\n        namespace: namespace,\n        access_key: \"\",\n        secret_key: \"\",\n        access_keys: [],\n        secret_keys: [],\n        enable_tls: enableTLS && enableAutoCert,\n        enable_console: true,\n        enable_prometheus: true,\n        service_name: \"\",\n        image: imageName,\n        expose_minio: exposeMinIO,\n        expose_console: exposeConsole,\n        pools: [\n          {\n            name: poolName,\n            servers: distribution.nodes,\n            volumes_per_server: distribution.disks,\n            volume_configuration: {\n              size: distribution.pvSize,\n              storage_class_name: selectedStorageClass,\n            },\n            securityContext: tenantCustom ? tenantSecurityContext : null,\n            ...affinityObject,\n            tolerations: tolerationValues,\n          },\n        ],\n        erasureCodingParity: parseInt(erasureCode, 10),\n      };\n\n      // Set Resources\n      if (\n        fields.tenantSize.resourcesCPURequest !== \"\" ||\n        fields.tenantSize.resourcesCPULimit !== \"\" ||\n        fields.tenantSize.resourcesMemoryRequest !== \"\" ||\n        fields.tenantSize.resourcesMemoryLimit !== \"\"\n      ) {\n        dataSend.pools[0].resources = {};\n        // requests\n        if (\n          fields.tenantSize.resourcesCPURequest !== \"\" ||\n          fields.tenantSize.resourcesMemoryRequest !== \"\"\n        ) {\n          dataSend.pools[0].resources.requests = {};\n          if (fields.tenantSize.resourcesCPURequest !== \"\") {\n            dataSend.pools[0].resources.requests.cpu = parseInt(\n              fields.tenantSize.resourcesCPURequest\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryRequest !== \"\") {\n            dataSend.pools[0].resources.requests.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryRequest, \"Gi\", true)\n            );\n          }\n        }\n        // limits\n        if (\n          fields.tenantSize.resourcesCPULimit !== \"\" ||\n          fields.tenantSize.resourcesMemoryLimit !== \"\"\n        ) {\n          dataSend.pools[0].resources.limits = {};\n          if (fields.tenantSize.resourcesCPULimit !== \"\") {\n            dataSend.pools[0].resources.limits.cpu = parseInt(\n              fields.tenantSize.resourcesCPULimit\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryLimit !== \"\") {\n            dataSend.pools[0].resources.limits.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryLimit, \"Gi\", true)\n            );\n          }\n        }\n      }\n      if (customDockerhub) {\n        dataSend = {\n          ...dataSend,\n          image_registry: {\n            registry: imageRegistry,\n            username: imageRegistryUsername,\n            password: imageRegistryPassword,\n          },\n        };\n      }\n\n      if (logSearchEnabled) {\n        dataSend = {\n          ...dataSend,\n          logSearchConfiguration: {\n            storageClass:\n              logSearchSelectedStorageClass === \"default\"\n                ? \"\"\n                : logSearchSelectedStorageClass,\n            storageSize: parseInt(logSearchVolumeSize),\n            image: logSearchImage,\n            postgres_image: logSearchPostgresImage,\n            postgres_init_image: logSearchPostgresInitImage,\n            securityContext: logSearchSecurityContext,\n            postgres_securityContext: logSearchPostgresSecurityContext,\n          },\n        };\n      }\n\n      if (prometheusEnabled) {\n        dataSend = {\n          ...dataSend,\n          prometheusConfiguration: {\n            storageClass:\n              prometheusSelectedStorageClass === \"default\"\n                ? \"\"\n                : prometheusSelectedStorageClass,\n            storageSize: parseInt(prometheusVolumeSize),\n            image: prometheusImage,\n            sidecar_image: prometheusSidecarImage,\n            init_image: prometheusInitImage,\n            securityContext: prometheusSecurityContext,\n          },\n        };\n      }\n\n      let tenantCerts: any = null;\n      let consoleCerts: any = null;\n      let caCerts: any = null;\n      let consoleCaCerts: any = null;\n\n      if (caCertificates.length > 0) {\n        caCerts = {\n          ca_certificates: caCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (consoleCaCertificates.length > 0) {\n        consoleCaCerts = {\n          console_ca_certificates: consoleCaCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (enableTLS && minioCertificates.length > 0) {\n        tenantCerts = {\n          minio: minioCertificates\n            .map((keyPair: KeyPair) => ({\n              crt: keyPair.encoded_cert,\n              key: keyPair.encoded_key,\n            }))\n            .filter((keyPair) => keyPair.crt && keyPair.key),\n        };\n      }\n\n      if (\n        enableTLS &&\n        consoleCertificate.encoded_cert !== \"\" &&\n        consoleCertificate.encoded_key !== \"\"\n      ) {\n        consoleCerts = {\n          console: {\n            crt: consoleCertificate.encoded_cert,\n            key: consoleCertificate.encoded_key,\n          },\n        };\n      }\n\n      if (tenantCerts || consoleCerts || caCerts || consoleCaCerts) {\n        dataSend = {\n          ...dataSend,\n          tls: {\n            ...tenantCerts,\n            ...consoleCerts,\n            ...caCerts,\n            ...consoleCaCerts,\n          },\n        };\n      }\n\n      if (enableEncryption) {\n        let insertEncrypt = {};\n\n        switch (encryptionType) {\n          case \"gemalto\":\n            let gemaltoCAIntroduce = {};\n\n            if (gemaltoCA.encoded_cert !== \"\") {\n              gemaltoCAIntroduce = {\n                ca: gemaltoCA.encoded_cert,\n              };\n            }\n            insertEncrypt = {\n              gemalto: {\n                keysecure: {\n                  endpoint: gemaltoEndpoint,\n                  credentials: {\n                    token: gemaltoToken,\n                    domain: gemaltoDomain,\n                    retry: parseInt(gemaltoRetry),\n                  },\n                  tls: {\n                    ...gemaltoCAIntroduce,\n                  },\n                },\n              },\n            };\n            break;\n          case \"aws\":\n            insertEncrypt = {\n              aws: {\n                secretsmanager: {\n                  endpoint: awsEndpoint,\n                  region: awsRegion,\n                  kmskey: awsKMSKey,\n                  credentials: {\n                    accesskey: awsAccessKey,\n                    secretkey: awsSecretKey,\n                    token: awsToken,\n                  },\n                },\n              },\n            };\n            break;\n          case \"azure\":\n            insertEncrypt = {\n              azure: {\n                keyvault: {\n                  endpoint: azureEndpoint,\n                  credentials: {\n                    tenant_id: azureTenantID,\n                    client_id: azureClientID,\n                    client_secret: azureClientSecret,\n                  },\n                },\n              },\n            };\n            break;\n          case \"gcp\":\n            insertEncrypt = {\n              gcp: {\n                secretmanager: {\n                  project_id: gcpProjectID,\n                  endpoint: gcpEndpoint,\n                  credentials: {\n                    client_email: gcpClientEmail,\n                    client_id: gcpClientID,\n                    private_key_id: gcpPrivateKeyID,\n                    private_key: gcpPrivateKey,\n                  },\n                },\n              },\n            };\n            break;\n          case \"vault\":\n            let vaultKeyPair = null;\n            let vaultCAInsert = null;\n            if (\n              vaultCertificate.encoded_key !== \"\" &&\n              vaultCertificate.encoded_cert !== \"\"\n            ) {\n              vaultKeyPair = {\n                key: vaultCertificate.encoded_key,\n                crt: vaultCertificate.encoded_cert,\n              };\n            }\n            if (vaultCA.encoded_cert !== \"\") {\n              vaultCAInsert = {\n                ca: vaultCA.encoded_cert,\n              };\n            }\n            let vaultTLS = null;\n            if (vaultKeyPair || vaultCAInsert) {\n              vaultTLS = {\n                tls: {\n                  ...vaultKeyPair,\n                  ...vaultCAInsert,\n                },\n              };\n            }\n            insertEncrypt = {\n              vault: {\n                endpoint: vaultEndpoint,\n                engine: vaultEngine,\n                namespace: vaultNamespace,\n                prefix: vaultPrefix,\n                approle: {\n                  engine: vaultAppRoleEngine,\n                  id: vaultId,\n                  secret: vaultSecret,\n                  retry: parseInt(vaultRetry),\n                },\n                ...vaultTLS,\n                status: {\n                  ping: parseInt(vaultPing),\n                },\n              },\n            };\n            break;\n        }\n\n        let encryptionServerKeyPair: any = {};\n        let encryptionClientKeyPair: any = {};\n\n        if (\n          clientCertificate.encoded_key !== \"\" &&\n          clientCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionClientKeyPair = {\n            client: {\n              key: clientCertificate.encoded_key,\n              crt: clientCertificate.encoded_cert,\n            },\n          };\n        }\n\n        if (\n          serverCertificate.encoded_key !== \"\" &&\n          serverCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionServerKeyPair = {\n            server: {\n              key: serverCertificate.encoded_key,\n              crt: serverCertificate.encoded_cert,\n            },\n          };\n        }\n\n        dataSend = {\n          ...dataSend,\n          encryption: {\n            replicas: kesReplicas,\n            securityContext: kesSecurityContext,\n            image: kesImage,\n            ...encryptionClientKeyPair,\n            ...encryptionServerKeyPair,\n            ...insertEncrypt,\n          },\n        };\n      }\n\n      let dataIDP: any = {};\n      switch (idpSelection) {\n        case \"Built-in\":\n          let keyarray = [];\n          for (let i = 0; i < accessKeys.length; i++) {\n            keyarray.push({\n              access_key: accessKeys[i],\n              secret_key: secretKeys[i],\n            });\n          }\n          dataIDP = {\n            keys: keyarray,\n          };\n          break;\n        case \"OpenID\":\n          dataIDP = {\n            oidc: {\n              configuration_url: openIDConfigurationURL,\n              client_id: openIDClientID,\n              secret_id: openIDSecretID,\n              claim_name: openIDClaimName,\n              callback_url: openIDCallbackURL,\n              scopes: openIDScopes,\n            },\n          };\n          break;\n        case \"AD\":\n          dataIDP = {\n            active_directory: {\n              url: ADURL,\n              skip_tls_verification: ADSkipTLS,\n              server_insecure: ADServerInsecure,\n              group_search_base_dn: ADGroupSearchBaseDN,\n              group_search_filter: ADGroupSearchFilter,\n              user_dns: ADUserDNs,\n              lookup_bind_dn: ADLookupBindDN,\n              lookup_bind_password: ADLookupBindPassword,\n              user_dn_search_base_dn: ADUserDNSearchBaseDN,\n              user_dn_search_filter: ADUserDNSearchFilter,\n              server_start_tls: ADServerStartTLS,\n            },\n          };\n          break;\n      }\n\n      let domains: any = {};\n      let sendDomain: any = {};\n\n      if (setDomains) {\n        if (consoleDomain !== \"\") {\n          domains.console = consoleDomain;\n        }\n\n        const filteredDomains = minioDomains.filter((dom) => dom.trim() !== \"\");\n\n        if (filteredDomains.length > 0) {\n          domains.minio = filteredDomains;\n        }\n\n        if (Object.keys(domains).length > 0) {\n          sendDomain.domains = domains;\n        }\n      }\n\n      dataSend = {\n        ...dataSend,\n        ...sendDomain,\n        idp: { ...dataIDP },\n      };\n      api\n        .invoke(\"POST\", `/api/v1/tenants`, dataSend)\n        .then((res) => {\n          const consoleSAList = get(res, \"console\", []);\n\n          let newSrvAcc: NewServiceAccount = {\n            idp: get(res, \"externalIDP\", false),\n            console: [],\n          };\n\n          if (consoleSAList) {\n            if (Array.isArray(consoleSAList)) {\n              const consoleItem = consoleSAList.map((consoleKey) => {\n                return {\n                  accessKey: consoleKey.access_key,\n                  secretKey: consoleKey.secret_key,\n                  api: \"s3v4\",\n                  path: \"auto\",\n                  url: consoleKey.url,\n                };\n              });\n\n              newSrvAcc.console = consoleItem;\n            } else {\n              newSrvAcc = {\n                console: {\n                  accessKey: res.console.access_key,\n                  secretKey: res.console.secret_key,\n                  url: res.console.url,\n                },\n              };\n            }\n          }\n          setAddSending(false);\n          setShowNewCredentials(true);\n          setCreatedAccount(newSrvAcc);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addSending]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      dispatch(resetAddTenantForm());\n      history.push(\"/tenants\");\n    },\n  };\n  const requiredPages = [\n    \"nameTenant\",\n    \"tenantSize\",\n    \"configure\",\n    \"affinity\",\n    \"identityProvider\",\n    \"security\",\n    \"encryption\",\n  ];\n  const createButton = {\n    label: \"Create\",\n    type: \"submit\",\n    enabled:\n      !addSending &&\n      selectedStorageClass !== \"\" &&\n      requiredPages.every((v) => validPages.includes(v)),\n    action: () => {\n      setAddSending(true);\n    },\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <TenantResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configure\",\n      advancedOnly: true,\n      componentRender: <Configure />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Images\",\n      advancedOnly: true,\n      componentRender: <Images />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <Affinity />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Identity Provider\",\n      advancedOnly: true,\n      componentRender: <IdentityProvider />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Security\",\n      advancedOnly: true,\n      componentRender: <Security />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Encryption\",\n      advancedOnly: true,\n      componentRender: <Encryption />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Audit Log\",\n      advancedOnly: true,\n      componentRender: <ConfigLogSearch />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Monitoring\",\n      advancedOnly: true,\n      componentRender: <ConfigPrometheus />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  let filteredWizardSteps = wizardSteps;\n\n  const closeCredentialsModal = () => {\n    dispatch(resetAddTenantForm());\n    history.push(\"/tenants\");\n  };\n\n  return (\n    <Fragment>\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={createdAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Tenant\"\n        />\n      )}\n      <PageHeader\n        label={\n          <BackLink\n            to={\"/tenants\"}\n            label={\"Tenants\"}\n            executeOnClick={() => {\n              dispatch(resetAddTenantForm());\n            }}\n          />\n        }\n      />\n\n      <PageLayout>\n        {addSending && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.pageBox}>\n          <GenericWizard wizardSteps={filteredWizardSteps} />\n        </Grid>\n        {formRender === IMkEnvs.aws && (\n          <Grid item xs={12} style={{ marginTop: 16 }}>\n            <HelpBox\n              title={\"EBS Volume Configuration.\"}\n              iconComponent={<StorageIcon />}\n              help={\n                <Fragment>\n                  <b>Performance Optimized</b>: Uses the <i>gp3</i> EBS storage\n                  class class configured at 1,000Mi/s throughput and 16,000\n                  IOPS, however the minimum volume size for this type of EBS\n                  volume is <b>32Gi</b>.\n                  <br />\n                  <br />\n                  <b>Storage Optimized</b>: Uses the <i>sc1</i> EBS storage\n                  class, however the minimum volume size for this type of EBS\n                  volume is &nbsp;\n                  <b>16Ti</b> to unlock their maximum throughput speed of\n                  250Mi/s.\n                </Fragment>\n              }\n            />\n          </Grid>\n        )}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(AddTenant);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","root","border","borderRadius","backgroundColor","paddingLeft","paddingTop","paddingBottom","paddingRight","leftItems","fontSize","fontWeight","marginBottom","display","alignItems","marginRight","height","width","helpText","classes","iconComponent","title","help","className","container","item","xs","flexFlow","padding","inputWithCopy","background","inputLabel","fieldBasic","label","value","OutlinedInput","readOnly","endAdornment","InputAdornment","position","text","BoxIconButton","tooltip","onClick","onMouseDown","edge","download","filename","element","document","createElement","setAttribute","encodeURLString","style","body","appendChild","click","removeChild","warningBlock","color","margin","credentialTitle","buttonContainer","textAlign","marginTop","credentialsPanel","overflowY","maxHeight","promptTitle","buttonSpacer","newServiceAccount","open","closeModal","entity","consoleCreds","get","idp","ModalWrapper","modalOpen","onClose","titleIcon","Grid","formScrollable","Array","isArray","map","credentialsPair","index","accessKey","secretKey","undefined","WarnIcon","RBIconButton","id","consoleExtras","itemMap","url","api","path","JSON","stringify","icon","variant","length","allCredentials","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","fileInputField","fileInputStyles","textBoxContainer","onChange","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","placement","HelpIcon","type","e","fileName","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","fileProcess","data","IconButton","component","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","deleteDialogStyles","content","customDialogSize","snackBarCommon","children","wideLimit","noContentPadding","dispatch","useDispatch","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","scroll","event","reason","titleText","closeContainer","closeButton","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","configSectionItem","tenantCustomizationFields","marginLeft","containerItem","fieldGroup","createTenantCommon","responsiveSectionItem","wrapperContainer","overlayAction","modalBasic","wizardCommon","exposeMinIO","tenants","createTenant","fields","configure","exposeConsole","setDomains","consoleDomain","minioDomains","tenantCustom","tenantSecurityContext","validationErrors","setValidationErrors","updateField","useCallback","field","updateAddField","pageName","customAccountValidation","fieldKey","runAsUser","customValidation","parseInt","customValidationMessage","runAsGroup","fsGroup","minioExtraValidations","validation","pattern","customPatternMessage","commonVal","commonFormValidation","isPageValid","valid","Object","keys","cleanValidation","fieldName","clearValidationError","Paper","paperWrapper","headerElement","h3Section","descriptionText","FormSwitchWrapper","checked","InputBoxWrapper","placeholder","domain","copyDomains","updateMinIODomain","addNewMinIODomain","Add","removeMinIODomain","RemoveIcon","multiContainer","min","runAsNonRoot","shortened","gridTemplateColumns","gridGap","buttonTray","protocolRadioOptions","adUserDnRows","formFieldStyles","idpSelection","identityProvider","accessKeys","secretKeys","openIDConfigurationURL","openIDClientID","openIDSecretID","openIDCallbackURL","openIDClaimName","openIDScopes","ADURL","ADSkipTLS","ADServerInsecure","ADGroupSearchBaseDN","ADGroupSearchFilter","ADUserDNs","ADLookupBindDN","ADLookupBindPassword","ADUserDNSearchBaseDN","ADUserDNSearchFilter","ADServerStartTLS","updateUserField","newUserField","updatePwordField","updateADUserField","newADUserDNsField","customIDPValidation","i","push","inputs","_","Fragment","splice","getRandomString","Casino","Delete","RadioGroupSelector","currentSelection","selectorOptions","formFieldRow","Typography","gutterBottom","minioCertificateRows","justifyContent","borderBottom","flex","fileItem","minWidth","minioCertsContainer","minioCACertsRow","rowActions","enableTLS","security","enableAutoCert","enableCustomCerts","minioCertificates","certificates","caCertificates","spacing","description","SectionTitle","keyPair","FileSelector","encodedValue","addFileToKeyPair","key","cert","addKeyPair","AddIcon","deleteKeyPair","addFileToCaCertificates","addCaCertificate","deleteCaCertificate","encryptionTypeOptions","mutualTlsConfig","rightSpacer","responsiveContainer","replicas","encryption","enableEncryption","encryptionType","gemaltoEndpoint","gemaltoToken","gemaltoDomain","gemaltoRetry","awsEndpoint","awsRegion","awsKMSKey","awsAccessKey","awsSecretKey","awsToken","vaultEndpoint","vaultEngine","vaultNamespace","vaultPrefix","vaultAppRoleEngine","vaultId","vaultSecret","vaultRetry","vaultPing","azureEndpoint","azureTenantID","azureClientID","azureClientSecret","gcpProjectID","gcpEndpoint","gcpClientEmail","gcpClientID","gcpPrivateKeyID","gcpPrivateKey","enableCustomCertsForKES","serverCertificate","clientCertificate","vaultCertificate","vaultCA","gemaltoCA","kesSecurityContext","encryptionAvailable","filter","encoded_key","encoded_cert","encryptionValidation","indicatorLabels","hrClass","addFileVaultCert","addFileVaultCa","addFileGemaltoCa","addFileServerCert","addFileClientCert","affinityConfigField","affinityFieldLabel","radioField","affinityLabelKey","affinityLabelValue","affinityRow","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","tolerations","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","then","res","k","catch","err","setModalErrorSnackMessage","vl","kvp","kvs","a","indexOf","join","splittedLabels","forEach","splitItem","updateToleration","alterToleration","setTolerationInfo","tolerationValue","affinityHelpText","SelectWrapper","newKey","arrCp","assign","setKeyValuePairs","options","v","tol","TolerationSelector","effect","onEffectChange","tolerationKey","onTolerationKeyChange","operator","onOperatorChange","onValueChange","tolerationSeconds","seconds","onSecondsChange","addNewToleration","removeToleration","customImage","imageName","customDockerhub","imageRegistry","imageRegistryUsername","imageRegistryPassword","prometheusCustom","prometheusEnabled","logSearchCustom","logSearchEnabled","logSearchVolumeSize","prometheusVolumeSize","logSearchSelectedStorageClass","logSearchImage","kesImage","logSearchPostgresImage","logSearchPostgresInitImage","prometheusSelectedStorageClass","prometheusImage","prometheusSidecarImage","prometheusInitImage","wrapText","wordWrap","namespace","addNamespaceOpen","closeAddNamespaceModalAndRefresh","addNamespaceLoading","setAddNamespaceLoading","setErrorSnackMessage","ConfirmDialog","confirmText","confirmButtonProps","isOpen","isLoading","onConfirm","confirmationContent","LinearProgress","DialogContentText","table","nodes","tenantSize","memoryNode","resourcesMemoryRequest","ecParity","distribution","ecParityCalc","cpuToUse","resourcesCPURequest","integrationSelection","usableInformation","storageFactors","find","erasureCode","Divider","Table","TableBody","TableRow","TableCell","scope","align","typeSelection","storageClass","disks","niceBytes","pvSize","persistentVolumes","rawCapacity","maxCapacity","Math","floor","maxFailureTolerations","CPU","memory","drivesPerServer","driveSize","sizeUnit","sizePreview","formToRender","tenantName","nameTenant","selectedStorageClass","selectedStorageType","storageClasses","features","console","session","emptyNamespace","setEmptyNamespace","loadingNamespaceInfo","setLoadingNamespaceInfo","showCreateButton","setShowCreateButton","openAddNSConfirm","setOpenAddNSConfirm","getNamespaceInformation","tenantsList","elements","setLimitSize","getLimitSizes","newStorage","setStorageClassesList","stExists","findIndex","detailedError","debounceNamespace","useMemo","debounce","cancel","customNamespaceError","commonValidation","isValid","IMkEnvs","frmValidationCleanup","refresh","md","sx","minHeight","overlayId","overlayIcon","setStorageType","storageType","mkPanelConfigurations","TenantSize","connect","formRender","setFormRender","setConfiguration","resourcesConfigurations","includes","logSearchEnabledFields","fieldSpaceTop","logSearchSecurityContext","logSearchPostgresSecurityContext","configureSTClasses","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","prometheusEnabledFields","prometheusSecurityContext","pageBox","settingsCommon","validPages","showNewCredentials","setShowNewCredentials","createdAccount","setCreatedAccount","addSending","setAddSending","consoleCaCertificates","consoleCertificate","affinityType","kesReplicas","tolerationValues","toleration","trim","poolName","generatePoolName","affinityObject","getDefaultAffinity","getNodeSelector","dataSend","access_key","secret_key","access_keys","secret_keys","enable_tls","enable_console","enable_prometheus","service_name","image","expose_minio","expose_console","pools","servers","volumes_per_server","volume_configuration","storage_class_name","securityContext","erasureCodingParity","resourcesCPULimit","resourcesMemoryLimit","resources","requests","cpu","getBytes","limits","image_registry","registry","username","password","logSearchConfiguration","storageSize","postgres_image","postgres_init_image","postgres_securityContext","prometheusConfiguration","sidecar_image","init_image","tenantCerts","consoleCerts","caCerts","consoleCaCerts","ca_certificates","console_ca_certificates","minio","crt","tls","insertEncrypt","gemaltoCAIntroduce","ca","gemalto","keysecure","endpoint","credentials","token","retry","aws","secretsmanager","region","kmskey","accesskey","secretkey","azure","keyvault","tenant_id","client_id","client_secret","gcp","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","vaultTLS","vault","engine","prefix","approle","secret","status","ping","encryptionServerKeyPair","encryptionClientKeyPair","client","server","dataIDP","keyarray","oidc","configuration_url","secret_id","claim_name","callback_url","scopes","active_directory","skip_tls_verification","server_insecure","group_search_base_dn","group_search_filter","user_dns","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","server_start_tls","domains","sendDomain","filteredDomains","dom","consoleSAList","newSrvAcc","consoleItem","consoleKey","cancelButton","enabled","action","resetAddTenantForm","history","createButton","every","filteredWizardSteps","componentRender","buttons","advancedOnly","CredentialsPrompt","PageHeader","BackLink","to","executeOnClick","PageLayout","GenericWizard","wizardSteps","HelpBox","errorBlock","palette","main","withBreak"],"sourceRoot":""}