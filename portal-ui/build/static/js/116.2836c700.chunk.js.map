{"version":3,"sources":["screens/Console/Common/FormComponents/InputBoxWrapper/InputBoxWrapper.tsx","screens/Console/Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper.tsx","screens/Console/Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper.tsx","screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx","screens/Console/NotificationEndpoints/ConfTargetGeneric.tsx"],"names":["inputStyles","makeStyles","theme","createStyles","inputFieldStyles","InputField","props","classes","InputProps","withStyles","fieldBasic","tooltipHelper","textBoxContainer","flexGrow","position","overlayAction","right","top","maxWidth","maxHeight","label","onChange","value","id","name","type","autoComplete","disabled","multiline","tooltip","index","error","required","placeholder","min","max","overlayIcon","overlayObject","extraInputProps","noLabelMinWidth","pattern","inputProps","Fragment","container","className","errorInField","inputBoxContainer","htmlFor","noMinWidthLabel","inputLabel","tooltipContainer","title","placement","fullWidth","helperText","inputRebase","onClick","size","disableFocusRipple","disableRipple","disableTouchRipple","StyledSwitch","root","width","height","padding","margin","switchBase","transform","color","palette","common","white","backgroundColor","boxShadow","opacity","border","thumb","marginLeft","track","borderRadius","transition","transitions","create","checked","focusVisible","switchContainer","display","alignItems","justifyContent","Switch","divContainer","marginBottom","indicatorLabelOn","fontWeight","indicatorLabel","fontSize","fieldDescription","marginTop","actionsTray","switchOnly","description","indicatorLabels","switchComponent","clsx","length","item","xs","sm","md","textAlign","component","cssOutlinedInput","borderColor","rootContainer","minHeight","borderWidth","fieldContainer","rows","InputLabelProps","shrink","notchedOutline","variant","inputWithBorder","overflowY","inputBoxSpacer","elements","commonPlaceholder","withBorder","useState","currentElements","setCurrentElements","bottomList","createRef","useEffect","elementsSplit","split","push","refScroll","current","scrollIntoView","firstUpdate","useRef","useLayoutEffect","debouncedOnChange","onChangeElement","e","persist","updatedElement","get","target","debounce","elementsString","filter","element","trim","join","inputs","map","InputBoxWrapper","toString","AddIcon","elementsUp","cpList","addEmptyLine","Grid","InputLabel","Tooltip","HelpIcon","ref","valueDef","key","defaults","defValue","storedConfig","find","formFieldStyles","formFieldRow","modalBasic","fields","defaultVals","valueHolder","setValueHolder","fieldsElements","defValList","values","forEach","field","stateInsert","setValueElement","valuesDup","fieldDefinition","FormSwitchWrapper","CommentBoxWrapper","fieldBox"],"mappings":"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","file":"static/js/116.2836c700.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport {\n  Grid,\n  IconButton,\n  InputLabel,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  multiline?: boolean;\n  type?: string;\n  tooltip?: string;\n  autoComplete?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n  min?: string;\n  max?: string;\n  overlayIcon?: any;\n  overlayAction?: () => void;\n  overlayObject?: any;\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n  noLabelMinWidth?: boolean;\n  pattern?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    overlayAction: {\n      position: \"absolute\",\n      right: 5,\n      top: 6,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"&.withLabel\": {\n        top: 5,\n      },\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  })\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst InputBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  type = \"text\",\n  autoComplete = \"off\",\n  disabled = false,\n  multiline = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  min,\n  max,\n  overlayIcon = null,\n  overlayObject = null,\n  extraInputProps = {},\n  overlayAction,\n  noLabelMinWidth = false,\n  pattern=\"\",\n  classes,\n}: InputBoxProps) => {\n  let inputProps: any = { \"data-index\": index, ...extraInputProps };\n\n  if (type === \"number\" && min) {\n    inputProps[\"min\"] = min;\n  }\n\n  if (type === \"number\" && max) {\n    inputProps[\"max\"] = max;\n  }\n\n  if(pattern !== \"\") {\n    inputProps[\"pattern\"] = pattern;\n  }\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        className={` ${\n          error !== \"\" ? classes.errorInField : classes.inputBoxContainer\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={\n              noLabelMinWidth ? classes.noMinWidthLabel : classes.inputLabel\n            }\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <InputField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            type={type}\n            multiline={multiline}\n            autoComplete={autoComplete}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            className={classes.inputRebase}\n          />\n          {overlayIcon && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              <IconButton\n                onClick={\n                  overlayAction\n                    ? () => {\n                        overlayAction();\n                      }\n                    : () => null\n                }\n                size={\"small\"}\n                disableFocusRipple={false}\n                disableRipple={false}\n                disableTouchRipple={false}\n              >\n                {overlayIcon}\n              </IconButton>\n            </div>\n          )}\n          {overlayObject && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              {overlayObject}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(InputBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { InputLabel, Switch, Tooltip, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { actionsTray, fieldBasic } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport clsx from \"clsx\";\n\ninterface IFormSwitch {\n  label?: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  description?: string;\n  index?: number;\n  checked: boolean;\n  switchOnly?: boolean;\n  indicatorLabels?: string[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    divContainer: {\n      marginBottom: 20,\n    },\n    indicatorLabelOn: {\n      fontWeight: \"bold\",\n      color: \"#081C42 !important\",\n    },\n    indicatorLabel: {\n      fontSize: 12,\n      color: \"#E2E2E2\",\n      margin: \"0 8px 0 10px\",\n    },\n    fieldDescription: {\n      marginTop: 4,\n      color: \"#999999\",\n    },\n    tooltip: {\n      fontSize: 16,\n    },\n    ...actionsTray,\n    ...fieldBasic,\n  });\n\nconst StyledSwitch = withStyles((theme) => ({\n  root: {\n    width: 50,\n    height: 24,\n    padding: 0,\n    margin: 0,\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(24px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#4CCB92\",\n        boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#4CCB92\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 22,\n    height: 22,\n    backgroundColor: \"#FAFAFA\",\n    border: \"2px solid #FFFFFF\",\n    marginLeft: 1,\n  },\n  track: {\n    borderRadius: 24 / 2,\n    backgroundColor: \"#E2E2E2\",\n    boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n  switchContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n}))(Switch);\n\nconst FormSwitchWrapper = ({\n  label = \"\",\n  onChange,\n  value,\n  id,\n  name,\n  checked = false,\n  disabled = false,\n  switchOnly = false,\n  tooltip = \"\",\n  description = \"\",\n  classes,\n  indicatorLabels,\n}: IFormSwitch) => {\n  const switchComponent = (\n    <React.Fragment>\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: !checked,\n          })}\n        >\n          {indicatorLabels && indicatorLabels.length > 1\n            ? indicatorLabels[1]\n            : \"OFF\"}\n        </span>\n      )}\n      <StyledSwitch\n        checked={checked}\n        onChange={onChange}\n        color=\"primary\"\n        name={name}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        disabled={disabled}\n        disableRipple\n        disableFocusRipple\n        disableTouchRipple\n        value={value}\n      />\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: checked,\n          })}\n        >\n          {indicatorLabels ? indicatorLabels[0] : \"ON\"}\n        </span>\n      )}\n    </React.Fragment>\n  );\n\n  if (switchOnly) {\n    return switchComponent;\n  }\n\n  return (\n    <div className={classes.divContainer}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <Grid container>\n            <Grid item xs={12} sm={4} md={3}>\n              {label !== \"\" && (\n                <InputLabel htmlFor={id} className={classes.inputLabel}>\n                  <span>{label}</span>\n                  {tooltip !== \"\" && (\n                    <div className={classes.tooltipContainer}>\n                      <Tooltip title={tooltip} placement=\"top-start\">\n                        <div className={classes.tooltip}>\n                          <HelpIcon />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  )}\n                </InputLabel>\n              )}\n            </Grid>\n            <Grid item xs={12} sm textAlign={\"left\"}>\n              {description !== \"\" && (\n                <Typography component=\"p\" className={classes.fieldDescription}>\n                  {description}\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid\n          item\n          xs={12}\n          sm={2}\n          textAlign={\"right\"}\n          className={classes.switchContainer}\n        >\n          {switchComponent}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(FormSwitchWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport { Grid, InputLabel, TextField, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface CommentBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      marginBottom: 16,\n      fontSize: 14,\n    },\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    cssOutlinedInput: {\n      borderColor: \"#EAEAEA\",\n      padding: 16,\n    },\n    rootContainer: {\n      \"& .MuiOutlinedInput-inputMultiline\": {\n        ...fieldBasic.inputLabel,\n        fontSize: 13,\n        minHeight: 150,\n      },\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"#07193E\",\n        borderWidth: 1,\n      },\n      \"& textarea\": {\n        color: \"#07193E\",\n        fontSize: 13,\n        fontWeight: 600,\n        \"&:placeholder\": {\n          color: \"#393939\",\n          opacity: 1,\n        },\n      },\n    },\n  });\n\nconst CommentBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  classes,\n}: CommentBoxProps) => {\n  let inputProps: any = { \"data-index\": index };\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fieldContainer} ${\n          error !== \"\" ? classes.errorInField : \"\"\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <TextField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            multiline\n            rows={5}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              classes: {\n                notchedOutline: classes.cssOutlinedInput,\n                root: classes.rootContainer,\n              },\n            }}\n            variant=\"outlined\"\n          />\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CommentBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { InputLabel, Tooltip } from \"@mui/material\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport InputBoxWrapper from \"../InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  classes: any;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputWithBorder: {\n      border: \"1px solid #EAEAEA\",\n      padding: 15,\n      height: 150,\n      overflowY: \"auto\",\n      position: \"relative\",\n      marginTop: 15,\n    },\n    inputBoxSpacer: {\n      marginBottom: 7,\n    },\n  });\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n  classes,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useLayoutEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    debouncedOnChange();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", 0);\n    updatedElement[index] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  // Debounce for On Change\n  const debouncedOnChange = debounce(() => {\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChange(elementsString);\n  }, 500);\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <div className={classes.inputBoxSpacer}>\n        <InputBoxWrapper\n          id={`${name}-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentElements[index]}\n          onChange={onChangeElement}\n          index={index}\n          key={`csv-${name}-${index.toString()}`}\n          placeholder={commonPlaceholder}\n          overlayIcon={\n            index === currentElements.length - 1 ? <AddIcon /> : null\n          }\n          overlayAction={() => {\n            addEmptyLine(currentElements);\n          }}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} className={classes.fieldContainer}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n        <Grid\n          item\n          xs={12}\n          className={`${withBorder ? classes.inputWithBorder : \"\"}`}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\nexport default withStyles(styles)(CSVMultiSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { IElementValue, KVField } from \"../Configurations/types\";\nimport {\n  formFieldStyles,\n  modalBasic,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport CSVMultiSelector from \"../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\nimport CommentBoxWrapper from \"../Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\n\ninterface IConfGenericProps {\n  onChange: (newValue: IElementValue[]) => void;\n  fields: KVField[];\n  defaultVals?: IElementValue[];\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    formFieldRow: {\n      ...formFieldStyles.formFieldRow,\n    },\n    ...modalBasic,\n  });\n\n// Function to get defined values,\n//we make this because the backed sometimes don't return all the keys when there is an initial configuration\nexport const valueDef = (\n  key: string,\n  type: string,\n  defaults: IElementValue[]\n) => {\n  let defValue = type === \"on|off\" ? \"false\" : \"\";\n\n  if (defaults.length > 0) {\n    const storedConfig = defaults.find((element) => element.key === key);\n\n    if (storedConfig) {\n      defValue = storedConfig.value;\n    }\n  }\n\n  return defValue;\n};\n\nconst ConfTargetGeneric = ({\n  onChange,\n  fields,\n  defaultVals,\n  classes,\n}: IConfGenericProps) => {\n  const [valueHolder, setValueHolder] = useState<IElementValue[]>([]);\n  const fieldsElements = !fields ? [] : fields;\n  const defValList = !defaultVals ? [] : defaultVals;\n\n  // Effect to create all the values to hold\n  useEffect(() => {\n    const values: IElementValue[] = [];\n    fields.forEach((field) => {\n      const stateInsert: IElementValue = {\n        key: field.name,\n        value: valueDef(field.name, field.type, defValList),\n      };\n      values.push(stateInsert);\n    });\n\n    setValueHolder(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields, defaultVals]);\n\n  useEffect(() => {\n    onChange(valueHolder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueHolder]);\n\n  const setValueElement = (key: string, value: string, index: number) => {\n    const valuesDup = [...valueHolder];\n    valuesDup[index] = { key, value };\n\n    setValueHolder(valuesDup);\n  };\n\n  const fieldDefinition = (field: KVField, item: number) => {\n    switch (field.type) {\n      case \"on|off\":\n        const value = valueHolder[item] ? valueHolder[item].value : \"false\";\n\n        return (\n          <FormSwitchWrapper\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const value = e.target.checked ? \"true\" : \"false\";\n              setValueElement(field.name, value, item);\n            }}\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            value={\"switch_on\"}\n            tooltip={field.tooltip}\n            checked={value === \"true\"}\n          />\n        );\n      case \"csv\":\n        return (\n          <CSVMultiSelector\n            elements={valueHolder[item] ? valueHolder[item].value : \"\"}\n            label={field.label}\n            name={field.name}\n            onChange={(value: string) =>\n              setValueElement(field.name, value, item)\n            }\n            tooltip={field.tooltip}\n            commonPlaceholder={field.placeholder}\n            withBorder={true}\n          />\n        );\n      case \"comment\":\n        return (\n          <CommentBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={valueHolder[item] ? valueHolder[item].value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            placeholder={field.placeholder}\n          />\n        );\n      default:\n        return (\n          <InputBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={valueHolder[item] ? valueHolder[item].value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            multiline={!!field.multiline}\n            placeholder={field.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Grid container>\n      <Grid xs={12} item className={classes.fieldBox}>\n        {fieldsElements.map((field, item) => (\n          <Grid item xs={12} key={field.name} className={classes.formFieldRow}>\n            {fieldDefinition(field, item)}\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(ConfTargetGeneric);\n"],"sourceRoot":""}