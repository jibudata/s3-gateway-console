{"version":3,"file":"static/js/2074.307a0b66.chunk.js","mappings":"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","sources":["screens/Console/Groups/DeleteGroup.tsx","screens/Console/Groups/AddGroupMember.tsx","screens/Console/Groups/GroupsDetails.tsx","screens/Console/Groups/UsersSelectors.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx","utils/sortFunctions.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport useApi from \"../Common/Hooks/useApi\";\n\ninterface IDeleteGroup {\n  selectedGroups: string[];\n  deleteOpen: boolean;\n  closeDeleteModalAndRefresh: any;\n}\n\nconst DeleteGroup = ({\n  selectedGroups,\n  deleteOpen,\n  closeDeleteModalAndRefresh,\n}: IDeleteGroup) => {\n  const dispatch = useAppDispatch();\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => {\n    dispatch(setErrorSnackMessage(err));\n    closeDeleteModalAndRefresh(false);\n  };\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  if (!selectedGroups) {\n    return null;\n  }\n  const onDeleteGroups = () => {\n    for (let group of selectedGroups) {\n      invokeDeleteApi(\"DELETE\", `/api/v1/group/${encodeURLString(group)}`);\n    }\n  };\n\n  const renderGroups = selectedGroups.map((group) => (\n    <div key={group}>\n      <b>{group}</b>\n    </div>\n  ));\n\n  return (\n    <ConfirmDialog\n      title={`Delete Group${selectedGroups.length > 1 ? \"s\" : \"\"}`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onDeleteGroups}\n      onClose={onClose}\n      confirmationContent={\n        <Fragment>\n          Are you sure you want to delete the following{\" \"}\n          {selectedGroups.length === 1 ? \"\" : selectedGroups.length} group\n          {selectedGroups.length > 1 ? \"s?\" : \"?\"}\n          {renderGroups}\n        </Fragment>\n      }\n    />\n  );\n};\n\nexport default DeleteGroup;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { AddMembersToGroupIcon, Button, FormLayout, Grid, ReadBox } from \"mds\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport UsersSelectors from \"./UsersSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\n\ntype UserPickerModalProps = {\n  title?: string;\n  preSelectedUsers?: string[];\n  selectedGroup?: string;\n  open: boolean;\n  onClose: () => void;\n  onSaveClick: () => void;\n  groupStatus?: string;\n};\n\nconst AddGroupMember = ({\n  title = \"\",\n  groupStatus = \"enabled\",\n  preSelectedUsers = [],\n  selectedGroup = \"\",\n  open,\n  onClose,\n}: UserPickerModalProps) => {\n  const dispatch = useAppDispatch();\n  const [selectedUsers, setSelectedUsers] = useState(preSelectedUsers);\n\n  function addMembersToGroup() {\n    return api.group\n      .updateGroup(encodeURLString(selectedGroup), {\n        members: selectedUsers,\n        status: groupStatus,\n      })\n      .then(() => {\n        onClose();\n      })\n      .catch((err) => {\n        onClose();\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={onClose}\n      title={title}\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <ReadBox label={`Selected Group`} sx={{ width: \"100%\" }}>\n          {selectedGroup}\n        </ReadBox>\n        <UsersSelectors\n          selectedUsers={selectedUsers}\n          setSelectedUsers={setSelectedUsers}\n          editMode={!selectedGroup}\n        />\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset-add-group-member\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={() => {\n            setSelectedUsers(preSelectedUsers);\n          }}\n          label={\"Reset\"}\n        />\n\n        <Button\n          id={\"save-add-group-member\"}\n          type=\"button\"\n          variant=\"callAction\"\n          onClick={() => {\n            addMembersToGroup();\n          }}\n          label={\"Save\"}\n        />\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default AddGroupMember;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2023 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddIcon,\n  BackLink,\n  Box,\n  Button,\n  DataTable,\n  Grid,\n  GroupsIcon,\n  IAMPoliciesIcon,\n  PageLayout,\n  ScreenTitle,\n  SectionTitle,\n  Switch,\n  Tabs,\n  TrashIcon,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Group } from \"api/consoleApi\";\nimport {\n  addUserToGroupPermissions,\n  CONSOLE_UI_RESOURCE,\n  createGroupPermissions,\n  editGroupMembersPermissions,\n  enableDisableGroupPermissions,\n  getGroupPermissions,\n  IAM_PAGES,\n  listUsersPermissions,\n  permissionTooltipHelper,\n  setGroupPoliciesPermissions,\n  viewPolicyPermissions,\n  viewUserPermissions,\n} from \"../../../common/SecureComponent/permissions\";\nimport {\n  hasPermission,\n  SecureComponent,\n} from \"../../../common/SecureComponent\";\nimport { decodeURLString, encodeURLString } from \"../../../common/utils\";\nimport { setHelpName, setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport SetPolicy from \"../Policies/SetPolicy\";\nimport AddGroupMember from \"./AddGroupMember\";\nimport DeleteGroup from \"./DeleteGroup\";\nimport SearchBox from \"../Common/SearchBox\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\nimport HelpMenu from \"../HelpMenu\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\nexport const formatPolicy = (policy: string = \"\"): string[] => {\n  if (policy.length <= 0) return [];\n  return policy.split(\",\");\n};\n\nconst GroupsDetails = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n\n  const [groupDetails, setGroupDetails] = useState<Group>({});\n  const [policyOpen, setPolicyOpen] = useState<boolean>(false);\n  const [usersOpen, setUsersOpen] = useState<boolean>(false);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n  const [memberFilter, setMemberFilter] = useState<string>(\"\");\n  const [currentTab, setCurrentTab] = useState<string>(\"members\");\n\n  const groupName = decodeURLString(params.groupName || \"\");\n\n  const { members = [], policy = \"\", status: groupEnabled } = groupDetails;\n\n  const filteredMembers = members.filter((elementItem) =>\n    elementItem.includes(memberFilter),\n  );\n\n  const viewUser = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewUserPermissions,\n    true,\n  );\n\n  useEffect(() => {\n    dispatch(setHelpName(\"group_details\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (groupName) {\n      fetchGroupInfo();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [groupName]);\n\n  const groupPolicies = formatPolicy(policy);\n  const isGroupEnabled = groupEnabled === \"enabled\";\n  const memberActionText = members.length > 0 ? \"Edit Members\" : \"Add Members\";\n\n  const getGroupDetails = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    getGroupPermissions,\n  );\n\n  const canEditGroupMembers = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    editGroupMembersPermissions,\n    true,\n  );\n\n  const canSetPolicies = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    setGroupPoliciesPermissions,\n    true,\n  );\n\n  const canViewPolicy = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    viewPolicyPermissions,\n    true,\n  );\n\n  function fetchGroupInfo() {\n    if (getGroupDetails) {\n      api.group\n        .groupInfo(encodeURLString(groupName))\n        .then((res) => {\n          setGroupDetails(res.data);\n        })\n        .catch((err) => {\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n          setGroupDetails({});\n        });\n    }\n  }\n\n  function toggleGroupStatus(nextStatus: boolean) {\n    return api.group\n      .updateGroup(encodeURLString(groupName), {\n        members: members,\n        status: nextStatus ? \"enabled\" : \"disabled\",\n      })\n      .then(() => {\n        fetchGroupInfo();\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n      });\n  }\n\n  const groupsTabContent = (\n    <Box\n      onMouseMove={() => {\n        dispatch(setHelpName(\"groups_members\"));\n      }}\n    >\n      <SectionTitle\n        separator\n        sx={{ marginBottom: 15 }}\n        actions={\n          <Box\n            sx={{\n              display: \"flex\",\n              gap: 10,\n            }}\n          >\n            <SearchBox\n              placeholder={\"Search members\"}\n              onChange={(searchText) => {\n                setMemberFilter(searchText);\n              }}\n              value={memberFilter}\n              sx={{\n                maxWidth: 280,\n              }}\n            />\n            <SecureComponent\n              resource={CONSOLE_UI_RESOURCE}\n              scopes={addUserToGroupPermissions}\n              errorProps={{ disabled: true }}\n            >\n              <TooltipWrapper\n                tooltip={\n                  canEditGroupMembers\n                    ? memberActionText\n                    : permissionTooltipHelper(\n                        createGroupPermissions,\n                        \"edit Group membership\",\n                      )\n                }\n              >\n                <Button\n                  id={\"add-user-group\"}\n                  label={memberActionText}\n                  variant=\"callAction\"\n                  icon={<AddIcon />}\n                  onClick={() => {\n                    setUsersOpen(true);\n                  }}\n                  disabled={!canEditGroupMembers}\n                />\n              </TooltipWrapper>\n            </SecureComponent>\n          </Box>\n        }\n      >\n        Members\n      </SectionTitle>\n      <Grid item xs={12}>\n        <SecureComponent\n          resource={CONSOLE_UI_RESOURCE}\n          scopes={listUsersPermissions}\n          errorProps={{ disabled: true }}\n        >\n          <TooltipWrapper\n            tooltip={\n              viewUser\n                ? \"\"\n                : permissionTooltipHelper(\n                    viewUserPermissions,\n                    \"view User details\",\n                  )\n            }\n          >\n            <DataTable\n              itemActions={[\n                {\n                  type: \"view\",\n                  onClick: (userName) => {\n                    navigate(`${IAM_PAGES.USERS}/${encodeURLString(userName)}`);\n                  },\n                  disableButtonFunction: () => !viewUser,\n                },\n              ]}\n              columns={[{ label: \"Access Key\" }]}\n              selectedItems={[]}\n              isLoading={false}\n              records={filteredMembers}\n              entityName=\"Users\"\n            />\n          </TooltipWrapper>\n        </SecureComponent>\n      </Grid>\n    </Box>\n  );\n\n  const policiesTabContent = (\n    <Fragment>\n      <Box\n        onMouseMove={() => {\n          dispatch(setHelpName(\"groups_policies\"));\n        }}\n      >\n        <SectionTitle\n          separator\n          sx={{ marginBottom: 15 }}\n          actions={\n            <TooltipWrapper\n              tooltip={\n                canSetPolicies\n                  ? \"Set Policies\"\n                  : permissionTooltipHelper(\n                      setGroupPoliciesPermissions,\n                      \"assign Policies\",\n                    )\n              }\n            >\n              <Button\n                id={\"set-policies\"}\n                label={`Set Policies`}\n                variant=\"callAction\"\n                icon={<IAMPoliciesIcon />}\n                onClick={() => {\n                  setPolicyOpen(true);\n                }}\n                disabled={!canSetPolicies}\n              />\n            </TooltipWrapper>\n          }\n        >\n          Policies\n        </SectionTitle>\n      </Box>\n      <Grid item xs={12}>\n        <TooltipWrapper\n          tooltip={\n            canViewPolicy\n              ? \"\"\n              : permissionTooltipHelper(\n                  viewPolicyPermissions,\n                  \"view Policy details\",\n                )\n          }\n        >\n          <DataTable\n            itemActions={[\n              {\n                type: \"view\",\n                onClick: (policy) => {\n                  navigate(`${IAM_PAGES.POLICIES}/${encodeURLString(policy)}`);\n                },\n                disableButtonFunction: () => !canViewPolicy,\n              },\n            ]}\n            columns={[{ label: \"Policy\" }]}\n            isLoading={false}\n            records={groupPolicies}\n            entityName=\"Policies\"\n          />\n        </TooltipWrapper>\n      </Grid>\n    </Fragment>\n  );\n\n  return (\n    <Fragment>\n      {policyOpen ? (\n        <SetPolicy\n          open={policyOpen}\n          selectedGroups={[groupName]}\n          selectedUser={null}\n          closeModalAndRefresh={() => {\n            setPolicyOpen(false);\n            fetchGroupInfo();\n            dispatch(setSelectedPolicies([]));\n          }}\n        />\n      ) : null}\n\n      {usersOpen ? (\n        <AddGroupMember\n          selectedGroup={groupName}\n          onSaveClick={() => {}}\n          title={memberActionText}\n          groupStatus={groupEnabled}\n          preSelectedUsers={members}\n          open={usersOpen}\n          onClose={() => {\n            setUsersOpen(false);\n            fetchGroupInfo();\n          }}\n        />\n      ) : null}\n\n      {deleteOpen && (\n        <DeleteGroup\n          deleteOpen={deleteOpen}\n          selectedGroups={[groupName]}\n          closeDeleteModalAndRefresh={(isDelSuccess: boolean) => {\n            setDeleteOpen(false);\n            if (isDelSuccess) {\n              navigate(IAM_PAGES.GROUPS);\n            }\n          }}\n        />\n      )}\n      <PageHeaderWrapper\n        label={\n          <Fragment>\n            <BackLink\n              label={\"Groups\"}\n              onClick={() => navigate(IAM_PAGES.GROUPS)}\n            />\n          </Fragment>\n        }\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <Grid item xs={12}>\n          <ScreenTitle\n            icon={\n              <Fragment>\n                <GroupsIcon width={40} />\n              </Fragment>\n            }\n            title={groupName}\n            subTitle={null}\n            bottomBorder\n            actions={\n              <Box\n                sx={{\n                  display: \"flex\",\n                  fontSize: 14,\n                  alignItems: \"center\",\n                  gap: 15,\n                }}\n              >\n                <span>Group Status:</span>\n                <span id=\"group-status-label\" style={{ fontWeight: \"bold\" }}>\n                  {isGroupEnabled ? \"Enabled\" : \"Disabled\"}\n                </span>\n                <TooltipWrapper\n                  tooltip={\n                    hasPermission(\n                      CONSOLE_UI_RESOURCE,\n                      enableDisableGroupPermissions,\n                      true,\n                    )\n                      ? \"\"\n                      : permissionTooltipHelper(\n                          enableDisableGroupPermissions,\n                          \"enable or disable Groups\",\n                        )\n                  }\n                >\n                  <SecureComponent\n                    resource={CONSOLE_UI_RESOURCE}\n                    scopes={enableDisableGroupPermissions}\n                    errorProps={{ disabled: true }}\n                    matchAll\n                  >\n                    <Switch\n                      indicatorLabels={[\"Enabled\", \"Disabled\"]}\n                      checked={isGroupEnabled}\n                      value={\"group_enabled\"}\n                      id=\"group-status\"\n                      name=\"group-status\"\n                      onChange={() => {\n                        toggleGroupStatus(!isGroupEnabled);\n                      }}\n                      switchOnly\n                    />\n                  </SecureComponent>\n                </TooltipWrapper>\n\n                <TooltipWrapper tooltip={\"Delete Group\"}>\n                  <Button\n                    id={\"delete-user-group\"}\n                    variant=\"secondary\"\n                    icon={<TrashIcon />}\n                    onClick={() => {\n                      setDeleteOpen(true);\n                    }}\n                  />\n                </TooltipWrapper>\n              </Box>\n            }\n            sx={{ marginBottom: 15 }}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <Tabs\n            options={[\n              {\n                tabConfig: { id: \"members\", label: \"Members\" },\n                content: groupsTabContent,\n              },\n              {\n                tabConfig: { id: \"policies\", label: \"Policies\" },\n                content: policiesTabContent,\n              },\n            ]}\n            currentTabOrPath={currentTab}\n            onTabClick={setCurrentTab}\n          />\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default GroupsDetails;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Box, DataTable, Grid } from \"mds\";\nimport { LinearProgress } from \"@mui/material\";\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  selectedUsers: string[];\n  setSelectedUsers: any;\n  editMode?: boolean;\n}\n\nconst UsersSelectors = ({\n  selectedUsers,\n  setSelectedUsers,\n  editMode = false,\n}: IGroupsProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchUsers = useCallback(() => {\n    api.users\n      .listUsers()\n      .then((res) => {\n        let users = get(res.data, \"users\", []);\n\n        if (!users) {\n          users = [];\n        }\n\n        setRecords(users.sort(usersSort));\n        isLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        isLoading(false);\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsers();\n    }\n  }, [loading, fetchUsers]);\n\n  const selUsers = !selectedUsers ? [] : selectedUsers;\n\n  //Fetch Actions\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selUsers]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedUsers(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      <Box>\n        {loading && <LinearProgress />}\n        {records?.length > 0 ? (\n          <Fragment>\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SearchBox\n                label={editMode ? \"Edit Members\" : \"Assign Users\"}\n                placeholder=\"Filter Users\"\n                onChange={setFilter}\n                value={filter}\n              />\n            </Grid>\n            <DataTable\n              columns={[{ label: \"Access Key\", elementKey: \"accessKey\" }]}\n              onSelect={selectionChanged}\n              selectedItems={selUsers}\n              isLoading={loading}\n              records={filteredRecords}\n              entityName=\"Users\"\n              idField=\"accessKey\"\n              customPaperHeight={\"200px\"}\n            />\n          </Fragment>\n        ) : (\n          <Box\n            sx={{\n              textAlign: \"center\",\n              padding: \"10px 0\",\n            }}\n          >\n            No Users to display\n          </Box>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default UsersSelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { LinearProgress } from \"@mui/material\";\nimport { DataTable, Grid, Box } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\nimport {\n  Error,\n  HttpResponse,\n  ListPoliciesResponse,\n} from \"../../../api/consoleApi\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res: HttpResponse<ListPoliciesResponse, Error>) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <LinearProgress />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid } from \"mds\";\nimport { LinearProgress } from \"@mui/material\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey] || [\" \"];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURLString(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n"],"names":["_ref","selectedGroups","deleteOpen","closeDeleteModalAndRefresh","dispatch","useAppDispatch","_useApi","useApi","err","setErrorSnackMessage","_useApi2","_slicedToArray","deleteLoading","invokeDeleteApi","renderGroups","map","group","_jsx","children","ConfirmDialog","title","concat","length","confirmText","isOpen","titleIcon","ConfirmDeleteIcon","isLoading","onConfirm","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","encodeURLString","e","f","onClose","confirmationContent","_jsxs","Fragment","_ref$title","_ref$groupStatus","groupStatus","_ref$preSelectedUsers","preSelectedUsers","_ref$selectedGroup","selectedGroup","open","_useState","useState","_useState2","selectedUsers","setSelectedUsers","ModalWrapper","modalOpen","AddMembersToGroupIcon","FormLayout","withBorders","containerPadding","ReadBox","label","sx","width","UsersSelectors","editMode","Grid","item","xs","modalStyleUtils","modalButtonBar","Button","id","type","variant","onClick","api","updateGroup","members","status","then","catch","setModalErrorSnackMessage","errorToHandler","error","formatPolicy","policy","arguments","undefined","split","navigate","useNavigate","params","useParams","groupDetails","setGroupDetails","_useState3","_useState4","policyOpen","setPolicyOpen","_useState5","_useState6","usersOpen","setUsersOpen","_useState7","_useState8","setDeleteOpen","_useState9","_useState10","memberFilter","setMemberFilter","_useState11","_useState12","currentTab","setCurrentTab","groupName","decodeURLString","_groupDetails$members","_groupDetails$policy","groupEnabled","filteredMembers","filter","elementItem","includes","viewUser","hasPermission","CONSOLE_UI_RESOURCE","viewUserPermissions","useEffect","setHelpName","fetchGroupInfo","groupPolicies","isGroupEnabled","memberActionText","getGroupDetails","getGroupPermissions","canEditGroupMembers","editGroupMembersPermissions","canSetPolicies","setGroupPoliciesPermissions","canViewPolicy","viewPolicyPermissions","groupInfo","res","data","groupsTabContent","Box","onMouseMove","SectionTitle","separator","marginBottom","actions","display","gap","SearchBox","placeholder","onChange","searchText","maxWidth","SecureComponent","resource","scopes","addUserToGroupPermissions","errorProps","disabled","TooltipWrapper","tooltip","permissionTooltipHelper","createGroupPermissions","icon","AddIcon","listUsersPermissions","DataTable","itemActions","userName","IAM_PAGES","USERS","disableButtonFunction","columns","selectedItems","records","entityName","policiesTabContent","IAMPoliciesIcon","POLICIES","SetPolicy","selectedUser","closeModalAndRefresh","setSelectedPolicies","AddGroupMember","onSaveClick","DeleteGroup","isDelSuccess","GROUPS","PageHeaderWrapper","BackLink","HelpMenu","PageLayout","ScreenTitle","GroupsIcon","subTitle","bottomBorder","fontSize","alignItems","style","fontWeight","enableDisableGroupPermissions","matchAll","Switch","indicatorLabels","checked","name","nextStatus","switchOnly","TrashIcon","Tabs","options","tabConfig","content","currentTabOrPath","onTabClick","_ref$editMode","setRecords","loading","setFilter","fetchUsers","useCallback","users","listUsers","get","sort","usersSort","selUsers","filteredRecords","accessKey","className","LinearProgress","elementKey","onSelect","targetD","target","elements","_toConsumableArray","push","element","idField","customPaperHeight","textAlign","padding","_ref$noTitle","noTitle","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","policies","listPolicies","_res$data$policies","policySort","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","groupPolicy","userPolicy","join","PolicySelectors","color","groups","a","b","stringSort","policyDetailsSort"],"sourceRoot":""}