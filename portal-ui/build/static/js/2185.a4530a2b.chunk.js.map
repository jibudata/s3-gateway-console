{"version":3,"file":"static/js/2185.a4530a2b.chunk.js","mappings":"uSAmMMA,GAAYC,EAAAA,EAAAA,KAJM,SAAC,GAAD,MAAkC,CACxDC,WADsB,EAAGC,cACCD,eAK5B,UAAeF,GAAUI,EAAAA,EAAAA,IAvJV,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kBACRC,EAAAA,IACAC,EAAAA,OAoJkBJ,EAjJD,SAAC,GAQL,IAPlBK,EAOiB,EAPjBA,UAEAC,GAKiB,EANjBC,WAMiB,EALjBD,YACAE,EAIiB,EAJjBA,QACAC,EAGiB,EAHjBA,QACAC,EAEiB,EAFjBA,cACAZ,EACiB,EADjBA,WAEMa,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAsCF,EAAAA,EAAAA,WAAkB,GAAxD,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAsCJ,EAAAA,EAAAA,UAASP,GAA/C,eAAOY,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACR,GAAItB,EAAY,CACd,IAAMuB,EAAO,UAAMf,GAAN,OACVA,EAAWgB,SAAS,MAASxB,EAAWyB,WAAW,KAAa,GAAN,KADhD,OAEVzB,GAEHqB,EAAeE,MAEhB,CAACvB,EAAYQ,IAEhB,IAIMkB,EAAgB,WACpB,IAAIC,EAAa,IAEb3B,IACF2B,EAAa3B,EAAWwB,SAAS,KAAOxB,EAA3B,UAA2CA,EAA3C,MAMf,IAA6C,IAAzCY,EAAcgB,WAHC,SAACC,GAAD,OACjBA,EAAOC,OAASH,EAAaX,KAE/B,CAUA,IAAMe,EAAef,EAClBgB,MAAM,KACNC,QAAO,SAACC,GAAD,MAAoC,KAArBA,EAAUC,UAChCC,KAAK,KAEFb,EAAO,mBAAef,EAAf,oBAAoC6B,EAAAA,EAAAA,IAAgB,GAAD,OAC3DV,GAD2D,OAC9CI,EAD8C,OAGhEO,EAAAA,EAAAA,KAAaf,GACbb,SAlBEG,GACE0B,EAAAA,EAAAA,IAA0B,CACxBC,aAAc,uDACdC,cAAe,QAkBvBnB,EAAAA,EAAAA,YAAU,WACR,IAAIoB,GAAQ,EACkB,IAA1B1B,EAAQmB,OAAOQ,SACjBD,GAAQ,GAEVvB,EAAeuB,KACd,CAAC1B,IAYJ,OACE,SAAC,WAAD,WACE,SAAC,IAAD,CACET,UAAWA,EACXqC,MAAM,8BACNlC,QAASA,EACTmC,WAAW,SAAC,MAAD,IAJb,UAME,UAAC,KAAD,CAAMC,WAAS,EAAf,WACE,UAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,UAAWtC,EAAQuC,aAAtC,WACE,8CADF,KACiC,mBAC/B,gBACEC,MAAO,CACLC,aAAc,WACdC,WAAY,SACZC,SAAU,SACVC,SAAU,GACVC,UAAW,QAEbC,IAAK,MARP,SAUGrC,QAGL,SAAC,KAAD,CAAM2B,MAAI,EAACC,GAAI,GAAIC,UAAWtC,EAAQuC,aAAtC,UACE,SAAC,IAAD,CACEQ,MAAO1C,EACP2C,MAAO,kBACPC,GAAI,aACJ9B,KAAM,aACN+B,YAAa,4BACbC,SAzCQ,SAACC,GACnB9C,EAAW8C,EAAEC,OAAON,QAyCVO,WAtCO,SAACF,GACH,UAAXA,EAAEG,MAAgC,KAAZlD,GACxBU,KAqCQyC,UAAQ,OAGZ,UAAC,KAAD,CAAMpB,MAAI,EAACC,GAAI,GAAIC,UAAWtC,EAAQyD,eAAtC,WACE,SAAC,IAAD,CACEC,KAAK,SACLC,MAAM,UACNC,QAAQ,WACRC,QA/FM,WAChBvD,EAAW,KA0FH,oBAQA,SAAC,IAAD,CACEoD,KAAK,SACLE,QAAQ,YACRD,MAAM,UACNG,UAAWvD,EACXsD,QAAS9C,EALX","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreatePathModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { connect, useDispatch } from \"react-redux\";\nimport history from \"../../../../../../history\";\nimport { encodeURLString } from \"../../../../../../common/utils\";\n\nimport { BucketObjectItem } from \"./types\";\nimport { CreateNewPathIcon } from \"../../../../../../icons\";\nimport { AppState } from \"../../../../../../store\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\n\ninterface ICreatePath {\n  classes: any;\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  onClose: () => any;\n  existingFiles: BucketObjectItem[];\n  simplePath: string | null;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst CreatePathModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  classes,\n  existingFiles,\n  simplePath,\n}: ICreatePath) => {\n  const dispatch = useDispatch();\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [currentPath, setCurrentPath] = useState(bucketName);\n\n  useEffect(() => {\n    if (simplePath) {\n      const newPath = `${bucketName}${\n        !bucketName.endsWith(\"/\") && !simplePath.startsWith(\"/\") ? \"/\" : \"\"\n      }${simplePath}`;\n\n      setCurrentPath(newPath);\n    }\n  }, [simplePath, bucketName]);\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"/\";\n\n    if (simplePath) {\n      folderPath = simplePath.endsWith(\"/\") ? simplePath : `${simplePath}/`;\n    }\n\n    const sharesName = (record: BucketObjectItem) =>\n      record.name === folderPath + pathUrl;\n\n    if (existingFiles.findIndex(sharesName) !== -1) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"Folder cannot have the same name as an existing file\",\n          detailedError: \"\",\n        })\n      );\n      return;\n    }\n\n    const cleanPathURL = pathUrl\n      .split(\"/\")\n      .filter((splitItem) => splitItem.trim() !== \"\")\n      .join(\"/\");\n\n    const newPath = `/buckets/${bucketName}/browse/${encodeURLString(\n      `${folderPath}${cleanPathURL}/`\n    )}`;\n    history.push(newPath);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPathUrl(e.target.value);\n  };\n\n  const keyPressed = (e: any) => {\n    if (e.code === \"Enter\" && pathUrl !== \"\") {\n      createProcess();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n        titleIcon={<CreateNewPathIcon />}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <strong>Current Path:</strong> <br />\n            <div\n              style={{\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n                overflow: \"hidden\",\n                fontSize: 14,\n                textAlign: \"left\",\n              }}\n              dir={\"rtl\"}\n            >\n              {currentPath}\n            </div>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              value={pathUrl}\n              label={\"New Folder Path\"}\n              id={\"folderPath\"}\n              name={\"folderPath\"}\n              placeholder={\"Enter the new Folder Path\"}\n              onChange={inputChange}\n              onKeyPress={keyPressed}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={resetForm}\n            >\n              Clear\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n            >\n              Create\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({ objectBrowser }: AppState) => ({\n  simplePath: objectBrowser.simplePath,\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(withStyles(styles)(CreatePathModal));\n"],"names":["connector","connect","simplePath","objectBrowser","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","modalOpen","bucketName","folderName","onClose","classes","existingFiles","dispatch","useDispatch","useState","pathUrl","setPathUrl","isFormValid","setIsFormValid","currentPath","setCurrentPath","useEffect","newPath","endsWith","startsWith","createProcess","folderPath","findIndex","record","name","cleanPathURL","split","filter","splitItem","trim","join","encodeURLString","history","setModalErrorSnackMessage","errorMessage","detailedError","valid","length","title","titleIcon","container","item","xs","className","formFieldRow","style","textOverflow","whiteSpace","overflow","fontSize","textAlign","dir","value","label","id","placeholder","onChange","e","target","onKeyPress","code","required","modalButtonBar","type","color","variant","onClick","disabled"],"sourceRoot":""}