{"version":3,"file":"static/js/2185.b531cf2b.chunk.js","mappings":"kTA6CMA,GAAYC,EAAAA,EAAAA,IAAW,SAACC,GAAD,OAC3BC,EAAAA,EAAAA,IAAa,kBACRC,EAAAA,IACAC,EAAAA,IAHsB,IAwJvBC,GAAYC,EAAAA,EAAAA,KAJM,SAAC,GAAD,MAAkC,CACxDC,WADsB,EAAGC,cACCD,WADJ,IAMxB,UAAeF,GAnJS,SAAC,GAML,IALlBI,EAKiB,EALjBA,UAEAC,GAGiB,EAJjBC,WAIiB,EAHjBD,YACAE,EAEiB,EAFjBA,QACAL,EACiB,EADjBA,WAEMM,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,EAAUlB,IAEhB,GAA8BmB,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAsCF,EAAAA,EAAAA,WAAkB,GAAxD,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAsCJ,EAAAA,EAAAA,UAASR,GAA/C,eAAOa,EAAP,KAAoBC,EAApB,KAEMC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAqBA,EAAMnB,cAAciB,OAAzC,KAE5BG,EAAAA,EAAAA,YAAU,WACR,GAAIrB,EAAY,CACd,IAAMsB,EAAO,UAAMnB,GAAN,OACVA,EAAWoB,SAAS,MAASvB,EAAWwB,WAAW,KAAa,GAAN,KADhD,OAEVxB,GAEHiB,EAAeK,EAChB,CACF,GAAE,CAACtB,EAAYG,IAEhB,IAIMsB,EAAgB,WACpB,IAAIC,EAAa,IAEb1B,IACF0B,EAAa1B,EAAWuB,SAAS,KAAOvB,EAA3B,UAA2CA,EAA3C,MAMf,IAAuC,IAAnCkB,EAAQS,WAHO,SAACC,GAAD,OACjBA,EAAOC,OAASH,EAAad,CADZ,IAGnB,CAUA,IAAMkB,EAAelB,EAClBmB,MAAM,KACNC,QAAO,SAACC,GAAD,MAAoC,KAArBA,EAAUC,MAAzB,IACPC,KAAK,KAEFb,EAAO,mBAAenB,EAAf,aAA6BiC,EAAAA,EAAAA,IAAgB,GAAD,OACpDV,GADoD,OACvCI,EADuC,OAGzDtB,EAASc,GACTjB,GAXC,MAPCC,GACE+B,EAAAA,EAAAA,IAA0B,CACxBC,aAAc,uDACdC,cAAe,KAgBtB,GAEDlB,EAAAA,EAAAA,YAAU,WACR,IAAImB,GAAQ,EACkB,IAA1B5B,EAAQsB,OAAOO,SACjBD,GAAQ,GAEVzB,EAAeyB,EAChB,GAAE,CAAC5B,IAYJ,OACE,SAAC,WAAD,WACE,SAAC,IAAD,CACEV,UAAWA,EACXwC,MAAM,8BACNrC,QAASA,EACTsC,WAAW,SAAC,MAAD,IAJb,UAME,UAAC,KAAD,CAAMC,WAAS,EAAf,WACE,UAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,UAAWrC,EAAQsC,aAAtC,WACE,8CADF,KACiC,mBAC/B,gBACEC,MAAO,CACLC,aAAc,WACdC,WAAY,SACZC,SAAU,SACVC,SAAU,GACVC,UAAW,QAEbC,IAAK,MARP,SAUGvC,QAGL,SAAC,KAAD,CAAM6B,MAAI,EAACC,GAAI,GAAIC,UAAWrC,EAAQsC,aAAtC,UACE,SAAC,IAAD,CACEQ,MAAO5C,EACP6C,MAAO,kBACPC,GAAI,aACJ7B,KAAM,aACN8B,YAAa,4BACbC,SAzCQ,SAACC,GACnBhD,EAAWgD,EAAEC,OAAON,MACrB,EAwCWO,WAtCO,SAACF,GACH,UAAXA,EAAEG,MAAgC,KAAZpD,GACxBa,GAEH,EAmCWwC,UAAQ,OAGZ,UAAC,KAAD,CAAMpB,MAAI,EAACC,GAAI,GAAIC,UAAWrC,EAAQwD,eAAtC,WACE,SAAC,KAAD,CACER,GAAI,QACJS,KAAK,SACLC,MAAM,UACNC,QAAQ,UACRC,QAhGM,WAChBzD,EAAW,GACZ,EA+FW4C,MAAO,WAET,SAAC,KAAD,CACEC,GAAI,SACJS,KAAK,SACLE,QAAQ,aACRE,UAAWzD,EACXwD,QAAS7C,EACTgC,MAAO,oBAOpB,G","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreatePathModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button } from \"mds\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { Grid } from \"@mui/material\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { connect, useSelector } from \"react-redux\";\nimport { encodeURLString } from \"../../../../../../common/utils\";\n\nimport { BucketObjectItem } from \"./types\";\nimport { CreateNewPathIcon } from \"../../../../../../icons\";\nimport { AppState, useAppDispatch } from \"../../../../../../store\";\nimport { setModalErrorSnackMessage } from \"../../../../../../systemSlice\";\nimport makeStyles from \"@mui/styles/makeStyles\";\n\ninterface ICreatePath {\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  onClose: () => any;\n  simplePath: string | null;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  })\n);\n\nconst CreatePathModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  simplePath,\n}: ICreatePath) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const classes = useStyles();\n\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [currentPath, setCurrentPath] = useState(bucketName);\n\n  const records = useSelector((state: AppState) => state.objectBrowser.records);\n\n  useEffect(() => {\n    if (simplePath) {\n      const newPath = `${bucketName}${\n        !bucketName.endsWith(\"/\") && !simplePath.startsWith(\"/\") ? \"/\" : \"\"\n      }${simplePath}`;\n\n      setCurrentPath(newPath);\n    }\n  }, [simplePath, bucketName]);\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"/\";\n\n    if (simplePath) {\n      folderPath = simplePath.endsWith(\"/\") ? simplePath : `${simplePath}/`;\n    }\n\n    const sharesName = (record: BucketObjectItem) =>\n      record.name === folderPath + pathUrl;\n\n    if (records.findIndex(sharesName) !== -1) {\n      dispatch(\n        setModalErrorSnackMessage({\n          errorMessage: \"Folder cannot have the same name as an existing file\",\n          detailedError: \"\",\n        })\n      );\n      return;\n    }\n\n    const cleanPathURL = pathUrl\n      .split(\"/\")\n      .filter((splitItem) => splitItem.trim() !== \"\")\n      .join(\"/\");\n\n    const newPath = `/browser/${bucketName}/${encodeURLString(\n      `${folderPath}${cleanPathURL}/`\n    )}`;\n    navigate(newPath);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPathUrl(e.target.value);\n  };\n\n  const keyPressed = (e: any) => {\n    if (e.code === \"Enter\" && pathUrl !== \"\") {\n      createProcess();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n        titleIcon={<CreateNewPathIcon />}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <strong>Current Path:</strong> <br />\n            <div\n              style={{\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n                overflow: \"hidden\",\n                fontSize: 14,\n                textAlign: \"left\",\n              }}\n              dir={\"rtl\"}\n            >\n              {currentPath}\n            </div>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              value={pathUrl}\n              label={\"New Folder Path\"}\n              id={\"folderPath\"}\n              name={\"folderPath\"}\n              placeholder={\"Enter the new Folder Path\"}\n              onChange={inputChange}\n              onKeyPress={keyPressed}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              id={\"clear\"}\n              type=\"button\"\n              color=\"primary\"\n              variant=\"regular\"\n              onClick={resetForm}\n              label={\"Clear\"}\n            />\n            <Button\n              id={\"create\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n              label={\"Create\"}\n            />\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({ objectBrowser }: AppState) => ({\n  simplePath: objectBrowser.simplePath,\n});\n\nconst connector = connect(mapStateToProps);\n\nexport default connector(CreatePathModal);\n"],"names":["useStyles","makeStyles","theme","createStyles","modalStyleUtils","formFieldStyles","connector","connect","simplePath","objectBrowser","modalOpen","bucketName","folderName","onClose","dispatch","useAppDispatch","navigate","useNavigate","classes","useState","pathUrl","setPathUrl","isFormValid","setIsFormValid","currentPath","setCurrentPath","records","useSelector","state","useEffect","newPath","endsWith","startsWith","createProcess","folderPath","findIndex","record","name","cleanPathURL","split","filter","splitItem","trim","join","encodeURLString","setModalErrorSnackMessage","errorMessage","detailedError","valid","length","title","titleIcon","container","item","xs","className","formFieldRow","style","textOverflow","whiteSpace","overflow","fontSize","textAlign","dir","value","label","id","placeholder","onChange","e","target","onKeyPress","code","required","modalButtonBar","type","color","variant","onClick","disabled"],"sourceRoot":""}