{"version":3,"sources":["screens/Console/Common/FormComponents/InputBoxWrapper/InputBoxWrapper.tsx","screens/Console/Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/DirectCSI/FormatDrives.tsx"],"names":["inputStyles","makeStyles","theme","createStyles","inputFieldStyles","InputField","props","classes","InputProps","withStyles","fieldBasic","tooltipHelper","textBoxContainer","flexGrow","position","overlayAction","right","top","maxWidth","maxHeight","label","onChange","value","id","name","type","autoComplete","disabled","multiline","tooltip","index","error","required","placeholder","min","max","overlayIcon","overlayObject","extraInputProps","noLabelMinWidth","inputProps","Fragment","container","className","errorInField","inputBoxContainer","htmlFor","noMinWidthLabel","inputLabel","tooltipContainer","title","placement","fullWidth","helperText","inputRebase","onClick","size","disableFocusRipple","disableRipple","disableTouchRipple","StyledSwitch","root","width","height","padding","margin","switchBase","transform","color","palette","common","white","backgroundColor","boxShadow","opacity","border","thumb","marginLeft","track","borderRadius","transition","transitions","create","checked","focusVisible","switchContainer","display","alignItems","justifyContent","Switch","divContainer","marginBottom","indicatorLabelOn","fontWeight","indicatorLabel","fontSize","fieldDescription","marginTop","actionsTray","switchOnly","description","indicatorLabels","switchComponent","clsx","length","item","xs","sm","md","textAlign","component","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","open","event","reason","sx","titleText","closeContainer","closeButton","content","actions","cancelButton","variant","confirmButton","loading","loadingPosition","startIcon","autoFocus","predefinedList","multiLine","prefinedContainer","predefinedTitle","innerContentMultiline","innerContent","mapDispatchToProps","setErrorSnackMessage","connector","connect","closeFormatModalAndRefresh","deleteOpen","allDrives","drivesToFormat","useState","deleteLoading","setDeleteLoading","formatAll","setFormatAll","force","setForce","api","invoke","drives","then","res","formatIssuesList","catch","err","join","target"],"mappings":"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","file":"static/js/106.0ee7c0d7.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport {\n  Grid,\n  IconButton,\n  InputLabel,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  multiline?: boolean;\n  type?: string;\n  tooltip?: string;\n  autoComplete?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n  min?: string;\n  max?: string;\n  overlayIcon?: any;\n  overlayAction?: () => void;\n  overlayObject?: any;\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n  noLabelMinWidth?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    overlayAction: {\n      position: \"absolute\",\n      right: 5,\n      top: 6,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"&.withLabel\": {\n        top: 5,\n      },\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  })\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst InputBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  type = \"text\",\n  autoComplete = \"off\",\n  disabled = false,\n  multiline = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  min,\n  max,\n  overlayIcon = null,\n  overlayObject = null,\n  extraInputProps = {},\n  overlayAction,\n  noLabelMinWidth = false,\n  classes,\n}: InputBoxProps) => {\n  let inputProps: any = { \"data-index\": index, ...extraInputProps };\n\n  if (type === \"number\" && min) {\n    inputProps[\"min\"] = min;\n  }\n\n  if (type === \"number\" && max) {\n    inputProps[\"max\"] = max;\n  }\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        className={` ${\n          error !== \"\" ? classes.errorInField : classes.inputBoxContainer\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={\n              noLabelMinWidth ? classes.noMinWidthLabel : classes.inputLabel\n            }\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <InputField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            type={type}\n            multiline={multiline}\n            autoComplete={autoComplete}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            className={classes.inputRebase}\n          />\n          {overlayIcon && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              <IconButton\n                onClick={\n                  overlayAction\n                    ? () => {\n                        overlayAction();\n                      }\n                    : () => null\n                }\n                size={\"small\"}\n                disableFocusRipple={false}\n                disableRipple={false}\n                disableTouchRipple={false}\n              >\n                {overlayIcon}\n              </IconButton>\n            </div>\n          )}\n          {overlayObject && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              {overlayObject}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(InputBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { InputLabel, Switch, Tooltip, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { actionsTray, fieldBasic } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport clsx from \"clsx\";\n\ninterface IFormSwitch {\n  label?: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  description?: string;\n  index?: number;\n  checked: boolean;\n  switchOnly?: boolean;\n  indicatorLabels?: string[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    divContainer: {\n      marginBottom: 20,\n    },\n    indicatorLabelOn: {\n      fontWeight: \"bold\",\n      color: \"#081C42 !important\",\n    },\n    indicatorLabel: {\n      fontSize: 12,\n      color: \"#E2E2E2\",\n      margin: \"0 8px 0 10px\",\n    },\n    fieldDescription: {\n      marginTop: 4,\n      color: \"#999999\",\n    },\n    tooltip: {\n      fontSize: 16,\n    },\n    ...actionsTray,\n    ...fieldBasic,\n  });\n\nconst StyledSwitch = withStyles((theme) => ({\n  root: {\n    width: 50,\n    height: 24,\n    padding: 0,\n    margin: 0,\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(24px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#4CCB92\",\n        boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#4CCB92\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 22,\n    height: 22,\n    backgroundColor: \"#FAFAFA\",\n    border: \"2px solid #FFFFFF\",\n    marginLeft: 1,\n  },\n  track: {\n    borderRadius: 24 / 2,\n    backgroundColor: \"#E2E2E2\",\n    boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n  switchContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n}))(Switch);\n\nconst FormSwitchWrapper = ({\n  label = \"\",\n  onChange,\n  value,\n  id,\n  name,\n  checked = false,\n  disabled = false,\n  switchOnly = false,\n  tooltip = \"\",\n  description = \"\",\n  classes,\n  indicatorLabels,\n}: IFormSwitch) => {\n  const switchComponent = (\n    <React.Fragment>\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: !checked,\n          })}\n        >\n          {indicatorLabels && indicatorLabels.length > 1\n            ? indicatorLabels[1]\n            : \"OFF\"}\n        </span>\n      )}\n      <StyledSwitch\n        checked={checked}\n        onChange={onChange}\n        color=\"primary\"\n        name={name}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        disabled={disabled}\n        disableRipple\n        disableFocusRipple\n        disableTouchRipple\n        value={value}\n      />\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: checked,\n          })}\n        >\n          {indicatorLabels ? indicatorLabels[0] : \"ON\"}\n        </span>\n      )}\n    </React.Fragment>\n  );\n\n  if (switchOnly) {\n    return switchComponent;\n  }\n\n  return (\n    <div className={classes.divContainer}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <Grid container>\n            <Grid item xs={12} sm={4} md={3}>\n              {label !== \"\" && (\n                <InputLabel htmlFor={id} className={classes.inputLabel}>\n                  <span>{label}</span>\n                  {tooltip !== \"\" && (\n                    <div className={classes.tooltipContainer}>\n                      <Tooltip title={tooltip} placement=\"top-start\">\n                        <div className={classes.tooltip}>\n                          <HelpIcon />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  )}\n                </InputLabel>\n              )}\n            </Grid>\n            <Grid item xs={12} sm textAlign={\"left\"}>\n              {description !== \"\" && (\n                <Typography component=\"p\" className={classes.fieldDescription}>\n                  {description}\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid\n          item\n          xs={12}\n          sm={2}\n          textAlign={\"right\"}\n          className={classes.switchContainer}\n        >\n          {switchComponent}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(FormSwitchWrapper);\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>{title}</div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.predefinedList}>\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Kubernetes Cloud\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText, Grid, LinearProgress } from \"@mui/material\";\nimport { setErrorSnackMessage } from \"../../../actions\";\nimport { IDirectCSIFormatResItem, IDirectCSIFormatResult } from \"./types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\n\ninterface IFormatAllDrivesProps {\n  closeFormatModalAndRefresh: (\n    refresh: boolean,\n    formatIssuesList: IDirectCSIFormatResItem[]\n  ) => void;\n  deleteOpen: boolean;\n  allDrives: boolean;\n  drivesToFormat: string[];\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst FormatDrives = ({\n  closeFormatModalAndRefresh,\n  deleteOpen,\n  allDrives,\n  drivesToFormat,\n  setErrorSnackMessage,\n}: IFormatAllDrivesProps) => {\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\n  const [formatAll, setFormatAll] = useState<string>(\"\");\n  const [force, setForce] = useState<boolean>(false);\n\n  const removeRecord = () => {\n    if (deleteLoading) {\n      return;\n    }\n    setDeleteLoading(true);\n    api\n      .invoke(\"POST\", `/api/v1/direct-csi/drives/format`, {\n        drives: drivesToFormat,\n        force,\n      })\n      .then((res: IDirectCSIFormatResult) => {\n        setDeleteLoading(false);\n        closeFormatModalAndRefresh(true, res.formatIssuesList);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setDeleteLoading(false);\n        setErrorSnackMessage(err);\n      });\n  };\n  return (\n    <ConfirmDialog\n      title={`Format ${allDrives ? \"All \" : \"\"} Drives`}\n      confirmText={`Format Drive${\n        drivesToFormat.length > 1 || allDrives ? \"s\" : \"\"\n      }`}\n      confirmButtonProps={{\n        disabled: formatAll !== \"YES, PROCEED\",\n      }}\n      isOpen={deleteOpen}\n      isLoading={deleteLoading}\n      onConfirm={removeRecord}\n      onClose={() => {\n        closeFormatModalAndRefresh(false, []);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          <DialogContentText>\n            {!allDrives && (\n              <Fragment>\n                <PredefinedList\n                  label={`Selected Drive${\n                    drivesToFormat.length > 1 ? \"s\" : \"\"\n                  }`}\n                  content={drivesToFormat.join(\", \")}\n                />\n                <br />\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"force\"\n                id=\"force\"\n                name=\"force\"\n                checked={force}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setForce(event.target.checked);\n                }}\n                label={\"Force Format\"}\n                indicatorLabels={[\"Yes\", \"No\"]}\n              />\n            </Grid>\n            Are you sure you want to format{\" \"}\n            {allDrives ? <strong>All</strong> : \"the selected\"} drive\n            {drivesToFormat.length > 1 || allDrives ? \"s\" : \"\"}?.\n            <br />\n            <br />\n            <strong>\n              All information contained will be erased and cannot be recovered\n            </strong>\n            <br />\n            <br />\n            To continue please type <b>YES, PROCEED</b> in the box.\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                id=\"format-confirm\"\n                name=\"format-confirm\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setFormatAll(event.target.value);\n                }}\n                label=\"\"\n                value={formatAll}\n              />\n            </Grid>\n          </DialogContentText>\n          {deleteLoading && <LinearProgress />}\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(FormatDrives);\n"],"sourceRoot":""}