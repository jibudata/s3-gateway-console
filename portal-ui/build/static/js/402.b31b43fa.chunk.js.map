{"version":3,"file":"static/js/402.b31b43fa.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EnableVersioningModal.tsx","screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { Box, Button, FormLayout, ModalBox, Switch } from \"mds\";\nimport { BucketVersioningResponse } from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport CSVMultiSelector from \"../../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\n\ninterface IVersioningEventProps {\n  closeVersioningModalAndRefresh: (refresh: boolean) => void;\n  modalOpen: boolean;\n  selectedBucket: string;\n  versioningInfo: BucketVersioningResponse | undefined;\n  objectLockingEnabled: boolean;\n}\n\nconst parseExcludedPrefixes = (\n  bucketVersioning: BucketVersioningResponse | undefined,\n) => {\n  const excludedPrefixes = bucketVersioning?.excludedPrefixes;\n\n  if (excludedPrefixes) {\n    return excludedPrefixes.map((item) => item.prefix).join(\",\");\n  }\n\n  return \"\";\n};\n\nconst EnableVersioningModal = ({\n  closeVersioningModalAndRefresh,\n  modalOpen,\n  selectedBucket,\n  versioningInfo = {},\n  objectLockingEnabled,\n}: IVersioningEventProps) => {\n  const dispatch = useAppDispatch();\n\n  const [versioningLoading, setVersioningLoading] = useState<boolean>(false);\n  const [versionState, setVersionState] = useState<boolean>(\n    versioningInfo?.status === \"Enabled\",\n  );\n  const [excludeFolders, setExcludeFolders] = useState<boolean>(\n    !!versioningInfo?.excludeFolders,\n  );\n  const [excludedPrefixes, setExcludedPrefixes] = useState<string>(\n    parseExcludedPrefixes(versioningInfo),\n  );\n\n  const enableVersioning = () => {\n    if (versioningLoading) {\n      return;\n    }\n    setVersioningLoading(true);\n\n    api.buckets\n      .setBucketVersioning(selectedBucket, {\n        enabled: versionState,\n        excludeFolders: versionState ? excludeFolders : false,\n        excludePrefixes: versionState\n          ? excludedPrefixes.split(\",\").filter((item) => item.trim() !== \"\")\n          : [],\n      })\n      .then(() => {\n        setVersioningLoading(false);\n        closeVersioningModalAndRefresh(true);\n      })\n      .catch((err) => {\n        setVersioningLoading(false);\n        dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n      });\n  };\n\n  const resetForm = () => {\n    setExcludedPrefixes(\"\");\n    setExcludeFolders(false);\n    setVersionState(false);\n  };\n\n  return (\n    <ModalBox\n      onClose={() => closeVersioningModalAndRefresh(false)}\n      open={modalOpen}\n      title={`Versioning on Bucket`}\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        <Switch\n          id={\"activateVersioning\"}\n          label={\"Versioning Status\"}\n          checked={versionState}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setVersionState(e.target.checked);\n          }}\n          indicatorLabels={[\"Enabled\", \"Disabled\"]}\n        />\n        {versionState && !objectLockingEnabled && (\n          <Fragment>\n            <Switch\n              id={\"excludeFolders\"}\n              label={\"Exclude Folders\"}\n              checked={excludeFolders}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setExcludeFolders(e.target.checked);\n              }}\n              indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            />\n            <CSVMultiSelector\n              elements={excludedPrefixes}\n              label={\"Excluded Prefixes\"}\n              name={\"excludedPrefixes\"}\n              onChange={(value: string | string[]) => {\n                let valCh = \"\";\n\n                if (Array.isArray(value)) {\n                  valCh = value.join(\",\");\n                } else {\n                  valCh = value;\n                }\n                setExcludedPrefixes(valCh);\n              }}\n              withBorder={true}\n            />\n          </Fragment>\n        )}\n        <Box sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"clear\"}\n            type=\"button\"\n            variant=\"regular\"\n            color=\"primary\"\n            onClick={resetForm}\n            label={\"Clear\"}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"callAction\"\n            onClick={enableVersioning}\n            id=\"saveTag\"\n            label={\"Save\"}\n          />\n        </Box>\n      </FormLayout>\n    </ModalBox>\n  );\n};\n\nexport default EnableVersioningModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  Fragment,\n} from \"react\";\nimport get from \"lodash/get\";\nimport { AddIcon, Box, HelpIcon, InputBox, InputLabel, Tooltip } from \"mds\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  const onChangeCallback = useCallback(\n    (newString: string) => {\n      onChange(newString);\n    },\n    [onChange],\n  );\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChangeCallback(elementsString);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <InputBox\n        key={`csv-multi-${name}-${index.toString()}`}\n        id={`${name}-${index.toString()}`}\n        label={\"\"}\n        name={`${name}-${index.toString()}`}\n        value={currentElements[index]}\n        onChange={onChangeElement}\n        index={index}\n        placeholder={commonPlaceholder}\n        overlayIcon={index === currentElements.length - 1 ? <AddIcon /> : null}\n        overlayAction={() => {\n          addEmptyLine(currentElements);\n        }}\n      />\n    );\n  });\n\n  return (\n    <Fragment>\n      <Box sx={{ display: \"flex\" }} className={\"inputItem\"}>\n        <InputLabel\n          sx={{\n            alignItems: \"flex-start\",\n          }}\n        >\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <Box\n              sx={{\n                marginLeft: 5,\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .min-icon\": {\n                  width: 13,\n                },\n              }}\n            >\n              <Tooltip tooltip={tooltip} placement=\"top\">\n                <Box className={tooltip}>\n                  <HelpIcon />\n                </Box>\n              </Tooltip>\n            </Box>\n          )}\n        </InputLabel>\n        <Box\n          withBorders={withBorder}\n          sx={{\n            width: \"100%\",\n            overflowY: \"auto\",\n            height: 150,\n            position: \"relative\",\n          }}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Box>\n      </Box>\n    </Fragment>\n  );\n};\nexport default CSVMultiSelector;\n"],"names":["_ref","closeVersioningModalAndRefresh","modalOpen","selectedBucket","_ref$versioningInfo","versioningInfo","objectLockingEnabled","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","versioningLoading","setVersioningLoading","_useState3","status","_useState4","versionState","setVersionState","_useState5","excludeFolders","_useState6","setExcludeFolders","_useState7","bucketVersioning","excludedPrefixes","map","item","prefix","join","parseExcludedPrefixes","_useState8","setExcludedPrefixes","_jsx","ModalBox","onClose","open","title","children","_jsxs","FormLayout","withBorders","containerPadding","Switch","id","label","checked","onChange","e","target","indicatorLabels","Fragment","CSVMultiSelector","elements","name","value","valCh","Array","isArray","withBorder","Box","sx","modalStyleUtils","modalButtonBar","Button","type","variant","color","onClick","api","buckets","setBucketVersioning","enabled","excludePrefixes","split","filter","trim","then","catch","err","setErrorSnackMessage","errorToHandler","error","_ref$tooltip","tooltip","_ref$commonPlaceholde","commonPlaceholder","_ref$withBorder","currentElements","setCurrentElements","bottomList","createRef","useEffect","length","elementsSplit","push","refScroll","current","scrollIntoView","onChangeCallback","useCallback","newString","firstUpdate","useRef","elementsString","element","onChangeElement","persist","updatedElement","_toConsumableArray","index","get","parseInt","inputs","InputBox","concat","toString","placeholder","overlayIcon","AddIcon","overlayAction","elementsUp","cpList","addEmptyLine","display","className","InputLabel","alignItems","marginLeft","width","Tooltip","placement","HelpIcon","overflowY","height","position","ref"],"sourceRoot":""}