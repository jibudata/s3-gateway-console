{"version":3,"file":"static/js/2185.47c7cde8.chunk.js","mappings":"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","sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreatePathModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { connect } from \"react-redux\";\nimport history from \"../../../../../../history\";\nimport { decodeFileName, encodeFileName } from \"../../../../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport { BucketObjectItem } from \"./types\";\nimport { CreateNewPathIcon } from \"../../../../../../icons\";\nimport { AppState } from \"../../../../../../store\";\n\ninterface ICreatePath {\n  classes: any;\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  onClose: () => any;\n  existingFiles: BucketObjectItem[];\n  detailsOpen: boolean;\n  selectedInternalPaths: string | null;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst CreatePathModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  setModalErrorSnackMessage,\n  classes,\n  existingFiles,\n  detailsOpen,\n  selectedInternalPaths,\n}: ICreatePath) => {\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  let currentPath = `${bucketName}/${decodeFileName(folderName)}`;\n\n  if (selectedInternalPaths && detailsOpen) {\n    const decodedPathFileName = decodeFileName(selectedInternalPaths).split(\n      \"/\"\n    );\n\n    if (decodedPathFileName) {\n      decodedPathFileName.pop();\n      const joinFileName = decodedPathFileName.join(\"/\");\n      const joinPaths = `${joinFileName}${\n        joinFileName.endsWith(\"/\") ? \"\" : \"/\"\n      }`;\n      currentPath = `${bucketName}/${joinPaths}`;\n    }\n  }\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"\";\n\n    if (selectedInternalPaths && detailsOpen) {\n      const decodedPathFileName = decodeFileName(selectedInternalPaths).split(\n        \"/\"\n      );\n\n      if (decodedPathFileName) {\n        decodedPathFileName.pop();\n        const joinFileName = decodedPathFileName.join(\"/\");\n        folderPath = `${joinFileName}${joinFileName.endsWith(\"/\") ? \"\" : \"/\"}`;\n      }\n    } else {\n      if (folderName !== \"\") {\n        const decodedFolderName = decodeFileName(folderName);\n        folderPath = decodedFolderName.endsWith(\"/\")\n          ? decodedFolderName\n          : `${decodedFolderName}/`;\n      }\n    }\n\n    const sharesName = (record: BucketObjectItem) =>\n      record.name === folderPath + pathUrl;\n\n    if (existingFiles.findIndex(sharesName) !== -1) {\n      setModalErrorSnackMessage({\n        errorMessage: \"Folder cannot have the same name as an existing file\",\n        detailedError: \"\",\n      });\n      return;\n    }\n    const newPath = `/buckets/${bucketName}/browse/${encodeFileName(\n      `${folderPath}${pathUrl}/`\n    )}`;\n    history.push(newPath);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  const inputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPathUrl(e.target.value);\n  };\n\n  const keyPressed = (e: any) => {\n    if (e.code === \"Enter\" && pathUrl !== \"\") {\n      createProcess();\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n        titleIcon={<CreateNewPathIcon />}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <strong>Current Path:</strong> <br />\n            <div\n              style={{\n                textOverflow: \"ellipsis\",\n                whiteSpace: \"nowrap\",\n                overflow: \"hidden\",\n                fontSize: 14,\n                textAlign: \"left\",\n              }}\n              dir={\"rtl\"}\n            >\n              {currentPath}\n            </div>\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              value={pathUrl}\n              label={\"New Folder Path\"}\n              id={\"folderPath\"}\n              name={\"folderPath\"}\n              placeholder={\"Enter the new Folder Path\"}\n              onChange={inputChange}\n              onKeyPress={keyPressed}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={resetForm}\n            >\n              Clear\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n            >\n              Create\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = ({ objectBrowser }: AppState) => ({\n  detailsOpen: objectBrowser.objectDetailsOpen,\n  selectedInternalPaths: objectBrowser.selectedInternalPaths,\n});\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connector(withStyles(styles)(CreatePathModal));\n"],"names":["mapDispatchToProps","setModalErrorSnackMessage","connector","connect","objectBrowser","detailsOpen","objectDetailsOpen","selectedInternalPaths","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","modalOpen","folderName","bucketName","onClose","classes","existingFiles","useState","pathUrl","setPathUrl","isFormValid","setIsFormValid","currentPath","decodeFileName","decodedPathFileName","split","pop","joinFileName","join","joinPaths","endsWith","createProcess","folderPath","decodedFolderName","findIndex","record","name","newPath","encodeFileName","history","errorMessage","detailedError","useEffect","valid","trim","length","title","titleIcon","container","item","xs","className","formFieldRow","style","textOverflow","whiteSpace","overflow","fontSize","textAlign","dir","value","label","id","placeholder","onChange","e","target","onKeyPress","code","required","modalButtonBar","type","color","variant","onClick","disabled"],"sourceRoot":""}