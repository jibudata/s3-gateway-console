{"version":3,"file":"static/js/4120.6e6dbe04.chunk.js","mappings":"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","sources":["screens/Console/Storage/StoragePVCs.tsx","screens/Console/Tenants/TenantDetails/DeletePVC.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Grid } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { useAppDispatch } from \"../../../store\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { IPVCsResponse, IStoragePVCs } from \"./types\";\nimport api from \"../../../common/api\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport DeletePVC from \"../Tenants/TenantDetails/DeletePVC\";\nimport PageLayout from \"../Common/Layout/PageLayout\";\nimport SearchBox from \"../Common/SearchBox\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\n\ninterface IStorageVolumesProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    tableWrapper: {\n      height: \"calc(100vh - 150px)\",\n    },\n    ...actionsTray,\n    ...searchField,\n    ...containerForHeader,\n  });\n\nconst StorageVolumes = ({ classes }: IStorageVolumesProps) => {\n  const dispatch = useAppDispatch();\n\n  const [records, setRecords] = useState<IStoragePVCs[]>([]);\n  const [filter, setFilter] = useState(\"\");\n  const [loading, setLoading] = useState<boolean>(true);\n  const [selectedPVC, setSelectedPVC] = useState<any>(null);\n  const [deleteOpen, setDeleteOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/list-pvcs`)\n        .then((res: IPVCsResponse) => {\n          let volumes = get(res, \"pvcs\", []);\n          setRecords(volumes ? volumes : []);\n          setLoading(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setErrorSnackMessage(err));\n        });\n    }\n  }, [loading, dispatch]);\n\n  const filteredRecords: IStoragePVCs[] = records.filter((elementItem) =>\n    elementItem.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const confirmDeletePVC = (pvcItem: IStoragePVCs) => {\n    const delPvc = {\n      ...pvcItem,\n      tenant: pvcItem.tenant,\n      namespace: pvcItem.namespace,\n    };\n    setSelectedPVC(delPvc);\n    setDeleteOpen(true);\n  };\n\n  const tableActions = [{ type: \"delete\", onClick: confirmDeletePVC }];\n\n  const closeDeleteModalAndRefresh = (reloadData: boolean) => {\n    setDeleteOpen(false);\n    setLoading(true);\n  };\n\n  return (\n    <Fragment>\n      {deleteOpen && (\n        <DeletePVC\n          deleteOpen={deleteOpen}\n          selectedPVC={selectedPVC}\n          closeDeleteModalAndRefresh={closeDeleteModalAndRefresh}\n        />\n      )}\n      <PageHeaderWrapper\n        label=\"Persistent Volumes Claims\"\n        middleComponent={\n          <SearchBox\n            placeholder={\"Search Volumes (PVCs)\"}\n            onChange={(val) => {\n              setFilter(val);\n            }}\n            value={filter}\n          />\n        }\n      />\n      <PageLayout>\n        <Grid item xs={12}>\n          <TableWrapper\n            itemActions={tableActions}\n            columns={[\n              {\n                label: \"Name\",\n                elementKey: \"name\",\n              },\n              {\n                label: \"Namespace\",\n                elementKey: \"namespace\",\n                width: 90,\n              },\n              {\n                label: \"Status\",\n                elementKey: \"status\",\n                width: 120,\n              },\n              {\n                label: \"Tenant\",\n                renderFullObject: true,\n                renderFunction: (record: any) =>\n                  `${record.namespace}/${record.tenant}`,\n              },\n              {\n                label: \"Capacity\",\n                elementKey: \"capacity\",\n                width: 90,\n              },\n              {\n                label: \"Storage Class\",\n                elementKey: \"storageClass\",\n              },\n            ]}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"PVCs\"\n            idField=\"name\"\n            customPaperHeight={classes.tableWrapper}\n          />\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(StorageVolumes);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { DialogContentText } from \"@mui/material\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport Grid from \"@mui/material/Grid\";\n\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"mds\";\nimport { IStoragePVCs } from \"../../Storage/types\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IDeletePVC {\n  deleteOpen: boolean;\n  selectedPVC: IStoragePVCs;\n  closeDeleteModalAndRefresh: (refreshList: boolean) => any;\n}\n\nconst DeletePVC = ({\n  deleteOpen,\n  selectedPVC,\n  closeDeleteModalAndRefresh,\n}: IDeletePVC) => {\n  const dispatch = useAppDispatch();\n  const [retypePVC, setRetypePVC] = useState(\"\");\n\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) =>\n    dispatch(setErrorSnackMessage(err));\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  const onConfirmDelete = () => {\n    if (retypePVC !== selectedPVC.name) {\n      dispatch(\n        setErrorSnackMessage({\n          errorMessage: \"PVC name is incorrect\",\n          detailedError: \"\",\n        })\n      );\n      return;\n    }\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/namespaces/${selectedPVC.namespace}/tenants/${selectedPVC.tenant}/pvc/${selectedPVC.name}`\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete PVC`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: retypePVC !== selectedPVC.name || deleteLoading,\n      }}\n      confirmationContent={\n        <DialogContentText>\n          To continue please type <b>{selectedPVC.name}</b> in the box.\n          <Grid item xs={12}>\n            <InputBoxWrapper\n              id=\"retype-PVC\"\n              name=\"retype-PVC\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setRetypePVC(event.target.value);\n              }}\n              label=\"\"\n              value={retypePVC}\n            />\n          </Grid>\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nexport default DeletePVC;\n"],"names":["withStyles","theme","createStyles","tableWrapper","height","actionsTray","searchField","containerForHeader","classes","dispatch","useAppDispatch","useState","records","setRecords","filter","setFilter","loading","setLoading","selectedPVC","setSelectedPVC","deleteOpen","setDeleteOpen","useEffect","api","then","res","volumes","get","catch","err","setErrorSnackMessage","filteredRecords","elementItem","name","toLowerCase","includes","tableActions","type","onClick","pvcItem","delPvc","tenant","namespace","Fragment","closeDeleteModalAndRefresh","reloadData","label","middleComponent","placeholder","onChange","val","value","item","xs","itemActions","columns","elementKey","width","renderFullObject","renderFunction","record","isLoading","entityName","idField","customPaperHeight","retypePVC","setRetypePVC","useApi","deleteLoading","invokeDeleteApi","title","confirmText","isOpen","titleIcon","onConfirm","errorMessage","detailedError","onClose","confirmButtonProps","disabled","confirmationContent","id","event","target"],"sourceRoot":""}