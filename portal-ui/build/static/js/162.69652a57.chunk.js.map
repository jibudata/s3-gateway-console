{"version":3,"sources":["screens/Console/Users/DeleteUser.tsx"],"names":["mapDispatchToProps","setErrorSnackMessage","connector","connect","withStyles","theme","createStyles","deleteDialogStyles","classes","closeDeleteModalAndRefresh","deleteOpen","selectedUser","useState","deleteLoading","setDeleteLoading","open","onClose","className","root","id","title","titleText","closeContainer","closeButton","onClick","disableRipple","size","accessKey","type","variant","color","disabled","api","invoke","encodeURI","then","res","catch","err","autoFocus"],"mappings":"qSA0JMA,EAAqB,CACzBC,0BAGIC,EAAYC,YAAQ,KAAMH,GAEjBI,uBA1HA,SAACC,GAAD,OACbC,YAAa,eACRC,QAwHQH,CAAmBF,GA7Gf,SAAC,GAMK,IALvBM,EAKsB,EALtBA,QACAC,EAIsB,EAJtBA,2BACAC,EAGsB,EAHtBA,WACAC,EAEsB,EAFtBA,aACAV,EACsB,EADtBA,qBAEA,EAA0CW,oBAAkB,GAA5D,mBAAOC,EAAP,KAAsBC,EAAtB,KA4BA,OAAqB,OAAjBH,EACK,wBAIP,eAAC,IAAD,CACEI,KAAML,EACNM,QAAS,WACPP,GAA2B,IAE7BD,QAASA,EACTS,UAAWT,EAAQU,KACnB,kBAAgB,qBAChB,mBAAiB,2BARnB,UAUE,eAAC,IAAD,CAAaC,GAAG,qBAAqBF,UAAWT,EAAQY,MAAxD,UACE,qBAAKH,UAAWT,EAAQa,UAAxB,yBACA,qBAAKJ,UAAWT,EAAQc,eAAxB,SACE,cAAC,IAAD,CACE,aAAW,QACXL,UAAWT,EAAQe,YACnBC,QAAS,WACPf,GAA2B,IAE7BgB,eAAa,EACbC,KAAK,QAPP,SASE,cAAC,IAAD,WAKN,eAAC,IAAD,WACGb,GAAiB,cAAC,IAAD,IAClB,eAAC,IAAD,CAAmBM,GAAG,2BAAtB,kDACuC,uBACrC,4BAAIR,EAAagB,YAFnB,UAKF,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,KAAK,SACLC,QAAQ,WACRL,QAAS,WACPf,GAA2B,IAE7BqB,MAAM,UACNC,SAAUlB,EAPZ,oBAYA,cAAC,IAAD,CACEW,QAAS,WA9EXX,GAGiB,OAAjBF,IAGJG,GAAiB,GACjBkB,IACGC,OACC,SAFJ,4BAGyBC,UAAUvB,EAAagB,YAC5C,CACER,GAAIR,EAAaQ,KAGpBgB,MAAK,SAACC,GACLtB,GAAiB,GACjBL,GAA2B,MAE5B4B,OAAM,SAACC,GACNxB,GAAiB,GACjBb,EAAqBqC,QA4DnBV,KAAK,SACLC,QAAQ,WACRC,MAAM,YACNS,WAAS,EAPX","file":"static/js/162.69652a57.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  LinearProgress,\n} from \"@mui/material\";\nimport api from \"../../../common/api\";\nimport { User, UsersList } from \"./types\";\nimport { setErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport { deleteDialogStyles } from \"../Common/FormComponents/common/styleLibrary\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ninterface IDeleteUserProps {\n  closeDeleteModalAndRefresh: (refresh: boolean) => void;\n  deleteOpen: boolean;\n  selectedUser: User | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  classes: any;\n}\n\nconst DeleteUser = ({\n  classes,\n  closeDeleteModalAndRefresh,\n  deleteOpen,\n  selectedUser,\n  setErrorSnackMessage,\n}: IDeleteUserProps) => {\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\n\n  const removeRecord = () => {\n    if (deleteLoading) {\n      return;\n    }\n    if (selectedUser === null) {\n      return;\n    }\n    setDeleteLoading(true);\n    api\n      .invoke(\n        \"DELETE\",\n        `/api/v1/user?name=${encodeURI(selectedUser.accessKey)}`,\n        {\n          id: selectedUser.id,\n        }\n      )\n      .then((res: UsersList) => {\n        setDeleteLoading(false);\n        closeDeleteModalAndRefresh(true);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setDeleteLoading(false);\n        setErrorSnackMessage(err);\n      });\n  };\n\n  if (selectedUser === null) {\n    return <div />;\n  }\n\n  return (\n    <Dialog\n      open={deleteOpen}\n      onClose={() => {\n        closeDeleteModalAndRefresh(false);\n      }}\n      classes={classes}\n      className={classes.root}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\" className={classes.title}>\n        <div className={classes.titleText}>Delete User</div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={() => {\n              closeDeleteModalAndRefresh(true);\n            }}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent>\n        {deleteLoading && <LinearProgress />}\n        <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete user <br />\n          <b>{selectedUser.accessKey}</b>?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          type=\"button\"\n          variant=\"outlined\"\n          onClick={() => {\n            closeDeleteModalAndRefresh(false);\n          }}\n          color=\"primary\"\n          disabled={deleteLoading}\n        >\n          Cancel\n        </Button>\n\n        <Button\n          onClick={() => {\n            removeRecord();\n          }}\n          type=\"button\"\n          variant=\"outlined\"\n          color=\"secondary\"\n          autoFocus\n        >\n          Delete\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(DeleteUser));\n"],"sourceRoot":""}