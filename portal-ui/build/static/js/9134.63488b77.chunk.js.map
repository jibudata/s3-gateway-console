{"version":3,"file":"static/js/9134.63488b77.chunk.js","mappings":"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","sources":["screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\n\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\n\ninterface ISelectPolicyProps {\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst PolicySelectors = ({ noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      {loading && <ProgressBar />}\n      {records.length > 0 ? (\n        <Fragment>\n          <Grid item xs={12} className={\"inputItem\"}>\n            <SearchBox\n              placeholder=\"Start typing to search for a Policy\"\n              onChange={(value) => {\n                setFilter(value);\n              }}\n              value={filter}\n              label={!noTitle ? \"Assign Policies\" : \"\"}\n            />\n          </Grid>\n\n          <DataTable\n            columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n            onSelect={selectionChanged}\n            selectedItems={currentPolicies}\n            isLoading={loading}\n            records={filteredRecords}\n            entityName=\"Policies\"\n            idField=\"name\"\n            customPaperHeight={\"200px\"}\n          />\n        </Fragment>\n      ) : (\n        <Box\n          sx={{\n            textAlign: \"center\",\n            padding: \"10px 0\",\n          }}\n        >\n          No Policies Available\n        </Box>\n      )}\n    </Grid>\n  );\n};\n\nexport default PolicySelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { useSelector } from \"react-redux\";\nimport { Button, FormLayout, ReadBox, Grid, ProgressBar } from \"mds\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport api from \"../../../common/api\";\n\ninterface ISetPolicyProps {\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst SetPolicy = ({\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies,\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey] || [\" \"];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURLString(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <FormLayout withBorders={false} containerPadding={false}>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <ReadBox\n              label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n              sx={{ width: \"100%\" }}\n            >\n              {selectedGroups !== null ? selectedGroups[0] : userName}\n            </ReadBox>\n            <ReadBox label={\"Current Policy\"} sx={{ width: \"100%\" }}>\n              {actualPolicy.join(\", \")}\n            </ReadBox>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <ReadBox label={\"Selected Groups\"} sx={{ width: \"100%\" }}>\n            {selectedGroups.join(\", \")}\n          </ReadBox>\n        )}\n        <Grid item xs={12}>\n          <PolicySelectors selectedPolicy={selectedPolicy} />\n        </Grid>\n      </FormLayout>\n      <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <ProgressBar />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default SetPolicy;\n"],"names":["_ref","_ref$noTitle","noTitle","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","records","setRecords","_useState3","_useState4","loading","isLoading","_useState5","_useState6","filter","setFilter","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","useCallback","api","policies","listPolicies","then","res","_res$data$policies","data","sort","policySort","catch","err","setModalErrorSnackMessage","useEffect","filteredRecords","elementItem","name","includes","_jsxs","Grid","item","xs","className","children","_jsx","ProgressBar","length","Fragment","SearchBox","placeholder","onChange","value","label","DataTable","columns","elementKey","onSelect","e","targetD","target","checked","elements","_toConsumableArray","push","element","setSelectedPolicies","selectedItems","entityName","idField","customPaperHeight","Box","sx","textAlign","padding","closeModalAndRefresh","selectedUser","selectedGroups","open","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","invoke","concat","encodeURLString","groupPolicy","get","split","userPolicy","userName","ModalWrapper","onClose","modalOpen","title","FormLayout","withBorders","containerPadding","ReadBox","width","join","PolicySelectors","modalStyleUtils","modalButtonBar","Button","id","type","variant","onClick","color","disabled","users","groups","accessKey"],"sourceRoot":""}