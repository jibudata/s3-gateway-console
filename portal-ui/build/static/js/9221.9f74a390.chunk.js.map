{"version":3,"file":"static/js/9221.9f74a390.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Users/BulkAddToGroup.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { AddMembersToGroupIcon, Button } from \"mds\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport GroupsSelectors from \"./GroupsSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\n\ninterface IAddToGroup {\n  open: boolean;\n  checkedUsers: any;\n  closeModalAndRefresh: any;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst BulkAddToGroup = ({\n  open,\n  checkedUsers,\n  closeModalAndRefresh,\n  classes,\n}: IAddToGroup) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [saving, isSaving] = useState<boolean>(false);\n  const [accepted, setAccepted] = useState<boolean>(false);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n\n  //Effects\n  useEffect(() => {\n    if (saving) {\n      if (selectedGroups.length > 0) {\n        api\n          .invoke(\"PUT\", \"/api/v1/users-groups-bulk\", {\n            groups: selectedGroups,\n            users: checkedUsers,\n          })\n          .then(() => {\n            isSaving(false);\n            setAccepted(true);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            isSaving(false);\n            dispatch(setModalErrorSnackMessage(err));\n          });\n      } else {\n        isSaving(false);\n        dispatch(\n          setModalErrorSnackMessage({\n            errorMessage: \"You need to select at least one group to assign\",\n            detailedError: \"\",\n          })\n        );\n      }\n    }\n  }, [\n    saving,\n    isSaving,\n    closeModalAndRefresh,\n    selectedGroups,\n    checkedUsers,\n    dispatch,\n  ]);\n\n  //Fetch Actions\n  const setSaving = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    isSaving(true);\n  };\n\n  const resetForm = () => {\n    setSelectedGroups([]);\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh(accepted);\n      }}\n      title={\n        accepted\n          ? \"The selected users were added to the following groups.\"\n          : \"Add Users to Group\"\n      }\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      {accepted ? (\n        <React.Fragment>\n          <Grid container>\n            <PredefinedList\n              label={\"Groups\"}\n              content={selectedGroups.join(\", \")}\n            />\n            <PredefinedList label={\"Users\"} content={checkedUsers.join(\", \")} />\n          </Grid>\n          <br />\n          <br />\n          <br />\n        </React.Fragment>\n      ) : (\n        <form noValidate autoComplete=\"off\" onSubmit={setSaving}>\n          <Grid container>\n            <Grid item xs={12} className={classes.modalFormScrollable}>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <PredefinedList\n                  label={\"Selected Users\"}\n                  content={checkedUsers.join(\", \")}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <GroupsSelectors\n                  selectedGroups={selectedGroups}\n                  setSelectedGroups={setSelectedGroups}\n                />\n              </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.modalButtonBar}>\n              <Button\n                id={\"clear-bulk-add-group\"}\n                type=\"button\"\n                variant=\"regular\"\n                color=\"primary\"\n                onClick={resetForm}\n                label={\"Clear\"}\n              />\n              <Button\n                id={\"save-add-group\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={saving || selectedGroups.length < 1}\n                label={\"Save\"}\n              />\n            </Grid>\n            {saving && (\n              <Grid item xs={12}>\n                <LinearProgress />\n              </Grid>\n            )}\n          </Grid>\n        </form>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(BulkAddToGroup);\n"],"names":["withStyles","theme","createStyles","_objectSpread","predefinedList","_ref","classes","_ref$label","label","content","_ref$multiLine","multiLine","actionButton","_jsx","Fragment","children","_jsxs","Grid","className","prefinedContainer","item","xs","predefinedTitle","concat","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","modalStyleUtils","formFieldStyles","open","checkedUsers","closeModalAndRefresh","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","saving","isSaving","_useState3","_useState4","accepted","setAccepted","_useState5","_useState6","selectedGroups","setSelectedGroups","useEffect","length","api","invoke","groups","users","then","catch","err","setModalErrorSnackMessage","errorMessage","detailedError","ModalWrapper","modalOpen","onClose","title","titleIcon","AddMembersToGroupIcon","React","container","PredefinedList","join","noValidate","autoComplete","onSubmit","event","preventDefault","modalFormScrollable","formFieldRow","GroupsSelectors","modalButtonBar","Button","id","type","variant","color","onClick","disabled","LinearProgress"],"sourceRoot":""}