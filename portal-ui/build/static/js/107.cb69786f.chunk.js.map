{"version":3,"sources":["screens/Console/Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/shared/ErrorBlock.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Tenants/TenantDetails/TenantSecurity.tsx"],"names":["StyledSwitch","withStyles","theme","root","width","height","padding","margin","switchBase","transform","color","palette","common","white","backgroundColor","boxShadow","opacity","border","thumb","marginLeft","track","borderRadius","transition","transitions","create","checked","focusVisible","switchContainer","display","alignItems","justifyContent","Switch","createStyles","divContainer","marginBottom","indicatorLabelOn","fontWeight","indicatorLabel","fontSize","fieldDescription","marginTop","tooltip","actionsTray","fieldBasic","label","onChange","value","id","name","disabled","switchOnly","description","classes","indicatorLabels","switchComponent","Fragment","className","clsx","length","inputProps","disableRipple","disableFocusRipple","disableTouchRipple","container","item","xs","sm","md","htmlFor","inputLabel","tooltipContainer","title","placement","textAlign","component","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","titleIcon","open","event","reason","sx","titleText","closeContainer","closeButton","onClick","size","content","actions","cancelButton","type","variant","confirmButton","loading","loadingPosition","startIcon","autoFocus","errorBlock","error","main","errorMessage","withBreak","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","fileInputField","fileInputStyles","required","accept","useState","showFileSelector","setShowSelector","Grid","fieldBottom","fieldContainer","errorInField","InputLabel","fieldLabelError","Tooltip","HelpIcon","textBoxContainer","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","fileProcess","data","IconButton","ErrorBlock","fileReselect","mapDispatchToProps","setErrorSnackMessage","setTenantDetailsLoad","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","tenantDetailsStyles","spacingUtils","loaderAlign","bold","italic","fontStyle","paperContainer","certificateInfo","fileItem","marginRight","minWidth","flexFlow","certInputRow","borderBottom","caCertsRow","containerForHeader","spacing","isSending","setIsSending","dialogOpen","setDialogOpen","enableAutoCert","setEnableAutoCert","enableCustomCerts","setEnableCustomCerts","certificatesToBeRemoved","setCertificatesToBeRemoved","minioCertificates","setMinioCertificates","minioCaCertificates","setMinioCaCertificates","minioTLSCertificateSecrets","setMinioTLSCertificateSecrets","minioTLSCaCertificateSecrets","setMinioTLSCaCertificateSecrets","getTenantSecurityInfo","useCallback","api","invoke","namespace","then","res","autoCert","customCertificates","minio","minioCAs","catch","err","useEffect","removeCertificate","updatedMinIOTLSCertificateSecrets","filter","certificateSecret","updatedMinIOTLSCaCertificateSecrets","addFileToKeyPair","key","certificates","updateCertificates","map","deleteKeyPair","addKeyPair","Date","now","cert","encoded_key","encoded_cert","payload","secretsToBeDeleted","keyPair","crt","sectionTitle","gutterBottom","domains","dom","format","expiry","onDelete","encodedValue","spacerLeft","endIcon","buttonContainer"],"mappings":"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","file":"static/js/107.cb69786f.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { InputLabel, Switch, Tooltip, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { actionsTray, fieldBasic } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport clsx from \"clsx\";\n\ninterface IFormSwitch {\n  label?: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  description?: string;\n  index?: number;\n  checked: boolean;\n  switchOnly?: boolean;\n  indicatorLabels?: string[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    divContainer: {\n      marginBottom: 20,\n    },\n    indicatorLabelOn: {\n      fontWeight: \"bold\",\n      color: \"#081C42 !important\",\n    },\n    indicatorLabel: {\n      fontSize: 12,\n      color: \"#E2E2E2\",\n      margin: \"0 8px 0 10px\",\n    },\n    fieldDescription: {\n      marginTop: 4,\n      color: \"#999999\",\n    },\n    tooltip: {\n      fontSize: 16,\n    },\n    ...actionsTray,\n    ...fieldBasic,\n  });\n\nconst StyledSwitch = withStyles((theme) => ({\n  root: {\n    width: 50,\n    height: 24,\n    padding: 0,\n    margin: 0,\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(24px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#4CCB92\",\n        boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#4CCB92\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 22,\n    height: 22,\n    backgroundColor: \"#FAFAFA\",\n    border: \"2px solid #FFFFFF\",\n    marginLeft: 1,\n  },\n  track: {\n    borderRadius: 24 / 2,\n    backgroundColor: \"#E2E2E2\",\n    boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n  switchContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n}))(Switch);\n\nconst FormSwitchWrapper = ({\n  label = \"\",\n  onChange,\n  value,\n  id,\n  name,\n  checked = false,\n  disabled = false,\n  switchOnly = false,\n  tooltip = \"\",\n  description = \"\",\n  classes,\n  indicatorLabels,\n}: IFormSwitch) => {\n  const switchComponent = (\n    <React.Fragment>\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: !checked,\n          })}\n        >\n          {indicatorLabels && indicatorLabels.length > 1\n            ? indicatorLabels[1]\n            : \"OFF\"}\n        </span>\n      )}\n      <StyledSwitch\n        checked={checked}\n        onChange={onChange}\n        color=\"primary\"\n        name={name}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        disabled={disabled}\n        disableRipple\n        disableFocusRipple\n        disableTouchRipple\n        value={value}\n      />\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: checked,\n          })}\n        >\n          {indicatorLabels ? indicatorLabels[0] : \"ON\"}\n        </span>\n      )}\n    </React.Fragment>\n  );\n\n  if (switchOnly) {\n    return switchComponent;\n  }\n\n  return (\n    <div className={classes.divContainer}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <Grid container>\n            <Grid item xs={12} sm={4} md={3}>\n              {label !== \"\" && (\n                <InputLabel htmlFor={id} className={classes.inputLabel}>\n                  <span>{label}</span>\n                  {tooltip !== \"\" && (\n                    <div className={classes.tooltipContainer}>\n                      <Tooltip title={tooltip} placement=\"top-start\">\n                        <div className={classes.tooltip}>\n                          <HelpIcon />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  )}\n                </InputLabel>\n              )}\n            </Grid>\n            <Grid item xs={12} sm textAlign={\"left\"}>\n              {description !== \"\" && (\n                <Typography component=\"p\" className={classes.fieldDescription}>\n                  {description}\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid\n          item\n          xs={12}\n          sm={2}\n          textAlign={\"right\"}\n          className={classes.switchContainer}\n        >\n          {switchComponent}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(FormSwitchWrapper);\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n    },\n    ...fileInputStyles,\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ITenant } from \"../ListTenants/types\";\nimport { ICertificateInfo, ITenantSecurityResponse } from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  spacingUtils,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Chip from \"@mui/material/Chip\";\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport Moment from \"react-moment\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport {\n  Button,\n  CircularProgress,\n  DialogContentText,\n  Typography,\n} from \"@mui/material\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport api from \"../../../../common/api\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setTenantDetailsLoad } from \"../actions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { AddIcon, ConfirmModalIcon } from \"../../../../icons\";\n\ninterface ITenantSecurity {\n  classes: any;\n  loadingTenant: boolean;\n  tenant: ITenant | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    title: {\n      marginTop: 35,\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    certificateInfo: {\n      height: \"auto\",\n      margin: 5,\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    certInputRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      borderBottom: \"1px solid #eaeaea\",\n      marginBottom: 10,\n    },\n    caCertsRow: {\n      borderBottom: \"1px solid #eaeaea\",\n      display: \"flex\",\n      alignItems: \"center\",\n      marginBottom: 10,\n    },\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst TenantSecurity = ({\n  classes,\n  tenant,\n  loadingTenant,\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n}: ITenantSecurity) => {\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [enableAutoCert, setEnableAutoCert] = useState<boolean>(false);\n  const [enableCustomCerts, setEnableCustomCerts] = useState<boolean>(false);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  // MinIO certificates\n  const [minioCertificates, setMinioCertificates] = useState<KeyPair[]>([]);\n  const [minioCaCertificates, setMinioCaCertificates] = useState<KeyPair[]>([]);\n  const [minioTLSCertificateSecrets, setMinioTLSCertificateSecrets] = useState<\n    ICertificateInfo[]\n  >([]);\n  const [minioTLSCaCertificateSecrets, setMinioTLSCaCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n\n  const getTenantSecurityInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`\n      )\n      .then((res: ITenantSecurityResponse) => {\n        setEnableAutoCert(res.autoCert);\n        if (res.customCertificates.minio || res.customCertificates.minioCAs) {\n          setEnableCustomCerts(true);\n        }\n        setMinioTLSCertificateSecrets(res.customCertificates.minio || []);\n        setMinioTLSCaCertificateSecrets(res.customCertificates.minioCAs || []);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setErrorSnackMessage(err);\n      });\n  }, [tenant, setErrorSnackMessage]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantSecurityInfo();\n    }\n  }, [tenant, getTenantSecurityInfo]);\n\n  const updateTenantSecurity = () => {\n    setIsSending(true);\n    let payload = {\n      autoCert: enableAutoCert,\n      customCertificates: {},\n    };\n    if (enableCustomCerts) {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: certificatesToBeRemoved,\n        minio: minioCertificates\n          .map((keyPair: KeyPair) => ({\n            crt: keyPair.encoded_cert,\n            key: keyPair.encoded_key,\n          }))\n          .filter((cert: any) => cert.crt && cert.key),\n        minioCAs: minioCaCertificates\n          .map((keyPair: KeyPair) => keyPair.encoded_cert)\n          .filter((cert: any) => cert),\n      };\n    } else {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: [\n          ...minioTLSCertificateSecrets.map((cert) => cert.name),\n          ...minioTLSCaCertificateSecrets.map((cert) => cert.name),\n        ],\n        minio: [],\n        minioCAs: [],\n      };\n    }\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        // Refresh Information and reset forms\n        setMinioCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        setMinioCaCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        getTenantSecurityInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setErrorSnackMessage(err);\n        setIsSending(false);\n      });\n  };\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    // TLS certificate secrets can be referenced MinIO, Console or KES, we need to remove the secret from all list and update\n    // the arrays\n    // Add certificate to the global list of secrets to be removed\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n\n    // Update MinIO TLS certificate secrets\n    const updatedMinIOTLSCertificateSecrets = minioTLSCertificateSecrets.filter(\n      (certificateSecret) => certificateSecret.name !== certificateInfo.name\n    );\n    const updatedMinIOTLSCaCertificateSecrets =\n      minioTLSCaCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\n      );\n    setMinioTLSCertificateSecrets(updatedMinIOTLSCertificateSecrets);\n    setMinioTLSCaCertificateSecrets(updatedMinIOTLSCaCertificateSecrets);\n  };\n\n  const addFileToKeyPair = (\n    type: string,\n    id: string,\n    key: string,\n    fileName: string,\n    value: string\n  ) => {\n    let certificates = minioCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioCertificates;\n        updateCertificates = setMinioCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    const NCertList = certificates.map((item: KeyPair) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          [key]: fileName,\n          [`encoded_${key}`]: value,\n        };\n      }\n      return item;\n    });\n    updateCertificates(NCertList);\n  };\n\n  const deleteKeyPair = (type: string, id: string) => {\n    let certificates = minioCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioCertificates;\n        updateCertificates = setMinioCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    if (certificates.length > 1) {\n      const cleanCertsList = certificates.filter(\n        (item: KeyPair) => item.id !== id\n      );\n      updateCertificates(cleanCertsList);\n    }\n  };\n\n  const addKeyPair = (type: string) => {\n    let certificates = minioCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioCertificates;\n        updateCertificates = setMinioCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n    const updatedCertificates = [\n      ...certificates,\n      {\n        id: Date.now().toString(),\n        key: \"\",\n        cert: \"\",\n        encoded_key: \"\",\n        encoded_cert: \"\",\n      },\n    ];\n    updateCertificates(updatedCertificates);\n  };\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantSecurity}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <Paper className={classes.paperContainer}>\n          <div className={classes.loaderAlign}>\n            <CircularProgress />\n          </div>\n        </Paper>\n      ) : (\n        <Fragment>\n          <h1 className={classes.sectionTitle}>Security</h1>\n          <Paper className={classes.paperContainer}>\n            <Grid item xs={12} className={classes.title}>\n              <FormSwitchWrapper\n                value=\"enableAutoCert\"\n                id=\"enableAutoCert\"\n                name=\"enableAutoCert\"\n                checked={enableAutoCert}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setEnableAutoCert(checked);\n                }}\n                label={\"TLS\"}\n                description={\n                  \"The internode certificates will be generated and managed by MinIO Operator\"\n                }\n              />\n              <FormSwitchWrapper\n                value=\"enableCustomCerts\"\n                id=\"enableCustomCerts\"\n                name=\"enableCustomCerts\"\n                checked={enableCustomCerts}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setEnableCustomCerts(checked);\n                }}\n                label={\"Custom Certificates\"}\n              />\n            </Grid>\n\n            {enableCustomCerts && (\n              <Grid container>\n                <Grid container item xs={12}>\n                  <h4>MinIO Certificates</h4>\n                </Grid>\n                <Grid container item xs={12}>\n                  {minioTLSCertificateSecrets.map(\n                    (certificateInfo: ICertificateInfo) => (\n                      <Chip\n                        key={certificateInfo.name}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        className={classes.certificateInfo}\n                        label={\n                          <div>\n                            <Typography\n                              variant=\"subtitle1\"\n                              display=\"block\"\n                              gutterBottom\n                            >\n                              {certificateInfo.name}\n                            </Typography>\n                            <Typography\n                              className={classes.italic}\n                              variant=\"caption\"\n                              display=\"block\"\n                              gutterBottom\n                            >\n                              {certificateInfo.domains &&\n                                certificateInfo.domains.map((dom) => {\n                                  return <div>{dom}</div>;\n                                })}\n                            </Typography>\n                            <Typography\n                              className={classes.bold}\n                              variant=\"overline\"\n                              gutterBottom\n                            >\n                              Expiry:&nbsp;\n                            </Typography>\n                            <Typography variant=\"caption\" gutterBottom>\n                              <Moment format=\"YYYY-MM-DD\">\n                                {certificateInfo.expiry}\n                              </Moment>\n                            </Typography>\n                          </div>\n                        }\n                        onDelete={() => removeCertificate(certificateInfo)}\n                      />\n                    )\n                  )}\n                </Grid>\n\n                <Grid container item xs={12}>\n                  {minioCertificates.map((keyPair) => (\n                    <Grid\n                      item\n                      xs={12}\n                      key={keyPair.id}\n                      className={classes.certInputRow}\n                    >\n                      <Grid item xs={9} className={classes.fileItem}>\n                        <Grid item xs={6}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              addFileToKeyPair(\n                                \"minio\",\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              )\n                            }\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                        </Grid>\n                        <Grid item xs={6} className={classes.spacerLeft}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              addFileToKeyPair(\n                                \"minio\",\n                                keyPair.id,\n                                \"key\",\n                                fileName,\n                                encodedValue\n                              )\n                            }\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                          />\n                        </Grid>\n                      </Grid>\n                      <Grid item md={2} xs={1}>\n                        <Button\n                          variant=\"outlined\"\n                          color=\"secondary\"\n                          onClick={() => deleteKeyPair(\"minio\", keyPair.id)}\n                        >\n                          Remove\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  ))}\n                </Grid>\n                <Grid container item xs={12}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    endIcon={<AddIcon />}\n                    onClick={() => addKeyPair(\"minio\")}\n                  >\n                    Add Certificate\n                  </Button>\n                </Grid>\n\n                <Grid container item xs={12}>\n                  <h4>MinIO CA Certificates</h4>\n                </Grid>\n                <Grid container item xs={12}>\n                  {minioTLSCaCertificateSecrets.map(\n                    (certificateInfo: ICertificateInfo) => (\n                      <Chip\n                        key={certificateInfo.name}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        className={classes.certificateInfo}\n                        label={\n                          <div>\n                            <Typography\n                              variant=\"subtitle1\"\n                              display=\"block\"\n                              gutterBottom\n                            >\n                              {certificateInfo.name}\n                            </Typography>\n                            <Typography\n                              className={classes.italic}\n                              variant=\"caption\"\n                              display=\"block\"\n                              gutterBottom\n                            >\n                              {certificateInfo.domains &&\n                                certificateInfo.domains.map((dom) => {\n                                  return <div>{dom}</div>;\n                                })}\n                            </Typography>\n                            <Typography\n                              className={classes.bold}\n                              variant=\"overline\"\n                              gutterBottom\n                            >\n                              Expiry:&nbsp;\n                            </Typography>\n                            <Typography variant=\"caption\" gutterBottom>\n                              <Moment format=\"YYYY-MM-DD\">\n                                {certificateInfo.expiry}\n                              </Moment>\n                            </Typography>\n                          </div>\n                        }\n                        onDelete={() => removeCertificate(certificateInfo)}\n                      />\n                    )\n                  )}\n                </Grid>\n\n                <Grid container item xs={12}>\n                  {minioCaCertificates.map((keyPair: KeyPair) => (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.caCertsRow}\n                      key={keyPair.id}\n                    >\n                      <Grid item xs={9} className={classes.fileItem}>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            addFileToKeyPair(\n                              \"minioCAs\",\n                              keyPair.id,\n                              \"cert\",\n                              fileName,\n                              encodedValue\n                            )\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"tlsCert\"\n                          name=\"tlsCert\"\n                          label=\"Cert\"\n                          value={keyPair.cert}\n                        />\n                      </Grid>\n                      <Grid item xs={1}>\n                        <Button\n                          variant=\"outlined\"\n                          color=\"secondary\"\n                          onClick={() => deleteKeyPair(\"minioCAs\", keyPair.id)}\n                        >\n                          Remove\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  ))}\n                </Grid>\n                <Grid container item xs={12}>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    endIcon={<AddIcon />}\n                    onClick={() => addKeyPair(\"minioCAs\")}\n                  >\n                    Add CA Certificate\n                  </Button>\n                </Grid>\n              </Grid>\n            )}\n\n            <Grid item xs={12} className={classes.buttonContainer}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={dialogOpen || isSending}\n                onClick={() => setDialogOpen(true)}\n              >\n                Save\n              </Button>\n            </Grid>\n          </Paper>\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n};\n\nconst connector = connect(mapState, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(TenantSecurity));\n"],"sourceRoot":""}