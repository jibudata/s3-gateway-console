{"version":3,"sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreateFolderModal.tsx"],"names":["mapDispatchToProps","setFileModeEnabled","setModalErrorSnackMessage","connector","connect","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","modalOpen","folderName","bucketName","onClose","classes","existingFiles","useState","pathUrl","setPathUrl","isFormValid","setIsFormValid","currentPath","decodeFileName","useEffect","valid","trim","length","Fragment","title","container","item","xs","className","formFieldRow","value","label","id","name","placeholder","onChange","e","target","required","modalButtonBar","type","color","variant","onClick","disabled","folderPath","decodedFolderName","endsWith","findIndex","record","newPath","encodeFileName","history","push","errorMessage","detailedError"],"mappings":"wQAwJMA,EAAqB,CACzBC,uBACAC,+BAGIC,EAAYC,YAAQ,KAAMJ,GAEjBG,YAAUE,aAlHV,SAACC,GAAD,OACbC,YAAa,2BACRC,KACAC,QA+GkBJ,EA5GC,SAAC,GASL,IARpBK,EAQmB,EARnBA,UACAC,EAOmB,EAPnBA,WACAC,EAMmB,EANnBA,WACAC,EAKmB,EALnBA,QACAZ,EAImB,EAJnBA,mBACAC,EAGmB,EAHnBA,0BACAY,EAEmB,EAFnBA,QACAC,EACmB,EADnBA,cAEA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,oBAAkB,GAAxD,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAW,UAAMT,EAAN,YAAoBU,YAAeX,IAuCpD,OARAY,qBAAU,WACR,IAAIC,GAAQ,EACkB,IAA1BP,EAAQQ,OAAOC,SACjBF,GAAQ,GAEVJ,EAAeI,KACd,CAACP,IAGF,cAAC,IAAMU,SAAP,UACE,cAAC,IAAD,CACEjB,UAAWA,EACXkB,MAAM,8BACNf,QAASA,EAHX,SAKE,eAAC,IAAD,CAAMgB,WAAS,EAAf,UACE,eAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,UAAWlB,EAAQmB,aAAtC,2BACiBZ,KAEjB,cAAC,IAAD,CAAMS,MAAI,EAACC,GAAI,GAAIC,UAAWlB,EAAQmB,aAAtC,SACE,cAAC,IAAD,CACEC,MAAOjB,EACPkB,MAAO,kBACPC,GAAI,aACJC,KAAM,aACNC,YAAa,4BACbC,SAAU,SAACC,GACTtB,EAAWsB,EAAEC,OAAOP,QAEtBQ,UAAQ,MAGZ,eAAC,IAAD,CAAMZ,MAAI,EAACC,GAAI,GAAIC,UAAWlB,EAAQ6B,eAAtC,UACE,cAAC,IAAD,CACEC,KAAK,SACLC,MAAM,UACNC,QAAQ,WACRC,QAlEM,WAChB7B,EAAW,KA6DH,mBAQA,cAAC,IAAD,CACE0B,KAAK,SACLE,QAAQ,YACRD,MAAM,UACNG,UAAW7B,EACX4B,QAvEU,WACpB,IAAIE,EAAa,GACjB,GAAmB,KAAftC,EAAmB,CACrB,IAAMuC,EAAoB5B,YAAeX,GACzCsC,EAAaC,EAAkBC,SAAS,KACpCD,EADS,UAENA,EAFM,KAMf,IAA6C,IAAzCnC,EAAcqC,WAFC,SAACC,GAAD,OACjBA,EAAOhB,OAASY,EAAahC,KAC/B,CAOA,IAAMqC,EAAO,mBAAe1C,EAAf,mBAAoC2C,YAAe,GAAD,OAC1DN,GAD0D,OAC7ChC,IADL,KAGbuC,IAAQC,KAAKH,GACbrD,GAAmB,GACnBY,SAXEX,EAA0B,CACxBwD,aAAc,uDACdC,cAAe,MAqDX","file":"static/js/146.00e98b05.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { connect } from \"react-redux\";\nimport { setFileModeEnabled } from \"../../../../ObjectBrowser/actions\";\nimport history from \"../../../../../../history\";\nimport { decodeFileName, encodeFileName } from \"../../../../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport { BucketObject } from \"./types\";\n\ninterface ICreateFolder {\n  classes: any;\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  setFileModeEnabled: typeof setFileModeEnabled;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  onClose: () => any;\n  existingFiles: BucketObject[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst CreateFolderModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  setFileModeEnabled,\n  setModalErrorSnackMessage,\n  classes,\n  existingFiles,\n}: ICreateFolder) => {\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  const currentPath = `${bucketName}/${decodeFileName(folderName)}`;\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"\";\n    if (folderName !== \"\") {\n      const decodedFolderName = decodeFileName(folderName);\n      folderPath = decodedFolderName.endsWith(\"/\")\n        ? decodedFolderName\n        : `${decodedFolderName}/`;\n    }\n    const sharesName = (record: BucketObject) =>\n      record.name === folderPath + pathUrl;\n    if (existingFiles.findIndex(sharesName) !== -1) {\n      setModalErrorSnackMessage({\n        errorMessage: \"Folder cannot have the same name as an existing file\",\n        detailedError: \"\",\n      });\n      return;\n    }\n    const newPath = `/buckets/${bucketName}/browse/${encodeFileName(\n      `${folderPath}${pathUrl}`\n    )}/`;\n    history.push(newPath);\n    setFileModeEnabled(false);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            Current Path: {currentPath}\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              value={pathUrl}\n              label={\"New Folder Path\"}\n              id={\"folderPath\"}\n              name={\"folderPath\"}\n              placeholder={\"Enter the new Folder Path\"}\n              onChange={(e) => {\n                setPathUrl(e.target.value);\n              }}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={resetForm}\n            >\n              Clear\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n            >\n              Create\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapDispatchToProps = {\n  setFileModeEnabled,\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(withStyles(styles)(CreateFolderModal));\n"],"sourceRoot":""}