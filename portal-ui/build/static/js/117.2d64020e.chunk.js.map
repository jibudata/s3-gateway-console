{"version":3,"sources":["screens/Console/Common/FormComponents/InputBoxWrapper/InputBoxWrapper.tsx","screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/Common/Hooks/useApi.tsx","screens/Console/Tenants/ListTenants/DeleteTenant.tsx"],"names":["inputStyles","makeStyles","theme","createStyles","inputFieldStyles","InputField","props","classes","InputProps","withStyles","fieldBasic","tooltipHelper","textBoxContainer","flexGrow","position","overlayAction","right","top","maxWidth","maxHeight","label","onChange","value","id","name","type","autoComplete","disabled","multiline","tooltip","index","error","required","placeholder","min","max","overlayIcon","overlayObject","extraInputProps","noLabelMinWidth","inputProps","Fragment","container","className","errorInField","inputBoxContainer","htmlFor","noMinWidthLabel","inputLabel","tooltipContainer","title","placement","fullWidth","helperText","inputRebase","onClick","size","disableFocusRipple","disableRipple","disableTouchRipple","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","open","event","reason","root","sx","padding","titleText","closeContainer","closeButton","content","actions","cancelButton","variant","color","confirmButton","loading","loadingPosition","startIcon","autoFocus","useApi","onSuccess","onError","useState","setIsLoading","method","url","data","api","invoke","then","res","catch","err","connector","connect","setErrorSnackMessage","deleteOpen","selectedTenant","closeDeleteModalAndRefresh","retypeTenant","setRetypeTenant","deleteLoading","invokeDeleteApi","namespace","errorMessage","detailedError","item","xs","target"],"mappings":"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","file":"static/js/117.2d64020e.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport {\n  Grid,\n  IconButton,\n  InputLabel,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  multiline?: boolean;\n  type?: string;\n  tooltip?: string;\n  autoComplete?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n  min?: string;\n  max?: string;\n  overlayIcon?: any;\n  overlayAction?: () => void;\n  overlayObject?: any;\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n  noLabelMinWidth?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    overlayAction: {\n      position: \"absolute\",\n      right: 5,\n      top: 6,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"&.withLabel\": {\n        top: 5,\n      },\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  })\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst InputBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  type = \"text\",\n  autoComplete = \"off\",\n  disabled = false,\n  multiline = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  min,\n  max,\n  overlayIcon = null,\n  overlayObject = null,\n  extraInputProps = {},\n  overlayAction,\n  noLabelMinWidth = false,\n  classes,\n}: InputBoxProps) => {\n  let inputProps: any = { \"data-index\": index, ...extraInputProps };\n\n  if (type === \"number\" && min) {\n    inputProps[\"min\"] = min;\n  }\n\n  if (type === \"number\" && max) {\n    inputProps[\"max\"] = max;\n  }\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        className={` ${\n          error !== \"\" ? classes.errorInField : classes.inputBoxContainer\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={\n              noLabelMinWidth ? classes.noMinWidthLabel : classes.inputLabel\n            }\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <InputField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            type={type}\n            multiline={multiline}\n            autoComplete={autoComplete}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            className={classes.inputRebase}\n          />\n          {overlayIcon && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              <IconButton\n                onClick={\n                  overlayAction\n                    ? () => {\n                        overlayAction();\n                      }\n                    : () => null\n                }\n                size={\"small\"}\n                disableFocusRipple={false}\n                disableRipple={false}\n                disableTouchRipple={false}\n              >\n                {overlayIcon}\n              </IconButton>\n            </div>\n          )}\n          {overlayObject && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              {overlayObject}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(InputBoxWrapper);\n","import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>{title}</div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","import { useState } from \"react\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\ntype NoReturnFunction = (param?: any) => void;\ntype ApiMethodToInvoke = (method: string, url: string, data?: any) => void;\ntype IsApiInProgress = boolean;\n\nconst useApi = (\n  onSuccess: NoReturnFunction,\n  onError: NoReturnFunction\n): [IsApiInProgress, ApiMethodToInvoke] => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const callApi = (method: string, url: string, data?: any) => {\n    setIsLoading(true);\n    api\n      .invoke(method, url, data)\n      .then((res: any) => {\n        setIsLoading(false);\n        onSuccess(res);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setIsLoading(false);\n        onError(err);\n      });\n  };\n\n  return [isLoading, callApi];\n};\n\nexport default useApi;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport { DialogContentText } from \"@mui/material\";\nimport { ITenant } from \"./types\";\nimport { connect } from \"react-redux\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\n\ninterface IDeleteTenant {\n  deleteOpen: boolean;\n  selectedTenant: ITenant;\n  closeDeleteModalAndRefresh: (refreshList: boolean) => any;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst DeleteTenant = ({\n  deleteOpen,\n  selectedTenant,\n  closeDeleteModalAndRefresh,\n  setErrorSnackMessage,\n}: IDeleteTenant) => {\n  const [retypeTenant, setRetypeTenant] = useState(\"\");\n\n  const onDelSuccess = () => closeDeleteModalAndRefresh(true);\n  const onDelError = (err: ErrorResponseHandler) => setErrorSnackMessage(err);\n  const onClose = () => closeDeleteModalAndRefresh(false);\n\n  const [deleteLoading, invokeDeleteApi] = useApi(onDelSuccess, onDelError);\n\n  const onConfirmDelete = () => {\n    if (retypeTenant !== selectedTenant.name) {\n      setErrorSnackMessage({\n        errorMessage: \"Tenant name is incorrect\",\n        detailedError: \"\",\n      });\n      return;\n    }\n    invokeDeleteApi(\n      \"DELETE\",\n      `/api/v1/namespaces/${selectedTenant.namespace}/tenants/${selectedTenant.name}`\n    );\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Delete Tenant`}\n      confirmText={\"Delete\"}\n      isOpen={deleteOpen}\n      isLoading={deleteLoading}\n      onConfirm={onConfirmDelete}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: retypeTenant !== selectedTenant.name || deleteLoading,\n      }}\n      confirmationContent={\n        <DialogContentText>\n          To continue please type <b>{selectedTenant.name}</b> in the box.\n          <Grid item xs={12}>\n            <InputBoxWrapper\n              id=\"retype-tenant\"\n              name=\"retype-tenant\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setRetypeTenant(event.target.value);\n              }}\n              label=\"\"\n              value={retypeTenant}\n            />\n          </Grid>\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nconst connector = connect(null, {\n  setErrorSnackMessage,\n});\n\nexport default connector(DeleteTenant);\n"],"sourceRoot":""}