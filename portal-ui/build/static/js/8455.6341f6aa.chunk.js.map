{"version":3,"file":"static/js/8455.6341f6aa.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/EditAccessRule.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalStyleUtils,\n  spacingUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { connect, useDispatch } from \"react-redux\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport { AppState } from \"../../../../store\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { AddAccessRuleIcon } from \"../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\n\nconst mapState = (state: AppState) => ({\n  session: state.console.session,\n});\n\nconst connector = connect(mapState, null);\n\ninterface IEditAccessRule {\n  classes: any;\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n  toEdit: string;\n  initial: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...spacingUtils,\n  });\n\nconst EditAccessRule = ({\n  modalOpen,\n  onClose,\n  classes,\n  bucket,\n  toEdit,\n  initial,\n}: IEditAccessRule) => {\n  const dispatch = useDispatch();\n  const [selectedAccess, setSelectedAccess] = useState<any>(initial);\n\n  const accessOptions = [\n    { label: \"readonly\", value: \"readonly\" },\n    { label: \"writeonly\", value: \"writeonly\" },\n    { label: \"readwrite\", value: \"readwrite\" },\n  ];\n\n  const resetForm = () => {\n    setSelectedAccess(initial);\n  };\n\n  const createProcess = () => {\n    api\n      .invoke(\"PUT\", `/api/v1/bucket/${bucket}/access-rules`, {\n        prefix: toEdit,\n        access: selectedAccess,\n      })\n      .then((res: any) => {\n        onClose();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        onClose();\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title={`Edit Access Rule for ${`${bucket}/${toEdit || \"\"}`}`}\n        onClose={onClose}\n        titleIcon={<AddAccessRuleIcon />}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.spacerTop}>\n            <SelectWrapper\n              id=\"access\"\n              name=\"Access\"\n              onChange={(e) => {\n                setSelectedAccess(e.target.value);\n              }}\n              label=\"Access\"\n              value={selectedAccess}\n              options={accessOptions}\n              disabled={false}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              type=\"button\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={resetForm}\n            >\n              Clear\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={createProcess}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(connector(EditAccessRule));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n"],"names":["connector","connect","state","session","console","withStyles","theme","createStyles","modalStyleUtils","spacingUtils","modalOpen","onClose","classes","bucket","toEdit","initial","dispatch","useDispatch","useState","selectedAccess","setSelectedAccess","title","titleIcon","container","item","xs","className","spacerTop","id","name","onChange","e","target","value","label","options","disabled","modalButtonBar","type","color","variant","onClick","api","prefix","access","then","res","catch","err","setErrorSnackMessage","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","system","modalSnackBar","useEffect","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}