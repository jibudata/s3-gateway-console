{"version":3,"file":"static/js/8771.76ecd3ef.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Policies/SetPolicy.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  modalBasic,\n  spacingUtils,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../common/api\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\n\ninterface ISetPolicyProps {\n  classes: any;\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroup: string | null;\n  open: boolean;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n    ...spacingUtils,\n    tableBlock: {\n      ...tableStyles.tableBlock,\n      marginTop: 15,\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \".9rem\",\n    },\n  });\n\nconst SetPolicy = ({\n  classes,\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroup,\n  setModalErrorSnackMessage,\n  open,\n}: ISetPolicyProps) => {\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n\n  const setPolicyAction = () => {\n    let entity = \"user\";\n    let value = null;\n    if (selectedGroup !== null) {\n      entity = \"group\";\n      value = selectedGroup;\n    } else {\n      if (selectedUser !== null) {\n        value = selectedUser.accessKey;\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy`, {\n        name: selectedPolicy,\n        entityName: value,\n        entityType: entity,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        setModalErrorSnackMessage(err);\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroup) {\n      api\n        .invoke(\"GET\", `/api/v1/group?name=${encodeURI(selectedGroup)}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setModalErrorSnackMessage(err);\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroup !== null) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroup, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <Grid container>\n        <Grid item xs={12}>\n          <PredefinedList\n            label={`Selected ${selectedGroup !== null ? \"Group\" : \"User\"}`}\n            content={selectedGroup !== null ? selectedGroup : userName}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <PredefinedList\n            label={\"Current Policy\"}\n            content={actualPolicy.join(\", \")}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.tableBlock}>\n            <PolicySelectors\n              selectedPolicy={selectedPolicy}\n              setSelectedPolicy={setSelectedPolicy}\n            />\n          </div>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} className={classes.buttonContainer}>\n        <Button\n          type=\"button\"\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.spacerRight}\n          onClick={resetSelection}\n        >\n          Reset\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n        >\n          Save\n        </Button>\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(SetPolicy));\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","mapDispatchToProps","setModalErrorSnackMessage","connector","connect","modalBasic","spacingUtils","tableBlock","tableStyles","marginTop","buttonContainer","textAlign","closeModalAndRefresh","selectedUser","selectedGroup","open","useState","loading","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","useEffect","api","encodeURI","then","res","groupPolicy","get","split","catch","err","userPolicy","userName","onClose","modalOpen","title","container","join","type","variant","color","spacerRight","onClick","disabled","entity","value","accessKey","name","entityName","entityType"],"sourceRoot":""}