{"version":3,"file":"static/js/3171.a4ead4ca.chunk.js","mappings":"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","sources":["screens/Console/Groups/AddGroupHelpBox.tsx","screens/Console/Groups/AddGroupScreen.tsx","screens/Console/Groups/UsersSelectors.tsx","utils/sortFunctions.ts"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport { Box } from \"@mui/material\";\nimport { GroupsIcon, HelpIconFilled, IAMPoliciesIcon } from \"mds\";\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\nconst AddGroupHelpBox = () => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n        marginTop: {\n          xs: \"0px\",\n        },\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>Learn more about Groups</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        Adding groups lets you assign IAM policies to multiple users at once.\n        <Box sx={{ paddingTop: \"20px\", paddingBottom: \"10px\" }}>\n          Users inherit access permissions to data and resources through the\n          groups they belong to.\n        </Box>\n        <Box sx={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\n          A user can be a member of multiple groups.\n        </Box>\n        <Box sx={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\n          Groups provide a simplified method for managing shared permissions\n          among users with common access patterns and workloads. Clientâ€™s cannot\n          authenticate to a MinIO deployment using a group as an identity.\n        </Box>\n      </Box>\n\n      <Box\n        sx={{\n          display: \"flex\",\n          flexFlow: \"column\",\n        }}\n      >\n        <FeatureItem icon={<GroupsIcon />} description={`Add Users to Group`} />\n        <Box sx={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\n          Select from the list of displayed users to assign users to the new\n          group at creation. These users inherit the policies assigned to the\n          group.\n        </Box>\n        <FeatureItem\n          icon={<IAMPoliciesIcon />}\n          description={`Assign Custom IAM Policies for Group`}\n        />\n        <Box sx={{ paddingTop: \"10px\", paddingBottom: \"10px\" }}>\n          You can add policies to the group by selecting it from the Groups view\n          after creation. The Policy view lets you manage the assigned policies\n          for the group.\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AddGroupHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\n\nimport {\n  BackLink,\n  Button,\n  CreateGroupIcon,\n  FormLayout,\n  Grid,\n  InputBox,\n  PageLayout,\n  ProgressBar,\n} from \"mds\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport { setErrorSnackMessage, setHelpName } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport AddGroupHelpBox from \"./AddGroupHelpBox\";\nimport UsersSelectors from \"./UsersSelectors\";\nimport PageHeaderWrapper from \"../Common/PageHeaderWrapper/PageHeaderWrapper\";\nimport HelpMenu from \"../HelpMenu\";\n\nconst AddGroupScreen = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const [groupName, setGroupName] = useState<string>(\"\");\n  const [saving, isSaving] = useState<boolean>(false);\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [validGroup, setValidGroup] = useState<boolean>(false);\n\n  useEffect(() => {\n    setValidGroup(groupName.trim() !== \"\");\n  }, [groupName, selectedUsers]);\n\n  useEffect(() => {\n    if (saving) {\n      const saveRecord = () => {\n        api.groups\n          .addGroup({\n            group: groupName,\n            members: selectedUsers,\n          })\n          .then((res) => {\n            isSaving(false);\n            navigate(`${IAM_PAGES.GROUPS}`);\n          })\n          .catch((err) => {\n            isSaving(false);\n            dispatch(setErrorSnackMessage(errorToHandler(err.error)));\n          });\n      };\n\n      saveRecord();\n    }\n  }, [saving, groupName, selectedUsers, dispatch, navigate]);\n\n  //Fetch Actions\n  const setSaving = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    isSaving(true);\n  };\n\n  const resetForm = () => {\n    setGroupName(\"\");\n    setSelectedUsers([]);\n  };\n\n  useEffect(() => {\n    dispatch(setHelpName(\"add_group\"));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeaderWrapper\n        label={\n          <BackLink\n            label={\"Groups\"}\n            onClick={() => navigate(IAM_PAGES.GROUPS)}\n          />\n        }\n        actions={<HelpMenu />}\n      />\n      <PageLayout>\n        <FormLayout\n          title={\"Create Group\"}\n          icon={<CreateGroupIcon />}\n          helpBox={<AddGroupHelpBox />}\n        >\n          <form noValidate autoComplete=\"off\" onSubmit={setSaving}>\n            <InputBox\n              id=\"group-name\"\n              name=\"group-name\"\n              label=\"Group Name\"\n              autoFocus={true}\n              value={groupName}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setGroupName(e.target.value);\n              }}\n            />\n            <UsersSelectors\n              selectedUsers={selectedUsers}\n              setSelectedUsers={setSelectedUsers}\n              editMode={true}\n            />\n            <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n              <Button\n                id={\"clear-group\"}\n                type=\"button\"\n                variant=\"regular\"\n                onClick={resetForm}\n                label={\"Clear\"}\n              />\n\n              <Button\n                id={\"save-group\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={saving || !validGroup}\n                label={\"Save\"}\n              />\n            </Grid>\n            {saving && (\n              <Grid item xs={12}>\n                <ProgressBar />\n              </Grid>\n            )}\n          </form>\n        </FormLayout>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default AddGroupScreen;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState, Fragment } from \"react\";\nimport get from \"lodash/get\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { Box, DataTable, Grid, ProgressBar } from \"mds\";\n\nimport { usersSort } from \"../../../utils/sortFunctions\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport SearchBox from \"../Common/SearchBox\";\n\ninterface IGroupsProps {\n  selectedUsers: string[];\n  setSelectedUsers: any;\n  editMode?: boolean;\n}\n\nconst UsersSelectors = ({\n  selectedUsers,\n  setSelectedUsers,\n  editMode = false,\n}: IGroupsProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const fetchUsers = useCallback(() => {\n    api.users\n      .listUsers()\n      .then((res) => {\n        let users = get(res.data, \"users\", []);\n\n        if (!users) {\n          users = [];\n        }\n\n        setRecords(users.sort(usersSort));\n        isLoading(false);\n      })\n      .catch((err) => {\n        dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        isLoading(false);\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsers();\n    }\n  }, [loading, fetchUsers]);\n\n  const selUsers = !selectedUsers ? [] : selectedUsers;\n\n  //Fetch Actions\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...selUsers]; // We clone the selectedGroups array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to selectedGroupsList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    setSelectedUsers(elements);\n\n    return elements;\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.accessKey.includes(filter),\n  );\n\n  return (\n    <Grid item xs={12} className={\"inputItem\"}>\n      <Box>\n        {loading && <ProgressBar />}\n        {records?.length > 0 ? (\n          <Fragment>\n            <Grid item xs={12} className={\"inputItem\"}>\n              <SearchBox\n                label={editMode ? \"Edit Members\" : \"Assign Users\"}\n                placeholder=\"Filter Users\"\n                onChange={setFilter}\n                value={filter}\n              />\n            </Grid>\n            <DataTable\n              columns={[{ label: \"Access Key\", elementKey: \"accessKey\" }]}\n              onSelect={selectionChanged}\n              selectedItems={selUsers}\n              isLoading={loading}\n              records={filteredRecords}\n              entityName=\"Users\"\n              idField=\"accessKey\"\n              customPaperHeight={\"200px\"}\n            />\n          </Fragment>\n        ) : (\n          <Box\n            sx={{\n              textAlign: \"center\",\n              padding: \"10px 0\",\n            }}\n          >\n            No Users to display\n          </Box>\n        )}\n      </Box>\n    </Grid>\n  );\n};\n\nexport default UsersSelectors;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Policy, User } from \"api/consoleApi\";\n\ninterface policyDetailsInterface {\n  policy: string;\n}\n\nexport const usersSort = (a: User, b: User) => {\n  if (a.accessKey && b.accessKey) {\n    if (a.accessKey > b.accessKey) {\n      return 1;\n    }\n    if (a.accessKey < b.accessKey) {\n      return -1;\n    }\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policySort = (a: Policy, b: Policy) => {\n  if (a.name! > b.name!) {\n    return 1;\n  }\n  if (a.name! < b.name!) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const stringSort = (a: string, b: string) => {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n\nexport const policyDetailsSort = (\n  a: policyDetailsInterface,\n  b: policyDetailsInterface,\n) => {\n  if (a.policy > b.policy) {\n    return 1;\n  }\n  if (a.policy < b.policy) {\n    return -1;\n  }\n  // a must be equal to b\n  return 0;\n};\n"],"names":["FeatureItem","_ref","icon","description","_jsxs","Box","sx","display","marginRight","height","width","marginBottom","children","_jsx","style","fontSize","fontStyle","color","flex","border","borderRadius","flexFlow","padding","marginTop","xs","fontWeight","alignItems","HelpIconFilled","paddingTop","paddingBottom","GroupsIcon","IAMPoliciesIcon","dispatch","useAppDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","groupName","setGroupName","_useState3","_useState4","saving","isSaving","_useState5","_useState6","selectedUsers","setSelectedUsers","_useState7","_useState8","validGroup","setValidGroup","useEffect","trim","api","groups","addGroup","group","members","then","res","concat","IAM_PAGES","GROUPS","catch","err","setErrorSnackMessage","errorToHandler","error","setHelpName","Fragment","PageHeaderWrapper","label","BackLink","onClick","actions","HelpMenu","PageLayout","FormLayout","title","CreateGroupIcon","helpBox","AddGroupHelpBox","noValidate","autoComplete","onSubmit","event","preventDefault","InputBox","id","name","autoFocus","value","onChange","e","target","UsersSelectors","editMode","Grid","item","modalStyleUtils","modalButtonBar","Button","type","variant","disabled","ProgressBar","_ref$editMode","records","setRecords","loading","isLoading","filter","setFilter","fetchUsers","useCallback","users","listUsers","get","data","sort","usersSort","setModalErrorSnackMessage","selUsers","filteredRecords","elementItem","accessKey","includes","className","length","SearchBox","placeholder","DataTable","columns","elementKey","onSelect","targetD","checked","elements","_toConsumableArray","push","element","selectedItems","entityName","idField","customPaperHeight","textAlign","a","b","policySort","stringSort","policyDetailsSort","policy"],"sourceRoot":""}