{"version":3,"sources":["screens/Console/Buckets/ListBuckets/Objects/ListObjects/CreateFolderModal.tsx"],"names":["mapDispatchToProps","setFileModeEnabled","connector","connect","withStyles","theme","createStyles","buttonContainer","textAlign","pathLabel","marginTop","marginBottom","modalBasic","modalOpen","folderName","bucketName","onClose","classes","useState","pathUrl","setPathUrl","isFormValid","setIsFormValid","currentPath","decodeFileName","useEffect","valid","trim","length","Fragment","title","container","className","item","xs","value","label","id","name","placeholder","onChange","e","target","required","type","color","clearButton","onClick","variant","disabled","folderPath","decodedFolderName","endsWith","newPath","encodeFileName","history","push"],"mappings":"gQA0IMA,EAAqB,CACzBC,wBAGIC,EAAYC,YAAQ,KAAMH,GAEjBE,YAAUE,aA1GV,SAACC,GAAD,OACbC,YAAa,aACXC,gBAAiB,CACfC,UAAW,SAEbC,UAAW,CACTC,UAAW,EACXC,aAAc,KAEbC,QAiGkBR,EA9FC,SAAC,GAOL,IANpBS,EAMmB,EANnBA,UACAC,EAKmB,EALnBA,WACAC,EAImB,EAJnBA,WACAC,EAGmB,EAHnBA,QACAf,EAEmB,EAFnBA,mBACAgB,EACmB,EADnBA,QAEA,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,oBAAkB,GAAxD,mBAAOG,EAAP,KAAoBC,EAApB,KAEMC,EAAW,UAAMR,EAAN,YAAoBS,YAAeV,IA8BpD,OARAW,qBAAU,WACR,IAAIC,GAAQ,EACkB,IAA1BP,EAAQQ,OAAOC,SACjBF,GAAQ,GAEVJ,EAAeI,KACd,CAACP,IAGF,cAAC,IAAMU,SAAP,UACE,cAAC,IAAD,CACEhB,UAAWA,EACXiB,MAAM,8BACNd,QAASA,EAHX,SAKE,eAAC,IAAD,CAAMe,WAAS,EAAf,UACE,qBAAIC,UAAWf,EAAQR,UAAvB,2BAAiDc,KACjD,cAAC,IAAD,CAAMU,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD,CACEC,MAAOhB,EACPiB,MAAO,kBACPC,GAAI,aACJC,KAAM,aACNC,YAAa,4BACbC,SAAU,SAACC,GACTrB,EAAWqB,EAAEC,OAAOP,QAEtBQ,UAAQ,MAGZ,eAAC,IAAD,CAAMV,MAAI,EAACC,GAAI,GAAIF,UAAWf,EAAQV,gBAAtC,UACE,wBACEqC,KAAK,SACLC,MAAM,UACNb,UAAWf,EAAQ6B,YACnBC,QAvDM,WAChB3B,EAAW,KAkDH,mBAQA,cAAC,IAAD,CACEwB,KAAK,SACLI,QAAQ,YACRH,MAAM,UACNI,UAAW5B,EACX0B,QA5DU,WACpB,IAAIG,EAAa,GACjB,GAAmB,KAAfpC,EAAmB,CACrB,IAAMqC,EAAoB3B,YAAeV,GACzCoC,EAAaC,EAAkBC,SAAS,KACpCD,EADS,UAENA,EAFM,KAIf,IAAME,EAAO,mBAAetC,EAAf,mBAAoCuC,YAAe,GAAD,OAC1DJ,GAD0D,OAC7C/B,IADL,KAGboC,IAAQC,KAAKH,GACbpD,GAAmB,GACnBe,KA0CQ","file":"static/js/158.bfc41a16.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport ModalWrapper from \"../../../../Common/ModalWrapper/ModalWrapper\";\nimport { Button, Grid } from \"@mui/material\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { modalBasic } from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { connect } from \"react-redux\";\nimport { setFileModeEnabled } from \"../../../../ObjectBrowser/actions\";\nimport history from \"../../../../../../history\";\nimport { decodeFileName, encodeFileName } from \"../../../../../../common/utils\";\n\ninterface ICreateFolder {\n  classes: any;\n  modalOpen: boolean;\n  bucketName: string;\n  folderName: string;\n  setFileModeEnabled: typeof setFileModeEnabled;\n  onClose: () => any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    pathLabel: {\n      marginTop: 0,\n      marginBottom: 32,\n    },\n    ...modalBasic,\n  });\n\nconst CreateFolderModal = ({\n  modalOpen,\n  folderName,\n  bucketName,\n  onClose,\n  setFileModeEnabled,\n  classes,\n}: ICreateFolder) => {\n  const [pathUrl, setPathUrl] = useState(\"\");\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  const currentPath = `${bucketName}/${decodeFileName(folderName)}`;\n\n  const resetForm = () => {\n    setPathUrl(\"\");\n  };\n\n  const createProcess = () => {\n    let folderPath = \"\";\n    if (folderName !== \"\") {\n      const decodedFolderName = decodeFileName(folderName);\n      folderPath = decodedFolderName.endsWith(\"/\")\n        ? decodedFolderName\n        : `${decodedFolderName}/`;\n    }\n    const newPath = `/buckets/${bucketName}/browse/${encodeFileName(\n      `${folderPath}${pathUrl}`\n    )}/`;\n    history.push(newPath);\n    setFileModeEnabled(false);\n    onClose();\n  };\n\n  useEffect(() => {\n    let valid = true;\n    if (pathUrl.trim().length === 0) {\n      valid = false;\n    }\n    setIsFormValid(valid);\n  }, [pathUrl]);\n\n  return (\n    <React.Fragment>\n      <ModalWrapper\n        modalOpen={modalOpen}\n        title=\"Choose or create a new path\"\n        onClose={onClose}\n      >\n        <Grid container>\n          <h3 className={classes.pathLabel}>Current Path: {currentPath}</h3>\n          <Grid item xs={12}>\n            <InputBoxWrapper\n              value={pathUrl}\n              label={\"New Folder Path\"}\n              id={\"folderPath\"}\n              name={\"folderPath\"}\n              placeholder={\"Enter the new Folder Path\"}\n              onChange={(e) => {\n                setPathUrl(e.target.value);\n              }}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <button\n              type=\"button\"\n              color=\"primary\"\n              className={classes.clearButton}\n              onClick={resetForm}\n            >\n              Clear\n            </button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!isFormValid}\n              onClick={createProcess}\n            >\n              Go\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalWrapper>\n    </React.Fragment>\n  );\n};\n\nconst mapDispatchToProps = {\n  setFileModeEnabled,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(withStyles(styles)(CreateFolderModal));\n"],"sourceRoot":""}