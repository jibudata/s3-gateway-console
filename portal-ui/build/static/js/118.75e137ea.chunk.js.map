{"version":3,"sources":["screens/Console/Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper.tsx","screens/shared/ErrorBlock.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Tenants/TenantDetails/ConfirmationDialog.tsx","screens/Console/Tenants/TenantDetails/TenantSecurity.tsx"],"names":["StyledSwitch","withStyles","theme","root","width","height","padding","margin","switchBase","transform","color","palette","common","white","backgroundColor","boxShadow","opacity","border","thumb","marginLeft","track","borderRadius","transition","transitions","create","checked","focusVisible","Switch","createStyles","seeMore","marginTop","spacing","paper","display","overflow","flexDirection","paddingTop","addSideBar","tableToolbar","paddingLeft","paddingRight","wrapCell","maxWidth","whiteSpace","wordWrap","minTableHeader","fontWeight","noFound","textAlign","tableContainer","maxHeight","stickyHeader","actionsTitle","fontSize","alignSelf","tableBlock","filterField","divContainer","marginBottom","indicatorLabelOn","indicatorLabel","fieldDescription","tooltip","actionsTray","fieldBasic","label","onChange","value","id","name","disabled","switchOnly","description","classes","indicatorLabels","switchComponent","Fragment","className","clsx","length","inputProps","disableRipple","disableFocusRipple","disableTouchRipple","container","alignItems","item","xs","sm","md","htmlFor","inputLabel","tooltipContainer","title","placement","component","switchContainer","errorBlock","error","main","errorMessage","withBreak","variant","tooltipHelper","textBoxContainer","flexGrow","position","flexWrap","errorState","top","right","errorText","fontFamily","lineHeight","valueString","textOverflow","fileReselect","fieldBottom","borderBottom","fileInputField","required","accept","useState","showFileSelector","setShowSelector","Grid","fieldContainer","errorInField","InputLabel","fieldLabelError","Tooltip","HelpIcon","type","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","fileProcess","data","IconButton","onClick","size","ErrorBlock","tenantDetailsStyles","containerForHeader","open","cancelLabel","okLabel","onClose","cancelOnClick","okOnClick","isSending","setIsSending","Dialog","DialogTitle","DialogContent","LinearProgress","DialogContentText","DialogActions","Button","autoFocus","mapDispatchToProps","setErrorSnackMessage","setTenantDetailsLoad","connector","connect","state","loadingTenant","tenants","tenantDetails","selectedTenant","currentTenant","tenant","tenantInfo","loaderAlign","bold","italic","fontStyle","underline","textDecorationLine","paperContainer","verifiedIcon","bottom","noUnderLine","textDecoration","certificateInfo","certificateInfoName","dialogOpen","setDialogOpen","enableAutoCert","setEnableAutoCert","enableCustomCerts","setEnableCustomCerts","certificatesToBeRemoved","setCertificatesToBeRemoved","minioCertificates","setMinioCertificates","minioCaCertificates","setMinioCaCertificates","minioTLSCertificateSecrets","setMinioTLSCertificateSecrets","minioTLSCaCertificateSecrets","setMinioTLSCaCertificateSecrets","getTenantSecurityInfo","useCallback","api","invoke","namespace","then","res","autoCert","customCertificates","minio","minioCAs","catch","err","useEffect","removeCertificate","updatedMinIOTLSCertificateSecrets","filter","certificateSecret","updatedMinIOTLSCaCertificateSecrets","addFileToKeyPair","key","certificates","updateCertificates","map","deleteKeyPair","addKeyPair","Date","now","cert","encoded_key","encoded_cert","payload","secretsToBeDeleted","keyPair","crt","Paper","CircularProgress","sectionTitle","FormSwitchWrapper","buttonContainer","Typography","gutterBottom","Chip","domains","dom","format","expiry","onDelete","FileSelector","encodedValue"],"mappings":"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","file":"static/js/118.75e137ea.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { InputLabel, Switch, Tooltip, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { actionsTray, fieldBasic } from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport clsx from \"clsx\";\n\ninterface IFormSwitch {\n  label?: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  description?: string;\n  index?: number;\n  checked: boolean;\n  switchOnly?: boolean;\n  indicatorLabels?: string[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    seeMore: {\n      marginTop: theme.spacing(3),\n    },\n    paper: {\n      display: \"flex\",\n      overflow: \"auto\",\n      flexDirection: \"column\",\n      paddingTop: 15,\n      boxShadow: \"none\",\n    },\n    addSideBar: {\n      width: \"320px\",\n      padding: \"20px\",\n    },\n    tableToolbar: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(0),\n    },\n    wrapCell: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    minTableHeader: {\n      color: \"#393939\",\n      \"& tr\": {\n        \"& th\": {\n          fontWeight: \"bold\",\n        },\n      },\n    },\n    noFound: {\n      textAlign: \"center\",\n      padding: \"10px 0\",\n    },\n    tableContainer: {\n      maxHeight: 200,\n    },\n    stickyHeader: {\n      backgroundColor: \"#fff\",\n    },\n    actionsTitle: {\n      fontWeight: 600,\n      color: \"#081C42\",\n      fontSize: 16,\n      alignSelf: \"center\",\n    },\n    tableBlock: {\n      marginTop: 15,\n    },\n    filterField: {\n      width: 375,\n      fontWeight: 600,\n      \"& .input\": {\n        \"&::placeholder\": {\n          fontWeight: 600,\n          color: \"#081C42\",\n        },\n      },\n    },\n    divContainer: {\n      marginBottom: 20,\n    },\n    indicatorLabelOn: {\n      fontWeight: \"bold\",\n      color: \"#081C42 !important\",\n    },\n    indicatorLabel: {\n      fontSize: 12,\n      color: \"#E2E2E2\",\n      margin: \"0 8px 0 10px\",\n    },\n    fieldDescription: {\n      marginTop: 4,\n      color: \"#999999\",\n    },\n    tooltip: {\n      fontSize: 16,\n    },\n    ...actionsTray,\n    ...fieldBasic,\n  });\n\nconst StyledSwitch = withStyles((theme) => ({\n  root: {\n    width: 50,\n    height: 24,\n    padding: 0,\n    margin: 0,\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(24px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#4CCB92\",\n        boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#4CCB92\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 22,\n    height: 22,\n    backgroundColor: \"#FAFAFA\",\n    border: \"2px solid #FFFFFF\",\n    marginLeft: 1,\n  },\n  track: {\n    borderRadius: 24 / 2,\n    backgroundColor: \"#E2E2E2\",\n    boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n}))(Switch);\n\nconst FormSwitchWrapper = ({\n  label = \"\",\n  onChange,\n  value,\n  id,\n  name,\n  checked = false,\n  disabled = false,\n  switchOnly = false,\n  tooltip = \"\",\n  description = \"\",\n  classes,\n  indicatorLabels,\n}: IFormSwitch) => {\n  const switchComponent = (\n    <React.Fragment>\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: !checked,\n          })}\n        >\n          {indicatorLabels && indicatorLabels.length > 1\n            ? indicatorLabels[1]\n            : \"OFF\"}\n        </span>\n      )}\n      <StyledSwitch\n        checked={checked}\n        onChange={onChange}\n        color=\"primary\"\n        name={name}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        disabled={disabled}\n        disableRipple\n        disableFocusRipple\n        disableTouchRipple\n        value={value}\n      />\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: checked,\n          })}\n        >\n          {indicatorLabels ? indicatorLabels[0] : \"ON\"}\n        </span>\n      )}\n    </React.Fragment>\n  );\n\n  if (switchOnly) {\n    return switchComponent;\n  }\n\n  return (\n    <div className={classes.divContainer}>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs>\n          <Grid container>\n            <Grid item xs={12} sm={4} md={3}>\n              {label !== \"\" && (\n                <InputLabel htmlFor={id} className={classes.inputLabel}>\n                  <span>{label}</span>\n                  {tooltip !== \"\" && (\n                    <div className={classes.tooltipContainer}>\n                      <Tooltip title={tooltip} placement=\"top-start\">\n                        <div className={classes.tooltip}>\n                          <HelpIcon />\n                        </div>\n                      </Tooltip>\n                    </div>\n                  )}\n                </InputLabel>\n              )}\n            </Grid>\n            <Grid item xs={12} sm textAlign={\"left\"}>\n              {description !== \"\" && (\n                <Typography component=\"p\" className={classes.fieldDescription}>\n                  {description}\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid\n          item\n          xs={12}\n          sm={2}\n          textAlign={\"right\"}\n          className={classes.switchContainer}\n        >\n          {switchComponent}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(FormSwitchWrapper);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst componentHeight = 48;\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n      display: \"flex\",\n      flexWrap: \"nowrap\",\n      height: componentHeight,\n    },\n    errorState: {\n      color: \"#b53b4b\",\n      fontSize: 14,\n      position: \"absolute\",\n      top: 7,\n      right: 7,\n    },\n    errorText: {\n      margin: \"0\",\n      fontSize: \"0.75rem\",\n      marginTop: 3,\n      textAlign: \"left\",\n      fontFamily: \"Lato,sans-serif\",\n      fontWeight: 400,\n      lineHeight: \"1.66\",\n      color: \"#dc1f2e\",\n    },\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileReselect: {\n      display: \"flex\",\n      alignItems: \"center\",\n      height: componentHeight,\n    },\n    fieldBottom: {\n      borderBottom: \"#9c9c9c 1px solid\",\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"large\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"large\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","import React, { useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  LinearProgress,\n} from \"@mui/material\";\n\ninterface IConfirmationDialog {\n  classes: any;\n  open: boolean;\n  cancelLabel: string;\n  okLabel: string;\n  onClose: any;\n  cancelOnClick: any;\n  okOnClick: any;\n  title: string;\n  description: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst ConfirmationDialog = ({\n  classes,\n  open,\n  cancelLabel,\n  okLabel,\n  onClose,\n  cancelOnClick,\n  okOnClick,\n  title,\n  description,\n}: IConfirmationDialog) => {\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const onClick = () => {\n    setIsSending(true);\n    if (okOnClick !== null) {\n      okOnClick();\n    }\n    setIsSending(false);\n  };\n  if (!open) return null;\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n      <DialogContent>\n        {isSending && <LinearProgress />}\n        <DialogContentText id=\"alert-dialog-description\">\n          {description}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={cancelOnClick} color=\"primary\" disabled={isSending}>\n          {cancelLabel || \"Cancel\"}\n        </Button>\n        <Button onClick={onClick} color=\"secondary\" autoFocus>\n          {okLabel || \"Ok\"}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmationDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ITenant } from \"../ListTenants/types\";\nimport { ICertificateInfo, ITenantSecurityResponse } from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  tenantDetailsStyles,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Chip from \"@mui/material/Chip\";\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport Moment from \"react-moment\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport api from \"../../../../common/api\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setTenantDetailsLoad } from \"../actions\";\nimport ConfirmationDialog from \"./ConfirmationDialog\";\n\ninterface ITenantSecurity {\n  classes: any;\n  loadingTenant: boolean;\n  tenant: ITenant | null;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  setTenantDetailsLoad: typeof setTenantDetailsLoad;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    title: {\n      marginTop: 35,\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    underline: { textDecorationLine: \"underline\" },\n    paperContainer: {\n      padding: \"15px 15px 15px 50px\",\n    },\n    verifiedIcon: {\n      width: 96,\n      position: \"absolute\",\n      right: 0,\n      bottom: 29,\n    },\n    noUnderLine: {\n      textDecoration: \"none\",\n    },\n    certificateInfo: {\n      height: \"auto\",\n      margin: 5,\n    },\n    certificateInfoName: {\n      fontWeight: \"bold\",\n    },\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst TenantSecurity = ({\n  classes,\n  tenant,\n  loadingTenant,\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n}: ITenantSecurity) => {\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [enableAutoCert, setEnableAutoCert] = useState<boolean>(false);\n  const [enableCustomCerts, setEnableCustomCerts] = useState<boolean>(false);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  // MinIO certificates\n  const [minioCertificates, setMinioCertificates] = useState<KeyPair[]>([]);\n  const [minioCaCertificates, setMinioCaCertificates] = useState<KeyPair[]>([]);\n  const [minioTLSCertificateSecrets, setMinioTLSCertificateSecrets] = useState<\n    ICertificateInfo[]\n  >([]);\n  const [minioTLSCaCertificateSecrets, setMinioTLSCaCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n\n  const getTenantSecurityInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`\n      )\n      .then((res: ITenantSecurityResponse) => {\n        setEnableAutoCert(res.autoCert);\n        if (res.customCertificates.minio || res.customCertificates.minioCAs) {\n          setEnableCustomCerts(true);\n        }\n        setMinioTLSCertificateSecrets(res.customCertificates.minio || []);\n        setMinioTLSCaCertificateSecrets(res.customCertificates.minioCAs || []);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setErrorSnackMessage(err);\n      });\n  }, [tenant, setErrorSnackMessage]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantSecurityInfo();\n    }\n  }, [tenant, getTenantSecurityInfo]);\n\n  const updateTenantSecurity = () => {\n    setIsSending(true);\n    let payload = {\n      autoCert: enableAutoCert,\n      customCertificates: {},\n    };\n    if (enableCustomCerts) {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: certificatesToBeRemoved,\n        minio: minioCertificates\n          .map((keyPair: KeyPair) => ({\n            crt: keyPair.encoded_cert,\n            key: keyPair.encoded_key,\n          }))\n          .filter((cert: any) => cert.crt && cert.key),\n        minioCAs: minioCaCertificates\n          .map((keyPair: KeyPair) => keyPair.encoded_cert)\n          .filter((cert: any) => cert),\n      };\n    } else {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: [\n          ...minioTLSCertificateSecrets.map((cert) => cert.name),\n          ...minioTLSCaCertificateSecrets.map((cert) => cert.name),\n        ],\n        minio: [],\n        minioCAs: [],\n      };\n    }\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        // Refresh Information and reset forms\n        setMinioCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        setMinioCaCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        getTenantSecurityInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setErrorSnackMessage(err);\n        setIsSending(false);\n      });\n  };\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    // TLS certificate secrets can be referenced MinIO, Console or KES, we need to remove the secret from all list and update\n    // the arrays\n    // Add certificate to the global list of secrets to be removed\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n\n    // Update MinIO TLS certificate secrets\n    const updatedMinIOTLSCertificateSecrets = minioTLSCertificateSecrets.filter(\n      (certificateSecret) => certificateSecret.name !== certificateInfo.name\n    );\n    const updatedMinIOTLSCaCertificateSecrets =\n      minioTLSCaCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\n      );\n    setMinioTLSCertificateSecrets(updatedMinIOTLSCertificateSecrets);\n    setMinioTLSCaCertificateSecrets(updatedMinIOTLSCaCertificateSecrets);\n  };\n\n  const addFileToKeyPair = (\n    type: string,\n    id: string,\n    key: string,\n    fileName: string,\n    value: string\n  ) => {\n    let certificates = minioCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioCertificates;\n        updateCertificates = setMinioCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    const NCertList = certificates.map((item: KeyPair) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          [key]: fileName,\n          [`encoded_${key}`]: value,\n        };\n      }\n      return item;\n    });\n    updateCertificates(NCertList);\n  };\n\n  const deleteKeyPair = (type: string, id: string) => {\n    let certificates = minioCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioCertificates;\n        updateCertificates = setMinioCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    if (certificates.length > 1) {\n      const cleanCertsList = certificates.filter(\n        (item: KeyPair) => item.id !== id\n      );\n      updateCertificates(cleanCertsList);\n    }\n  };\n\n  const addKeyPair = (type: string) => {\n    let certificates = minioCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioCertificates;\n        updateCertificates = setMinioCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n    const updatedCertificates = [\n      ...certificates,\n      {\n        id: Date.now().toString(),\n        key: \"\",\n        cert: \"\",\n        encoded_key: \"\",\n        encoded_cert: \"\",\n      },\n    ];\n    updateCertificates(updatedCertificates);\n  };\n  return (\n    <React.Fragment>\n      <ConfirmationDialog\n        open={dialogOpen}\n        title=\"Save and Restart\"\n        description=\"Are you sure you want to save the changes and restart the service?\"\n        onClose={() => setDialogOpen(false)}\n        cancelOnClick={() => setDialogOpen(false)}\n        okOnClick={updateTenantSecurity}\n        cancelLabel=\"Cancel\"\n        okLabel={\"Restart\"}\n      />\n      {loadingTenant ? (\n        <Paper className={classes.paperContainer}>\n          <div className={classes.loaderAlign}>\n            <CircularProgress />\n          </div>\n        </Paper>\n      ) : (\n        <Fragment>\n          <h1 className={classes.sectionTitle}>Security</h1>\n          <Paper className={classes.paperContainer}>\n            <Grid item xs={12} className={classes.title}>\n              <FormSwitchWrapper\n                value=\"enableAutoCert\"\n                id=\"enableAutoCert\"\n                name=\"enableAutoCert\"\n                checked={enableAutoCert}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setEnableAutoCert(checked);\n                }}\n                label={\"TLS\"}\n                description={\n                  \"The internode certificates will be generated and managed by MinIO Operator\"\n                }\n              />\n              <FormSwitchWrapper\n                value=\"enableCustomCerts\"\n                id=\"enableCustomCerts\"\n                name=\"enableCustomCerts\"\n                checked={enableCustomCerts}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setEnableCustomCerts(checked);\n                }}\n                label={\"Custom Certificates\"}\n              />\n            </Grid>\n            <Grid item xs={12} className={classes.buttonContainer}>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={dialogOpen || isSending}\n                onClick={() => setDialogOpen(true)}\n              >\n                Save\n              </Button>\n            </Grid>\n          </Paper>\n          {enableCustomCerts && (\n            <Fragment>\n              <br />\n              <Paper className={classes.paperContainer}>\n                <Grid container>\n                  <Grid container item xs={12}>\n                    <Typography variant=\"h5\" display=\"block\" gutterBottom>\n                      MinIO Certificates\n                    </Typography>\n                  </Grid>\n                  <Grid container item xs={12}>\n                    {minioTLSCertificateSecrets.map(\n                      (certificateInfo: ICertificateInfo) => (\n                        <Chip\n                          key={certificateInfo.name}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          className={classes.certificateInfo}\n                          label={\n                            <div>\n                              <Typography\n                                variant=\"subtitle1\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {certificateInfo.name}\n                              </Typography>\n                              <Typography\n                                className={classes.italic}\n                                variant=\"caption\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {certificateInfo.domains &&\n                                  certificateInfo.domains.map((dom) => {\n                                    return <div>{dom}</div>;\n                                  })}\n                              </Typography>\n                              <Typography\n                                className={classes.bold}\n                                variant=\"overline\"\n                                gutterBottom\n                              >\n                                Expiry:&nbsp;\n                              </Typography>\n                              <Typography variant=\"caption\" gutterBottom>\n                                <Moment format=\"YYYY-MM-DD\">\n                                  {certificateInfo.expiry}\n                                </Moment>\n                              </Typography>\n                            </div>\n                          }\n                          onDelete={() => removeCertificate(certificateInfo)}\n                        />\n                      )\n                    )}\n                  </Grid>\n                  <Grid container item xs={12}>\n                    <br />\n                  </Grid>\n                  <Grid container item xs={12}>\n                    {minioCertificates.map((keyPair) => (\n                      <Fragment key={keyPair.id}>\n                        <Grid item xs={5}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              addFileToKeyPair(\n                                \"minio\",\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              )\n                            }\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                        </Grid>\n                        <Grid item xs={5}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              addFileToKeyPair(\n                                \"minio\",\n                                keyPair.id,\n                                \"key\",\n                                fileName,\n                                encodedValue\n                              )\n                            }\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                          />\n                        </Grid>\n                        <Grid item xs={1}>\n                          <Button\n                            onClick={() => deleteKeyPair(\"minio\", keyPair.id)}\n                            color=\"secondary\"\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Fragment>\n                    ))}\n                  </Grid>\n                  <Grid container item xs={12}>\n                    <Button onClick={() => addKeyPair(\"minio\")} color=\"primary\">\n                      Add Certificate\n                    </Button>\n                  </Grid>\n                  <Grid container item xs={12}>\n                    <br />\n                  </Grid>\n\n                  <Grid container item xs={12}>\n                    <Typography variant=\"h6\" display=\"block\" gutterBottom>\n                      MinIO CA Certificates\n                    </Typography>\n                  </Grid>\n                  <Grid container item xs={12}>\n                    {minioTLSCaCertificateSecrets.map(\n                      (certificateInfo: ICertificateInfo) => (\n                        <Chip\n                          key={certificateInfo.name}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          className={classes.certificateInfo}\n                          label={\n                            <div>\n                              <Typography\n                                variant=\"subtitle1\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {certificateInfo.name}\n                              </Typography>\n                              <Typography\n                                className={classes.italic}\n                                variant=\"caption\"\n                                display=\"block\"\n                                gutterBottom\n                              >\n                                {certificateInfo.domains &&\n                                  certificateInfo.domains.map((dom) => {\n                                    return <div>{dom}</div>;\n                                  })}\n                              </Typography>\n                              <Typography\n                                className={classes.bold}\n                                variant=\"overline\"\n                                gutterBottom\n                              >\n                                Expiry:&nbsp;\n                              </Typography>\n                              <Typography variant=\"caption\" gutterBottom>\n                                <Moment format=\"YYYY-MM-DD\">\n                                  {certificateInfo.expiry}\n                                </Moment>\n                              </Typography>\n                            </div>\n                          }\n                          onDelete={() => removeCertificate(certificateInfo)}\n                        />\n                      )\n                    )}\n                  </Grid>\n                  <Grid container item xs={12}>\n                    <br />\n                  </Grid>\n                  <Grid container item xs={12}>\n                    {minioCaCertificates.map((keyPair: KeyPair) => (\n                      <Fragment key={keyPair.id}>\n                        <Grid item xs={10}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) =>\n                              addFileToKeyPair(\n                                \"minioCAs\",\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              )\n                            }\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                        </Grid>\n                        <Grid item xs={1}>\n                          <Button\n                            onClick={() =>\n                              deleteKeyPair(\"minioCAs\", keyPair.id)\n                            }\n                            color=\"secondary\"\n                          >\n                            Remove\n                          </Button>\n                        </Grid>\n                      </Fragment>\n                    ))}\n                  </Grid>\n                  <Grid container item xs={12}>\n                    <Button\n                      onClick={() => addKeyPair(\"minioCAs\")}\n                      color=\"primary\"\n                    >\n                      Add CA Certificate\n                    </Button>\n                  </Grid>\n                  <Grid item xs={12} className={classes.buttonContainer}>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={dialogOpen || isSending}\n                      onClick={() => setDialogOpen(true)}\n                    >\n                      Save\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.tenantDetails.loadingTenant,\n  selectedTenant: state.tenants.tenantDetails.currentTenant,\n  tenant: state.tenants.tenantDetails.tenantInfo,\n});\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n  setTenantDetailsLoad,\n};\n\nconst connector = connect(mapState, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(TenantSecurity));\n"],"sourceRoot":""}