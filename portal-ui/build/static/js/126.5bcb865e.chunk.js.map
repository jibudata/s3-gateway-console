{"version":3,"sources":["screens/Console/Common/FormComponents/ModalError/ModalError.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/Common/FormComponents/InputBoxWrapper/InputBoxWrapper.tsx","screens/Console/Common/FormComponents/AutocompleteWrapper/AutocompleteWrapper.tsx","screens/Console/Buckets/BucketDetails/AddEvent.tsx"],"names":["timerI","stopHideTimer","clearInterval","mapDispatchToProps","displayErrorMessage","setModalErrorSnackMessage","connector","connect","state","modalSnackMessage","system","modalSnackBar","withStyles","theme","createStyles","modalErrorContainer","position","marginTop","width","backgroundColor","border","borderLeftWidth","borderRadius","zIndex","padding","left","transform","opacity","transitionDuration","modalErrorShow","closeButton","right","fontSize","cursor","errorTitle","display","alignItems","errorLabel","color","fontWeight","marginLeft","marginRight","messageIcon","height","detailsButton","paddingLeft","transformDuration","extraDetailsContainer","fontStyle","lineHeight","transition","overflow","extraDetailsOpen","arrowElement","arrowOpen","classes","customStyle","useState","detailsOpen","setDetailsOpen","displayErrorMsg","setDisplayErrorMsg","closeErrorMessage","useCallback","useEffect","detailedError","errorMessage","message","type","get","messageDetails","className","style","onMouseOver","onMouseLeave","setInterval","onClick","detailsContainerLink","baseCloseLine","content","borderLeft","setModalSnackMessage","dialogContainer","closeContainer","textAlign","closeIcon","borderColor","titleClass","whiteSpace","textOverflow","modalContent","customDialogSize","maxWidth","snackBarCommon","onClose","modalOpen","title","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","customSize","paper","fullWidth","detailedErrorMsg","length","Dialog","open","Snackbar","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","IconButton","disableRipple","size","DialogTitle","id","DialogContent","inputStyles","makeStyles","inputFieldStyles","InputField","props","InputProps","fieldBasic","tooltipHelper","textBoxContainer","flexGrow","overlayAction","top","maxHeight","label","onChange","value","name","autoComplete","disabled","multiline","tooltip","index","error","required","placeholder","min","max","overlayIcon","overlayObject","extraInputProps","noLabelMinWidth","inputProps","Fragment","container","errorInField","inputBoxContainer","htmlFor","noMinWidthLabel","inputLabel","tooltipContainer","placement","helperText","inputRebase","disableFocusRipple","disableTouchRipple","TextField","options","internalValue","setInternalValue","Grid","item","xs","fieldContainer","InputLabel","Tooltip","HelpIcon","FormControl","Autocomplete","getOptionLabel","option","isOptionEqualToValue","renderInput","params","_","selectedValue","autoHighlight","minTableHeader","buttonContainer","modalBasic","selectedBucket","closeModalAndRefresh","addLoading","setAddLoading","prefix","setPrefix","suffix","setSuffix","arn","setArn","selectedEvents","setSelectedEvents","arnList","setArnList","fetchArnList","api","invoke","then","res","arns","catch","err","handleClick","event","selectedIndex","indexOf","newSelected","concat","slice","arnValues","map","arnConstant","ModalWrapper","noValidate","onSubmit","e","preventDefault","configuration","events","ignoreExisting","formScrollable","Table","TableHead","TableRow","TableCell","TableBody","row","Checkbox","checked","includes","wrapCell","InputBoxWrapper","target","Button","variant","LinearProgress"],"mappings":"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","file":"static/js/126.5bcb865e.chunk.js","sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\nimport ErrorOutlineIcon from \"@mui/icons-material/ErrorOutline\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../store\";\nimport {\n  setErrorSnackMessage,\n  setModalErrorSnackMessage,\n} from \"../../../../../actions\";\nimport { snackBarMessage } from \"../../../../../types\";\n\ninterface ImodalErrorProps {\n  customStyle?: any;\n  classes: any;\n  modalSnackMessage: snackBarMessage;\n  displayErrorMessage: typeof setErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    modalErrorContainer: {\n      position: \"absolute\",\n      marginTop: 10,\n      width: \"80%\",\n      backgroundColor: \"#fff\",\n      border: \"#C72C48 1px solid\",\n      borderLeftWidth: 12,\n      borderRadius: 3,\n      zIndex: 1000,\n      padding: \"10px 15px\",\n      left: \"50%\",\n      transform: \"translateX(-50%)\",\n      opacity: 0,\n      transitionDuration: \"0.2s\",\n    },\n    modalErrorShow: {\n      opacity: 1,\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: 5,\n      fontSize: \"small\",\n      border: 0,\n      backgroundColor: \"#fff\",\n      cursor: \"pointer\",\n    },\n    errorTitle: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    errorLabel: {\n      color: \"#000\",\n      fontSize: 18,\n      fontWeight: 500,\n      marginLeft: 5,\n      marginRight: 25,\n    },\n    messageIcon: {\n      color: \"#C72C48\",\n      display: \"flex\",\n      \"& svg\": {\n        width: 32,\n        height: 32,\n      },\n    },\n    detailsButton: {\n      color: \"#9C9C9C\",\n      display: \"flex\",\n      alignItems: \"center\",\n      border: 0,\n      backgroundColor: \"transparent\",\n      paddingLeft: 5,\n      fontSize: 14,\n      transformDuration: \"0.3s\",\n      cursor: \"pointer\",\n    },\n    extraDetailsContainer: {\n      fontStyle: \"italic\",\n      color: \"#9C9C9C\",\n      lineHeight: 0,\n      padding: \"0 10px\",\n      transition: \"all .2s ease-in-out\",\n      overflow: \"hidden\",\n    },\n    extraDetailsOpen: {\n      lineHeight: 1,\n      padding: \"3px 10px\",\n    },\n    arrowElement: {\n      marginLeft: -5,\n    },\n    arrowOpen: {\n      transform: \"rotateZ(90deg)\",\n      transformDuration: \"0.3s\",\n    },\n  });\n\nvar timerI: any;\n\nconst startHideTimer = (callbackFunction: () => void) => {\n  timerI = setInterval(callbackFunction, 10000);\n};\n\nconst stopHideTimer = () => {\n  clearInterval(timerI);\n};\n\nconst ModalError = ({\n  classes,\n  modalSnackMessage,\n  displayErrorMessage,\n  customStyle,\n}: ImodalErrorProps) => {\n  const [detailsOpen, setDetailsOpen] = useState<boolean>(false);\n  const [displayErrorMsg, setDisplayErrorMsg] = useState<boolean>(false);\n\n  const closeErrorMessage = useCallback(() => {\n    setDisplayErrorMsg(false);\n  }, []);\n\n  useEffect(() => {\n    if (!displayErrorMsg) {\n      displayErrorMessage({ detailedError: \"\", errorMessage: \"\" });\n      setDetailsOpen(false);\n      //clearInterval(timerI);\n    }\n  }, [displayErrorMessage, displayErrorMsg]);\n\n  useEffect(() => {\n    if (\n      modalSnackMessage.message !== \"\" &&\n      modalSnackMessage.type === \"error\"\n    ) {\n      //Error message received, we trigger the animation\n      setDisplayErrorMsg(true);\n      //startHideTimer(closeErrorMessage);\n    }\n  }, [closeErrorMessage, modalSnackMessage.message, modalSnackMessage.type]);\n\n  const detailsToggle = () => {\n    setDetailsOpen(!detailsOpen);\n  };\n\n  const message = get(modalSnackMessage, \"message\", \"\");\n  const messageDetails = get(modalSnackMessage, \"detailedErrorMsg\", \"\");\n\n  if (modalSnackMessage.type !== \"error\" || message === \"\") {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <div\n        className={`${classes.modalErrorContainer} ${\n          displayErrorMsg ? classes.modalErrorShow : \"\"\n        }`}\n        style={customStyle}\n        onMouseOver={stopHideTimer}\n        onMouseLeave={() => startHideTimer(closeErrorMessage)}\n      >\n        <button className={classes.closeButton} onClick={closeErrorMessage}>\n          <CloseIcon />\n        </button>\n        <div className={classes.errorTitle}>\n          <span className={classes.messageIcon}>\n            <ErrorOutlineIcon />\n          </span>\n          <span className={classes.errorLabel}>{message}</span>\n        </div>\n        {messageDetails !== \"\" && (\n          <Fragment>\n            <div className={classes.detailsContainerLink}>\n              <button className={classes.detailsButton} onClick={detailsToggle}>\n                Details\n                <ArrowRightIcon\n                  className={`${classes.arrowElement} ${\n                    detailsOpen ? classes.arrowOpen : \"\"\n                  }`}\n                />\n              </button>\n            </div>\n            <div\n              className={`${classes.extraDetailsContainer} ${\n                detailsOpen ? classes.extraDetailsOpen : \"\"\n              }`}\n            >\n              {messageDetails}\n            </div>\n          </Fragment>\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst mapDispatchToProps = {\n  displayErrorMessage: setModalErrorSnackMessage,\n};\n\nconst connector = connect(mapState, mapDispatchToProps);\n\nexport default connector(withStyles(styles)(ModalError));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { snackBarCommon } from \"../FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../store\";\nimport { snackBarMessage } from \"../../../../types\";\nimport { setModalSnackMessage } from \"../../../../actions\";\nimport ModalError from \"../FormComponents/ModalError/ModalError\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  modalSnackMessage?: snackBarMessage;\n  noContentPadding?: boolean;\n  setModalSnackMessage: typeof setModalSnackMessage;\n}\n\nconst baseCloseLine = {\n  content: '\" \"',\n  borderLeft: \"2px solid #9C9C9C\",\n  height: 33,\n  width: 1,\n  position: \"absolute\",\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    dialogContainer: {\n      padding: \"8px 15px 22px\",\n    },\n    closeContainer: {\n      textAlign: \"right\",\n    },\n    closeButton: {\n      height: 16,\n      width: 16,\n      padding: 0,\n      backgroundColor: \"initial\",\n      \"&:hover\": {\n        backgroundColor: \"initial\",\n      },\n      \"&:active\": {\n        backgroundColor: \"initial\",\n      },\n    },\n    closeIcon: {\n      \"&::before\": {\n        ...baseCloseLine,\n        transform: \"rotate(45deg)\",\n        height: 12,\n      },\n      \"&::after\": {\n        ...baseCloseLine,\n        transform: \"rotate(-45deg)\",\n        height: 12,\n      },\n      \"&:hover::before, &:hover::after\": {\n        borderColor: \"#9C9C9C\",\n      },\n      display: \"block\",\n      position: \"relative\",\n      height: 12,\n      width: 12,\n    },\n    titleClass: {\n      padding: \"0px 50px 12px\",\n      fontSize: \"1.2rem\",\n      fontWeight: 600,\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n      textOverflow: \"ellipsis\",\n    },\n    modalContent: {\n      padding: \"0 50px\",\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  modalSnackMessage,\n  noContentPadding,\n  setModalSnackMessage,\n}: IModalProps) => {\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  useEffect(() => {\n    setModalSnackMessage(\"\");\n  }, [setModalSnackMessage]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    setModalSnackMessage(\"\");\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      onClose={onClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      {...customSize}\n    >\n      <div className={classes.dialogContainer}>\n        <ModalError />\n        <Snackbar\n          open={openSnackbar}\n          className={classes.snackBarModal}\n          onClose={() => {\n            closeSnackBar();\n          }}\n          message={message}\n          ContentProps={{\n            className: `${classes.snackBar} ${\n              modalSnackMessage && modalSnackMessage.type === \"error\"\n                ? classes.errorSnackBar\n                : \"\"\n            }`,\n          }}\n          autoHideDuration={\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? 10000\n              : 5000\n          }\n        />\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"large\"\n          >\n            <span className={classes.closeIcon} />\n          </IconButton>\n        </div>\n        <DialogTitle id=\"alert-dialog-title\" className={classes.titleClass}>\n          {title}\n        </DialogTitle>\n        <DialogContent className={noContentPadding ? \"\" : classes.modalContent}>\n          {children}\n        </DialogContent>\n      </div>\n    </Dialog>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  modalSnackMessage: state.system.modalSnackBar,\n});\n\nconst connector = connect(mapState, {\n  setModalSnackMessage,\n});\n\nexport default withStyles(styles)(connector(ModalWrapper));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport {\n  Grid,\n  IconButton,\n  InputLabel,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  multiline?: boolean;\n  type?: string;\n  tooltip?: string;\n  autoComplete?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n  min?: string;\n  max?: string;\n  overlayIcon?: any;\n  overlayAction?: () => void;\n  overlayObject?: any;\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n  noLabelMinWidth?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    overlayAction: {\n      position: \"absolute\",\n      right: 5,\n      top: 6,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"&.withLabel\": {\n        top: 5,\n      },\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  })\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst InputBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  type = \"text\",\n  autoComplete = \"off\",\n  disabled = false,\n  multiline = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  min,\n  max,\n  overlayIcon = null,\n  overlayObject = null,\n  extraInputProps = {},\n  overlayAction,\n  noLabelMinWidth = false,\n  classes,\n}: InputBoxProps) => {\n  let inputProps: any = { \"data-index\": index, ...extraInputProps };\n\n  if (type === \"number\" && min) {\n    inputProps[\"min\"] = min;\n  }\n\n  if (type === \"number\" && max) {\n    inputProps[\"max\"] = max;\n  }\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        className={` ${\n          error !== \"\" ? classes.errorInField : classes.inputBoxContainer\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={\n              noLabelMinWidth ? classes.noMinWidthLabel : classes.inputLabel\n            }\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <InputField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            type={type}\n            multiline={multiline}\n            autoComplete={autoComplete}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            className={classes.inputRebase}\n          />\n          {overlayIcon && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              <IconButton\n                onClick={\n                  overlayAction\n                    ? () => {\n                        overlayAction();\n                      }\n                    : () => null\n                }\n                size={\"small\"}\n                disableFocusRipple={false}\n                disableRipple={false}\n                disableTouchRipple={false}\n              >\n                {overlayIcon}\n              </IconButton>\n            </div>\n          )}\n          {overlayObject && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              {overlayObject}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(InputBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  FormControl,\n  InputLabel,\n  OutlinedInputProps,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\n\ninterface selectorTypes {\n  label: string;\n  value: string;\n}\n\ninterface SelectProps {\n  options: selectorTypes[];\n  value: string;\n  label: string;\n  id: string;\n  name: string;\n  tooltip?: string;\n  onChange: (returnedValue: string) => void;\n  disabled?: boolean;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  })\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst AutocompleteWrapper = ({\n  classes,\n  id,\n  name,\n  onChange,\n  options,\n  label,\n  tooltip = \"\",\n  value,\n  disabled = false,\n}: SelectProps) => {\n  const [internalValue, setInternalValue] = useState<selectorTypes>(options[0]);\n\n  const executeOnSelect = (_: any, selectedValue: any) => {\n    if (selectedValue) {\n      onChange(selectedValue.value);\n      setInternalValue(selectedValue);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} className={classes.fieldContainer}>\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>{label}</span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n        <FormControl fullWidth>\n          <Autocomplete\n            id={id}\n            options={options}\n            getOptionLabel={(option) => option.label}\n            isOptionEqualToValue={(option) => option.value === value}\n            disabled={disabled}\n            renderInput={(params) => <InputField {...params} name={name} />}\n            value={internalValue}\n            onChange={executeOnSelect}\n            autoHighlight\n          />\n        </FormControl>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(AutocompleteWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { ChangeEvent, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport api from \"../../../../common/api\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableBody from \"@mui/material/TableBody\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport Table from \"@mui/material/Table\";\nimport { ArnList } from \"../types\";\nimport { modalBasic } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AutocompleteWrapper from \"../../Common/FormComponents/AutocompleteWrapper/AutocompleteWrapper\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    minTableHeader: {\n      color: \"#393939\",\n      \"& tr\": {\n        \"& th\": {\n          fontWeight: \"bold\",\n        },\n      },\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    ...modalBasic,\n  });\n\ninterface IAddEventProps {\n  classes: any;\n  open: boolean;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst AddEvent = ({\n  classes,\n  open,\n  selectedBucket,\n  closeModalAndRefresh,\n  setModalErrorSnackMessage,\n}: IAddEventProps) => {\n  const [addLoading, setAddLoading] = useState<boolean>(false);\n  const [prefix, setPrefix] = useState<string>(\"\");\n  const [suffix, setSuffix] = useState<string>(\"\");\n  const [arn, setArn] = useState<string>(\"\");\n  const [selectedEvents, setSelectedEvents] = useState<string[]>([]);\n  const [arnList, setArnList] = useState<string[]>([]);\n\n  const addRecord = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (addLoading) {\n      return;\n    }\n    setAddLoading(true);\n    api\n      .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/events`, {\n        configuration: {\n          arn: arn,\n          events: selectedEvents,\n          prefix: prefix,\n          suffix: suffix,\n        },\n        ignoreExisting: true,\n      })\n      .then(() => {\n        setAddLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        setModalErrorSnackMessage(err);\n      });\n  };\n\n  const fetchArnList = useCallback(() => {\n    setAddLoading(true);\n    api\n      .invoke(\"GET\", `/api/v1/admin/arns`)\n      .then((res: ArnList) => {\n        let arns: string[] = [];\n        if (res.arns !== null) {\n          arns = res.arns;\n        }\n        setAddLoading(false);\n        setArnList(arns);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setAddLoading(false);\n        setModalErrorSnackMessage(err);\n      });\n  }, [setModalErrorSnackMessage]);\n\n  useEffect(() => {\n    fetchArnList();\n  }, [fetchArnList]);\n\n  const events = [\n    { label: \"PUT - Object Uploaded\", value: \"put\" },\n    { label: \"GET - Object accessed\", value: \"get\" },\n    { label: \"DELETE - Object Deleted\", value: \"delete\" },\n  ];\n\n  const handleClick = (\n    event: React.MouseEvent<unknown> | ChangeEvent<unknown>,\n    name: string\n  ) => {\n    const selectedIndex = selectedEvents.indexOf(name);\n    let newSelected: string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selectedEvents, name);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selectedEvents.slice(1));\n    } else if (selectedIndex === selectedEvents.length - 1) {\n      newSelected = newSelected.concat(selectedEvents.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selectedEvents.slice(0, selectedIndex),\n        selectedEvents.slice(selectedIndex + 1)\n      );\n    }\n    setSelectedEvents(newSelected);\n  };\n\n  const arnValues = arnList.map((arnConstant) => ({\n    label: arnConstant,\n    value: arnConstant,\n  }));\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Subscribe To Event\"\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          addRecord(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.formScrollable}>\n            <Grid item xs={12}>\n              <AutocompleteWrapper\n                onChange={(value: string) => {\n                  setArn(value);\n                }}\n                id=\"select-access-policy\"\n                name=\"select-access-policy\"\n                label={\"ARN\"}\n                value={arn}\n                options={arnValues}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Table size=\"medium\">\n                <TableHead className={classes.minTableHeader}>\n                  <TableRow>\n                    <TableCell>Select</TableCell>\n                    <TableCell>Event</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {events.map((row) => (\n                    <TableRow\n                      key={`group-${row.value}`}\n                      onClick={(event) => handleClick(event, row.value)}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          value={row.value}\n                          color=\"primary\"\n                          inputProps={{\n                            \"aria-label\": \"secondary checkbox\",\n                          }}\n                          onChange={(event) => handleClick(event, row.value)}\n                          checked={selectedEvents.includes(row.value)}\n                        />\n                      </TableCell>\n                      <TableCell className={classes.wrapCell}>\n                        {row.label}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Grid>\n            <Grid item xs={12}>\n              <br />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                id=\"prefix-input\"\n                name=\"prefix-input\"\n                label=\"Prefix\"\n                value={prefix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPrefix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                id=\"suffix-input\"\n                name=\"suffix-input\"\n                label=\"Suffix\"\n                value={suffix}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setSuffix(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <br />\n            </Grid>\n          </Grid>\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={addLoading}\n            >\n              Save\n            </Button>\n          </Grid>\n          {addLoading && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nconst connector = connect(null, {\n  setModalErrorSnackMessage,\n});\n\nexport default withStyles(styles)(connector(AddEvent));\n"],"sourceRoot":""}