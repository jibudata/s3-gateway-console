{"version":3,"file":"static/js/4414.4553a541.chunk.js","mappings":"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","sources":["screens/Console/Configurations/TiersConfiguration/UpdateTierCredentialsModal.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport {\n  Button,\n  FileSelector,\n  FormLayout,\n  Grid,\n  InputBox,\n  LockIcon,\n  ProgressBar,\n} from \"mds\";\nimport { Tier } from \"api/consoleApi\";\nimport { api } from \"api\";\nimport { errorToHandler } from \"api/errors\";\nimport { modalStyleUtils } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\n\ninterface ITierCredentialsModal {\n  open: boolean;\n  closeModalAndRefresh: (refresh: boolean) => any;\n  tierData: Tier;\n}\n\nconst UpdateTierCredentialsModal = ({\n  open,\n  closeModalAndRefresh,\n  tierData,\n}: ITierCredentialsModal) => {\n  const dispatch = useAppDispatch();\n  const [savingTiers, setSavingTiers] = useState<boolean>(false);\n  const [creds, setCreds] = useState<string>(\"\");\n  const [encodedCreds, setEncodedCreds] = useState<string>(\"\");\n\n  const [accountName, setAccountName] = useState<string>(\"\");\n  const [accountKey, setAccountKey] = useState<string>(\"\");\n\n  // Validations\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n\n  const type = get(tierData, \"type\", \"\");\n  const name = get(tierData, `${type}.name`, \"\");\n\n  useEffect(() => {\n    let valid = true;\n\n    if (type === \"s3\" || type === \"azure\" || type === \"minio\") {\n      if (accountName === \"\" || accountKey === \"\") {\n        valid = false;\n      }\n    } else if (type === \"gcs\") {\n      if (encodedCreds === \"\") {\n        valid = false;\n      }\n    }\n    setIsFormValid(valid);\n  }, [accountKey, accountName, encodedCreds, type]);\n\n  const addRecord = () => {\n    let rules = {};\n\n    if (type === \"s3\" || type === \"azure\" || type === \"minio\") {\n      rules = {\n        access_key: accountName,\n        secret_key: accountKey,\n      };\n    } else if (type === \"gcs\") {\n      rules = {\n        creds: encodedCreds,\n      };\n    }\n    if (name !== \"\") {\n      api.admin\n        .editTierCredentials(\n          type as \"azure\" | \"s3\" | \"minio\" | \"gcs\",\n          name,\n          rules,\n        )\n        .then(() => {\n          setSavingTiers(false);\n          closeModalAndRefresh(true);\n        })\n        .catch((err) => {\n          setSavingTiers(false);\n          dispatch(setModalErrorSnackMessage(errorToHandler(err.error)));\n        });\n    } else {\n      setModalErrorSnackMessage({\n        errorMessage: \"There was an error retrieving tier information\",\n        detailedError: \"\",\n      });\n    }\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      titleIcon={<LockIcon />}\n      onClose={() => {\n        closeModalAndRefresh(false);\n      }}\n      title={`Update Credentials - ${type} / ${name}`}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          setSavingTiers(true);\n          addRecord();\n        }}\n      >\n        <FormLayout withBorders={false} containerPadding={false}>\n          {(type === \"s3\" || type === \"minio\") && (\n            <Fragment>\n              <InputBox\n                id=\"accessKey\"\n                name=\"accessKey\"\n                label=\"Access Key\"\n                placeholder=\"Enter Access Key\"\n                value={accountName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"secretKey\"\n                name=\"secretKey\"\n                label=\"Secret Key\"\n                placeholder=\"Enter Secret Key\"\n                value={accountKey}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountKey(e.target.value);\n                }}\n              />\n            </Fragment>\n          )}\n          {type === \"gcs\" && (\n            <Fragment>\n              <FileSelector\n                accept=\".json\"\n                id=\"creds\"\n                label=\"Credentials\"\n                name=\"creds\"\n                returnEncodedData\n                onChange={(_, fileName, encodedValue) => {\n                  if (encodedValue) {\n                    setEncodedCreds(encodedValue);\n                    setCreds(fileName);\n                  }\n                }}\n                value={creds}\n              />\n            </Fragment>\n          )}\n          {type === \"azure\" && (\n            <Fragment>\n              <InputBox\n                id=\"accountName\"\n                name=\"accountName\"\n                label=\"Account Name\"\n                placeholder=\"Enter Account Name\"\n                value={accountName}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountName(e.target.value);\n                }}\n              />\n              <InputBox\n                id=\"accountKey\"\n                name=\"accountKey\"\n                label=\"Account Key\"\n                placeholder=\"Enter Account Key\"\n                value={accountKey}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setAccountKey(e.target.value);\n                }}\n              />\n            </Fragment>\n          )}\n        </FormLayout>\n        {savingTiers && (\n          <Grid item xs={12}>\n            <ProgressBar />\n          </Grid>\n        )}\n        <Grid item xs={12} sx={modalStyleUtils.modalButtonBar}>\n          <Button\n            id={\"save-credentials\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={savingTiers || !isFormValid}\n            label={\"Save\"}\n          />\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default UpdateTierCredentialsModal;\n"],"names":["_ref","open","closeModalAndRefresh","tierData","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","savingTiers","setSavingTiers","_useState3","_useState4","creds","setCreds","_useState5","_useState6","encodedCreds","setEncodedCreds","_useState7","_useState8","accountName","setAccountName","_useState9","_useState10","accountKey","setAccountKey","_useState11","_useState12","isFormValid","setIsFormValid","type","get","name","concat","useEffect","valid","_jsx","ModalWrapper","modalOpen","titleIcon","LockIcon","onClose","title","children","_jsxs","noValidate","autoComplete","onSubmit","e","preventDefault","rules","access_key","secret_key","api","admin","editTierCredentials","then","catch","err","setModalErrorSnackMessage","errorToHandler","error","errorMessage","detailedError","addRecord","FormLayout","withBorders","containerPadding","Fragment","InputBox","id","label","placeholder","value","onChange","target","FileSelector","accept","returnEncodedData","_","fileName","encodedValue","Grid","item","xs","ProgressBar","sx","modalStyleUtils","modalButtonBar","Button","variant","disabled"],"sourceRoot":""}