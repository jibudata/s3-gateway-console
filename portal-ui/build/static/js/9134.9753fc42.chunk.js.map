{"version":3,"file":"static/js/9134.9753fc42.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport {\n  actionsTray,\n  searchField,\n  selectorsCommon,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\nimport { api } from \"../../../api\";\nimport {\n  HttpResponse,\n  ListPoliciesResponse,\n  Error,\n} from \"../../../api/consoleApi\";\n\ninterface ISelectPolicyProps {\n  classes: any;\n  selectedPolicy?: string[];\n  noTitle?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    noFound: {\n      textAlign: \"center\",\n      padding: \"10px 0\",\n    },\n    searchBox: {\n      flex: 1,\n    },\n    fieldLabel: {\n      fontWeight: 400,\n      width: 160,\n      marginRight: 10,\n    },\n    tableBlock: {\n      ...tableStyles.tableBlock,\n    },\n    filterBox: {\n      display: \"flex\",\n      marginBottom: 15,\n      alignItems: \"center\",\n      \"& span\": {\n        fontSize: 14,\n      },\n    },\n    ...searchField,\n    ...tableStyles,\n    ...actionsTray,\n    ...selectorsCommon,\n  });\n\nconst PolicySelectors = ({ classes, noTitle = false }: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api.policies\n      .listPolicies()\n      .then((res: HttpResponse<ListPoliciesResponse, Error>) => {\n        const policies = res.data.policies ?? [];\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter)\n  );\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        {loading && <LinearProgress />}\n        {records.length > 0 ? (\n          <React.Fragment>\n            <Grid item xs={12} className={classes.filterBox}>\n              {!noTitle && (\n                <span className={classes.fieldLabel}>Assign Policies</span>\n              )}\n              <div className={classes.searchBox}>\n                <SearchBox\n                  placeholder=\"Start typing to search for a Policy\"\n                  onChange={(value) => {\n                    setFilter(value);\n                  }}\n                  value={filter}\n                />\n              </div>\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              className={classes.tableBlock}\n              style={{ paddingBottom: 16 }}\n            >\n              <TableWrapper\n                columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n                onSelect={selectionChanged}\n                selectedItems={currentPolicies}\n                isLoading={loading}\n                records={filteredRecords}\n                entityName=\"Policies\"\n                idField=\"name\"\n                customPaperHeight={classes.multiSelectTable}\n              />\n            </Grid>\n          </React.Fragment>\n        ) : (\n          <div className={classes.noFound}>No Policies Available</div>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(PolicySelectors);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  modalBasic,\n  spacingUtils,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../common/api\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\n\nimport { useSelector } from \"react-redux\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\n\ninterface ISetPolicyProps {\n  classes: any;\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n    ...spacingUtils,\n    tableBlock: {\n      ...tableStyles.tableBlock,\n      marginTop: 15,\n    },\n    buttonContainer: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      marginTop: \".9rem\",\n      \"& button\": {\n        marginLeft: 8,\n      },\n    },\n  });\n\nconst SetPolicy = ({\n  classes,\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey] || [\" \"];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURLString(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <Grid container>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <Grid item xs={12}>\n              <PredefinedList\n                label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n                content={selectedGroups !== null ? selectedGroups[0] : userName}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <PredefinedList\n                label={\"Current Policy\"}\n                content={actualPolicy.join(\", \")}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <PredefinedList\n            label={\"Selected Groups\"}\n            content={selectedGroups.join(\", \")}\n          />\n        )}\n        <Grid item xs={12}>\n          <div className={classes.tableBlock}>\n            <PolicySelectors selectedPolicy={selectedPolicy} />\n          </div>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} className={classes.buttonContainer}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          className={classes.spacerRight}\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(SetPolicy);\n"],"names":["withStyles","theme","createStyles","_objectSpread","predefinedList","_ref","classes","_ref$label","label","content","_ref$multiLine","multiLine","actionButton","_jsx","Fragment","children","_jsxs","Grid","className","prefinedContainer","item","xs","predefinedTitle","concat","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","noFound","textAlign","padding","searchBox","flex","fieldLabel","fontWeight","width","marginRight","tableBlock","tableStyles","filterBox","display","marginBottom","alignItems","fontSize","searchField","actionsTray","selectorsCommon","_ref$noTitle","noTitle","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","records","setRecords","_useState3","_useState4","loading","isLoading","_useState5","_useState6","filter","setFilter","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","useCallback","api","then","res","_res$data$policies","policies","data","sort","policySort","catch","err","setModalErrorSnackMessage","useEffect","filteredRecords","elementItem","name","includes","container","LinearProgress","length","React","SearchBox","placeholder","onChange","value","style","paddingBottom","TableWrapper","columns","elementKey","onSelect","e","targetD","target","checked","elements","_toConsumableArray","push","element","setSelectedPolicies","selectedItems","entityName","idField","customPaperHeight","multiSelectTable","modalBasic","spacingUtils","marginTop","buttonContainer","justifyContent","marginLeft","closeModalAndRefresh","selectedUser","selectedGroups","open","setLoading","actualPolicy","setActualPolicy","selectedPolicy","setSelectedPolicy","encodeURLString","groupPolicy","get","split","userPolicy","userName","ModalWrapper","onClose","modalOpen","title","PredefinedList","join","PolicySelectors","Button","id","type","variant","spacerRight","onClick","color","disabled","users","groups","accessKey"],"sourceRoot":""}