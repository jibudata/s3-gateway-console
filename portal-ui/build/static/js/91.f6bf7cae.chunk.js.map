{"version":3,"file":"static/js/91.f6bf7cae.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper.tsx","screens/Console/Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper.tsx","screens/Console/Common/FormComponents/InputBoxWrapper/InputBoxWrapper.tsx","screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Common/FormComponents/CSVMultiSelector/CSVMultiSelector.tsx","screens/Console/EventDestinations/ConfTargetGeneric.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Grid, InputLabel, TextField, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport { HelpIcon } from \"mds\";\n\ninterface CommentBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: 14,\n      margin: 0,\n      alignItems: \"flex-start\",\n      paddingTop: \"20px\",\n      flexWrap: \"wrap\",\n      display: \"flex\",\n    },\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    cssOutlinedInput: {\n      borderColor: \"#EAEAEA\",\n      padding: 16,\n    },\n    rootContainer: {\n      \"& .MuiOutlinedInput-inputMultiline\": {\n        ...fieldBasic.inputLabel,\n        fontSize: 13,\n        minHeight: 150,\n      },\n      \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n        borderColor: \"#07193E\",\n        borderWidth: 1,\n      },\n      \"& textarea\": {\n        color: \"#07193E\",\n        fontSize: 13,\n        fontWeight: 600,\n        \"&:placeholder\": {\n          color: \"#858585\",\n          opacity: 1,\n          fontWeight: 400,\n        },\n      },\n    },\n  });\n\nconst CommentBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  classes,\n}: CommentBoxProps) => {\n  let inputProps: any = { \"data-index\": index };\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fieldContainer} ${\n          error !== \"\" ? classes.errorInField : \"\"\n        }`}\n      >\n        {label !== \"\" && (\n          <InputLabel htmlFor={id} className={classes.inputLabel}>\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <TextField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            disabled={disabled}\n            onChange={onChange}\n            multiline\n            rows={5}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            InputProps={{\n              classes: {\n                notchedOutline: classes.cssOutlinedInput,\n                root: classes.rootContainer,\n              },\n            }}\n            variant=\"outlined\"\n          />\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CommentBoxWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { InputLabel, Switch, Tooltip, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { actionsTray, fieldBasic } from \"../common/styleLibrary\";\nimport { HelpIcon } from \"mds\";\nimport clsx from \"clsx\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input/Input\";\n\ninterface IFormSwitch {\n  label?: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  description?: string;\n  index?: number;\n  checked: boolean;\n  switchOnly?: boolean;\n  indicatorLabels?: string[];\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    indicatorLabelOn: {\n      fontWeight: \"bold\",\n      color: \"#081C42 !important\",\n    },\n    indicatorLabel: {\n      fontSize: 12,\n      color: \"#E2E2E2\",\n      margin: \"0 8px 0 10px\",\n    },\n    fieldDescription: {\n      marginTop: 4,\n      color: \"#999999\",\n    },\n    tooltip: {\n      fontSize: 16,\n    },\n    ...actionsTray,\n    ...fieldBasic,\n  });\n\nconst StyledSwitch = withStyles((theme) => ({\n  root: {\n    width: 50,\n    height: 24,\n    padding: 0,\n    margin: 0,\n  },\n  switchBase: {\n    padding: 1,\n    \"&$checked\": {\n      transform: \"translateX(24px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        backgroundColor: \"#4CCB92\",\n        boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n        opacity: 1,\n        border: \"none\",\n      },\n    },\n    \"&$focusVisible $thumb\": {\n      color: \"#4CCB92\",\n      border: \"6px solid #fff\",\n    },\n  },\n  thumb: {\n    width: 22,\n    height: 22,\n    backgroundColor: \"#FAFAFA\",\n    border: \"2px solid #FFFFFF\",\n    marginLeft: 1,\n  },\n  track: {\n    borderRadius: 24 / 2,\n    backgroundColor: \"#E2E2E2\",\n    boxShadow: \"inset 0px 1px 4px rgba(0,0,0,0.1)\",\n    opacity: 1,\n    transition: theme.transitions.create([\"background-color\", \"border\"]),\n  },\n  checked: {},\n  focusVisible: {},\n  switchContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n}))(Switch);\n\nconst FormSwitchWrapper = ({\n  label = \"\",\n  onChange,\n  value,\n  id,\n  name,\n  checked = false,\n  disabled = false,\n  switchOnly = false,\n  tooltip = \"\",\n  description = \"\",\n  classes,\n  indicatorLabels,\n  extraInputProps = {},\n}: IFormSwitch) => {\n  const switchComponent = (\n    <React.Fragment>\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: !checked,\n          })}\n        >\n          {indicatorLabels && indicatorLabels.length > 1\n            ? indicatorLabels[1]\n            : \"OFF\"}\n        </span>\n      )}\n      <StyledSwitch\n        checked={checked}\n        onChange={onChange}\n        color=\"primary\"\n        name={name}\n        inputProps={{ \"aria-label\": \"primary checkbox\", ...extraInputProps }}\n        disabled={disabled}\n        disableRipple\n        disableFocusRipple\n        disableTouchRipple\n        value={value}\n        id={id}\n      />\n      {!switchOnly && (\n        <span\n          className={clsx(classes.indicatorLabel, {\n            [classes.indicatorLabelOn]: checked,\n          })}\n        >\n          {indicatorLabels ? indicatorLabels[0] : \"ON\"}\n        </span>\n      )}\n    </React.Fragment>\n  );\n\n  if (switchOnly) {\n    return switchComponent;\n  }\n\n  return (\n    <div>\n      <Grid container alignItems={\"center\"}>\n        <Grid item xs={12} sm={8} md={8}>\n          {label !== \"\" && (\n            <InputLabel htmlFor={id} className={classes.inputLabel}>\n              <span>{label}</span>\n              {tooltip !== \"\" && (\n                <div className={classes.tooltipContainer}>\n                  <Tooltip title={tooltip} placement=\"top-start\">\n                    <div className={classes.tooltip}>\n                      <HelpIcon />\n                    </div>\n                  </Tooltip>\n                </div>\n              )}\n            </InputLabel>\n          )}\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          sm={label !== \"\" ? 4 : 12}\n          md={label !== \"\" ? 4 : 12}\n          textAlign={\"right\"}\n          justifyContent={\"end\"}\n          className={classes.switchContainer}\n        >\n          {switchComponent}\n        </Grid>\n        {description !== \"\" && (\n          <Grid item xs={12} textAlign={\"left\"}>\n            <Typography component=\"p\" className={classes.fieldDescription}>\n              {description}\n            </Typography>\n          </Grid>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(FormSwitchWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { ClipboardEvent, useState } from \"react\";\nimport {\n  Grid,\n  IconButton,\n  InputLabel,\n  TextField,\n  TextFieldProps,\n  Tooltip,\n} from \"@mui/material\";\nimport { OutlinedInputProps } from \"@mui/material/OutlinedInput\";\nimport { InputProps as StandardInputProps } from \"@mui/material/Input\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  inputFieldStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { HelpIcon } from \"mds\";\nimport clsx from \"clsx\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: any) => void;\n  onFocus?: () => void;\n  onPaste?: (e: ClipboardEvent<HTMLInputElement>) => void;\n  value: string | boolean;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  multiline?: boolean;\n  type?: string;\n  tooltip?: string;\n  autoComplete?: string;\n  index?: number;\n  error?: string;\n  required?: boolean;\n  placeholder?: string;\n  min?: string;\n  max?: string;\n  overlayId?: string;\n  overlayIcon?: any;\n  overlayAction?: () => void;\n  overlayObject?: any;\n  extraInputProps?: StandardInputProps[\"inputProps\"];\n  noLabelMinWidth?: boolean;\n  pattern?: string;\n  autoFocus?: boolean;\n  className?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    textBoxContainer: {\n      flexGrow: 1,\n      position: \"relative\",\n    },\n    overlayAction: {\n      position: \"absolute\",\n      right: 5,\n      top: 6,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"&.withLabel\": {\n        top: 5,\n      },\n    },\n  });\n\nconst inputStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ...inputFieldStyles,\n  })\n);\n\nfunction InputField(props: TextFieldProps) {\n  const classes = inputStyles();\n\n  return (\n    <TextField\n      InputProps={{ classes } as Partial<OutlinedInputProps>}\n      {...props}\n    />\n  );\n}\n\nconst InputBoxWrapper = ({\n  label,\n  onChange,\n  value,\n  id,\n  name,\n  type = \"text\",\n  autoComplete = \"off\",\n  disabled = false,\n  multiline = false,\n  tooltip = \"\",\n  index = 0,\n  error = \"\",\n  required = false,\n  placeholder = \"\",\n  min,\n  max,\n  overlayId,\n  overlayIcon = null,\n  overlayObject = null,\n  extraInputProps = {},\n  overlayAction,\n  noLabelMinWidth = false,\n  pattern = \"\",\n  autoFocus = false,\n  classes,\n  className = \"\",\n  onKeyPress,\n  onFocus,\n  onPaste,\n}: InputBoxProps) => {\n  let inputProps: any = { \"data-index\": index, ...extraInputProps };\n  const [toggleTextInput, setToggleTextInput] = useState<boolean>(false);\n\n  if (type === \"number\" && min) {\n    inputProps[\"min\"] = min;\n  }\n\n  if (type === \"number\" && max) {\n    inputProps[\"max\"] = max;\n  }\n\n  if (pattern !== \"\") {\n    inputProps[\"pattern\"] = pattern;\n  }\n\n  let inputBoxWrapperIcon = overlayIcon;\n  let inputBoxWrapperType = type;\n\n  if (type === \"password\" && overlayIcon === null) {\n    inputBoxWrapperIcon = toggleTextInput ? (\n      <VisibilityOffIcon />\n    ) : (\n      <RemoveRedEyeIcon />\n    );\n    inputBoxWrapperType = toggleTextInput ? \"text\" : \"password\";\n  }\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        className={clsx(\n          className !== \"\" ? className : \"\",\n          error !== \"\" ? classes.errorInField : classes.inputBoxContainer\n        )}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={\n              noLabelMinWidth ? classes.noMinWidthLabel : classes.inputLabel\n            }\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        <div className={classes.textBoxContainer}>\n          <InputField\n            id={id}\n            name={name}\n            fullWidth\n            value={value}\n            autoFocus={autoFocus}\n            disabled={disabled}\n            onChange={onChange}\n            type={inputBoxWrapperType}\n            multiline={multiline}\n            autoComplete={autoComplete}\n            inputProps={inputProps}\n            error={error !== \"\"}\n            helperText={error}\n            placeholder={placeholder}\n            className={classes.inputRebase}\n            onKeyPress={onKeyPress}\n            onFocus={onFocus}\n            onPaste={onPaste}\n          />\n          {inputBoxWrapperIcon && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              <IconButton\n                onClick={\n                  overlayAction\n                    ? () => {\n                        overlayAction();\n                      }\n                    : () => setToggleTextInput(!toggleTextInput)\n                }\n                id={overlayId}\n                size={\"small\"}\n                disableFocusRipple={false}\n                disableRipple={false}\n                disableTouchRipple={false}\n              >\n                {inputBoxWrapperIcon}\n              </IconButton>\n            </div>\n          )}\n          {overlayObject && (\n            <div\n              className={`${classes.overlayAction} ${\n                label !== \"\" ? \"withLabel\" : \"\"\n              }`}\n            >\n              {overlayObject}\n            </div>\n          )}\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(InputBoxWrapper);\n","import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, {\n  ChangeEvent,\n  createRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { InputLabel, Tooltip } from \"@mui/material\";\nimport { fieldBasic, tooltipHelper } from \"../common/styleLibrary\";\nimport { AddIcon, HelpIcon } from \"mds\";\nimport InputBoxWrapper from \"../InputBoxWrapper/InputBoxWrapper\";\n\ninterface ICSVMultiSelector {\n  elements: string;\n  name: string;\n  label: string;\n  tooltip?: string;\n  commonPlaceholder?: string;\n  classes: any;\n  withBorder?: boolean;\n  onChange: (elements: string) => void;\n}\n\nconst styles = (theme: Theme) => {\n  return createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    inputWithBorder: {\n      border: \"1px solid #EAEAEA\",\n      padding: 15,\n      height: 150,\n      overflowY: \"auto\",\n      position: \"relative\",\n      marginTop: 15,\n      flex: 1,\n    },\n    inputBoxSpacer: {\n      marginBottom: 7,\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      margin: 0,\n      alignItems: \"flex-start\",\n      paddingTop: \"20px\",\n      minWidth: 162,\n    },\n  });\n};\n\nconst CSVMultiSelector = ({\n  elements,\n  name,\n  label,\n  tooltip = \"\",\n  commonPlaceholder = \"\",\n  onChange,\n  withBorder = false,\n  classes,\n}: ICSVMultiSelector) => {\n  const [currentElements, setCurrentElements] = useState<string[]>([\"\"]);\n  const bottomList = createRef<HTMLDivElement>();\n\n  // Use effect to get the initial values from props\n  useEffect(() => {\n    if (\n      currentElements.length === 1 &&\n      currentElements[0] === \"\" &&\n      elements &&\n      elements !== \"\"\n    ) {\n      const elementsSplit = elements.split(\",\");\n      elementsSplit.push(\"\");\n\n      setCurrentElements(elementsSplit);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elements, currentElements]);\n\n  // Use effect to send new values to onChange\n  useEffect(() => {\n    if (currentElements.length > 1) {\n      const refScroll = bottomList.current;\n      if (refScroll) {\n        refScroll.scrollIntoView(false);\n      }\n    }\n  }, [currentElements, bottomList]);\n\n  const onChangeCallback = useCallback(\n    (newString: string) => {\n      onChange(newString);\n    },\n    [onChange]\n  );\n\n  // We avoid multiple re-renders / hang issue typing too fast\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    const elementsString = currentElements\n      .filter((element) => element.trim() !== \"\")\n      .join(\",\");\n\n    onChangeCallback(elementsString);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentElements]);\n\n  // If the last input is not empty, we add a new one\n  const addEmptyLine = (elementsUp: string[]) => {\n    if (elementsUp[elementsUp.length - 1].trim() !== \"\") {\n      const cpList = [...elementsUp];\n      cpList.push(\"\");\n      setCurrentElements(cpList);\n    }\n  };\n\n  // Onchange function for input box, we get the dataset-index & only update that value in the array\n  const onChangeElement = (e: ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n\n    let updatedElement = [...currentElements];\n    const index = get(e.target, \"dataset.index\", \"0\");\n    const indexNum = parseInt(index);\n    updatedElement[indexNum] = e.target.value;\n\n    setCurrentElements(updatedElement);\n  };\n\n  const inputs = currentElements.map((element, index) => {\n    return (\n      <div\n        className={classes.inputBoxSpacer}\n        key={`csv-multi-${name}-${index.toString()}`}\n      >\n        <InputBoxWrapper\n          id={`${name}-${index.toString()}`}\n          label={\"\"}\n          name={`${name}-${index.toString()}`}\n          value={currentElements[index]}\n          onChange={onChangeElement}\n          index={index}\n          key={`csv-${name}-${index.toString()}`}\n          placeholder={commonPlaceholder}\n          overlayIcon={\n            index === currentElements.length - 1 ? <AddIcon /> : null\n          }\n          overlayAction={() => {\n            addEmptyLine(currentElements);\n          }}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <Grid item xs={12} className={classes.fieldContainer}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n        <Grid\n          item\n          xs={12}\n          className={`${withBorder ? classes.inputWithBorder : \"\"}`}\n        >\n          {inputs}\n          <div ref={bottomList} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\nexport default withStyles(styles)(CSVMultiSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport { IElementValue, IOverrideEnv, KVField } from \"../Configurations/types\";\nimport {\n  formFieldStyles,\n  modalBasic,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport CSVMultiSelector from \"../Common/FormComponents/CSVMultiSelector/CSVMultiSelector\";\nimport CommentBoxWrapper from \"../Common/FormComponents/CommentBoxWrapper/CommentBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { ConsoleIcon, Tooltip } from \"mds\";\n\ninterface IConfGenericProps {\n  onChange: (newValue: IElementValue[]) => void;\n  fields: KVField[];\n  defaultVals?: IElementValue[];\n  overrideEnv?: IOverrideEnv;\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    formFieldRow: {\n      ...formFieldStyles.formFieldRow,\n    },\n    ...modalBasic,\n  });\n\n// Function to get defined values,\n//we make this because the backed sometimes don't return all the keys when there is an initial configuration\nexport const valueDef = (\n  key: string,\n  type: string,\n  defaults: IElementValue[]\n) => {\n  let defValue = type === \"on|off\" ? \"off\" : \"\";\n\n  if (defaults.length > 0) {\n    const storedConfig = defaults.find((element) => element.key === key);\n\n    if (storedConfig) {\n      defValue = storedConfig.value || \"\";\n    }\n  }\n\n  return defValue;\n};\n\nconst ConfTargetGeneric = ({\n  onChange,\n  fields,\n  defaultVals,\n  overrideEnv,\n  classes,\n}: IConfGenericProps) => {\n  const [valueHolder, setValueHolder] = useState<IElementValue[]>([]);\n  const fieldsElements = !fields ? [] : fields;\n  const defValList = !defaultVals ? [] : defaultVals;\n\n  // Effect to create all the values to hold\n  useEffect(() => {\n    const values: IElementValue[] = fields.map((field) => {\n      const stateInsert: IElementValue = {\n        key: field.name,\n        value: valueDef(field.name, field.type, defValList),\n      };\n      return stateInsert;\n    });\n\n    setValueHolder(values);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields, defaultVals]);\n\n  useEffect(() => {\n    onChange(valueHolder);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [valueHolder]);\n\n  const setValueElement = (key: string, value: string, index: number) => {\n    const valuesDup = [...valueHolder];\n    valuesDup[index] = { key, value };\n\n    setValueHolder(valuesDup);\n  };\n\n  const fieldDefinition = (field: KVField, item: number) => {\n    const holderItem = valueHolder[item];\n\n    if (holderItem) {\n      // Override Value with env var, we display generic string component\n      const override = overrideEnv?.[`${holderItem.key}`];\n\n      if (override) {\n        return (\n          <PredefinedList\n            label={field.label}\n            content={override.value}\n            actionButton={\n              <Grid\n                item\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"flex-end\",\n                  paddingRight: \"10px\",\n                }}\n              >\n                <Tooltip\n                  tooltip={`This value is set from the ${override.overrideEnv} environment variable`}\n                  placement={\"left\"}\n                >\n                  <ConsoleIcon style={{ width: 20 }} />\n                </Tooltip>\n              </Grid>\n            }\n          />\n        );\n      }\n    }\n\n    switch (field.type) {\n      case \"on|off\":\n        const value = holderItem ? holderItem.value : \"off\";\n\n        return (\n          <FormSwitchWrapper\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              const value = e.target.checked ? \"on\" : \"off\";\n              setValueElement(field.name, value, item);\n            }}\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            value={\"switch_on\"}\n            tooltip={field.tooltip}\n            checked={value === \"on\"}\n          />\n        );\n      case \"csv\":\n        return (\n          <CSVMultiSelector\n            elements={holderItem ? holderItem.value : \"\"}\n            label={field.label}\n            name={field.name}\n            onChange={(value: string) => {\n              setValueElement(field.name, value, item);\n            }}\n            tooltip={field.tooltip}\n            commonPlaceholder={field.placeholder}\n            withBorder={true}\n          />\n        );\n      case \"comment\":\n        return (\n          <CommentBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={holderItem ? holderItem.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            placeholder={field.placeholder}\n          />\n        );\n      default:\n        return (\n          <InputBoxWrapper\n            id={field.name}\n            name={field.name}\n            label={field.label}\n            tooltip={field.tooltip}\n            value={holderItem ? holderItem.value : \"\"}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              setValueElement(field.name, e.target.value, item)\n            }\n            multiline={!!field.multiline}\n            placeholder={field.placeholder}\n          />\n        );\n    }\n  };\n\n  return (\n    <Grid container>\n      <Grid xs={12} item className={classes.fieldBox}>\n        {fieldsElements.map((field, item) => (\n          <Grid item xs={12} key={field.name} className={classes.formFieldRow}>\n            {fieldDefinition(field, item)}\n          </Grid>\n        ))}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(ConfTargetGeneric);\n"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","inputLabel","fontSize","margin","alignItems","paddingTop","flexWrap","display","textBoxContainer","flexGrow","position","cssOutlinedInput","borderColor","padding","rootContainer","minHeight","borderWidth","color","fontWeight","opacity","label","onChange","value","id","name","disabled","tooltip","index","error","required","placeholder","classes","inputProps","item","xs","className","fieldContainer","errorInField","htmlFor","tooltipContainer","title","placement","fullWidth","multiline","rows","helperText","InputLabelProps","shrink","InputProps","notchedOutline","root","variant","StyledSwitch","width","height","switchBase","transform","palette","common","white","backgroundColor","boxShadow","border","thumb","marginLeft","track","borderRadius","transition","transitions","create","checked","focusVisible","switchContainer","justifyContent","Switch","indicatorLabelOn","indicatorLabel","fieldDescription","marginTop","actionsTray","switchOnly","description","indicatorLabels","extraInputProps","switchComponent","clsx","length","disableRipple","disableFocusRipple","disableTouchRipple","container","sm","md","textAlign","component","inputStyles","makeStyles","inputFieldStyles","InputField","props","overlayAction","right","top","maxWidth","maxHeight","type","autoComplete","min","max","overlayId","overlayIcon","overlayObject","noLabelMinWidth","pattern","autoFocus","onKeyPress","onFocus","onPaste","useState","toggleTextInput","setToggleTextInput","inputBoxWrapperIcon","inputBoxWrapperType","inputBoxContainer","noMinWidthLabel","inputRebase","onClick","size","predefinedList","content","multiLine","actionButton","Fragment","prefinedContainer","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","inputWithBorder","overflowY","flex","inputBoxSpacer","marginBottom","minWidth","elements","commonPlaceholder","withBorder","currentElements","setCurrentElements","bottomList","createRef","useEffect","elementsSplit","split","push","refScroll","current","scrollIntoView","onChangeCallback","useCallback","newString","firstUpdate","useRef","elementsString","filter","element","trim","join","onChangeElement","e","persist","updatedElement","get","target","parseInt","inputs","map","InputBoxWrapper","toString","elementsUp","cpList","addEmptyLine","Grid","InputLabel","Tooltip","ref","valueDef","key","defaults","defValue","storedConfig","find","formFieldStyles","formFieldRow","modalBasic","fields","defaultVals","overrideEnv","valueHolder","setValueHolder","fieldsElements","defValList","values","field","setValueElement","valuesDup","fieldDefinition","holderItem","override","PredefinedList","sx","paddingRight","style","FormSwitchWrapper","CommentBoxWrapper","fieldBox"],"sourceRoot":""}