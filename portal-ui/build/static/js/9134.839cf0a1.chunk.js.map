{"version":3,"file":"static/js/9134.839cf0a1.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Policies/PolicySelectors.tsx","screens/Console/Policies/SetPolicy.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport { policySort } from \"../../../utils/sortFunctions\";\nimport {\n  actionsTray,\n  searchField,\n  selectorsCommon,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { PolicyList } from \"./types\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport SearchBox from \"../Common/SearchBox\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\nimport { useSelector } from \"react-redux\";\n\ninterface ISelectPolicyProps {\n  classes: any;\n  selectedPolicy?: string[];\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    noFound: {\n      textAlign: \"center\",\n      padding: \"10px 0\",\n    },\n    searchBox: {\n      flex: 1,\n    },\n    fieldLabel: {\n      fontWeight: 400,\n      width: 160,\n      marginRight: 10,\n    },\n    tableBlock: {\n      ...tableStyles.tableBlock,\n    },\n    filterBox: {\n      display: \"flex\",\n      marginBottom: 15,\n      alignItems: \"center\",\n      \"& span\": {\n        fontSize: 14,\n      },\n    },\n    ...searchField,\n    ...tableStyles,\n    ...actionsTray,\n    ...selectorsCommon,\n  });\n\nconst PolicySelectors = ({\n  classes,\n  selectedPolicy = [],\n}: ISelectPolicyProps) => {\n  const dispatch = useAppDispatch();\n  // Local State\n  const [records, setRecords] = useState<any[]>([]);\n  const [loading, isLoading] = useState<boolean>(false);\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies\n  );\n\n  const fetchPolicies = useCallback(() => {\n    isLoading(true);\n\n    api\n      .invoke(\"GET\", `/api/v1/policies?limit=1000`)\n      .then((res: PolicyList) => {\n        const policies = res.policies === null ? [] : res.policies;\n        isLoading(false);\n        setRecords(policies.sort(policySort));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        isLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  }, [dispatch]);\n\n  //Effects\n  useEffect(() => {\n    isLoading(true);\n  }, []);\n\n  useEffect(() => {\n    if (loading) {\n      fetchPolicies();\n    }\n  }, [loading, fetchPolicies]);\n\n  const selectionChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const targetD = e.target;\n    const value = targetD.value;\n    const checked = targetD.checked;\n\n    let elements: string[] = [...currentPolicies]; // We clone the checkedUsers array\n\n    if (checked) {\n      // If the user has checked this field we need to push this to checkedUsersList\n      elements.push(value);\n    } else {\n      // User has unchecked this field, we need to remove it from the list\n      elements = elements.filter((element) => element !== value);\n    }\n    // remove empty values\n    elements = elements.filter((element) => element !== \"\");\n\n    dispatch(setSelectedPolicies(elements));\n  };\n\n  const filteredRecords = records.filter((elementItem) =>\n    elementItem.name.includes(filter)\n  );\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        {loading && <LinearProgress />}\n        {records.length > 0 ? (\n          <React.Fragment>\n            <Grid item xs={12} className={classes.filterBox}>\n              <span className={classes.fieldLabel}>Assign Policies</span>\n              <div className={classes.searchBox}>\n                <SearchBox\n                  placeholder=\"Start typing to search for a Policy\"\n                  onChange={(value) => {\n                    setFilter(value);\n                  }}\n                  value={filter}\n                />\n              </div>\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              className={classes.tableBlock}\n              style={{ paddingBottom: 16 }}\n            >\n              <TableWrapper\n                columns={[{ label: \"Policy\", elementKey: \"name\" }]}\n                onSelect={selectionChanged}\n                selectedItems={currentPolicies}\n                isLoading={loading}\n                records={filteredRecords}\n                entityName=\"Policies\"\n                idField=\"name\"\n                customPaperHeight={classes.multiSelectTable}\n              />\n            </Grid>\n          </React.Fragment>\n        ) : (\n          <div className={classes.noFound}>No Policies Available</div>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(PolicySelectors);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  modalBasic,\n  spacingUtils,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { User } from \"../Users/types\";\n\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport api from \"../../../common/api\";\nimport PolicySelectors from \"./PolicySelectors\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { encodeURLString } from \"../../../common/utils\";\nimport { setModalErrorSnackMessage } from \"../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../store\";\n\nimport { useSelector } from \"react-redux\";\nimport { setSelectedPolicies } from \"../Users/AddUsersSlice\";\n\ninterface ISetPolicyProps {\n  classes: any;\n  closeModalAndRefresh: () => void;\n  selectedUser: User | null;\n  selectedGroups: string[] | null;\n  open: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalBasic,\n    ...spacingUtils,\n    tableBlock: {\n      ...tableStyles.tableBlock,\n      marginTop: 15,\n    },\n    buttonContainer: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      marginTop: \".9rem\",\n      \"& button\": {\n        marginLeft: 8,\n      },\n    },\n  });\n\nconst SetPolicy = ({\n  classes,\n  closeModalAndRefresh,\n  selectedUser,\n  selectedGroups,\n  open,\n}: ISetPolicyProps) => {\n  const dispatch = useAppDispatch();\n  //Local States\n  const [loading, setLoading] = useState<boolean>(false);\n  const [actualPolicy, setActualPolicy] = useState<string[]>([]);\n  const [selectedPolicy, setSelectedPolicy] = useState<string[]>([]);\n  const currentPolicies = useSelector(\n    (state: AppState) => state.createUser.selectedPolicies\n  );\n  const setPolicyAction = () => {\n    let users = null;\n    let groups = null;\n    if (selectedGroups !== null) {\n      groups = selectedGroups;\n    } else {\n      if (selectedUser !== null) {\n        users = [selectedUser.accessKey] || [\" \"];\n      }\n    }\n\n    setLoading(true);\n\n    api\n      .invoke(\"PUT\", `/api/v1/set-policy-multi`, {\n        name: currentPolicies,\n        groups: groups,\n        users: users,\n      })\n      .then(() => {\n        setLoading(false);\n        closeModalAndRefresh();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setLoading(false);\n        dispatch(setModalErrorSnackMessage(err));\n      });\n  };\n\n  const fetchGroupInformation = () => {\n    if (selectedGroups?.length === 1) {\n      api\n        .invoke(\"GET\", `/api/v1/group/${encodeURLString(selectedGroups[0])}`)\n        .then((res: any) => {\n          const groupPolicy: String = get(res, \"policy\", \"\");\n          setActualPolicy(groupPolicy.split(\",\"));\n          setSelectedPolicy(groupPolicy.split(\",\"));\n          dispatch(setSelectedPolicies(groupPolicy.split(\",\")));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setModalErrorSnackMessage(err));\n          setLoading(false);\n        });\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedPolicy(actualPolicy);\n    dispatch(setSelectedPolicies(actualPolicy));\n  };\n\n  useEffect(() => {\n    if (open) {\n      if (selectedGroups?.length === 1) {\n        fetchGroupInformation();\n        return;\n      }\n\n      const userPolicy: string[] = get(selectedUser, \"policy\", []);\n      setActualPolicy(userPolicy);\n      setSelectedPolicy(userPolicy);\n      dispatch(setSelectedPolicies(userPolicy));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, selectedGroups?.length, selectedUser]);\n\n  const userName = get(selectedUser, \"accessKey\", \"\");\n\n  return (\n    <ModalWrapper\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      modalOpen={open}\n      title=\"Set Policies\"\n    >\n      <Grid container>\n        {(selectedGroups?.length === 1 || selectedUser != null) && (\n          <Fragment>\n            <Grid item xs={12}>\n              <PredefinedList\n                label={`Selected ${selectedGroups !== null ? \"Group\" : \"User\"}`}\n                content={selectedGroups !== null ? selectedGroups[0] : userName}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <PredefinedList\n                label={\"Current Policy\"}\n                content={actualPolicy.join(\", \")}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        {selectedGroups && selectedGroups?.length > 1 && (\n          <PredefinedList\n            label={\"Selected Groups\"}\n            content={selectedGroups.join(\", \")}\n          />\n        )}\n        <Grid item xs={12}>\n          <div className={classes.tableBlock}>\n            <PolicySelectors selectedPolicy={selectedPolicy} />\n          </div>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} className={classes.buttonContainer}>\n        <Button\n          id={\"reset\"}\n          type=\"button\"\n          variant=\"regular\"\n          className={classes.spacerRight}\n          onClick={resetSelection}\n          label={\"Reset\"}\n        />\n        <Button\n          id={\"save\"}\n          type=\"button\"\n          variant=\"callAction\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={setPolicyAction}\n          label={\"Save\"}\n        />\n      </Grid>\n      {loading && (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      )}\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(SetPolicy);\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","noFound","textAlign","padding","searchBox","flex","fieldLabel","fontWeight","width","marginRight","tableBlock","tableStyles","filterBox","display","marginBottom","alignItems","fontSize","searchField","actionsTray","selectorsCommon","dispatch","selectedPolicy","useAppDispatch","useState","records","setRecords","loading","isLoading","filter","setFilter","currentPolicies","useSelector","state","createUser","selectedPolicies","fetchPolicies","useCallback","api","then","res","policies","sort","policySort","catch","err","setModalErrorSnackMessage","useEffect","filteredRecords","elementItem","name","includes","container","length","placeholder","onChange","value","style","paddingBottom","columns","elementKey","onSelect","e","targetD","target","checked","elements","push","element","setSelectedPolicies","selectedItems","entityName","idField","customPaperHeight","multiSelectTable","modalBasic","spacingUtils","marginTop","buttonContainer","justifyContent","marginLeft","closeModalAndRefresh","selectedUser","selectedGroups","open","setLoading","actualPolicy","setActualPolicy","setSelectedPolicy","encodeURLString","groupPolicy","get","split","userPolicy","userName","onClose","modalOpen","title","join","id","type","variant","spacerRight","onClick","color","disabled","users","groups","accessKey"],"sourceRoot":""}