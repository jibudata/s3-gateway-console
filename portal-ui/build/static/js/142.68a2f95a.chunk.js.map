{"version":3,"sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/Users/BulkAddToGroup.tsx"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","className","prefinedContainer","item","xs","predefinedTitle","innerContentMultiline","innerContent","mapDispatchToProps","setModalErrorSnackMessage","connector","connect","buttonContainer","textAlign","modalStyleUtils","formFieldStyles","open","checkedUsers","closeModalAndRefresh","useState","saving","isSaving","accepted","setAccepted","selectedGroups","setSelectedGroups","useEffect","length","api","invoke","groups","users","then","catch","err","errorMessage","detailedError","modalOpen","onClose","title","titleIcon","Fragment","container","join","noValidate","autoComplete","onSubmit","event","preventDefault","modalFormScrollable","formFieldRow","modalButtonBar","type","variant","color","onClick","disabled"],"mappings":"6KAiDeA,iBAnCA,SAACC,GAAD,OACbC,YAAa,eACRC,QAiCQH,EA9BQ,SAAC,GAKA,IAJtBI,EAIqB,EAJrBA,QAIqB,IAHrBC,aAGqB,MAHb,GAGa,EAFrBC,EAEqB,EAFrBA,QAEqB,IADrBC,iBACqB,SACrB,OACE,cAAC,WAAD,UACE,eAAC,IAAD,CAAMC,UAAWJ,EAAQK,kBAAzB,UACa,KAAVJ,GACC,cAAC,IAAD,CAAMK,MAAI,EAACC,GAAI,GAAIH,UAAWJ,EAAQQ,gBAAtC,SACGP,IAGL,cAAC,IAAD,CAAMK,MAAI,EAACC,GAAI,GAAIH,UAAWJ,EAAQD,eAAtC,SACE,cAAC,IAAD,CACEO,MAAI,EACJC,GAAI,GACJH,UACED,EAAYH,EAAQS,sBAAwBT,EAAQU,aAJxD,SAOGR,e,mMC6IPS,EAAqB,CACzBC,+BAGIC,EAAYC,YAAQ,KAAMH,GAEjBf,uBAjJA,SAACC,GAAD,OACbC,YAAa,yBACXiB,gBAAiB,CACfC,UAAW,UAEVC,KACAC,QA2IQtB,CAAmBiB,GAxIX,SAAC,GAMJ,IALlBM,EAKiB,EALjBA,KACAC,EAIiB,EAJjBA,aACAC,EAGiB,EAHjBA,qBACArB,EAEiB,EAFjBA,QACAY,EACiB,EADjBA,0BAGA,EAA2BU,oBAAkB,GAA7C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,oBAAkB,GAAlD,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4CJ,mBAAmB,IAA/D,mBAAOK,EAAP,KAAuBC,EAAvB,KAGAC,qBAAU,WACJN,IACEI,EAAeG,OAAS,EAC1BC,IACGC,OAAO,MAAO,4BAA6B,CAC1CC,OAAQN,EACRO,MAAOd,IAERe,MAAK,WACJX,GAAS,GACTE,GAAY,MAEbU,OAAM,SAACC,GACNb,GAAS,GACTZ,EAA0ByB,OAG9Bb,GAAS,GACTZ,EAA0B,CACxB0B,aAAc,kDACdC,cAAe,SAIpB,CACDhB,EACAC,EACAH,EACAM,EACAP,EACAR,IAcF,OACE,cAAC,IAAD,CACE4B,UAAWrB,EACXsB,QAAS,WACPpB,EAAqBI,IAEvBiB,MACEjB,EACI,yDACA,qBAENkB,UAAW,cAAC,IAAD,IAVb,SAYGlB,EACC,eAAC,IAAMmB,SAAP,WACE,eAAC,IAAD,CAAMC,WAAS,EAAf,UACE,cAAC,IAAD,CACE5C,MAAO,SACPC,QAASyB,EAAemB,KAAK,QAE/B,cAAC,IAAD,CAAgB7C,MAAO,QAASC,QAASkB,EAAa0B,KAAK,WAE7D,uBACA,uBACA,0BAGF,sBAAMC,YAAU,EAACC,aAAa,MAAMC,SArCxB,SAACC,GACjBA,EAAMC,iBAEN3B,GAAS,IAkCL,SACE,eAAC,IAAD,CAAMqB,WAAS,EAAf,UACE,eAAC,IAAD,CAAMvC,MAAI,EAACC,GAAI,GAAIH,UAAWJ,EAAQoD,oBAAtC,UACE,cAAC,IAAD,CAAM9C,MAAI,EAACC,GAAI,GAAIH,UAAWJ,EAAQqD,aAAtC,SACE,cAAC,IAAD,CACEpD,MAAO,iBACPC,QAASkB,EAAa0B,KAAK,UAG/B,cAAC,IAAD,CAAMxC,MAAI,EAACC,GAAI,GAAIH,UAAWJ,EAAQqD,aAAtC,SACE,cAAC,IAAD,CACE1B,eAAgBA,EAChBC,kBAAmBA,SAIzB,eAAC,IAAD,CAAMtB,MAAI,EAACC,GAAI,GAAIH,UAAWJ,EAAQsD,eAAtC,UACE,cAAC,IAAD,CACEC,KAAK,SACLC,QAAQ,WACRC,MAAM,UACNC,QApDI,WAChB9B,EAAkB,KA+CR,mBAQA,cAAC,IAAD,CACE2B,KAAK,SACLC,QAAQ,YACRC,MAAM,UACNE,SAAUpC,GAAUI,EAAeG,OAAS,EAJ9C,qBASDP,GACC,cAAC,IAAD,CAAMjB,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,IAAD","file":"static/js/142.68a2f95a.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.predefinedList}>\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport GroupsSelectors from \"./GroupsSelectors\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport { AddMembersToGroupIcon } from \"../../../icons\";\n\ninterface IAddToGroup {\n  open: boolean;\n  checkedUsers: any;\n  closeModalAndRefresh: any;\n  classes: any;\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\nconst BulkAddToGroup = ({\n  open,\n  checkedUsers,\n  closeModalAndRefresh,\n  classes,\n  setModalErrorSnackMessage,\n}: IAddToGroup) => {\n  //Local States\n  const [saving, isSaving] = useState<boolean>(false);\n  const [accepted, setAccepted] = useState<boolean>(false);\n  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);\n\n  //Effects\n  useEffect(() => {\n    if (saving) {\n      if (selectedGroups.length > 0) {\n        api\n          .invoke(\"PUT\", \"/api/v1/users-groups-bulk\", {\n            groups: selectedGroups,\n            users: checkedUsers,\n          })\n          .then(() => {\n            isSaving(false);\n            setAccepted(true);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            isSaving(false);\n            setModalErrorSnackMessage(err);\n          });\n      } else {\n        isSaving(false);\n        setModalErrorSnackMessage({\n          errorMessage: \"You need to select at least one group to assign\",\n          detailedError: \"\",\n        });\n      }\n    }\n  }, [\n    saving,\n    isSaving,\n    closeModalAndRefresh,\n    selectedGroups,\n    checkedUsers,\n    setModalErrorSnackMessage,\n  ]);\n\n  //Fetch Actions\n  const setSaving = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    isSaving(true);\n  };\n\n  const resetForm = () => {\n    setSelectedGroups([]);\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh(accepted);\n      }}\n      title={\n        accepted\n          ? \"The selected users were added to the following groups.\"\n          : \"Add Users to Group\"\n      }\n      titleIcon={<AddMembersToGroupIcon />}\n    >\n      {accepted ? (\n        <React.Fragment>\n          <Grid container>\n            <PredefinedList\n              label={\"Groups\"}\n              content={selectedGroups.join(\", \")}\n            />\n            <PredefinedList label={\"Users\"} content={checkedUsers.join(\", \")} />\n          </Grid>\n          <br />\n          <br />\n          <br />\n        </React.Fragment>\n      ) : (\n        <form noValidate autoComplete=\"off\" onSubmit={setSaving}>\n          <Grid container>\n            <Grid item xs={12} className={classes.modalFormScrollable}>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <PredefinedList\n                  label={\"Selected Users\"}\n                  content={checkedUsers.join(\", \")}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <GroupsSelectors\n                  selectedGroups={selectedGroups}\n                  setSelectedGroups={setSelectedGroups}\n                />\n              </Grid>\n            </Grid>\n            <Grid item xs={12} className={classes.modalButtonBar}>\n              <Button\n                type=\"button\"\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={resetForm}\n              >\n                Clear\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={saving || selectedGroups.length < 1}\n              >\n                Save\n              </Button>\n            </Grid>\n            {saving && (\n              <Grid item xs={12}>\n                <LinearProgress />\n              </Grid>\n            )}\n          </Grid>\n        </form>\n      )}\n    </ModalWrapper>\n  );\n};\n\nconst mapDispatchToProps = {\n  setModalErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(BulkAddToGroup));\n"],"sourceRoot":""}