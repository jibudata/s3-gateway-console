"use strict";(self.webpackChunkweb_app=self.webpackChunkweb_app||[]).push([[8336],{27468:(e,i,t)=>{t.d(i,{c:()=>l});var r=t(69060),n=t(66152),o=t(82496);const a=e=>{let{icon:i,description:t}=e;return(0,o.jsxs)(n.kvh,{sx:{display:"flex","& .min-icon":{marginRight:"10px",height:"23px",width:"23px",marginBottom:"10px"}},children:[i," ",(0,o.jsx)("div",{style:{fontSize:"14px",fontStyle:"italic",color:"#5E5E5E"},children:t})]})},l=e=>{let{helpText:i,docLink:t,docText:l,contents:s}=e;return(0,o.jsxs)(n.kvh,{sx:{flex:1,border:"1px solid #eaeaea",borderRadius:"2px",display:"flex",flexFlow:"column",padding:"20px"},children:[(0,o.jsxs)(n.kvh,{sx:{fontSize:"16px",fontWeight:600,display:"flex",alignItems:"center",marginBottom:"16px",paddingBottom:"20px","& .min-icon":{height:"21px",width:"21px",marginRight:"15px"}},children:[(0,o.jsx)(n.cFZ,{}),(0,o.jsx)("div",{children:i})]}),(0,o.jsxs)(n.kvh,{sx:{fontSize:"14px",marginBottom:"15px"},children:[s.map(((e,i)=>(0,o.jsxs)(r.Fragment,{children:[e.icon&&(0,o.jsx)(n.kvh,{sx:{paddingBottom:"20px"},children:(0,o.jsx)(a,{icon:e.icon,description:e.iconDescription})}),(0,o.jsx)(n.kvh,{sx:{paddingBottom:"20px"},children:e.text})]},"feature-item-".concat(i)))),(0,o.jsx)(n.kvh,{sx:{paddingBottom:"20px"},children:(0,o.jsx)("a",{href:t,target:"_blank",rel:"noopener",children:l})})]})]})}},50472:(e,i,t)=>{t.d(i,{c:()=>p});var r=t(69060),n=t(66152),o=t(95705),a=t(66156),l=t(70780),s=t(61180),d=t(78256),c=t(82496);const p=e=>{let{closeDeleteModalAndRefresh:i,deleteOpen:t,idp:p,idpType:u}=e;const h=(0,a.Ab)(),[x,m]=(0,r.useState)(!1);if(!p)return null;const f="_"===p?"Default":p;return(0,c.jsx)(l.c,{title:"Delete ".concat(f),confirmText:"Delete",isOpen:t,titleIcon:(0,c.jsx)(n.sB6,{}),isLoading:x,onConfirm:()=>{m(!0),s.m.idp.deleteConfiguration(p,u).then((e=>{(e=>{i(!0),h((0,o.s$)(!0===e.restart))})(e.data)})).catch((e=>h((0,o.aW)((0,d.K)(e.error))))).finally((()=>m(!1)))},onClose:()=>i(!1),confirmButtonProps:{disabled:x},confirmationContent:(0,c.jsxs)(r.Fragment,{children:["Are you sure you want to delete IDP ",(0,c.jsx)("b",{children:f})," ","configuration? ",(0,c.jsx)("br",{})]})})}},48336:(e,i,t)=>{t.r(i),t.d(i,{default:()=>b});var r=t(69060),n=t(21124),o=t(66152),a=t(69024),l=t(51560),s=t(61628),d=t(66156),c=t(95705),p=t(50472),u=t(3428),h=t(48504),x=t(61180),m=t(78256),f=t(82496);const g=e=>{let{formFields:i,endpoint:t,backLink:n,header:a,idpType:g,icon:y,helpBox:b}=e;const D=(0,d.Ab)(),j=(0,l.i6)(),v=(0,l.W4)().idpName,[C,k]=(0,r.useState)(!0),[O,I]=(0,r.useState)(!1),[q,_]=(0,r.useState)(!1),[S,E]=(0,r.useState)(!1),[w,N]=(0,r.useState)({}),[A,B]=(0,r.useState)({}),[L,P]=(0,r.useState)({}),[U,M]=(0,r.useState)({}),[F,R]=(0,r.useState)(!1),[T,W]=(0,r.useState)(!1),[G,K]=(0,r.useState)(!1),z=(0,r.useCallback)((e=>{let i={},t={},r=0;e.info&&(e.info.forEach((e=>{"enable"===e.key&&E("on"===e.value),e.isEnv&&(t[e.key]="MINIO_IDENTITY_OPENID_".concat(e.key.toUpperCase()).concat("_"!==v?"_".concat(v):""),r++),i[e.key]=e.value})),r>0&&K(!0)),N(i),B(t)}),[v]),$=()=>{F&&z(U),R(!F)};(0,r.useEffect)((()=>{const e=()=>{x.m.idp.getConfiguration(v||"","openid").then((e=>{e.data&&(M(e.data),z(e.data),(e=>{let i={};e.info&&e.info.forEach((e=>{i[e.key]=e.value})),P(i)})(e.data))})).catch((e=>{D((0,c.aW)((0,m.K)(e.error)))})).finally((()=>k(!1)))};C&&e()}),[D,C,v,t,z]);const Z=()=>{for(const[e,t]of Object.entries(i))if(t.required&&(void 0===w[e]||null===w[e]||""===w[e]))return!1;return!0},J=()=>{N({})};return(0,r.useEffect)((()=>{D((0,c.i8)("idp_config"))}),[D]),(0,f.jsxs)(r.Fragment,{children:[T&&v&&(0,f.jsx)(p.c,{deleteOpen:T,idp:v,idpType:g,closeDeleteModalAndRefresh:async e=>{W(!1),e&&j(n)}}),(0,f.jsxs)(o.yeN,{item:!0,xs:12,children:[(0,f.jsx)(u.c,{label:(0,f.jsx)(o.y_F,{onClick:()=>j(n),label:a}),actions:(0,f.jsx)(h.c,{})}),(0,f.jsxs)(o._al,{children:[(0,f.jsx)(o.g1F,{icon:y,title:"_"===v?"Default":v||"",subTitle:null,actions:(0,f.jsxs)(r.Fragment,{children:["_"!==v&&(0,f.jsx)(o.o5h,{tooltip:G?"This configuration cannot be deleted using this module as this was set using OpenID environment variables.":"",children:(0,f.jsx)(o.qaq,{id:"delete-idp-config",onClick:()=>{W(!0)},label:"Delete Configuration",icon:(0,f.jsx)(o.g8$,{}),variant:"secondary",disabled:G})}),!F&&(0,f.jsx)(o.o5h,{tooltip:G?"Configuration cannot be edited in this module as OpenID environment variables are set for this MinIO instance.":"",children:(0,f.jsx)(o.qaq,{id:"edit",type:"button",variant:"callAction",icon:(0,f.jsx)(o.UZg,{}),onClick:$,label:"Edit",disabled:G})}),(0,f.jsx)(o.o5h,{tooltip:G?"Configuration cannot be disabled / enabled in this module as OpenID environment variables are set for this MinIO instance.":"",children:(0,f.jsx)(o.qaq,{id:"is-configuration-enabled",onClick:()=>(e=>{_(!0);const i="enable=".concat(e?"on":"off");x.m.idp.updateConfiguration(v||"","openid",{input:i}).then((e=>{e.data&&(E(!S),D((0,c.s$)(!0===e.data.restart)))})).catch((e=>{D((0,c.aW)((0,m.K)(e.error)))})).finally((()=>_(!1)))})(!S),label:S?"Disable":"Enable",disabled:q||G})}),(0,f.jsx)(o.qaq,{id:"refresh-idp-config",onClick:()=>k(!0),label:"Refresh",icon:(0,f.jsx)(o.W5k,{})})]}),sx:{marginBottom:15}}),F?(0,f.jsx)(o.yE_,{helpBox:b,children:(0,f.jsx)("form",{noValidate:!0,autoComplete:"off",onSubmit:e=>{(e=>{I(!0),e.preventDefault();let t="";for(const r of Object.keys(i))(w[r]||w[r]!==L[r])&&(t+="".concat(r,"=").concat(w[r]," "));x.m.idp.updateConfiguration(v||"","openid",{input:t}).then((e=>{e.data&&(D((0,c.s$)(!0===e.data.restart)),R(!1))})).catch((async e=>{D((0,c.aW)((0,m.K)(e.error)))})).finally((()=>I(!1)))})(e)},children:(0,f.jsxs)(o.yeN,{container:!0,children:[F?(0,f.jsx)(o.yeN,{item:!0,xs:12,sx:{marginBottom:15},children:(0,f.jsx)(o.g1k,{title:(0,f.jsx)(o.kvh,{style:{display:"flex",justifyContent:"space-between",alignItems:"center",flexGrow:1},children:"Client Secret must be re-entered to change OpenID configurations"}),iconComponent:(0,f.jsx)(o.m9S,{}),help:null})}):null,(0,f.jsxs)(o.yeN,{xs:12,item:!0,children:[Object.entries(i).map((e=>{let[i,t]=e;return((e,i)=>"toggle"===i.type?(0,f.jsx)(o.Wkk,{indicatorLabels:["Enabled","Disabled"],checked:"on"===w[e],value:"is-field-enabled",id:"is-field-enabled",name:"is-field-enabled",label:i.label,tooltip:i.tooltip,onChange:i=>N({...w,[e]:i.target.checked?"on":"off"}),description:"",disabled:!F}):(0,f.jsx)(o.q22,{id:e,required:i.required,name:e,label:i.label,tooltip:i.tooltip,error:i.hasError(w[e],F),value:w[e]?w[e]:"",onChange:i=>N({...w,[e]:i.target.value}),placeholder:i.placeholder,disabled:!F,type:i.type}))(i,t)})),(0,f.jsxs)(o.yeN,{item:!0,xs:12,sx:s.W2.modalButtonBar,children:[F&&(0,f.jsx)(o.qaq,{id:"clear",type:"button",variant:"regular",onClick:J,label:"Clear"}),F&&(0,f.jsx)(o.qaq,{id:"cancel",type:"button",variant:"regular",onClick:$,label:"Cancel"}),F&&(0,f.jsx)(o.qaq,{id:"save-key",type:"submit",variant:"callAction",color:"primary",disabled:C||O||!Z(),label:"Save"})]})]})]})})}):(0,f.jsx)(o.kvh,{withBorders:!0,sx:{display:"grid",gridTemplateColumns:"1fr",gridAutoFlow:"dense",gap:3,padding:"15px",["@media (min-width: ".concat(o.WQo.sm,"px)")]:{gridTemplateColumns:"2fr 1fr",gridAutoFlow:"row"}},children:Object.entries(i).map((e=>{let[i,t]=e;if(!t.editOnly){let e=t.label,r=w[i]?w[i]:"";return"toggle"===t.type&&w[i]&&(r="on"!==r?"Off":"On"),A[i]&&(e=(0,f.jsxs)(o.kvh,{sx:{display:"flex",alignItems:"center",gap:5,"& .min-icon":{height:20,width:20},"& span":{height:20,display:"flex",alignItems:"center"}},children:[(0,f.jsx)("span",{children:t.label}),(0,f.jsx)(o.o5h,{tooltip:"This value is set from the ".concat(A[i]," environment variable"),placement:"right",children:(0,f.jsx)("span",{className:"muted",children:(0,f.jsx)(o.Mz0,{})})})]}),r=(0,f.jsx)("i",{children:(0,f.jsx)("span",{className:"muted",children:r})})),(0,f.jsx)(o.GA5,{label:e,value:r},i)}return null}))})]})]})]})};var y=t(27468);const b=()=>(0,f.jsx)(g,{backLink:n.Ks.IDP_OPENID_CONFIGURATIONS,header:"OpenID Configurations",endpoint:"/api/v1/idp/openid/",idpType:"openid",helpBox:(0,f.jsx)(y.c,{helpText:"Learn more about OpenID Connect Configurations",contents:a.Ce,docLink:"https://min.io/docs/minio/linux/operations/external-iam.html?ref=con#minio-external-iam-oidc",docText:"Learn more about OpenID Connect Configurations"}),formFields:a.UN,icon:(0,f.jsx)(o.mpG,{width:40})})},69024:(e,i,t)=>{t.d(i,{Ce:()=>a,EJ:()=>o,UN:()=>l,qc:()=>s});var r=t(66152),n=t(82496);const o=[{text:"MinIO supports using an Active Directory or LDAP (AD/LDAP) service for external management of user identities. Configuring an external IDentity Provider (IDP) enables Single-Sign On (SSO) workflows, where applications authenticate against the external IDP before accessing MinIO.",icon:(0,n.jsx)(r.eMq,{}),iconDescription:"Create Configurations"},{text:"MinIO queries the configured Active Directory / LDAP server to verify the credentials specified by the application and optionally return a list of groups in which the user has membership. MinIO supports two modes (Lookup-Bind Mode and Username-Bind Mode) for performing these queries",icon:null,iconDescription:""},{text:"MinIO recommends using Lookup-Bind mode as the preferred method for verifying AD/LDAP credentials. Username-Bind mode is a legacy method retained for backwards compatibility only.",icon:null,iconDescription:""}],a=[{text:"MinIO supports using an OpenID Connect (OIDC) compatible IDentity Provider (IDP) such as Okta, KeyCloak, Dex, Google, or Facebook for external management of user identities.",icon:(0,n.jsx)(r.mpG,{}),iconDescription:"Create Configurations"},{text:"Configuring an external IDP enables Single-Sign On workflows, where applications authenticate against the external IDP before accessing MinIO.",icon:null,iconDescription:""}],l={config_url:{required:!0,hasError:(e,i)=>!e&&i?"Config URL is required":"",label:"Config URL",tooltip:"Config URL for identity provider configuration",placeholder:"https://identity-provider-url/.well-known/openid-configuration",type:"text",editOnly:!1},client_id:{required:!0,hasError:(e,i)=>!e&&i?"Client ID is required":"",label:"Client ID",tooltip:"Identity provider Client ID",placeholder:"Enter Client ID",type:"text",editOnly:!1},client_secret:{required:!0,hasError:(e,i)=>!e&&i?"Client Secret is required":"",label:"Client Secret",tooltip:"Identity provider Client Secret",placeholder:"Enter Client Secret",type:"password",editOnly:!0},claim_name:{required:!1,label:"Claim Name",tooltip:"Claim from which MinIO will read the policy or role to use",placeholder:"Enter Claim Name",type:"text",hasError:(e,i)=>"",editOnly:!1},display_name:{required:!1,label:"Display Name",tooltip:"",placeholder:"Enter Display Name",type:"text",hasError:(e,i)=>"",editOnly:!1},claim_prefix:{required:!1,label:"Claim Prefix",tooltip:"",placeholder:"Enter Claim Prefix",type:"text",hasError:(e,i)=>"",editOnly:!1},scopes:{required:!1,label:"Scopes",tooltip:"",placeholder:"openid,profile,email",type:"text",hasError:(e,i)=>"",editOnly:!1},redirect_uri:{required:!1,label:"Redirect URI",tooltip:"",placeholder:"https://console-endpoint-url/oauth_callback",type:"text",hasError:(e,i)=>"",editOnly:!1},role_policy:{required:!1,label:"Role Policy",tooltip:"",placeholder:"readonly",type:"text",hasError:(e,i)=>"",editOnly:!1},claim_userinfo:{required:!1,label:"Claim User Info",tooltip:"",placeholder:"Claim User Info",type:"toggle",hasError:(e,i)=>"",editOnly:!1},redirect_uri_dynamic:{required:!1,label:"Redirect URI Dynamic",tooltip:"",placeholder:"Redirect URI Dynamic",type:"toggle",hasError:(e,i)=>"",editOnly:!1}},s={server_insecure:{required:!0,hasError:(e,i)=>!e&&i?"Server Address is required":"",label:"Server Insecure",tooltip:"Disable SSL certificate verification ",placeholder:"myldapserver.com:636",type:"toggle",editOnly:!1},server_addr:{required:!0,hasError:(e,i)=>!e&&i?"Server Address is required":"",label:"Server Address",tooltip:'AD/LDAP server address e.g. "myldapserver.com:636"',placeholder:"myldapserver.com:636",type:"text",editOnly:!1},lookup_bind_dn:{required:!0,hasError:(e,i)=>!e&&i?"Lookup Bind DN is required":"",label:"Lookup Bind DN",tooltip:"DN (Distinguished Name) for LDAP read-only service account used to perform DN and group lookups",placeholder:"cn=admin,dc=min,dc=io",type:"text",editOnly:!1},lookup_bind_password:{required:!0,hasError:(e,i)=>!e&&i?"Lookup Bind Password is required":"",label:"Lookup Bind Password",tooltip:"Password for LDAP read-only service account used to perform DN and group lookups",placeholder:"admin",type:"password",editOnly:!0},user_dn_search_base_dn:{required:!0,hasError:(e,i)=>!e&&i?"User DN Search Base DN is required":"",label:"User DN Search Base",tooltip:"",placeholder:"DC=example,DC=net",type:"text",editOnly:!1},user_dn_search_filter:{required:!0,hasError:(e,i)=>!e&&i?"User DN Search Filter is required":"",label:"User DN Search Filter",tooltip:"",placeholder:"(sAMAcountName=%s)",type:"text",editOnly:!1},group_search_base_dn:{required:!1,hasError:(e,i)=>"",label:"Group Search Base DN",tooltip:"",placeholder:"ou=swengg,dc=min,dc=io",type:"text",editOnly:!1},group_search_filter:{required:!1,hasError:(e,i)=>"",label:"Group Search Filter",tooltip:"",placeholder:"(&(objectclass=groupofnames)(member=%d))",type:"text",editOnly:!1}}}}]);
//# sourceMappingURL=8336.97797ef4.chunk.js.map