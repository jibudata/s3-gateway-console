// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2020 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddNotificationEndpoint add notification endpoint
//
// swagger:model addNotificationEndpoint
type AddNotificationEndpoint struct {

	// account
	Account string `json:"account,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// service
	// Enum: [webhook amqp kafka mqtt nats nsq mysql postgres elasticsearch redis]
	Service string `json:"service,omitempty"`
}

// Validate validates this add notification endpoint
func (m *AddNotificationEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addNotificationEndpointTypeServicePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["webhook","amqp","kafka","mqtt","nats","nsq","mysql","postgres","elasticsearch","redis"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addNotificationEndpointTypeServicePropEnum = append(addNotificationEndpointTypeServicePropEnum, v)
	}
}

const (

	// AddNotificationEndpointServiceWebhook captures enum value "webhook"
	AddNotificationEndpointServiceWebhook string = "webhook"

	// AddNotificationEndpointServiceAmqp captures enum value "amqp"
	AddNotificationEndpointServiceAmqp string = "amqp"

	// AddNotificationEndpointServiceKafka captures enum value "kafka"
	AddNotificationEndpointServiceKafka string = "kafka"

	// AddNotificationEndpointServiceMqtt captures enum value "mqtt"
	AddNotificationEndpointServiceMqtt string = "mqtt"

	// AddNotificationEndpointServiceNats captures enum value "nats"
	AddNotificationEndpointServiceNats string = "nats"

	// AddNotificationEndpointServiceNsq captures enum value "nsq"
	AddNotificationEndpointServiceNsq string = "nsq"

	// AddNotificationEndpointServiceMysql captures enum value "mysql"
	AddNotificationEndpointServiceMysql string = "mysql"

	// AddNotificationEndpointServicePostgres captures enum value "postgres"
	AddNotificationEndpointServicePostgres string = "postgres"

	// AddNotificationEndpointServiceElasticsearch captures enum value "elasticsearch"
	AddNotificationEndpointServiceElasticsearch string = "elasticsearch"

	// AddNotificationEndpointServiceRedis captures enum value "redis"
	AddNotificationEndpointServiceRedis string = "redis"
)

// prop value enum
func (m *AddNotificationEndpoint) validateServiceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, addNotificationEndpointTypeServicePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AddNotificationEndpoint) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceEnum("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddNotificationEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddNotificationEndpoint) UnmarshalBinary(b []byte) error {
	var res AddNotificationEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
