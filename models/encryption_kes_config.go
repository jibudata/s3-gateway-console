// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2020 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EncryptionKesConfig encryption kes config
//
// swagger:model encryptionKesConfig
type EncryptionKesConfig struct {

	// server cert
	// Required: true
	ServerCert *string `json:"server_cert"`

	// server config
	// Required: true
	ServerConfig *string `json:"server_config"`

	// server key
	// Required: true
	ServerKey *string `json:"server_key"`
}

// Validate validates this encryption kes config
func (m *EncryptionKesConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServerCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionKesConfig) validateServerCert(formats strfmt.Registry) error {

	if err := validate.Required("server_cert", "body", m.ServerCert); err != nil {
		return err
	}

	return nil
}

func (m *EncryptionKesConfig) validateServerConfig(formats strfmt.Registry) error {

	if err := validate.Required("server_config", "body", m.ServerConfig); err != nil {
		return err
	}

	return nil
}

func (m *EncryptionKesConfig) validateServerKey(formats strfmt.Registry) error {

	if err := validate.Required("server_key", "body", m.ServerKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EncryptionKesConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptionKesConfig) UnmarshalBinary(b []byte) error {
	var res EncryptionKesConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
