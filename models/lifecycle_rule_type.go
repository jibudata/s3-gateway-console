// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LifecycleRuleType lifecycle rule type
//
// swagger:model lifecycleRuleType
type LifecycleRuleType string

func NewLifecycleRuleType(value LifecycleRuleType) *LifecycleRuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LifecycleRuleType.
func (m LifecycleRuleType) Pointer() *LifecycleRuleType {
	return &m
}

const (

	// LifecycleRuleTypeExpiry captures enum value "expiry"
	LifecycleRuleTypeExpiry LifecycleRuleType = "expiry"

	// LifecycleRuleTypeTransition captures enum value "transition"
	LifecycleRuleTypeTransition LifecycleRuleType = "transition"
)

// for schema
var lifecycleRuleTypeEnum []interface{}

func init() {
	var res []LifecycleRuleType
	if err := json.Unmarshal([]byte(`["expiry","transition"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lifecycleRuleTypeEnum = append(lifecycleRuleTypeEnum, v)
	}
}

func (m LifecycleRuleType) validateLifecycleRuleTypeEnum(path, location string, value LifecycleRuleType) error {
	if err := validate.EnumCase(path, location, value, lifecycleRuleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this lifecycle rule type
func (m LifecycleRuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLifecycleRuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this lifecycle rule type based on context it is used
func (m LifecycleRuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
